(()=>{var e={83:(e,a,t)=>{"use strict";e=t.nmd(e);const n=(e,a)=>(...t)=>`[${e(...t)+a}m`,r=(e,a)=>(...t)=>{const n=e(...t);return`[${38+a};5;${n}m`},i=(e,a)=>(...t)=>{const n=e(...t);return`[${38+a};2;${n[0]};${n[1]};${n[2]}m`},s=e=>e,o=(e,a,t)=>[e,a,t],d=(e,a,t)=>{Object.defineProperty(e,a,{get:()=>{const n=t();return Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0}),n},enumerable:!0,configurable:!0})};let l;const c=(e,a,n,r)=>{void 0===l&&(l=t(734));const i=r?10:0,s={};for(const[t,r]of Object.entries(l)){const o="ansi16"===t?"ansi":t;t===a?s[o]=e(n,i):"object"==typeof r&&(s[o]=e(r[a],i))}return s};Object.defineProperty(e,"exports",{enumerable:!0,get:function(){const e=new Map,a={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],blackBright:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};a.color.gray=a.color.blackBright,a.bgColor.bgGray=a.bgColor.bgBlackBright,a.color.grey=a.color.blackBright,a.bgColor.bgGrey=a.bgColor.bgBlackBright;for(const[t,n]of Object.entries(a)){for(const[t,r]of Object.entries(n))a[t]={open:`[${r[0]}m`,close:`[${r[1]}m`},n[t]=a[t],e.set(r[0],r[1]);Object.defineProperty(a,t,{value:n,enumerable:!1})}return Object.defineProperty(a,"codes",{value:e,enumerable:!1}),a.color.close="[39m",a.bgColor.close="[49m",d(a.color,"ansi",(()=>c(n,"ansi16",s,!1))),d(a.color,"ansi256",(()=>c(r,"ansi256",s,!1))),d(a.color,"ansi16m",(()=>c(i,"rgb",o,!1))),d(a.bgColor,"ansi",(()=>c(n,"ansi16",s,!0))),d(a.bgColor,"ansi256",(()=>c(r,"ansi256",s,!0))),d(a.bgColor,"ansi16m",(()=>c(i,"rgb",o,!0))),a}})},248:(e,a,t)=>{"use strict";const n=t(83),{stdout:r,stderr:i}=t(747),{stringReplaceAll:s,stringEncaseCRLFWithFirstIndex:o}=t(58),{isArray:d}=Array,l=["ansi","ansi","ansi256","ansi16m"],c=Object.create(null);class h{constructor(e){return u(e)}}const u=e=>{const a={};return((e,a={})=>{if(a.level&&!(Number.isInteger(a.level)&&a.level>=0&&a.level<=3))throw new Error("The `level` option should be an integer from 0 to 3");const t=r?r.level:0;e.level=void 0===a.level?t:a.level})(a,e),a.template=(...e)=>x(a.template,...e),Object.setPrototypeOf(a,g.prototype),Object.setPrototypeOf(a.template,a),a.template.constructor=()=>{throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.")},a.template.Instance=h,a.template};function g(e){return u(e)}for(const[e,a]of Object.entries(n))c[e]={get(){const t=w(this,p(a.open,a.close,this._styler),this._isEmpty);return Object.defineProperty(this,e,{value:t}),t}};c.visible={get(){const e=w(this,this._styler,!0);return Object.defineProperty(this,"visible",{value:e}),e}};const f=["rgb","hex","keyword","hsl","hsv","hwb","ansi","ansi256"];for(const e of f)c[e]={get(){const{level:a}=this;return function(...t){const r=p(n.color[l[a]][e](...t),n.color.close,this._styler);return w(this,r,this._isEmpty)}}};for(const e of f){c["bg"+e[0].toUpperCase()+e.slice(1)]={get(){const{level:a}=this;return function(...t){const r=p(n.bgColor[l[a]][e](...t),n.bgColor.close,this._styler);return w(this,r,this._isEmpty)}}}}const y=Object.defineProperties((()=>{}),{...c,level:{enumerable:!0,get(){return this._generator.level},set(e){this._generator.level=e}}}),p=(e,a,t)=>{let n,r;return void 0===t?(n=e,r=a):(n=t.openAll+e,r=a+t.closeAll),{open:e,close:a,openAll:n,closeAll:r,parent:t}},w=(e,a,t)=>{const n=(...e)=>d(e[0])&&d(e[0].raw)?m(n,x(n,...e)):m(n,1===e.length?""+e[0]:e.join(" "));return Object.setPrototypeOf(n,y),n._generator=e,n._styler=a,n._isEmpty=t,n},m=(e,a)=>{if(e.level<=0||!a)return e._isEmpty?"":a;let t=e._styler;if(void 0===t)return a;const{openAll:n,closeAll:r}=t;if(-1!==a.indexOf(""))for(;void 0!==t;)a=s(a,t.close,t.open),t=t.parent;const i=a.indexOf("\n");return-1!==i&&(a=o(a,r,n,i)),n+a+r};let v;const x=(e,...a)=>{const[n]=a;if(!d(n)||!d(n.raw))return a.join(" ");const r=a.slice(1),i=[n.raw[0]];for(let e=1;e<n.length;e++)i.push(String(r[e-1]).replace(/[{}\\]/g,"\\$&"),String(n.raw[e]));return void 0===v&&(v=t(991)),v(e,i.join(""))};Object.defineProperties(g.prototype,c);const b=g();b.supportsColor=r,b.stderr=g({level:i?i.level:0}),b.stderr.supportsColor=i,e.exports=b},991:e=>{"use strict";const a=/(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi,t=/(?:^|\.)(\w+)(?:\(([^)]*)\))?/g,n=/^(['"])((?:\\.|(?!\1)[^\\])*)\1$/,r=/\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi,i=new Map([["n","\n"],["r","\r"],["t","\t"],["b","\b"],["f","\f"],["v","\v"],["0","\0"],["\\","\\"],["e",""],["a",""]]);function s(e){const a="u"===e[0],t="{"===e[1];return a&&!t&&5===e.length||"x"===e[0]&&3===e.length?String.fromCharCode(parseInt(e.slice(1),16)):a&&t?String.fromCodePoint(parseInt(e.slice(2,-1),16)):i.get(e)||e}function o(e,a){const t=[],i=a.trim().split(/\s*,\s*/g);let o;for(const a of i){const i=Number(a);if(Number.isNaN(i)){if(!(o=a.match(n)))throw new Error(`Invalid Chalk template style argument: ${a} (in style '${e}')`);t.push(o[2].replace(r,((e,a,t)=>a?s(a):t)))}else t.push(i)}return t}function d(e){t.lastIndex=0;const a=[];let n;for(;null!==(n=t.exec(e));){const e=n[1];if(n[2]){const t=o(e,n[2]);a.push([e].concat(t))}else a.push([e])}return a}function l(e,a){const t={};for(const e of a)for(const a of e.styles)t[a[0]]=e.inverse?null:a.slice(1);let n=e;for(const[e,a]of Object.entries(t))if(Array.isArray(a)){if(!(e in n))throw new Error(`Unknown Chalk style: ${e}`);n=a.length>0?n[e](...a):n[e]}return n}e.exports=(e,t)=>{const n=[],r=[];let i=[];if(t.replace(a,((a,t,o,c,h,u)=>{if(t)i.push(s(t));else if(c){const a=i.join("");i=[],r.push(0===n.length?a:l(e,n)(a)),n.push({inverse:o,styles:d(c)})}else if(h){if(0===n.length)throw new Error("Found extraneous } in Chalk template literal");r.push(l(e,n)(i.join(""))),i=[],n.pop()}else i.push(u)})),r.push(i.join("")),n.length>0){const e=`Chalk template literal is missing ${n.length} closing bracket${1===n.length?"":"s"} (\`}\`)`;throw new Error(e)}return r.join("")}},58:e=>{"use strict";e.exports={stringReplaceAll:(e,a,t)=>{let n=e.indexOf(a);if(-1===n)return e;const r=a.length;let i=0,s="";do{s+=e.substr(i,n-i)+a+t,i=n+r,n=e.indexOf(a,i)}while(-1!==n);return s+=e.substr(i),s},stringEncaseCRLFWithFirstIndex:(e,a,t,n)=>{let r=0,i="";do{const s="\r"===e[n-1];i+=e.substr(r,(s?n-1:n)-r)+a+(s?"\r\n":"\n")+t,r=n+1,n=e.indexOf("\n",r)}while(-1!==n);return i+=e.substr(r),i}}},659:(e,a,t)=>{const n=t(156),r={};for(const e of Object.keys(n))r[n[e]]=e;const i={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};e.exports=i;for(const e of Object.keys(i)){if(!("channels"in i[e]))throw new Error("missing channels property: "+e);if(!("labels"in i[e]))throw new Error("missing channel labels property: "+e);if(i[e].labels.length!==i[e].channels)throw new Error("channel and label counts mismatch: "+e);const{channels:a,labels:t}=i[e];delete i[e].channels,delete i[e].labels,Object.defineProperty(i[e],"channels",{value:a}),Object.defineProperty(i[e],"labels",{value:t})}i.rgb.hsl=function(e){const a=e[0]/255,t=e[1]/255,n=e[2]/255,r=Math.min(a,t,n),i=Math.max(a,t,n),s=i-r;let o,d;i===r?o=0:a===i?o=(t-n)/s:t===i?o=2+(n-a)/s:n===i&&(o=4+(a-t)/s),o=Math.min(60*o,360),o<0&&(o+=360);const l=(r+i)/2;return d=i===r?0:l<=.5?s/(i+r):s/(2-i-r),[o,100*d,100*l]},i.rgb.hsv=function(e){let a,t,n,r,i;const s=e[0]/255,o=e[1]/255,d=e[2]/255,l=Math.max(s,o,d),c=l-Math.min(s,o,d),h=function(e){return(l-e)/6/c+.5};return 0===c?(r=0,i=0):(i=c/l,a=h(s),t=h(o),n=h(d),s===l?r=n-t:o===l?r=1/3+a-n:d===l&&(r=2/3+t-a),r<0?r+=1:r>1&&(r-=1)),[360*r,100*i,100*l]},i.rgb.hwb=function(e){const a=e[0],t=e[1];let n=e[2];const r=i.rgb.hsl(e)[0],s=1/255*Math.min(a,Math.min(t,n));return n=1-1/255*Math.max(a,Math.max(t,n)),[r,100*s,100*n]},i.rgb.cmyk=function(e){const a=e[0]/255,t=e[1]/255,n=e[2]/255,r=Math.min(1-a,1-t,1-n);return[100*((1-a-r)/(1-r)||0),100*((1-t-r)/(1-r)||0),100*((1-n-r)/(1-r)||0),100*r]},i.rgb.keyword=function(e){const a=r[e];if(a)return a;let t,i=1/0;for(const a of Object.keys(n)){const r=n[a],d=(o=r,((s=e)[0]-o[0])**2+(s[1]-o[1])**2+(s[2]-o[2])**2);d<i&&(i=d,t=a)}var s,o;return t},i.keyword.rgb=function(e){return n[e]},i.rgb.xyz=function(e){let a=e[0]/255,t=e[1]/255,n=e[2]/255;a=a>.04045?((a+.055)/1.055)**2.4:a/12.92,t=t>.04045?((t+.055)/1.055)**2.4:t/12.92,n=n>.04045?((n+.055)/1.055)**2.4:n/12.92;return[100*(.4124*a+.3576*t+.1805*n),100*(.2126*a+.7152*t+.0722*n),100*(.0193*a+.1192*t+.9505*n)]},i.rgb.lab=function(e){const a=i.rgb.xyz(e);let t=a[0],n=a[1],r=a[2];t/=95.047,n/=100,r/=108.883,t=t>.008856?t**(1/3):7.787*t+16/116,n=n>.008856?n**(1/3):7.787*n+16/116,r=r>.008856?r**(1/3):7.787*r+16/116;return[116*n-16,500*(t-n),200*(n-r)]},i.hsl.rgb=function(e){const a=e[0]/360,t=e[1]/100,n=e[2]/100;let r,i,s;if(0===t)return s=255*n,[s,s,s];r=n<.5?n*(1+t):n+t-n*t;const o=2*n-r,d=[0,0,0];for(let e=0;e<3;e++)i=a+1/3*-(e-1),i<0&&i++,i>1&&i--,s=6*i<1?o+6*(r-o)*i:2*i<1?r:3*i<2?o+(r-o)*(2/3-i)*6:o,d[e]=255*s;return d},i.hsl.hsv=function(e){const a=e[0];let t=e[1]/100,n=e[2]/100,r=t;const i=Math.max(n,.01);n*=2,t*=n<=1?n:2-n,r*=i<=1?i:2-i;return[a,100*(0===n?2*r/(i+r):2*t/(n+t)),100*((n+t)/2)]},i.hsv.rgb=function(e){const a=e[0]/60,t=e[1]/100;let n=e[2]/100;const r=Math.floor(a)%6,i=a-Math.floor(a),s=255*n*(1-t),o=255*n*(1-t*i),d=255*n*(1-t*(1-i));switch(n*=255,r){case 0:return[n,d,s];case 1:return[o,n,s];case 2:return[s,n,d];case 3:return[s,o,n];case 4:return[d,s,n];case 5:return[n,s,o]}},i.hsv.hsl=function(e){const a=e[0],t=e[1]/100,n=e[2]/100,r=Math.max(n,.01);let i,s;s=(2-t)*n;const o=(2-t)*r;return i=t*r,i/=o<=1?o:2-o,i=i||0,s/=2,[a,100*i,100*s]},i.hwb.rgb=function(e){const a=e[0]/360;let t=e[1]/100,n=e[2]/100;const r=t+n;let i;r>1&&(t/=r,n/=r);const s=Math.floor(6*a),o=1-n;i=6*a-s,1&s&&(i=1-i);const d=t+i*(o-t);let l,c,h;switch(s){default:case 6:case 0:l=o,c=d,h=t;break;case 1:l=d,c=o,h=t;break;case 2:l=t,c=o,h=d;break;case 3:l=t,c=d,h=o;break;case 4:l=d,c=t,h=o;break;case 5:l=o,c=t,h=d}return[255*l,255*c,255*h]},i.cmyk.rgb=function(e){const a=e[0]/100,t=e[1]/100,n=e[2]/100,r=e[3]/100;return[255*(1-Math.min(1,a*(1-r)+r)),255*(1-Math.min(1,t*(1-r)+r)),255*(1-Math.min(1,n*(1-r)+r))]},i.xyz.rgb=function(e){const a=e[0]/100,t=e[1]/100,n=e[2]/100;let r,i,s;return r=3.2406*a+-1.5372*t+-.4986*n,i=-.9689*a+1.8758*t+.0415*n,s=.0557*a+-.204*t+1.057*n,r=r>.0031308?1.055*r**(1/2.4)-.055:12.92*r,i=i>.0031308?1.055*i**(1/2.4)-.055:12.92*i,s=s>.0031308?1.055*s**(1/2.4)-.055:12.92*s,r=Math.min(Math.max(0,r),1),i=Math.min(Math.max(0,i),1),s=Math.min(Math.max(0,s),1),[255*r,255*i,255*s]},i.xyz.lab=function(e){let a=e[0],t=e[1],n=e[2];a/=95.047,t/=100,n/=108.883,a=a>.008856?a**(1/3):7.787*a+16/116,t=t>.008856?t**(1/3):7.787*t+16/116,n=n>.008856?n**(1/3):7.787*n+16/116;return[116*t-16,500*(a-t),200*(t-n)]},i.lab.xyz=function(e){let a,t,n;t=(e[0]+16)/116,a=e[1]/500+t,n=t-e[2]/200;const r=t**3,i=a**3,s=n**3;return t=r>.008856?r:(t-16/116)/7.787,a=i>.008856?i:(a-16/116)/7.787,n=s>.008856?s:(n-16/116)/7.787,a*=95.047,t*=100,n*=108.883,[a,t,n]},i.lab.lch=function(e){const a=e[0],t=e[1],n=e[2];let r;r=360*Math.atan2(n,t)/2/Math.PI,r<0&&(r+=360);return[a,Math.sqrt(t*t+n*n),r]},i.lch.lab=function(e){const a=e[0],t=e[1],n=e[2]/360*2*Math.PI;return[a,t*Math.cos(n),t*Math.sin(n)]},i.rgb.ansi16=function(e,a=null){const[t,n,r]=e;let s=null===a?i.rgb.hsv(e)[2]:a;if(s=Math.round(s/50),0===s)return 30;let o=30+(Math.round(r/255)<<2|Math.round(n/255)<<1|Math.round(t/255));return 2===s&&(o+=60),o},i.hsv.ansi16=function(e){return i.rgb.ansi16(i.hsv.rgb(e),e[2])},i.rgb.ansi256=function(e){const a=e[0],t=e[1],n=e[2];if(a===t&&t===n)return a<8?16:a>248?231:Math.round((a-8)/247*24)+232;return 16+36*Math.round(a/255*5)+6*Math.round(t/255*5)+Math.round(n/255*5)},i.ansi16.rgb=function(e){let a=e%10;if(0===a||7===a)return e>50&&(a+=3.5),a=a/10.5*255,[a,a,a];const t=.5*(1+~~(e>50));return[(1&a)*t*255,(a>>1&1)*t*255,(a>>2&1)*t*255]},i.ansi256.rgb=function(e){if(e>=232){const a=10*(e-232)+8;return[a,a,a]}let a;e-=16;return[Math.floor(e/36)/5*255,Math.floor((a=e%36)/6)/5*255,a%6/5*255]},i.rgb.hex=function(e){const a=(((255&Math.round(e[0]))<<16)+((255&Math.round(e[1]))<<8)+(255&Math.round(e[2]))).toString(16).toUpperCase();return"000000".substring(a.length)+a},i.hex.rgb=function(e){const a=e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!a)return[0,0,0];let t=a[0];3===a[0].length&&(t=t.split("").map((e=>e+e)).join(""));const n=parseInt(t,16);return[n>>16&255,n>>8&255,255&n]},i.rgb.hcg=function(e){const a=e[0]/255,t=e[1]/255,n=e[2]/255,r=Math.max(Math.max(a,t),n),i=Math.min(Math.min(a,t),n),s=r-i;let o,d;return o=s<1?i/(1-s):0,d=s<=0?0:r===a?(t-n)/s%6:r===t?2+(n-a)/s:4+(a-t)/s,d/=6,d%=1,[360*d,100*s,100*o]},i.hsl.hcg=function(e){const a=e[1]/100,t=e[2]/100,n=t<.5?2*a*t:2*a*(1-t);let r=0;return n<1&&(r=(t-.5*n)/(1-n)),[e[0],100*n,100*r]},i.hsv.hcg=function(e){const a=e[1]/100,t=e[2]/100,n=a*t;let r=0;return n<1&&(r=(t-n)/(1-n)),[e[0],100*n,100*r]},i.hcg.rgb=function(e){const a=e[0]/360,t=e[1]/100,n=e[2]/100;if(0===t)return[255*n,255*n,255*n];const r=[0,0,0],i=a%1*6,s=i%1,o=1-s;let d=0;switch(Math.floor(i)){case 0:r[0]=1,r[1]=s,r[2]=0;break;case 1:r[0]=o,r[1]=1,r[2]=0;break;case 2:r[0]=0,r[1]=1,r[2]=s;break;case 3:r[0]=0,r[1]=o,r[2]=1;break;case 4:r[0]=s,r[1]=0,r[2]=1;break;default:r[0]=1,r[1]=0,r[2]=o}return d=(1-t)*n,[255*(t*r[0]+d),255*(t*r[1]+d),255*(t*r[2]+d)]},i.hcg.hsv=function(e){const a=e[1]/100,t=a+e[2]/100*(1-a);let n=0;return t>0&&(n=a/t),[e[0],100*n,100*t]},i.hcg.hsl=function(e){const a=e[1]/100,t=e[2]/100*(1-a)+.5*a;let n=0;return t>0&&t<.5?n=a/(2*t):t>=.5&&t<1&&(n=a/(2*(1-t))),[e[0],100*n,100*t]},i.hcg.hwb=function(e){const a=e[1]/100,t=a+e[2]/100*(1-a);return[e[0],100*(t-a),100*(1-t)]},i.hwb.hcg=function(e){const a=e[1]/100,t=1-e[2]/100,n=t-a;let r=0;return n<1&&(r=(t-n)/(1-n)),[e[0],100*n,100*r]},i.apple.rgb=function(e){return[e[0]/65535*255,e[1]/65535*255,e[2]/65535*255]},i.rgb.apple=function(e){return[e[0]/255*65535,e[1]/255*65535,e[2]/255*65535]},i.gray.rgb=function(e){return[e[0]/100*255,e[0]/100*255,e[0]/100*255]},i.gray.hsl=function(e){return[0,0,e[0]]},i.gray.hsv=i.gray.hsl,i.gray.hwb=function(e){return[0,100,e[0]]},i.gray.cmyk=function(e){return[0,0,0,e[0]]},i.gray.lab=function(e){return[e[0],0,0]},i.gray.hex=function(e){const a=255&Math.round(e[0]/100*255),t=((a<<16)+(a<<8)+a).toString(16).toUpperCase();return"000000".substring(t.length)+t},i.rgb.gray=function(e){return[(e[0]+e[1]+e[2])/3/255*100]}},734:(e,a,t)=>{const n=t(659),r=t(507),i={};Object.keys(n).forEach((e=>{i[e]={},Object.defineProperty(i[e],"channels",{value:n[e].channels}),Object.defineProperty(i[e],"labels",{value:n[e].labels});const a=r(e);Object.keys(a).forEach((t=>{const n=a[t];i[e][t]=function(e){const a=function(...a){const t=a[0];if(null==t)return t;t.length>1&&(a=t);const n=e(a);if("object"==typeof n)for(let e=n.length,a=0;a<e;a++)n[a]=Math.round(n[a]);return n};return"conversion"in e&&(a.conversion=e.conversion),a}(n),i[e][t].raw=function(e){const a=function(...a){const t=a[0];return null==t?t:(t.length>1&&(a=t),e(a))};return"conversion"in e&&(a.conversion=e.conversion),a}(n)}))})),e.exports=i},507:(e,a,t)=>{const n=t(659);function r(e){const a=function(){const e={},a=Object.keys(n);for(let t=a.length,n=0;n<t;n++)e[a[n]]={distance:-1,parent:null};return e}(),t=[e];for(a[e].distance=0;t.length;){const e=t.pop(),r=Object.keys(n[e]);for(let n=r.length,i=0;i<n;i++){const n=r[i],s=a[n];-1===s.distance&&(s.distance=a[e].distance+1,s.parent=e,t.unshift(n))}}return a}function i(e,a){return function(t){return a(e(t))}}function s(e,a){const t=[a[e].parent,e];let r=n[a[e].parent][e],s=a[e].parent;for(;a[s].parent;)t.unshift(a[s].parent),r=i(n[a[s].parent][s],r),s=a[s].parent;return r.conversion=t,r}e.exports=function(e){const a=r(e),t={},n=Object.keys(a);for(let e=n.length,r=0;r<e;r++){const e=n[r];null!==a[e].parent&&(t[e]=s(e,a))}return t}},156:e=>{"use strict";e.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},747:e=>{"use strict";e.exports={stdout:!1,stderr:!1}}},a={};function t(n){var r=a[n];if(void 0!==r)return r.exports;var i=a[n]={id:n,loaded:!1,exports:{}};return e[n](i,i.exports,t),i.loaded=!0,i.exports}t.m=e,t.n=e=>{var a=e&&e.__esModule?()=>e.default:()=>e;return t.d(a,{a}),a},t.d=(e,a)=>{for(var n in a)t.o(a,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:a[n]})},t.u=e=>e+".js",t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,a)=>Object.prototype.hasOwnProperty.call(e,a),t.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var a=t.g.document;if(!e&&a&&(a.currentScript&&(e=a.currentScript.src),!e)){var n=a.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,(()=>{"use strict";function e(e){for(var a=arguments.length,t=new Array(a>1?a-1:0),n=1;n<a;n++)t[n-1]=arguments[n];throw new Error("number"==typeof e?"[MobX] minified error nr: "+e+(t.length?" "+t.map(String).join(","):"")+". Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts":"[MobX] "+e)}var a={};function n(){return"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==t.g?t.g:"undefined"!=typeof self?self:a}var r=Object.assign,i=Object.getOwnPropertyDescriptor,s=Object.defineProperty,o=Object.prototype,d=[];Object.freeze(d);var l={};Object.freeze(l);var c="undefined"!=typeof Proxy,h=Object.toString();function u(){c||e("Proxy not available")}function g(e){var a=!1;return function(){if(!a)return a=!0,e.apply(this,arguments)}}var f=function(){};function y(e){return"function"==typeof e}function p(e){switch(typeof e){case"string":case"symbol":case"number":return!0}return!1}function w(e){return null!==e&&"object"==typeof e}function m(e){if(!w(e))return!1;var a=Object.getPrototypeOf(e);if(null==a)return!0;var t=Object.hasOwnProperty.call(a,"constructor")&&a.constructor;return"function"==typeof t&&t.toString()===h}function v(e){var a=null==e?void 0:e.constructor;return!!a&&("GeneratorFunction"===a.name||"GeneratorFunction"===a.displayName)}function x(e,a,t){s(e,a,{enumerable:!1,writable:!0,configurable:!0,value:t})}function b(e,a,t){s(e,a,{enumerable:!1,writable:!1,configurable:!0,value:t})}function T(e,a){var t="isMobX"+e;return a.prototype[t]=!0,function(e){return w(e)&&!0===e[t]}}function A(e){return e instanceof Map}function I(e){return e instanceof Set}var P=void 0!==Object.getOwnPropertySymbols;var S="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:P?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames;function E(e){return null===e?null:"object"==typeof e?""+e:e}function O(e,a){return o.hasOwnProperty.call(e,a)}var k=Object.getOwnPropertyDescriptors||function(e){var a={};return S(e).forEach((function(t){a[t]=i(e,t)})),a};function C(e,a){for(var t=0;t<a.length;t++){var n=a[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(r=n.key,i=void 0,"symbol"==typeof(i=function(e,a){if("object"!=typeof e||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,a||"default");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===a?String:Number)(e)}(r,"string"))?i:String(i)),n)}var r,i}function D(e,a,t){return a&&C(e.prototype,a),t&&C(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}function B(){return B=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},B.apply(this,arguments)}function L(e,a){e.prototype=Object.create(a.prototype),e.prototype.constructor=e,F(e,a)}function F(e,a){return F=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,a){return e.__proto__=a,e},F(e,a)}function R(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function M(e,a){(null==a||a>e.length)&&(a=e.length);for(var t=0,n=new Array(a);t<a;t++)n[t]=e[t];return n}function N(e,a){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(t)return(t=t.call(e)).next.bind(t);if(Array.isArray(e)||(t=function(e,a){if(e){if("string"==typeof e)return M(e,a);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?M(e,a):void 0}}(e))||a&&e&&"number"==typeof e.length){t&&(e=t);var n=0;return function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var W=Symbol("mobx-stored-annotations");function $(e){return Object.assign((function(a,t){if(U(t))return e.decorate_20223_(a,t);G(a,t,e)}),e)}function G(e,a,t){O(e,W)||x(e,W,B({},e[W])),function(e){return e.annotationType_===Y}(t)||(e[W][a]=t)}function U(e){return"object"==typeof e&&"string"==typeof e.kind}var H=Symbol("mobx administration"),q=function(){function e(e){void 0===e&&(e="Atom"),this.name_=void 0,this.isPendingUnobservation_=!1,this.isBeingObserved_=!1,this.observers_=new Set,this.diffValue_=0,this.lastAccessedBy_=0,this.lowestObserverState_=Ye.NOT_TRACKING_,this.onBOL=void 0,this.onBUOL=void 0,this.name_=e}var a=e.prototype;return a.onBO=function(){this.onBOL&&this.onBOL.forEach((function(e){return e()}))},a.onBUO=function(){this.onBUOL&&this.onBUOL.forEach((function(e){return e()}))},a.reportObserved=function(){return xa(this)},a.reportChanged=function(){ma(),ba(this),va()},a.toString=function(){return this.name_},e}(),j=T("Atom",q);function _(e,a,t){void 0===a&&(a=f),void 0===t&&(t=f);var n,r=new q(e);return a!==f&&Va(qa,r,a,n),t!==f&&_a(r,t),r}var V={identity:function(e,a){return e===a},structural:function(e,a){return pn(e,a)},default:function(e,a){return Object.is?Object.is(e,a):e===a?0!==e||1/e==1/a:e!=e&&a!=a},shallow:function(e,a){return pn(e,a,1)}};function J(e,a,t){return tt(e)?e:Array.isArray(e)?De.array(e,{name:t}):m(e)?De.object(e,void 0,{name:t}):A(e)?De.map(e,{name:t}):I(e)?De.set(e,{name:t}):"function"!=typeof e||$a(e)||et(e)?e:v(e)?Xa(e):Na(t,e)}function z(e){return e}var Y="override";function K(e,a){return{annotationType_:e,options_:a,make_:Q,extend_:X,decorate_20223_:Z}}function Q(e,a,t,n){var r;if(null!=(r=this.options_)&&r.bound)return null===this.extend_(e,a,t,!1)?0:1;if(n===e.target_)return null===this.extend_(e,a,t,!1)?0:2;if($a(t.value))return 1;var i=ee(e,this,a,t,!1);return s(n,a,i),2}function X(e,a,t,n){var r=ee(e,this,a,t);return e.defineProperty_(a,r,n)}function Z(a,t){var n=t.kind,r=t.name,i=t.addInitializer,s=this;if("field"!=n){var o,d,l,c,h,u;if("method"==n)return $a(a)||(d=a,a=Ue(null!=(l=null==(c=s.options_)?void 0:c.name)?l:r.toString(),d,null!=(h=null==(u=s.options_)?void 0:u.autoAction)&&h)),null!=(o=this.options_)&&o.bound&&i((function(){var e=this,a=e[r].bind(e);a.isMobxAction=!0,e[r]=a})),a;e("Cannot apply '"+s.annotationType_+"' to '"+String(r)+"' (kind: "+n+"):\n'"+s.annotationType_+"' can only be used on properties with a function value.")}else i((function(){G(this,r,s)}))}function ee(e,a,t,n,r){var i,s,o,d,l,c,h,u;void 0===r&&(r=fa.safeDescriptors),u=n,a.annotationType_,u.value;var g,f=n.value;null!=(i=a.options_)&&i.bound&&(f=f.bind(null!=(g=e.proxy_)?g:e.target_));return{value:Ue(null!=(s=null==(o=a.options_)?void 0:o.name)?s:t.toString(),f,null!=(d=null==(l=a.options_)?void 0:l.autoAction)&&d,null!=(c=a.options_)&&c.bound?null!=(h=e.proxy_)?h:e.target_:void 0),configurable:!r||e.isPlainObject_,enumerable:!1,writable:!r}}function ae(e,a){return{annotationType_:e,options_:a,make_:te,extend_:ne,decorate_20223_:re}}function te(e,a,t,n){var r;if(n===e.target_)return null===this.extend_(e,a,t,!1)?0:2;if(null!=(r=this.options_)&&r.bound&&(!O(e.target_,a)||!et(e.target_[a]))&&null===this.extend_(e,a,t,!1))return 0;if(et(t.value))return 1;var i=ie(e,this,a,t,!1,!1);return s(n,a,i),2}function ne(e,a,t,n){var r,i=ie(e,this,a,t,null==(r=this.options_)?void 0:r.bound);return e.defineProperty_(a,i,n)}function re(e,a){var t;var n=a.name,r=a.addInitializer;return et(e)||(e=Xa(e)),null!=(t=this.options_)&&t.bound&&r((function(){var e=this,a=e[n].bind(e);a.isMobXFlow=!0,e[n]=a})),e}function ie(e,a,t,n,r,i){var s;void 0===i&&(i=fa.safeDescriptors),s=n,a.annotationType_,s.value;var o,d=n.value;(et(d)||(d=Xa(d)),r)&&((d=d.bind(null!=(o=e.proxy_)?o:e.target_)).isMobXFlow=!0);return{value:d,configurable:!i||e.isPlainObject_,enumerable:!1,writable:!i}}function se(e,a){return{annotationType_:e,options_:a,make_:oe,extend_:de,decorate_20223_:le}}function oe(e,a,t){return null===this.extend_(e,a,t,!1)?0:1}function de(e,a,t,n){return function(e,a,t,n){a.annotationType_,n.get;0}(0,this,0,t),e.defineComputedProperty_(a,B({},this.options_,{get:t.get,set:t.set}),n)}function le(e,a){var t=this,n=a.name;return(0,a.addInitializer)((function(){var a=qt(this)[H],r=B({},t.options_,{get:e,context:this});r.name||(r.name="ObservableObject."+n.toString()),a.values_.set(n,new Qe(r))})),function(){return this[H].getObservablePropValue_(n)}}function ce(e,a){return{annotationType_:e,options_:a,make_:he,extend_:ue,decorate_20223_:ge}}function he(e,a,t){return null===this.extend_(e,a,t,!1)?0:1}function ue(e,a,t,n){var r,i;return function(e,a,t,n){a.annotationType_;0}(0,this),e.defineObservableProperty_(a,t.value,null!=(r=null==(i=this.options_)?void 0:i.enhancer)?r:J,n)}function ge(e,a){var t=this,n=a.kind,r=a.name,i=new WeakSet;function s(e,a){var n,s,o=qt(e)[H],d=new Je(a,null!=(n=null==(s=t.options_)?void 0:s.enhancer)?n:J,"ObservableObject."+r.toString(),!1);o.values_.set(r,d),i.add(e)}if("accessor"==n)return{get:function(){return i.has(this)||s(this,e.get.call(this)),this[H].getObservablePropValue_(r)},set:function(e){return i.has(this)||s(this,e),this[H].setObservablePropValue_(r,e)},init:function(e){return i.has(this)||s(this,e),e}}}var fe="true",ye=pe();function pe(e){return{annotationType_:fe,options_:e,make_:we,extend_:me,decorate_20223_:ve}}function we(e,a,t,n){var r,i,o,d;if(t.get)return Re.make_(e,a,t,n);if(t.set){var l=Ue(a.toString(),t.set);return n===e.target_?null===e.defineProperty_(a,{configurable:!fa.safeDescriptors||e.isPlainObject_,set:l})?0:2:(s(n,a,{configurable:!0,set:l}),2)}if(n!==e.target_&&"function"==typeof t.value)return v(t.value)?(null!=(d=this.options_)&&d.autoBind?Xa.bound:Xa).make_(e,a,t,n):(null!=(o=this.options_)&&o.autoBind?Na.bound:Na).make_(e,a,t,n);var c,h=!1===(null==(r=this.options_)?void 0:r.deep)?De.ref:De;"function"==typeof t.value&&null!=(i=this.options_)&&i.autoBind&&(t.value=t.value.bind(null!=(c=e.proxy_)?c:e.target_));return h.make_(e,a,t,n)}function me(e,a,t,n){var r,i,s;if(t.get)return Re.extend_(e,a,t,n);if(t.set)return e.defineProperty_(a,{configurable:!fa.safeDescriptors||e.isPlainObject_,set:Ue(a.toString(),t.set)},n);"function"==typeof t.value&&null!=(r=this.options_)&&r.autoBind&&(t.value=t.value.bind(null!=(s=e.proxy_)?s:e.target_));return(!1===(null==(i=this.options_)?void 0:i.deep)?De.ref:De).extend_(e,a,t,n)}function ve(a,t){e("'"+this.annotationType_+"' cannot be used as a decorator")}var xe={deep:!0,name:void 0,defaultDecorator:void 0,proxy:!0};function be(e){return e||xe}Object.freeze(xe);var Te=ce("observable"),Ae=ce("observable.ref",{enhancer:z}),Ie=ce("observable.shallow",{enhancer:function(e,a,t){return null==e||Vt(e)||kt(e)||Mt(e)||$t(e)?e:Array.isArray(e)?De.array(e,{name:t,deep:!1}):m(e)?De.object(e,void 0,{name:t,deep:!1}):A(e)?De.map(e,{name:t,deep:!1}):I(e)?De.set(e,{name:t,deep:!1}):void 0}}),Pe=ce("observable.struct",{enhancer:function(e,a){return pn(e,a)?a:e}}),Se=$(Te);function Ee(e){return!0===e.deep?J:!1===e.deep?z:(a=e.defaultDecorator)&&null!=(t=null==(n=a.options_)?void 0:n.enhancer)?t:J;var a,t,n}function Oe(e,a,t){return U(a)?Te.decorate_20223_(e,a):p(a)?void G(e,a,Te):tt(e)?e:m(e)?De.object(e,a,t):Array.isArray(e)?De.array(e,a):A(e)?De.map(e,a):I(e)?De.set(e,a):"object"==typeof e&&null!==e?e:De.box(e,a)}r(Oe,Se);var ke,Ce,De=r(Oe,{box:function(e,a){var t=be(a);return new Je(e,Ee(t),t.name,!0,t.equals)},array:function(e,a){var t=be(a);return(!1===fa.useProxies||!1===t.proxy?sn:xt)(e,Ee(t),t.name)},map:function(e,a){var t=be(a);return new Rt(e,Ee(t),t.name)},set:function(e,a){var t=be(a);return new Wt(e,Ee(t),t.name)},object:function(e,a,t){return cn((function(){return Ja(!1===fa.useProxies||!1===(null==t?void 0:t.proxy)?qt({},t):function(e,a){var t,n;return u(),e=qt(e,a),null!=(n=(t=e[H]).proxy_)?n:t.proxy_=new Proxy(e,dt)}({},t),e,a)}))},ref:$(Ae),shallow:$(Ie),deep:Se,struct:$(Pe)}),Be="computed",Le=se(Be),Fe=se("computed.struct",{equals:V.structural}),Re=function(e,a){if(U(a))return Le.decorate_20223_(e,a);if(p(a))return G(e,a,Le);if(m(e))return $(se(Be,e));var t=m(a)?a:{};return t.get=e,t.name||(t.name=e.name||""),new Qe(t)};Object.assign(Re,Le),Re.struct=$(Fe);var Me,Ne=0,We=1,$e=null!=(ke=null==(Ce=i((function(){}),"name"))?void 0:Ce.configurable)&&ke,Ge={value:"action",configurable:!0,writable:!1,enumerable:!1};function Ue(e,a,t,n){function r(){return He(e,t,a,n||this,arguments)}return void 0===t&&(t=!1),r.isMobxAction=!0,r.toString=function(){return a.toString()},$e&&(Ge.value=e,s(r,"name",Ge)),r}function He(a,t,n,r,i){var s=function(e,a,t,n){var r=!1,i=0;0;var s=fa.trackingDerivation,o=!a||!s;ma();var d=fa.allowStateChanges;o&&(sa(),d=je(!0));var l=da(!0),c={runAsAction_:o,prevDerivation_:s,prevAllowStateChanges_:d,prevAllowStateReads_:l,notifySpy_:r,startTime_:i,actionId_:We++,parentActionId_:Ne};return Ne=c.actionId_,c}(0,t);try{return n.apply(r,i)}catch(e){throw s.error_=e,e}finally{!function(a){Ne!==a.actionId_&&e(30);Ne=a.parentActionId_,void 0!==a.error_&&(fa.suppressReactionErrors=!0);_e(a.prevAllowStateChanges_),la(a.prevAllowStateReads_),va(),a.runAsAction_&&oa(a.prevDerivation_);0;fa.suppressReactionErrors=!1}(s)}}function qe(e,a){var t=je(e);try{return a()}finally{_e(t)}}function je(e){var a=fa.allowStateChanges;return fa.allowStateChanges=e,a}function _e(e){fa.allowStateChanges=e}Me=Symbol.toPrimitive;var Ve,Je=function(e){function a(a,t,n,r,i){var s;return void 0===n&&(n="ObservableValue"),void 0===r&&(r=!0),void 0===i&&(i=V.default),(s=e.call(this,n)||this).enhancer=void 0,s.name_=void 0,s.equals=void 0,s.hasUnreportedChange_=!1,s.interceptors_=void 0,s.changeListeners_=void 0,s.value_=void 0,s.dehancer=void 0,s.enhancer=t,s.name_=n,s.equals=i,s.value_=t(a,void 0,n),s}L(a,e);var t=a.prototype;return t.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},t.set=function(e){this.value_;if((e=this.prepareNewValue_(e))!==fa.UNCHANGED){0,this.setNewValue_(e)}},t.prepareNewValue_=function(e){if(ta(this),lt(this)){var a=ht(this,{object:this,type:wt,newValue:e});if(!a)return fa.UNCHANGED;e=a.newValue}return e=this.enhancer(e,this.value_,this.name_),this.equals(this.value_,e)?fa.UNCHANGED:e},t.setNewValue_=function(e){var a=this.value_;this.value_=e,this.reportChanged(),ut(this)&&ft(this,{type:wt,object:this,newValue:e,oldValue:a})},t.get=function(){return this.reportObserved(),this.dehanceValue(this.value_)},t.intercept_=function(e){return ct(this,e)},t.observe_=function(e,a){return a&&e({observableKind:"value",debugObjectName:this.name_,object:this,type:wt,newValue:this.value_,oldValue:void 0}),gt(this,e)},t.raw=function(){return this.value_},t.toJSON=function(){return this.get()},t.toString=function(){return this.name_+"["+this.value_+"]"},t.valueOf=function(){return E(this.get())},t[Me]=function(){return this.valueOf()},a}(q),ze=T("ObservableValue",Je);Ve=Symbol.toPrimitive;var Ye,Ke,Qe=function(){function a(a){this.dependenciesState_=Ye.NOT_TRACKING_,this.observing_=[],this.newObserving_=null,this.isBeingObserved_=!1,this.isPendingUnobservation_=!1,this.observers_=new Set,this.diffValue_=0,this.runId_=0,this.lastAccessedBy_=0,this.lowestObserverState_=Ye.UP_TO_DATE_,this.unboundDepsCount_=0,this.value_=new Ze(null),this.name_=void 0,this.triggeredBy_=void 0,this.isComputing_=!1,this.isRunningSetter_=!1,this.derivation=void 0,this.setter_=void 0,this.isTracing_=Ke.NONE,this.scope_=void 0,this.equals_=void 0,this.requiresReaction_=void 0,this.keepAlive_=void 0,this.onBOL=void 0,this.onBUOL=void 0,a.get||e(31),this.derivation=a.get,this.name_=a.name||"ComputedValue",a.set&&(this.setter_=Ue("ComputedValue-setter",a.set)),this.equals_=a.equals||(a.compareStructural||a.struct?V.structural:V.default),this.scope_=a.context,this.requiresReaction_=a.requiresReaction,this.keepAlive_=!!a.keepAlive}var t=a.prototype;return t.onBecomeStale_=function(){!function(e){if(e.lowestObserverState_!==Ye.UP_TO_DATE_)return;e.lowestObserverState_=Ye.POSSIBLY_STALE_,e.observers_.forEach((function(e){e.dependenciesState_===Ye.UP_TO_DATE_&&(e.dependenciesState_=Ye.POSSIBLY_STALE_,e.onBecomeStale_())}))}(this)},t.onBO=function(){this.onBOL&&this.onBOL.forEach((function(e){return e()}))},t.onBUO=function(){this.onBUOL&&this.onBUOL.forEach((function(e){return e()}))},t.get=function(){if(this.isComputing_&&e(32,this.name_,this.derivation),0!==fa.inBatch||0!==this.observers_.size||this.keepAlive_){if(xa(this),aa(this)){var a=fa.trackingContext;this.keepAlive_&&!a&&(fa.trackingContext=this),this.trackAndCompute()&&function(e){if(e.lowestObserverState_===Ye.STALE_)return;e.lowestObserverState_=Ye.STALE_,e.observers_.forEach((function(a){a.dependenciesState_===Ye.POSSIBLY_STALE_?a.dependenciesState_=Ye.STALE_:a.dependenciesState_===Ye.UP_TO_DATE_&&(e.lowestObserverState_=Ye.UP_TO_DATE_)}))}(this),fa.trackingContext=a}}else aa(this)&&(this.warnAboutUntrackedRead_(),ma(),this.value_=this.computeValue_(!1),va());var t=this.value_;if(ea(t))throw t.cause;return t},t.set=function(a){if(this.setter_){this.isRunningSetter_&&e(33,this.name_),this.isRunningSetter_=!0;try{this.setter_.call(this.scope_,a)}finally{this.isRunningSetter_=!1}}else e(34,this.name_)},t.trackAndCompute=function(){var e=this.value_,a=this.dependenciesState_===Ye.NOT_TRACKING_,t=this.computeValue_(!0),n=a||ea(e)||ea(t)||!this.equals_(e,t);return n&&(this.value_=t),n},t.computeValue_=function(e){this.isComputing_=!0;var a,t=je(!1);if(e)a=na(this,this.derivation,this.scope_);else if(!0===fa.disableErrorBoundaries)a=this.derivation.call(this.scope_);else try{a=this.derivation.call(this.scope_)}catch(e){a=new Ze(e)}return _e(t),this.isComputing_=!1,a},t.suspend_=function(){this.keepAlive_||(ra(this),this.value_=void 0)},t.observe_=function(e,a){var t=this,n=!0,r=void 0;return Ga((function(){var i=t.get();if(!n||a){var s=sa();e({observableKind:"computed",debugObjectName:t.name_,type:wt,object:t,newValue:i,oldValue:r}),oa(s)}n=!1,r=i}))},t.warnAboutUntrackedRead_=function(){},t.toString=function(){return this.name_+"["+this.derivation.toString()+"]"},t.valueOf=function(){return E(this.get())},t[Ve]=function(){return this.valueOf()},a}(),Xe=T("ComputedValue",Qe);!function(e){e[e.NOT_TRACKING_=-1]="NOT_TRACKING_",e[e.UP_TO_DATE_=0]="UP_TO_DATE_",e[e.POSSIBLY_STALE_=1]="POSSIBLY_STALE_",e[e.STALE_=2]="STALE_"}(Ye||(Ye={})),function(e){e[e.NONE=0]="NONE",e[e.LOG=1]="LOG",e[e.BREAK=2]="BREAK"}(Ke||(Ke={}));var Ze=function(e){this.cause=void 0,this.cause=e};function ea(e){return e instanceof Ze}function aa(e){switch(e.dependenciesState_){case Ye.UP_TO_DATE_:return!1;case Ye.NOT_TRACKING_:case Ye.STALE_:return!0;case Ye.POSSIBLY_STALE_:for(var a=da(!0),t=sa(),n=e.observing_,r=n.length,i=0;i<r;i++){var s=n[i];if(Xe(s)){if(fa.disableErrorBoundaries)s.get();else try{s.get()}catch(e){return oa(t),la(a),!0}if(e.dependenciesState_===Ye.STALE_)return oa(t),la(a),!0}}return ca(e),oa(t),la(a),!1}}function ta(e){}function na(e,a,t){var n=da(!0);ca(e),e.newObserving_=new Array(e.observing_.length+100),e.unboundDepsCount_=0,e.runId_=++fa.runId;var r,i=fa.trackingDerivation;if(fa.trackingDerivation=e,fa.inBatch++,!0===fa.disableErrorBoundaries)r=a.call(t);else try{r=a.call(t)}catch(e){r=new Ze(e)}return fa.inBatch--,fa.trackingDerivation=i,function(e){for(var a=e.observing_,t=e.observing_=e.newObserving_,n=Ye.UP_TO_DATE_,r=0,i=e.unboundDepsCount_,s=0;s<i;s++){var o=t[s];0===o.diffValue_&&(o.diffValue_=1,r!==s&&(t[r]=o),r++),o.dependenciesState_>n&&(n=o.dependenciesState_)}t.length=r,e.newObserving_=null,i=a.length;for(;i--;){var d=a[i];0===d.diffValue_&&pa(d,e),d.diffValue_=0}for(;r--;){var l=t[r];1===l.diffValue_&&(l.diffValue_=0,ya(l,e))}n!==Ye.UP_TO_DATE_&&(e.dependenciesState_=n,e.onBecomeStale_())}(e),la(n),r}function ra(e){var a=e.observing_;e.observing_=[];for(var t=a.length;t--;)pa(a[t],e);e.dependenciesState_=Ye.NOT_TRACKING_}function ia(e){var a=sa();try{return e()}finally{oa(a)}}function sa(){var e=fa.trackingDerivation;return fa.trackingDerivation=null,e}function oa(e){fa.trackingDerivation=e}function da(e){var a=fa.allowStateReads;return fa.allowStateReads=e,a}function la(e){fa.allowStateReads=e}function ca(e){if(e.dependenciesState_!==Ye.UP_TO_DATE_){e.dependenciesState_=Ye.UP_TO_DATE_;for(var a=e.observing_,t=a.length;t--;)a[t].lowestObserverState_=Ye.UP_TO_DATE_}}var ha=function(){this.version=6,this.UNCHANGED={},this.trackingDerivation=null,this.trackingContext=null,this.runId=0,this.mobxGuid=0,this.inBatch=0,this.pendingUnobservations=[],this.pendingReactions=[],this.isRunningReactions=!1,this.allowStateChanges=!1,this.allowStateReads=!0,this.enforceActions=!0,this.spyListeners=[],this.globalReactionErrorHandlers=[],this.computedRequiresReaction=!1,this.reactionRequiresObservable=!1,this.observableRequiresReaction=!1,this.disableErrorBoundaries=!1,this.suppressReactionErrors=!1,this.useProxies=!0,this.verifyProxies=!1,this.safeDescriptors=!0},ua=!0,ga=!1,fa=function(){var a=n();return a.__mobxInstanceCount>0&&!a.__mobxGlobals&&(ua=!1),a.__mobxGlobals&&a.__mobxGlobals.version!==(new ha).version&&(ua=!1),ua?a.__mobxGlobals?(a.__mobxInstanceCount+=1,a.__mobxGlobals.UNCHANGED||(a.__mobxGlobals.UNCHANGED={}),a.__mobxGlobals):(a.__mobxInstanceCount=1,a.__mobxGlobals=new ha):(setTimeout((function(){ga||e(35)}),1),new ha)}();function ya(e,a){e.observers_.add(a),e.lowestObserverState_>a.dependenciesState_&&(e.lowestObserverState_=a.dependenciesState_)}function pa(e,a){e.observers_.delete(a),0===e.observers_.size&&wa(e)}function wa(e){!1===e.isPendingUnobservation_&&(e.isPendingUnobservation_=!0,fa.pendingUnobservations.push(e))}function ma(){fa.inBatch++}function va(){if(0==--fa.inBatch){Pa();for(var e=fa.pendingUnobservations,a=0;a<e.length;a++){var t=e[a];t.isPendingUnobservation_=!1,0===t.observers_.size&&(t.isBeingObserved_&&(t.isBeingObserved_=!1,t.onBUO()),t instanceof Qe&&t.suspend_())}fa.pendingUnobservations=[]}}function xa(e){var a=fa.trackingDerivation;return null!==a?(a.runId_!==e.lastAccessedBy_&&(e.lastAccessedBy_=a.runId_,a.newObserving_[a.unboundDepsCount_++]=e,!e.isBeingObserved_&&fa.trackingContext&&(e.isBeingObserved_=!0,e.onBO())),e.isBeingObserved_):(0===e.observers_.size&&fa.inBatch>0&&wa(e),!1)}function ba(e){e.lowestObserverState_!==Ye.STALE_&&(e.lowestObserverState_=Ye.STALE_,e.observers_.forEach((function(e){e.dependenciesState_===Ye.UP_TO_DATE_&&e.onBecomeStale_(),e.dependenciesState_=Ye.STALE_})))}var Ta=function(){function e(e,a,t,n){void 0===e&&(e="Reaction"),this.name_=void 0,this.onInvalidate_=void 0,this.errorHandler_=void 0,this.requiresObservable_=void 0,this.observing_=[],this.newObserving_=[],this.dependenciesState_=Ye.NOT_TRACKING_,this.diffValue_=0,this.runId_=0,this.unboundDepsCount_=0,this.isDisposed_=!1,this.isScheduled_=!1,this.isTrackPending_=!1,this.isRunning_=!1,this.isTracing_=Ke.NONE,this.name_=e,this.onInvalidate_=a,this.errorHandler_=t,this.requiresObservable_=n}var a=e.prototype;return a.onBecomeStale_=function(){this.schedule_()},a.schedule_=function(){this.isScheduled_||(this.isScheduled_=!0,fa.pendingReactions.push(this),Pa())},a.isScheduled=function(){return this.isScheduled_},a.runReaction_=function(){if(!this.isDisposed_){ma(),this.isScheduled_=!1;var e=fa.trackingContext;if(fa.trackingContext=this,aa(this)){this.isTrackPending_=!0;try{this.onInvalidate_()}catch(e){this.reportExceptionInDerivation_(e)}}fa.trackingContext=e,va()}},a.track=function(e){if(!this.isDisposed_){ma();0,this.isRunning_=!0;var a=fa.trackingContext;fa.trackingContext=this;var t=na(this,e,void 0);fa.trackingContext=a,this.isRunning_=!1,this.isTrackPending_=!1,this.isDisposed_&&ra(this),ea(t)&&this.reportExceptionInDerivation_(t.cause),va()}},a.reportExceptionInDerivation_=function(e){var a=this;if(this.errorHandler_)this.errorHandler_(e,this);else{if(fa.disableErrorBoundaries)throw e;var t="[mobx] uncaught error in '"+this+"'";fa.suppressReactionErrors||console.error(t,e),fa.globalReactionErrorHandlers.forEach((function(t){return t(e,a)}))}},a.dispose=function(){this.isDisposed_||(this.isDisposed_=!0,this.isRunning_||(ma(),ra(this),va()))},a.getDisposer_=function(e){var a=this,t=function t(){a.dispose(),null==e||null==e.removeEventListener||e.removeEventListener("abort",t)};return null==e||null==e.addEventListener||e.addEventListener("abort",t),t[H]=this,t},a.toString=function(){return"Reaction["+this.name_+"]"},a.trace=function(e){void 0===e&&(e=!1)},e}();var Aa=100,Ia=function(e){return e()};function Pa(){fa.inBatch>0||fa.isRunningReactions||Ia(Sa)}function Sa(){fa.isRunningReactions=!0;for(var e=fa.pendingReactions,a=0;e.length>0;){++a===Aa&&(console.error("[mobx] cycle in reaction: "+e[0]),e.splice(0));for(var t=e.splice(0),n=0,r=t.length;n<r;n++)t[n].runReaction_()}fa.isRunningReactions=!1}var Ea=T("Reaction",Ta);var Oa="action",ka="autoAction",Ca="<unnamed action>",Da=K(Oa),Ba=K("action.bound",{bound:!0}),La=K(ka,{autoAction:!0}),Fa=K("autoAction.bound",{autoAction:!0,bound:!0});function Ra(e){return function(a,t){return y(a)?Ue(a.name||Ca,a,e):y(t)?Ue(a,t,e):U(t)?(e?La:Da).decorate_20223_(a,t):p(t)?G(a,t,e?La:Da):p(a)?$(K(e?ka:Oa,{name:a,autoAction:e})):void 0}}var Ma=Ra(!1);Object.assign(Ma,Da);var Na=Ra(!0);function Wa(e){return He(e.name,!1,e,this,void 0)}function $a(e){return y(e)&&!0===e.isMobxAction}function Ga(e,a){var t,n,r,i,s;void 0===a&&(a=l);var o,d=null!=(t=null==(n=a)?void 0:n.name)?t:"Autorun";if(!a.scheduler&&!a.delay)o=new Ta(d,(function(){this.track(u)}),a.onError,a.requiresObservable);else{var c=Ha(a),h=!1;o=new Ta(d,(function(){h||(h=!0,c((function(){h=!1,o.isDisposed_||o.track(u)})))}),a.onError,a.requiresObservable)}function u(){e(o)}return null!=(r=a)&&null!=(i=r.signal)&&i.aborted||o.schedule_(),o.getDisposer_(null==(s=a)?void 0:s.signal)}Object.assign(Na,La),Ma.bound=$(Ba),Na.bound=$(Fa);var Ua=function(e){return e()};function Ha(e){return e.scheduler?e.scheduler:e.delay?function(a){return setTimeout(a,e.delay)}:Ua}var qa="onBO",ja="onBUO";function _a(e,a,t){return Va(ja,e,a,t)}function Va(e,a,t,n){var r="function"==typeof n?on(a,t):on(a),i=y(n)?n:t,s=e+"L";return r[s]?r[s].add(i):r[s]=new Set([i]),function(){var e=r[s];e&&(e.delete(i),0===e.size&&delete r[s])}}function Ja(e,a,t,n){var r=k(a);return cn((function(){var a=qt(e,n)[H];S(r).forEach((function(e){a.extend_(e,r[e],!t||(!(e in t)||t[e]))}))})),e}var za=0;function Ya(){this.message="FLOW_CANCELLED"}Ya.prototype=Object.create(Error.prototype);var Ka=ae("flow"),Qa=ae("flow.bound",{bound:!0}),Xa=Object.assign((function(e,a){if(U(a))return Ka.decorate_20223_(e,a);if(p(a))return G(e,a,Ka);var t=e,n=t.name||"<unnamed flow>",r=function(){var e,a=arguments,r=++za,i=Ma(n+" - runid: "+r+" - init",t).apply(this,a),s=void 0,o=new Promise((function(a,t){var o=0;function d(e){var a;s=void 0;try{a=Ma(n+" - runid: "+r+" - yield "+o++,i.next).call(i,e)}catch(e){return t(e)}c(a)}function l(e){var a;s=void 0;try{a=Ma(n+" - runid: "+r+" - yield "+o++,i.throw).call(i,e)}catch(e){return t(e)}c(a)}function c(e){if(!y(null==e?void 0:e.then))return e.done?a(e.value):(s=Promise.resolve(e.value)).then(d,l);e.then(c,t)}e=t,d(void 0)}));return o.cancel=Ma(n+" - runid: "+r+" - cancel",(function(){try{s&&Za(s);var a=i.return(void 0),t=Promise.resolve(a.value);t.then(f,f),Za(t),e(new Ya)}catch(a){e(a)}})),o};return r.isMobXFlow=!0,r}),Ka);function Za(e){y(e.cancel)&&e.cancel()}function et(e){return!0===(null==e?void 0:e.isMobXFlow)}function at(e,a){return!!e&&(void 0!==a?!!Vt(e)&&e[H].values_.has(a):Vt(e)||!!e[H]||j(e)||Ea(e)||Xe(e))}function tt(e){return at(e)}function nt(e,a,t){return e.set(a,t),t}function rt(a,t){if(null==a||"object"!=typeof a||a instanceof Date||!tt(a))return a;if(ze(a)||Xe(a))return rt(a.get(),t);if(t.has(a))return t.get(a);if(kt(a)){var n=nt(t,a,new Array(a.length));return a.forEach((function(e,a){n[a]=rt(e,t)})),n}if($t(a)){var r=nt(t,a,new Set);return a.forEach((function(e){r.add(rt(e,t))})),r}if(Mt(a)){var i=nt(t,a,new Map);return a.forEach((function(e,a){i.set(a,rt(e,t))})),i}var s=nt(t,a,{});return function(a){if(Vt(a))return a[H].ownKeys_();e(38)}(a).forEach((function(e){o.propertyIsEnumerable.call(a,e)&&(s[e]=rt(a[e],t))})),s}function it(e,a){return rt(e,new Map)}function st(e,a){void 0===a&&(a=void 0),ma();try{return e.apply(a)}finally{va()}}function ot(e){return e[H]}Xa.bound=$(Qa);var dt={has:function(e,a){return ot(e).has_(a)},get:function(e,a){return ot(e).get_(a)},set:function(e,a,t){var n;return!!p(a)&&(null==(n=ot(e).set_(a,t,!0))||n)},deleteProperty:function(e,a){var t;return!!p(a)&&(null==(t=ot(e).delete_(a,!0))||t)},defineProperty:function(e,a,t){var n;return null==(n=ot(e).defineProperty_(a,t))||n},ownKeys:function(e){return ot(e).ownKeys_()},preventExtensions:function(a){e(13)}};function lt(e){return void 0!==e.interceptors_&&e.interceptors_.length>0}function ct(e,a){var t=e.interceptors_||(e.interceptors_=[]);return t.push(a),g((function(){var e=t.indexOf(a);-1!==e&&t.splice(e,1)}))}function ht(a,t){var n=sa();try{for(var r=[].concat(a.interceptors_||[]),i=0,s=r.length;i<s&&((t=r[i](t))&&!t.type&&e(14),t);i++);return t}finally{oa(n)}}function ut(e){return void 0!==e.changeListeners_&&e.changeListeners_.length>0}function gt(e,a){var t=e.changeListeners_||(e.changeListeners_=[]);return t.push(a),g((function(){var e=t.indexOf(a);-1!==e&&t.splice(e,1)}))}function ft(e,a){var t=sa(),n=e.changeListeners_;if(n){for(var r=0,i=(n=n.slice()).length;r<i;r++)n[r](a);oa(t)}}function yt(e,a,t){return cn((function(){var n=qt(e,t)[H];null!=a||(a=function(e){return O(e,W)||x(e,W,B({},e[W])),e[W]}(e)),S(a).forEach((function(e){return n.make_(e,a[e])}))})),e}var pt="splice",wt="update",mt={get:function(e,a){var t=e[H];return a===H?t:"length"===a?t.getArrayLength_():"string"!=typeof a||isNaN(a)?O(bt,a)?bt[a]:e[a]:t.get_(parseInt(a))},set:function(e,a,t){var n=e[H];return"length"===a&&n.setArrayLength_(t),"symbol"==typeof a||isNaN(a)?e[a]=t:n.set_(parseInt(a),t),!0},preventExtensions:function(){e(15)}},vt=function(){function a(e,a,t,n){void 0===e&&(e="ObservableArray"),this.owned_=void 0,this.legacyMode_=void 0,this.atom_=void 0,this.values_=[],this.interceptors_=void 0,this.changeListeners_=void 0,this.enhancer_=void 0,this.dehancer=void 0,this.proxy_=void 0,this.lastKnownLength_=0,this.owned_=t,this.legacyMode_=n,this.atom_=new q(e),this.enhancer_=function(e,t){return a(e,t,"ObservableArray[..]")}}var t=a.prototype;return t.dehanceValue_=function(e){return void 0!==this.dehancer?this.dehancer(e):e},t.dehanceValues_=function(e){return void 0!==this.dehancer&&e.length>0?e.map(this.dehancer):e},t.intercept_=function(e){return ct(this,e)},t.observe_=function(e,a){return void 0===a&&(a=!1),a&&e({observableKind:"array",object:this.proxy_,debugObjectName:this.atom_.name_,type:"splice",index:0,added:this.values_.slice(),addedCount:this.values_.length,removed:[],removedCount:0}),gt(this,e)},t.getArrayLength_=function(){return this.atom_.reportObserved(),this.values_.length},t.setArrayLength_=function(a){("number"!=typeof a||isNaN(a)||a<0)&&e("Out of range: "+a);var t=this.values_.length;if(a!==t)if(a>t){for(var n=new Array(a-t),r=0;r<a-t;r++)n[r]=void 0;this.spliceWithArray_(t,0,n)}else this.spliceWithArray_(a,t-a)},t.updateArrayLength_=function(a,t){a!==this.lastKnownLength_&&e(16),this.lastKnownLength_+=t,this.legacyMode_&&t>0&&rn(a+t+1)},t.spliceWithArray_=function(e,a,t){var n=this;this.atom_;var r=this.values_.length;if(void 0===e?e=0:e>r?e=r:e<0&&(e=Math.max(0,r+e)),a=1===arguments.length?r-e:null==a?0:Math.max(0,Math.min(a,r-e)),void 0===t&&(t=d),lt(this)){var i=ht(this,{object:this.proxy_,type:pt,index:e,removedCount:a,added:t});if(!i)return d;a=i.removedCount,t=i.added}if(t=0===t.length?t:t.map((function(e){return n.enhancer_(e,void 0)})),this.legacyMode_){var s=t.length-a;this.updateArrayLength_(r,s)}var o=this.spliceItemsIntoValues_(e,a,t);return 0===a&&0===t.length||this.notifyArraySplice_(e,t,o),this.dehanceValues_(o)},t.spliceItemsIntoValues_=function(e,a,t){var n;if(t.length<1e4)return(n=this.values_).splice.apply(n,[e,a].concat(t));var r=this.values_.slice(e,e+a),i=this.values_.slice(e+a);this.values_.length+=t.length-a;for(var s=0;s<t.length;s++)this.values_[e+s]=t[s];for(var o=0;o<i.length;o++)this.values_[e+t.length+o]=i[o];return r},t.notifyArrayChildUpdate_=function(e,a,t){var n=!this.owned_&&!1,r=ut(this),i=r||n?{observableKind:"array",object:this.proxy_,type:wt,debugObjectName:this.atom_.name_,index:e,newValue:a,oldValue:t}:null;this.atom_.reportChanged(),r&&ft(this,i)},t.notifyArraySplice_=function(e,a,t){var n=!this.owned_&&!1,r=ut(this),i=r||n?{observableKind:"array",object:this.proxy_,debugObjectName:this.atom_.name_,type:pt,index:e,removed:t,added:a,removedCount:t.length,addedCount:a.length}:null;this.atom_.reportChanged(),r&&ft(this,i)},t.get_=function(e){if(!(this.legacyMode_&&e>=this.values_.length))return this.atom_.reportObserved(),this.dehanceValue_(this.values_[e]);console.warn("[mobx] Out of bounds read: "+e)},t.set_=function(a,t){var n=this.values_;if(this.legacyMode_&&a>n.length&&e(17,a,n.length),a<n.length){this.atom_;var r=n[a];if(lt(this)){var i=ht(this,{type:wt,object:this.proxy_,index:a,newValue:t});if(!i)return;t=i.newValue}(t=this.enhancer_(t,r))!==r&&(n[a]=t,this.notifyArrayChildUpdate_(a,t,r))}else{for(var s=new Array(a+1-n.length),o=0;o<s.length-1;o++)s[o]=void 0;s[s.length-1]=t,this.spliceWithArray_(n.length,0,s)}},a}();function xt(e,a,t,n){return void 0===t&&(t="ObservableArray"),void 0===n&&(n=!1),u(),cn((function(){var r=new vt(t,a,n,!1);b(r.values_,H,r);var i=new Proxy(r.values_,mt);return r.proxy_=i,e&&e.length&&r.spliceWithArray_(0,0,e),i}))}var bt={clear:function(){return this.splice(0)},replace:function(e){var a=this[H];return a.spliceWithArray_(0,a.values_.length,e)},toJSON:function(){return this.slice()},splice:function(e,a){for(var t=arguments.length,n=new Array(t>2?t-2:0),r=2;r<t;r++)n[r-2]=arguments[r];var i=this[H];switch(arguments.length){case 0:return[];case 1:return i.spliceWithArray_(e);case 2:return i.spliceWithArray_(e,a)}return i.spliceWithArray_(e,a,n)},spliceWithArray:function(e,a,t){return this[H].spliceWithArray_(e,a,t)},push:function(){for(var e=this[H],a=arguments.length,t=new Array(a),n=0;n<a;n++)t[n]=arguments[n];return e.spliceWithArray_(e.values_.length,0,t),e.values_.length},pop:function(){return this.splice(Math.max(this[H].values_.length-1,0),1)[0]},shift:function(){return this.splice(0,1)[0]},unshift:function(){for(var e=this[H],a=arguments.length,t=new Array(a),n=0;n<a;n++)t[n]=arguments[n];return e.spliceWithArray_(0,0,t),e.values_.length},reverse:function(){return fa.trackingDerivation&&e(37,"reverse"),this.replace(this.slice().reverse()),this},sort:function(){fa.trackingDerivation&&e(37,"sort");var a=this.slice();return a.sort.apply(a,arguments),this.replace(a),this},remove:function(e){var a=this[H],t=a.dehanceValues_(a.values_).indexOf(e);return t>-1&&(this.splice(t,1),!0)}};function Tt(e,a){"function"==typeof Array.prototype[e]&&(bt[e]=a(e))}function At(e){return function(){var a=this[H];a.atom_.reportObserved();var t=a.dehanceValues_(a.values_);return t[e].apply(t,arguments)}}function It(e){return function(a,t){var n=this,r=this[H];return r.atom_.reportObserved(),r.dehanceValues_(r.values_)[e]((function(e,r){return a.call(t,e,r,n)}))}}function Pt(e){return function(){var a=this,t=this[H];t.atom_.reportObserved();var n=t.dehanceValues_(t.values_),r=arguments[0];return arguments[0]=function(e,t,n){return r(e,t,n,a)},n[e].apply(n,arguments)}}Tt("at",At),Tt("concat",At),Tt("flat",At),Tt("includes",At),Tt("indexOf",At),Tt("join",At),Tt("lastIndexOf",At),Tt("slice",At),Tt("toString",At),Tt("toLocaleString",At),Tt("toSorted",At),Tt("toSpliced",At),Tt("with",At),Tt("every",It),Tt("filter",It),Tt("find",It),Tt("findIndex",It),Tt("findLast",It),Tt("findLastIndex",It),Tt("flatMap",It),Tt("forEach",It),Tt("map",It),Tt("some",It),Tt("toReversed",It),Tt("reduce",Pt),Tt("reduceRight",Pt);var St,Et,Ot=T("ObservableArrayAdministration",vt);function kt(e){return w(e)&&Ot(e[H])}var Ct={},Dt="add",Bt="delete";St=Symbol.iterator,Et=Symbol.toStringTag;var Lt,Ft,Rt=function(){function a(a,t,n){var r=this;void 0===t&&(t=J),void 0===n&&(n="ObservableMap"),this.enhancer_=void 0,this.name_=void 0,this[H]=Ct,this.data_=void 0,this.hasMap_=void 0,this.keysAtom_=void 0,this.interceptors_=void 0,this.changeListeners_=void 0,this.dehancer=void 0,this.enhancer_=t,this.name_=n,y(Map)||e(18),cn((function(){r.keysAtom_=_("ObservableMap.keys()"),r.data_=new Map,r.hasMap_=new Map,a&&r.merge(a)}))}var t=a.prototype;return t.has_=function(e){return this.data_.has(e)},t.has=function(e){var a=this;if(!fa.trackingDerivation)return this.has_(e);var t=this.hasMap_.get(e);if(!t){var n=t=new Je(this.has_(e),z,"ObservableMap.key?",!1);this.hasMap_.set(e,n),_a(n,(function(){return a.hasMap_.delete(e)}))}return t.get()},t.set=function(e,a){var t=this.has_(e);if(lt(this)){var n=ht(this,{type:t?wt:Dt,object:this,newValue:a,name:e});if(!n)return this;a=n.newValue}return t?this.updateValue_(e,a):this.addValue_(e,a),this},t.delete=function(e){var a=this;if((this.keysAtom_,lt(this))&&!ht(this,{type:Bt,object:this,name:e}))return!1;if(this.has_(e)){var t=ut(this),n=t?{observableKind:"map",debugObjectName:this.name_,type:Bt,object:this,oldValue:this.data_.get(e).value_,name:e}:null;return st((function(){var t;a.keysAtom_.reportChanged(),null==(t=a.hasMap_.get(e))||t.setNewValue_(!1),a.data_.get(e).setNewValue_(void 0),a.data_.delete(e)})),t&&ft(this,n),!0}return!1},t.updateValue_=function(e,a){var t=this.data_.get(e);if((a=t.prepareNewValue_(a))!==fa.UNCHANGED){var n=ut(this),r=n?{observableKind:"map",debugObjectName:this.name_,type:wt,object:this,oldValue:t.value_,name:e,newValue:a}:null;0,t.setNewValue_(a),n&&ft(this,r)}},t.addValue_=function(e,a){var t=this;this.keysAtom_,st((function(){var n,r=new Je(a,t.enhancer_,"ObservableMap.key",!1);t.data_.set(e,r),a=r.value_,null==(n=t.hasMap_.get(e))||n.setNewValue_(!0),t.keysAtom_.reportChanged()}));var n=ut(this),r=n?{observableKind:"map",debugObjectName:this.name_,type:Dt,object:this,name:e,newValue:a}:null;n&&ft(this,r)},t.get=function(e){return this.has(e)?this.dehanceValue_(this.data_.get(e).get()):this.dehanceValue_(void 0)},t.dehanceValue_=function(e){return void 0!==this.dehancer?this.dehancer(e):e},t.keys=function(){return this.keysAtom_.reportObserved(),this.data_.keys()},t.values=function(){var e=this,a=this.keys();return vn({next:function(){var t=a.next(),n=t.done,r=t.value;return{done:n,value:n?void 0:e.get(r)}}})},t.entries=function(){var e=this,a=this.keys();return vn({next:function(){var t=a.next(),n=t.done,r=t.value;return{done:n,value:n?void 0:[r,e.get(r)]}}})},t[St]=function(){return this.entries()},t.forEach=function(e,a){for(var t,n=N(this);!(t=n()).done;){var r=t.value,i=r[0],s=r[1];e.call(a,s,i,this)}},t.merge=function(a){var t=this;return Mt(a)&&(a=new Map(a)),st((function(){m(a)?function(e){var a=Object.keys(e);if(!P)return a;var t=Object.getOwnPropertySymbols(e);return t.length?[].concat(a,t.filter((function(a){return o.propertyIsEnumerable.call(e,a)}))):a}(a).forEach((function(e){return t.set(e,a[e])})):Array.isArray(a)?a.forEach((function(e){var a=e[0],n=e[1];return t.set(a,n)})):A(a)?(a.constructor!==Map&&e(19,a),a.forEach((function(e,a){return t.set(a,e)}))):null!=a&&e(20,a)})),this},t.clear=function(){var e=this;st((function(){ia((function(){for(var a,t=N(e.keys());!(a=t()).done;){var n=a.value;e.delete(n)}}))}))},t.replace=function(a){var t=this;return st((function(){for(var n,r=function(a){if(A(a)||Mt(a))return a;if(Array.isArray(a))return new Map(a);if(m(a)){var t=new Map;for(var n in a)t.set(n,a[n]);return t}return e(21,a)}(a),i=new Map,s=!1,o=N(t.data_.keys());!(n=o()).done;){var d=n.value;if(!r.has(d))if(t.delete(d))s=!0;else{var l=t.data_.get(d);i.set(d,l)}}for(var c,h=N(r.entries());!(c=h()).done;){var u=c.value,g=u[0],f=u[1],y=t.data_.has(g);if(t.set(g,f),t.data_.has(g)){var p=t.data_.get(g);i.set(g,p),y||(s=!0)}}if(!s)if(t.data_.size!==i.size)t.keysAtom_.reportChanged();else for(var w=t.data_.keys(),v=i.keys(),x=w.next(),b=v.next();!x.done;){if(x.value!==b.value){t.keysAtom_.reportChanged();break}x=w.next(),b=v.next()}t.data_=i})),this},t.toString=function(){return"[object ObservableMap]"},t.toJSON=function(){return Array.from(this)},t.observe_=function(e,a){return gt(this,e)},t.intercept_=function(e){return ct(this,e)},D(a,[{key:"size",get:function(){return this.keysAtom_.reportObserved(),this.data_.size}},{key:Et,get:function(){return"Map"}}]),a}(),Mt=T("ObservableMap",Rt);var Nt={};Lt=Symbol.iterator,Ft=Symbol.toStringTag;var Wt=function(){function a(a,t,n){var r=this;void 0===t&&(t=J),void 0===n&&(n="ObservableSet"),this.name_=void 0,this[H]=Nt,this.data_=new Set,this.atom_=void 0,this.changeListeners_=void 0,this.interceptors_=void 0,this.dehancer=void 0,this.enhancer_=void 0,this.name_=n,y(Set)||e(22),this.enhancer_=function(e,a){return t(e,a,n)},cn((function(){r.atom_=_(r.name_),a&&r.replace(a)}))}var t=a.prototype;return t.dehanceValue_=function(e){return void 0!==this.dehancer?this.dehancer(e):e},t.clear=function(){var e=this;st((function(){ia((function(){for(var a,t=N(e.data_.values());!(a=t()).done;){var n=a.value;e.delete(n)}}))}))},t.forEach=function(e,a){for(var t,n=N(this);!(t=n()).done;){var r=t.value;e.call(a,r,r,this)}},t.add=function(e){var a=this;if((this.atom_,lt(this))&&!ht(this,{type:Dt,object:this,newValue:e}))return this;if(!this.has(e)){st((function(){a.data_.add(a.enhancer_(e,void 0)),a.atom_.reportChanged()}));var t=!1,n=ut(this),r=n?{observableKind:"set",debugObjectName:this.name_,type:Dt,object:this,newValue:e}:null;t,n&&ft(this,r)}return this},t.delete=function(e){var a=this;if(lt(this)&&!ht(this,{type:Bt,object:this,oldValue:e}))return!1;if(this.has(e)){var t=ut(this),n=t?{observableKind:"set",debugObjectName:this.name_,type:Bt,object:this,oldValue:e}:null;return st((function(){a.atom_.reportChanged(),a.data_.delete(e)})),t&&ft(this,n),!0}return!1},t.has=function(e){return this.atom_.reportObserved(),this.data_.has(this.dehanceValue_(e))},t.entries=function(){var e=0,a=Array.from(this.keys()),t=Array.from(this.values());return vn({next:function(){var n=e;return e+=1,n<t.length?{value:[a[n],t[n]],done:!1}:{done:!0}}})},t.keys=function(){return this.values()},t.values=function(){this.atom_.reportObserved();var e=this,a=0,t=Array.from(this.data_.values());return vn({next:function(){return a<t.length?{value:e.dehanceValue_(t[a++]),done:!1}:{done:!0}}})},t.replace=function(a){var t=this;return $t(a)&&(a=new Set(a)),st((function(){Array.isArray(a)||I(a)?(t.clear(),a.forEach((function(e){return t.add(e)}))):null!=a&&e("Cannot initialize set from "+a)})),this},t.observe_=function(e,a){return gt(this,e)},t.intercept_=function(e){return ct(this,e)},t.toJSON=function(){return Array.from(this)},t.toString=function(){return"[object ObservableSet]"},t[Lt]=function(){return this.values()},D(a,[{key:"size",get:function(){return this.atom_.reportObserved(),this.data_.size}},{key:Ft,get:function(){return"Set"}}]),a}(),$t=T("ObservableSet",Wt),Gt=Object.create(null),Ut="remove",Ht=function(){function a(e,a,t,n){void 0===a&&(a=new Map),void 0===n&&(n=ye),this.target_=void 0,this.values_=void 0,this.name_=void 0,this.defaultAnnotation_=void 0,this.keysAtom_=void 0,this.changeListeners_=void 0,this.interceptors_=void 0,this.proxy_=void 0,this.isPlainObject_=void 0,this.appliedAnnotations_=void 0,this.pendingKeys_=void 0,this.target_=e,this.values_=a,this.name_=t,this.defaultAnnotation_=n,this.keysAtom_=new q("ObservableObject.keys"),this.isPlainObject_=m(this.target_)}var t=a.prototype;return t.getObservablePropValue_=function(e){return this.values_.get(e).get()},t.setObservablePropValue_=function(e,a){var t=this.values_.get(e);if(t instanceof Qe)return t.set(a),!0;if(lt(this)){var n=ht(this,{type:wt,object:this.proxy_||this.target_,name:e,newValue:a});if(!n)return null;a=n.newValue}if((a=t.prepareNewValue_(a))!==fa.UNCHANGED){var r=ut(this),i=r?{type:wt,observableKind:"object",debugObjectName:this.name_,object:this.proxy_||this.target_,oldValue:t.value_,name:e,newValue:a}:null;0,t.setNewValue_(a),r&&ft(this,i)}return!0},t.get_=function(e){return fa.trackingDerivation&&!O(this.target_,e)&&this.has_(e),this.target_[e]},t.set_=function(e,a,t){return void 0===t&&(t=!1),O(this.target_,e)?this.values_.has(e)?this.setObservablePropValue_(e,a):t?Reflect.set(this.target_,e,a):(this.target_[e]=a,!0):this.extend_(e,{value:a,enumerable:!0,writable:!0,configurable:!0},this.defaultAnnotation_,t)},t.has_=function(e){if(!fa.trackingDerivation)return e in this.target_;this.pendingKeys_||(this.pendingKeys_=new Map);var a=this.pendingKeys_.get(e);return a||(a=new Je(e in this.target_,z,"ObservableObject.key?",!1),this.pendingKeys_.set(e,a)),a.get()},t.make_=function(a,t){if(!0===t&&(t=this.defaultAnnotation_),!1!==t){if(zt(this,t,a),!(a in this.target_)){var n;if(null!=(n=this.target_[W])&&n[a])return;e(1,t.annotationType_,this.name_+"."+a.toString())}for(var r=this.target_;r&&r!==o;){var s=i(r,a);if(s){var d=t.make_(this,a,s,r);if(0===d)return;if(1===d)break}r=Object.getPrototypeOf(r)}Jt(this,t,a)}},t.extend_=function(e,a,t,n){if(void 0===n&&(n=!1),!0===t&&(t=this.defaultAnnotation_),!1===t)return this.defineProperty_(e,a,n);zt(this,t,e);var r=t.extend_(this,e,a,n);return r&&Jt(this,t,e),r},t.defineProperty_=function(e,a,t){void 0===t&&(t=!1),this.keysAtom_;try{ma();var n=this.delete_(e);if(!n)return n;if(lt(this)){var r=ht(this,{object:this.proxy_||this.target_,name:e,type:Dt,newValue:a.value});if(!r)return null;var i=r.newValue;a.value!==i&&(a=B({},a,{value:i}))}if(t){if(!Reflect.defineProperty(this.target_,e,a))return!1}else s(this.target_,e,a);this.notifyPropertyAddition_(e,a.value)}finally{va()}return!0},t.defineObservableProperty_=function(e,a,t,n){void 0===n&&(n=!1),this.keysAtom_;try{ma();var r=this.delete_(e);if(!r)return r;if(lt(this)){var i=ht(this,{object:this.proxy_||this.target_,name:e,type:Dt,newValue:a});if(!i)return null;a=i.newValue}var o=_t(e),d={configurable:!fa.safeDescriptors||this.isPlainObject_,enumerable:!0,get:o.get,set:o.set};if(n){if(!Reflect.defineProperty(this.target_,e,d))return!1}else s(this.target_,e,d);var l=new Je(a,t,"ObservableObject.key",!1);this.values_.set(e,l),this.notifyPropertyAddition_(e,l.value_)}finally{va()}return!0},t.defineComputedProperty_=function(e,a,t){void 0===t&&(t=!1),this.keysAtom_;try{ma();var n=this.delete_(e);if(!n)return n;if(lt(this))if(!ht(this,{object:this.proxy_||this.target_,name:e,type:Dt,newValue:void 0}))return null;a.name||(a.name="ObservableObject.key"),a.context=this.proxy_||this.target_;var r=_t(e),i={configurable:!fa.safeDescriptors||this.isPlainObject_,enumerable:!1,get:r.get,set:r.set};if(t){if(!Reflect.defineProperty(this.target_,e,i))return!1}else s(this.target_,e,i);this.values_.set(e,new Qe(a)),this.notifyPropertyAddition_(e,void 0)}finally{va()}return!0},t.delete_=function(e,a){if(void 0===a&&(a=!1),this.keysAtom_,!O(this.target_,e))return!0;if(lt(this)&&!ht(this,{object:this.proxy_||this.target_,name:e,type:Ut}))return null;try{var t,n;ma();var r,s=ut(this),o=this.values_.get(e),d=void 0;if(!o&&s)d=null==(r=i(this.target_,e))?void 0:r.value;if(a){if(!Reflect.deleteProperty(this.target_,e))return!1}else delete this.target_[e];if(o&&(this.values_.delete(e),o instanceof Je&&(d=o.value_),ba(o)),this.keysAtom_.reportChanged(),null==(t=this.pendingKeys_)||null==(n=t.get(e))||n.set(e in this.target_),s){var l={type:Ut,observableKind:"object",object:this.proxy_||this.target_,debugObjectName:this.name_,oldValue:d,name:e};0,s&&ft(this,l)}}finally{va()}return!0},t.observe_=function(e,a){return gt(this,e)},t.intercept_=function(e){return ct(this,e)},t.notifyPropertyAddition_=function(e,a){var t,n,r=ut(this);if(r){var i=r?{type:Dt,observableKind:"object",debugObjectName:this.name_,object:this.proxy_||this.target_,name:e,newValue:a}:null;0,r&&ft(this,i)}null==(t=this.pendingKeys_)||null==(n=t.get(e))||n.set(!0),this.keysAtom_.reportChanged()},t.ownKeys_=function(){return this.keysAtom_.reportObserved(),S(this.target_)},t.keys_=function(){return this.keysAtom_.reportObserved(),Object.keys(this.target_)},a}();function qt(e,a){var t;if(O(e,H))return e;var n=null!=(t=null==a?void 0:a.name)?t:"ObservableObject",r=new Ht(e,new Map,String(n),function(e){var a;return e?null!=(a=e.defaultDecorator)?a:pe(e):void 0}(a));return x(e,H,r),e}var jt=T("ObservableObjectAdministration",Ht);function _t(e){return Gt[e]||(Gt[e]={get:function(){return this[H].getObservablePropValue_(e)},set:function(a){return this[H].setObservablePropValue_(e,a)}})}function Vt(e){return!!w(e)&&jt(e[H])}function Jt(e,a,t){var n;null==(n=e.target_[W])||delete n[t]}function zt(e,a,t){}var Yt,Kt,Qt=tn(0),Xt=function(){var e=!1,a={};return Object.defineProperty(a,"0",{set:function(){e=!0}}),Object.create(a)[0]=1,!1===e}(),Zt=0,en=function(){};Yt=en,Kt=Array.prototype,Object.setPrototypeOf?Object.setPrototypeOf(Yt.prototype,Kt):void 0!==Yt.prototype.__proto__?Yt.prototype.__proto__=Kt:Yt.prototype=Kt;var an=function(e,a,t){function n(a,t,n,r){var i;return void 0===n&&(n="ObservableArray"),void 0===r&&(r=!1),i=e.call(this)||this,cn((function(){var e=new vt(n,t,r,!0);e.proxy_=R(i),b(R(i),H,e),a&&a.length&&i.spliceWithArray(0,0,a),Xt&&Object.defineProperty(R(i),"0",Qt)})),i}L(n,e);var r=n.prototype;return r.concat=function(){this[H].atom_.reportObserved();for(var e=arguments.length,a=new Array(e),t=0;t<e;t++)a[t]=arguments[t];return Array.prototype.concat.apply(this.slice(),a.map((function(e){return kt(e)?e.slice():e})))},r[t]=function(){var e=this,a=0;return vn({next:function(){return a<e.length?{value:e[a++],done:!1}:{done:!0,value:void 0}}})},D(n,[{key:"length",get:function(){return this[H].getArrayLength_()},set:function(e){this[H].setArrayLength_(e)}},{key:a,get:function(){return"Array"}}]),n}(en,Symbol.toStringTag,Symbol.iterator);function tn(e){return{enumerable:!1,configurable:!0,get:function(){return this[H].get_(e)},set:function(a){this[H].set_(e,a)}}}function nn(e){s(an.prototype,""+e,tn(e))}function rn(e){if(e>Zt){for(var a=Zt;a<e+100;a++)nn(a);Zt=e}}function sn(e,a,t){return new an(e,a,t)}function on(a,t){if("object"==typeof a&&null!==a){if(kt(a))return void 0!==t&&e(23),a[H].atom_;if($t(a))return a.atom_;if(Mt(a)){if(void 0===t)return a.keysAtom_;var n=a.data_.get(t)||a.hasMap_.get(t);return n||e(25,t,ln(a)),n}if(Vt(a)){if(!t)return e(26);var r=a[H].values_.get(t);return r||e(27,t,ln(a)),r}if(j(a)||Xe(a)||Ea(a))return a}else if(y(a)&&Ea(a[H]))return a[H];e(28)}function dn(a,t){return a||e(29),void 0!==t?dn(on(a,t)):j(a)||Xe(a)||Ea(a)||Mt(a)||$t(a)?a:a[H]?a[H]:void e(24,a)}function ln(e,a){var t;if(void 0!==a)t=on(e,a);else{if($a(e))return e.name;t=Vt(e)||Mt(e)||$t(e)?dn(e):on(e)}return t.name_}function cn(e){var a=sa(),t=je(!0);ma();try{return e()}finally{va(),_e(t),oa(a)}}Object.entries(bt).forEach((function(e){var a=e[0],t=e[1];"concat"!==a&&x(an.prototype,a,t)})),rn(1e3);var hn,un,gn,fn,yn=o.toString;function pn(e,a,t){return void 0===t&&(t=-1),wn(e,a,t)}function wn(e,a,t,n,r){if(e===a)return 0!==e||1/e==1/a;if(null==e||null==a)return!1;if(e!=e)return a!=a;var i=typeof e;if("function"!==i&&"object"!==i&&"object"!=typeof a)return!1;var s=yn.call(e);if(s!==yn.call(a))return!1;switch(s){case"[object RegExp]":case"[object String]":return""+e==""+a;case"[object Number]":return+e!=+e?+a!=+a:0==+e?1/+e==1/a:+e==+a;case"[object Date]":case"[object Boolean]":return+e==+a;case"[object Symbol]":return"undefined"!=typeof Symbol&&Symbol.valueOf.call(e)===Symbol.valueOf.call(a);case"[object Map]":case"[object Set]":t>=0&&t++}e=mn(e),a=mn(a);var o="[object Array]"===s;if(!o){if("object"!=typeof e||"object"!=typeof a)return!1;var d=e.constructor,l=a.constructor;if(d!==l&&!(y(d)&&d instanceof d&&y(l)&&l instanceof l)&&"constructor"in e&&"constructor"in a)return!1}if(0===t)return!1;t<0&&(t=-1),r=r||[];for(var c=(n=n||[]).length;c--;)if(n[c]===e)return r[c]===a;if(n.push(e),r.push(a),o){if((c=e.length)!==a.length)return!1;for(;c--;)if(!wn(e[c],a[c],t-1,n,r))return!1}else{var h,u=Object.keys(e);if(c=u.length,Object.keys(a).length!==c)return!1;for(;c--;)if(!O(a,h=u[c])||!wn(e[h],a[h],t-1,n,r))return!1}return n.pop(),r.pop(),!0}function mn(e){return kt(e)?e.slice():A(e)||Mt(e)||I(e)||$t(e)?Array.from(e.entries()):e}function vn(e){return e[Symbol.iterator]=xn,e}function xn(){return this}["Symbol","Map","Set"].forEach((function(a){void 0===n()[a]&&e("MobX requires global '"+a+"' to be available or polyfilled")})),"object"==typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__&&__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({spy:function(e){return console.warn("[mobx.spy] Is a no-op in production builds"),function(){}},extras:{getDebugName:ln},$mobx:H}),function(e){e.Blight="Blight",e.Event="Event",e.Fear="Fear",e.Power="Power"}(hn||(hn={})),function(e){e.BalancedA="BalancedA",e.BalancedB="BalancedB",e.BalancedC="BalancedC",e.BalancedD="BalancedD",e.BalancedE="BalancedE",e.BalancedF="BalancedF",e.BalancedG="BalancedG",e.BalancedH="BalancedH",e.ThematicEA="ThematicEA",e.ThematicNE="ThematicNE",e.ThematicNW="ThematicNW",e.ThematicSE="ThematicSE",e.ThematicSW="ThematicSW",e.ThematicWE="ThematicWE"}(un||(un={})),function(e){e.Base="Base",e.BranchAndClaw="BranchAndClaw",e.JaggedEarth="JaggedEarth",e.FeatherAndFlame="FeatherAndFlame",e.HorizonsOfSpiritIsland="HorizonsOfSpiritIsland",e.NatureIncarnate="NatureIncarnate"}(gn||(gn={})),function(e){e.Lightning="Lightning",e.River="River",e.Earth="Earth",e.Shadows="Shadows",e.Thunderspeaker="Thunderspeaker",e.Green="Green",e.Ocean="Ocean",e.Bringer="Bringer",e.Fangs="Fangs",e.Keeper="Keeper",e.Wildfire="Wildfire",e.Serpent="Serpent",e.Stone="Stone",e.Memory="Memory",e.Trickster="Trickster",e.Lure="Lure",e.ManyMinds="ManyMinds",e.Volcano="Volcano",e.Shroud="Shroud",e.Vengeance="Vengeance",e.Starlight="Starlight",e.Fractured="Fractured",e.Downpour="Downpour",e.Finder="Finder",e.Teeth="Teeth",e.Eyes="Eyes",e.Mud="Mud",e.Heat="Heat",e.Whirlwind="Whirlwind",e.Behemoth="Behemoth",e.HearthVigil="HearthVigil",e.Darkness="Darkness",e.Gaze="Gaze",e.Roots="Roots",e.Earthquakes="Earthquakes",e.Voice="Voice",e.Wounded="Wounded"}(fn||(fn={}));const bn={boards:[{x:0,y:0,rotation:0,boardId:un.BalancedA,spirit:{spirit:fn.Lightning,aspect:null,progression:!1}}],seed:Math.floor(9999999*Math.random()),sets:[gn.Base]};var Tn,An,In,Pn;!function(e){e.AbsorbedPresence="AbsorbedPresence",e.BlightAdded="BlightAdded",e.BlightCardFlipped="BlightCardFlipped",e.BlightRemoved="BlightRemoved",e.BoardRemoved="BoardRemoved",e.Cascade="Cascade",e.DamageCleared="DamageCleared",e.DefendAdded="DefendAdded",e.DoNotParticipateInRavage="DoNotParticipateInRavage",e.DrawEventCard="DrawEventCard",e.EnergyGained="EnergyGained",e.EnergyLost="EnergyLost",e.Error="Error",e.FearAddedToPool="FearAddedToPool",e.FearCardAdded="FearCardAdded",e.FearCardDiscarded="FearCardDiscarded",e.FearCardEarned="FearCardEarned",e.FearCardResolved="FearCardResolved",e.FearEarned="FearEarned",e.FearLost="FearLost",e.GameEnd="GameEnd",e.GenericMain="GenericMain",e.GenericSub="GenericSub",e.Grow="Grow",e.InvaderCardAdded="InvaderCardAdded",e.InvaderCardRemoved="InvaderCardRemoved",e.InvadersBuild="InvadersBuild",e.InvadersExplore="InvadersExplore",e.InvadersRavage="InvadersRavage",e.InvadersRavageInLand="InvadersRavageInLand",e.InvadersRavageInTerrain="InvadersRavageInTerrain",e.InvadersBuildInTerrain="InvadersBuildInTerrain",e.NewTerrorLevel="NewTerrorLevel",e.LandIsolated="LandIsolated",e.Phase="Phase",e.PieceAdded="PieceAdded",e.PieceDamaged="PieceDamaged",e.PieceMoved="PieceMoved",e.PieceRemoved="PieceRemoved",e.PieceReplaced="PieceReplaced",e.PowerCardDiscarded="PowerCardDiscarded",e.PowerCardDrawn="PowerCardDrawn",e.PowerCardForgotten="PowerCardForgotten",e.PowerCardGained="PowerCardGained",e.PowerCardGiven="PowerCardGiven",e.PowerCardImpended="PowerCardImpended",e.PowerCardPlayed="PowerCardPlayed",e.PowerCardReclaimed="PowerCardReclaimed",e.PowerResolvedInLands="PowerResolvedInLand",e.PowerResolvedOnSpirit="PowerResolvedOnSpirit",e.ResolveEventCard="ResolveEventCard",e.RestoringLandToSetupSymbols="RestoringLandToSetupSymbols",e.ScoreFromInnate="ScoreFromInnate",e.ScoreFromPower="ScoreFromPower",e.SetupAdversary="SetupAdversary",e.SetupScenario="SetupScenario",e.SetupSpirit="SetupSpirit",e.SlowHealingBlightAdded="SlowHealingBlightAdded",e.StrifeAdded="StrifeAdded",e.StrifeRemoved="StrifeRemoved",e.TargetedAcrossIslets="TargetedAcrossIslets",e.TimeLost="TimeLost",e.TrackUncovered="TrackUncovered",e.WaveOfImmigration="WaveOfImmigration"}(Tn||(Tn={})),function(e){e.ChooseBetween="ChooseBetween",e.ClickToContinueCard="ClickToContinueCard",e.ClickToContinue="ClickToContinue",e.PayJointly="PayJointly",e.PlayPower="PlayPower",e.SelectBoard="SelectBoard",e.SelectCard="SelectCard",e.SelectCorner="SelectCorner",e.SelectFearCard="SelectFearCard",e.SelectGrowthOption="SelectGrowthOption",e.SelectHealingCard="SelectHealingCard",e.SelectLand="SelectLand",e.SelectPiece="SelectPiece",e.SelectPower="SelectPower",e.SelectPowerToGain="SelectPowerToGain",e.SelectPowerType="SelectPowerType",e.SelectSpirit="SelectSpirit",e.SelectTerrain="SelectTerrain",e.SelectTrack="SelectTrack"}(An||(An={})),function(e){e.ProudAndMightCapital="ProudAndMightCapital",e.BuildingBoom="BuildingBoom",e.IndenturedServantsEarnLand="IndenturedServantsEarnLand",e.HighImmigrationI="HighImmigrationI",e.HighImmigrationFull="HighImmigrationFull",e.LocalAutonomy="LocalAutonomy",e.IndependentResolve="IndependentResolve",e.SprawlingPlantation="SprawlingPlantation",e.DemandForNewCashCrops="DemandForNewCashCrops",e.FrontierExplorers="FrontierExplorers",e.SlaveLabor="SlaveLabor",e.TriangleTrade="TriangleTrade",e.SlowHealingEcosystem="SlowHealingEcosystem",e.PersistentExplorers="PersistentExplorers",e.IrreparableDamage="IrreparableDamage",e.SeekPrimeTerritory="SeekPrimeTerritory",e.MigratoryHerders="MigratoryHerders",e.MoreRuralThanUrban="MoreRuralThanUrban",e.HerdsThriveInVerdantLands="HerdsThriveInVerdantLands",e.WaveOfImmigration="WaveOfImmigration",e.FarFlungHerds="FarFlungHerds",e.LandRush="LandRush",e.HuntersSwarmTheIsland="HuntersSwarmTheIsland",e.StalkThePredators="StalkThePredators",e.HuntersSeekShellAndHide="HuntersSeekShellAndHide",e.ASenseForImpendingDisaster="ASenseForImpendingDisaster",e.CompetitionAmongHunters="CompetitionAmongHunters",e.PressureForFastProfit="PressureForFastProfit",e.LandStrippedBare="LandStrippedBare",e.MiningTunnels="MiningTunnels",e.AvariceRewarded="AvariceRewarded",e.CeaselessMining="CeaselessMining",e.MiningBoomI="MiningBoom",e.UntappedSaltDeposits="UntappedSaltDeposits",e.MiningBoomII="MiningBoomII",e.TheEmpireAscendant="TheEmpireAscendant",e.TradeHub="TradeHub",e.PortsSprawlOutward="PortsSprawlOutward",e.TradingPort="TradingPort",e.ChartTheCoastline="ChartTheCoastline",e.RunoffAndBilgewater="RunoffAndBilgewater",e.ExportsFuelInwardGrowth="ExportsFuelInwardGrowth",e.SwayedByTheInvaders="SwayedByTheInvaders",e.HeavyMining="HeavyMining",e.FineSteelForToolsAndGuns="FineSteelForToolsAndGuns",e.RoyalBacking="RoyalBacking",e.MiningRush="MiningRush",e.ShadowsPartake="ShadowsPartake",e.Immense="Immense",e.Travel="Travel",e.Madness="Madness",e.Reach="Reach",e.Resilience="Resilience",e.DarkFire="DarkFire",e.Encircle="Encircle",e.Intensify="Intensify",e.Lair="Lair",e.Locus="Locus",e.Mentor="Mentor",e.Nourishing="Nourishing",e.Regrowth="Regrowth",e.SpreadingHostility="SpreadingHostility",e.Stranded="Stranded",e.Tactician="Tactician",e.Transforming="Transforming",e.Unconstrained="Unconstrained",e.Violence="Violence",e.Warrior="Warrior",e.DownwardSpiral="DownwardSpiral",e.MemoryFadesToDust="MemoryFadesToDust",e.BackAgainstTheWall="BackAgainstTheWall",e.AllThingsWeaken="AllThingsWeaken",e.PowerCorrodesTheSpirit="PowerCorrodesTheSpirit",e.UntendedLandCrumbles="UntendedLandCrumbles",e.AttenuatedEssence="AttenuatedEssence",e.BlightCorrodesTheSpirit="BlightCorrodesTheSpirit",e.IntensifyingExploitation="IntensifyingExploitation",e.TheBorderOfLifeAndDeath="TheBorderOfLifeAndDeath",e.DistantExploration="DistantExploration",e.FearfulMobs="FearfulMobs",e.SpurnTheInvaders="SpurnTheInvaders",e.TeachTheInvaders="TeachTheInvaders",e.HeavyFarming="HeavyFarming",e.IncreasingAggression="IncreasingAggression",e.DestroyTheUnnatural="DestroyTheUnnatural",e.CurseTheTongues="CurseTheTongues",e.PromisingFarmland="PromisingFarmland",e.WeaveLies="WeaveLies",e.StrangeTalesAttractExplorers="StrangeTalesAttractExplorers",e.Fortification="Fortification",e.TightknitCommunities="TightknitCommunities",e.UrbanDevelopment="UrbanDevelopment",e.WaveOfReconnaissance="WaveOfReconnaissance",e.WellpreparedExplorers="WellpreparedExplorers",e.YearsOfLittleRain="YearsOfLittleRain",e.BureaucratsAdjustFunding="BureaucratsAdjustFunding",e.RansackAndRun="RansackAndRun",e.DepletedSoil="DepletedSoil",e.CivicEngagement="CivicEngagement",e.CooperationAmongTowns="CooperationAmongTowns",e.IgnoreTheirInterest="IgnoreTheirInterest",e.ChangeAndHelp="ChangeAndHelp",e.EagerExplorers="EagerExplorers",e.Xenophobia="Xenophobia",e.Fortuneseekers="Fortuneseekers",e.TheLandsBountyExhausted="TheLandsBountyExhausted",e.CreateUnnervingDistractions="CreateUnnervingDistractions",e.BeastsPreyOnTheInjured="BeastsPreyOnTheInjured",e.CoordinatedStrikes="CoordinatedStrikes",e.InvestedAristocracy="InvestedAristocracy",e.ForeignDignitariesVisit="ForeignDignitariesVisit",e.LetDestructionHaveItsDay="LetDestructionHaveItsDay",e.FortifyTheResilienceOfLife="FortifyTheResilienceOfLife",e.MapmakersChartTheWild="MapmakersChartTheWild",e.NoBraveryWithoutNumbers="NoBraveryWithoutNumbers",e.CourageOfTheCrowd="CourageOfTheCrowd",e.TerrorBreedsAggression="TerrorBreedsAggression",e.PullTogetherInAdversity="PullTogetherInAdversity",e.RelentlessOptimism="RelentlessOptimism",e.LeaveItsStrength="LeaveItsStrength",e.CraftAGreatWardingUntilEndOfTurn="CraftAGreatWardingUntilEndOfTurn",e.CraftAGreatWardingOngoing="CraftAGreatWardingOngoing",e.ResourcefulPopulace="ResourcefulPopulace",e.StripTheLandBare="StripTheLandBare",e.VoraciousConsumption="VoraciousConsumption",e.EngageOnTheirOwnTerms="EngageOnTheirOwnTerms",e.FocusYourWill="FocusYourWill",e.LayAmbushes="LayAmbushes",e.TemporaryTruce="TemporaryTruce",e.TemporaryCaution="TemporaryCaution",e.TheFrontierCalls="TheFrontierCalls",e.SelfSacrificeBuysTime="SelfSacrificeBuysTime",e.AccumulatedDevastation="AccumulatedDevastation",e.InfluxOfSettlers="InfluxOfSettlers",e.NetworkOfSupportAndTrade="NetworkOfSupportAndTrade",e.WidespreadHunting="WidespreadHunting",e.FinalHarvest="FinalHarvest",e.HeadOffTheProblems="HeadOffTheProblems",e.StrengthFromTrade="StrengthFromTrade",e.CannyDefense="CannyDefense",e.CarefulDefense="CarefulDefense",e.CoordinatedDefense="CoordinatedDefense",e.IrregularOutbreaks="IrregularOutbreaks",e.LingeringPlagues="LingeringPlagues",e.Stricken="Stricken",e.AvoidTheDahanI="AvoidTheDahanI",e.AvoidTheDahanII="AvoidTheDahanII",e.AvoidTheDahanIII="AvoidTheDahanIII",e.BeliefTakesRootI="BeliefTakesRootI",e.BeliefTakesRootII="BeliefTakesRootII",e.DahanOnTheirGuardI="DahanOnTheirGuardI",e.DahanOnTheirGuardII="DahanOnTheirGuardII",e.DahanOnTheirGuardIII="DahanOnTheirGuardIII",e.OverseasTradeSeemSaferI="OverseasTradeSeemSaferI",e.OverseasTradeSeemSaferII="OverseasTradeSeemSaferII",e.OverseasTradeSeemSaferIII="OverseasTradeSeemSaferIII",e.TradeSuffersI="TradeSuffersI",e.DemoralizedI="DemoralizedI",e.DemoralizedII="DemoralizedII",e.DemoralizedIII="DemoralizedIII",e.ExplorersAreReluctantI="ExplorersAreReluctantI",e.ExplorersAreReluctantII="ExplorersAreReluctantII",e.ExplorersAreReluctantIII="ExplorersAreReluctantIII",e.ImmigrationSlowsI="ImmigrationSlowsI",e.ImmigrationSlowsII="ImmigrationSlowsII",e.ImmigrationSlowsIII="ImmigrationSlowsIII",e.PanickedByWildBeastsII="PanickedByWildBeastsII",e.PanickedByWildBeastsIII="PanickedByWildBeastsIII",e.PlanForDepartureII="PlanForDepartureII",e.PlanForDepartureIII="PlanForDepartureIII",e.QuarantineI="QuarantineI",e.QuarantineII="QuarantineII",e.QuarantineIII="QuarantineIII",e.CommunitiesInDisarrayI="CommunitiesInDisarrayI",e.CommunitiesInDisarrayII="CommunitiesInDisarrayII",e.CommunitiesInDisarrayIII="CommunitiesInDisarrayIII",e.BesetByManyTroublesI="BesetByManyTroublesI",e.BesetByManyTroublesII="BesetByManyTroublesII",e.BesetByManyTroublesIII="BesetByManyTroublesIII",e.DauntedByTheDahan="DauntedByTheDahan",e.DistractedByLocalTroublesII="DistractedByLocalTroublesII",e.DistractedByLocalTroublesIII="DistractedByLocalTroublesIII",e.RoilingWaters="RoilingWaters",e.SereneWaters="SereneWaters",e.DreamOfTheUntouchedLand="DreamOfTheUntouchedLand",e.DreamOfTheUntouchedLandSkipBoard="DreamOfTheUntouchedLandSkipBoard",e.BargainsOfPowerAndProtection="BargainsOfPowerAndProtection",e.BargainsOfCoursingPath="BargainsOfCoursingPath",e.Blitz="Blitz",e.DahanInsurrection="DahanInsurrection",e.GuardTheIslesHeart="GuardTheIslesHeart",e.RitualsOfTerror="RitualsOfTerror",e.BronzeLoopSpirit="BronzeLoopSpirit",e.BronzeLoopInvader="BronzeLoopInvader",e.GlowingEmberInvader="GlowingEmberInvader",e.GlowingEmberSpirit="GlowingEmberSpirit",e.JaggedTooth="JaggedTooth",e.LizardsScale="LizardsScale",e.RibBone="RibBone",e.WindWovenRope="WindWovenRope",e.JaggedToothInvader="JaggedToothInvader",e.JaggedToothSpirit="JaggedToothSpirit",e.LizardsScaleInvader="LizardsScaleInvader",e.LizardScaleSpirit="LizardScaleSpirit",e.RibBoneInvader="RibBoneInvader",e.RibBoneSpirit="RibBoneSpirit",e.WindWovenRopeInvader="WindWovenRopeInvader",e.WindWovenRopeSpirit="WindWovenRopeSpirit",e.PowersLongForgotten="PowersLongForgotten",e.RitualsOfTheDestroyingFlame="RitualsOfTheDestroyingFlame",e.SecondWave="SecondWave",e.WardTheShores="WardTheShores",e.ADiversityOfSpirits="ADiversityOfSpirits",e.VariedTerrain="VariedTerrain",e.DespicableTheft="DespicableTheft",e.ElementalInvocation="ElementalInvocation",e.TheGreatRiver="TheGreatRiver",e.DestinyUnfold="DestinyUnfold",e.SurgesOfColonization="SurgesOfColonization",e.Bringer="Bringer",e.Earth="Earth",e.GreenChokeTheLandWithGreen="GreenChokeTheLandWithGreen",e.GreenSteadyRegeneration="GreenSteadyRegeneration",e.Lightning="Lightning",e.Ocean="Ocean",e.River="River",e.Shadows="Shadows",e.Thunderspeaker="Thunderspeaker",e.FangsAllyOfTheBeasts="Fangs",e.FangsCallForthPredators="FangsCallForthPredators",e.Keeper="Keeper",e.Downpour="Downpour",e.Finder="Finder",e.Serpent="Serpent",e.Wildfire="Wildfire",e.Eyes="Eyes",e.Heat="Heat",e.Mud="Mud",e.Teeth="Teeth",e.Whirlwind="Whirlwind",e.Fractured="Fractured",e.LureHomeOfTheIslandsHeart="LureHomeOfTheIslandsHeart",e.LureEnthrallTheForeignExplorers="LureEnthrallTheForeignExplorers",e.ManyMinds="ManyMinds",e.MemoryKnowledge="Memory",e.MemoryInsight="MemoryInsight",e.ShroudGatherPowerFromTheCoolAndDark="ShroudGatherPowerFromTheCoolAndDark",e.ShroudMistsShiftAndFlow="ShroudMistsShiftAndFlow",e.SlowAndSilentDeath="SlowAndSilentDeath",e.Starlight="Starlight",e.Stone="Stone",e.Trickster="Trickster",e.Vengeance="Vengeance",e.Volcano="Volcano",e.Behemoth="Behemoth",e.Darkness="Darkness",e.Earthquakes="Earthquakes",e.Gaze="Gaze",e.HearthVigil="HearthVigil",e.Roots="Roots",e.Voice="Voice",e.WoundedSeekingAPathTowardsHealing="WoundedSeekingAPathTowardsHealing",e.Downgrade="Downgrade"}(In||(In={})),function(e){e.ActionEnds="ActionEnds",e.AddTwoExtraBroken="AddTwoExtraBroken",e.AdjustBuildPlans="AdjustBuildPlans",e.AdjustCardPlays="AdjustCardPlays",e.AdjustCollectiveDahanRavageDamage="AdjustCollectiveDahanRavageDamage",e.AdjustCollectiveInvaderRavageDamage="AdjustCollectiveInvaderRavageDamage",e.AdjustDamageDuringRavage="AdjustDamageDuringRavage",e.AdjustDamage="AdjustDamage",e.AdjustGainingPowers="AdjustGainingPowers",e.AdjustHealth="AdjustHealth",e.AdjustIndividualInvaderRavageDamage="AdjustIndividualInvaderRavageDamage",e.AdjustLandHealth="AdjustLandHealth",e.AdjustNumberOfActions="AdjustNumberOfActions",e.AdjustNumberOfExploreCards="AdjustNumberOfExploreCards",e.AdjustPlayPower="AdjustPlayPower",e.AdjustPowerSpeedOnPlay="AdjustPowerSpeedOnPlay",e.AdjustRemovePiece="AdjustRemovePiece",e.AdjustSetupPresence="AdjustSetupPresence",e.AfterAddingPiece="AfterAddingPiece",e.AfterAddingSlowHealingBlight="AfterAddingSlowHealingBlight",e.AfterAddingStrife="AfterAddingStrife",e.AfterAdvancingCards="AfterAdvancingCards",e.AfterAdversaryActionsOnEachBoard="AfterAdversaryActionsOnEachBoard",e.AfterChangingInvaderDeck="AfterChangingInvaderDeck",e.AfterChangingSpeed="AfterChangingSpeed",e.AfterDahanDestroyedInRavage="AfterDahanDestroyedInRavage",e.AfterDrawingBlightCard="AfterDrawingBlightCard",e.AfterEventPhase="AfterEventPhase",e.AfterFastPhase="AfterFastPhase",e.AfterFearDeckIsDecreasing="AfterFearDeckIsDecreasing",e.AfterGainingEnergyFromTracks="AfterGainingEnergyFromTracks",e.AfterGainingPowers="AfterGainingPowers",e.AfterGameEnds="AfterGameEnds",e.AfterGrowth="AfterGrowth",e.AfterInitialExplore="AfterInitialExplore",e.AfterInvaderPhase="AfterInvaderPhase",e.AfterLandChangesAmountOfPresence="AfterLandChangesAmountOfPresence",e.AfterMoving="AfterMoving",e.AfterPlayPowers="AfterPlayPowers",e.AfterPowerAddsDefense="AfterPowerAddsDefense",e.AfterPowerGenerateFearInLand="AfterPowerGenerateFearInLand",e.AfterPowerLeavesPlay="AfterPowerLeavesPlay",e.AfterRavagingDamageLand="AfterRavagingDamageLand",e.AfterRavaging="AfterRavaging",e.AfterReachingTerrorLevel="AfterReachingTerrorLevel",e.AfterRemovePiece="AfterRemovePiece",e.AfterReplacePieces="AfterReplacePieces",e.AfterResolvingBuildCard="AfterResolvingBuildCard",e.AfterResolvingEventCard="AfterResolvingEventCard",e.AfterResolvingExploreCard="AfterResolvingExploreCard",e.AfterResolvingLandTargetingPower="AfterResolvingLandTargetingPower",e.AfterResolvingRavageCard="AfterResolvingRavageCard",e.AfterSetupPresence="AfterSetupPresence",e.AfterSlowPhase="AfterSlowPhase",e.AfterSuccessfulBuild="AfterSuccessfulBuild",e.AfterSuccessfulExplore="AfterSuccessfulExplore",e.AfterTargetingLand="AfterTargetingLand",e.AfterTargetingLands="AfterTargetingLands",e.AfterTargetingSource="AfterTargetingSource",e.AfterTheNormalBuildStep="AfterTheNormalBuildStep",e.AfterTheNormalExploreStep="AfterTheNormalExploreStep",e.AfterTheNormalRavageStep="AfterTheNormalRavageStep",e.AfterUncoveringTrack="AfterUncoveringTrack",e.AlterInvaderActionInLand="AlterInvaderActionInLand",e.AnyActionEnds="AnyActionEnds",e.AnyActionStarts="AnyActionStarts",e.AtTimePassesBegin="AtTimePassesBegin",e.AtTimePassesEnds="AtTimePassesEnds",e.BeastsCountAsBadlands="BeastsCountAsBadlands",e.BeforeAdvancingCards="BeforeAdvancingCards",e.BeforeAdversaryActionsOnEachBoard="BeforeAdversaryActionsOnEachBoard",e.BeforeInitialExplore="BeforeInitialExplore",e.BeforeMoving="BeforeMoving",e.BeforePayEnergy="BeforePayEnergy",e.BeforePlayPowers="BeforePlayPowers",e.BeforeRavageStep="BeforeRavageStep",e.BeforeResolvingInnate="BeforeResolvingInnate",e.BeforeResolvingInvaderCard="BeforeResolvingInvaderCard",e.BeforeRevealingBlightCard="BeforeRevealingBlightCard",e.BeforeSetupPresence="BeforeSetupPresence",e.BeforeSuccessfulBuild="BeforeSuccessfulBuild",e.BeforeSuccessfulExplore="BeforeSuccessfulExplore",e.BlightAlwaysCascadesInLand="BlightAlwaysCascadesInLand",e.BlightedIslandPhase="BlightedIslandPhase",e.BoardHasExtraLocation="BoardHasExtraLocation",e.BuildCardsAffectLandsWithoutInvaders="BuildCardsAffectLandsWithoutInvaders",e.BuildOrderMatters="BuildOrderMatters",e.CanPlayCardsWithoutCost="CanPlayCardsWithoutCost",e.ChangeSpeedOfPower="ChangeSpeedOfPower",e.DahanFightBeforeInvaders="DahanFightBeforeInvaders",e.DahanFightSimultaneously="DahanFightSimultaneously",e.DamageBoost="DamageBoost",e.DamageIgnoreHealthBonuses="DamageIgnoreHealthBonuses",e.DefendFromGame="DefendFromGame",e.DefendFromSpirits="DefendFromSpirits",e.DoesNotParticipateInRavage="DoesNotParticipateInRavage",e.Elements="Elements",e.EnergyDebt="EnergyDebt",e.Escalation="Escalation",e.ExploreOrderMatters="ExploreOrderMatters",e.ExplorersFightWithDahan="ExplorersFightWithDahan",e.ExtraAction="ExtraAction",e.ExtraAdjacency="ExtraAdjacency",e.ExtraBeastAdjacency="ExtraBeastAdjacency",e.ExtraBlightFromDamage="ExtraBlightFromDamage",e.ExtraBoard="ExtraBoard",e.ExtraCardDrawAmount="ExtraCardDrawAmount",e.ExtraCardKeepAmount="ExtraCardKeepAmount",e.ExtraCardPlaysCost="ExtraCardPlaysCost",e.ExtraCardPlaysForDamageAndDestroy="ExtraCardPlaysForDamageAndDestroy",e.ExtraCardPlays="ExtraCardPlays",e.ExtraDefense="ExtraDefense",e.ExtraExploreDistance="ExtraExploreDistance",e.ExtraLandNumber="ExtraLandNumber",e.ExtraMove="ExtraMove",e.ExtraRangeToLand="ExtraRangeToLand",e.ExtraRange="ExtraRange",e.ExtraRemove="ExtraRemove",e.ExtraScore="ExtraScore",e.Flooded="Flooded",e.GlobalReminder="GlobalReminder",e.HasSacredSiteOf="HasSacredSiteOf",e.HighImmigration="HighImmigration",e.IgnoreOneStrife="IgnoreOneStrife",e.IgnoreWildsDuringExplore="IgnoreWildsDuringExplore",e.InTargetLand="InTargetLand",e.Isolated="Isolated",e.LandIsExploringSource="LandIsExploringSource",e.LocationIsOcean="LocationIsOcean",e.LocationIsTerrain="LocationIsTerrain",e.LossCondition="LossCondition",e.MayChangeSpeedOfPower="MayChangeSpeedOfPower",e.MayGrowWithDestroyedPresence="MayGrowWithDestroyedPresence",e.MayIgnoreRangeWhenTargetingLand="MayIgnoreRangeWhenTargetingLand",e.MayIgnoreTargetFilterWhenTargetingLand="MayIgnoreTargetFilterWhenTargetingLand",e.MayRepeatPowercard="MayRepeatPowercard",e.MayShift="MayShift",e.MayTargetTheEndlessDark="MayTargetTheEndlessDark",e.MayUseOtherSpiritPresenceForTargeting="MayUseOtherSpiritPresenceForTargeting",e.MiningLandsCauseRavageActions="MiningLandsCauseRavageActions",e.MoveWithoutWaiting="MoveWithoutWaiting",e.Now="Now",e.OceanIsLandForBlight="OceanIsLandForBlight",e.OceanIsLand="OceanIsLand",e.OnSetupAfterAddingInvaders="OnSetupAfterAddingInvaders",e.OrderOfRemoveAllMightMatter="OrderOfRemoveAllMightMatter",e.OverrideMatchesInvaderCard="OverrideMatchesInvaderCard",e.PermanentHighImmigration="PermanentHighImmigration",e.PowerCostExtraTime="PowerCostExtraTime",e.PowerHasAllThresholds="PowerHasAllThresholds",e.PresenceCountsAsBadlandsOrBeasts="PresenceCountsAsBadlandsOrBeasts",e.PreventAddAnyPresence="PreventAddAnyPresence",e.PreventAddBlightInSetup="PreventAddBlightInSetup",e.PreventAddBlight="PreventAddBlight",e.PreventAddPiece="PreventAddPiece",e.PreventAddPresence="PreventAddPresence",e.PreventAddRemovedBlightToBlightCard="PreventAddRemovedBlightToBlightCard",e.PreventAdversaryActionOnBoard="PreventAdversaryActionOnBoard",e.PreventBlightDestroyingPresence="PreventBlightDestroyingPresence",e.PreventCascade="PreventCascade",e.PreventChangeSpeedOfPower="PreventChangeSpeedOfPower",e.PreventClearDamage="PreventClearDamage",e.PreventDamagingPiece="PreventDamagingPiece",e.PreventDiseasePreventingBuilds="PreventDiseasePreventingBuilds",e.PreventEscalation="PreventEscalation",e.PreventExploreSourceInLand="PreventExploreSourceInLand",e.PreventFearGeneration="PreventFearGeneration",e.PreventForgetPowercard="PreventForgetPowercard",e.PreventGainEnergy="PreventGainEnergy",e.PreventInvaderActionInLand="PreventInvaderActionInLand",e.PreventMovePiece="PreventMovePiece",e.PreventRemovalEffects="PreventRemovalEffects",e.PreventRemoveBlightFromBlightCard="PreventRemoveBlightFromBlightCard",e.PreventRemoveBoard="PreventRemoveBoard",e.PreventRemovePiece="PreventRemovePiece",e.PreventReplacePiece="PreventReplacePiece",e.PreventSlowPowers="PreventSlowPowers",e.PreventTargetLand="PreventTargetLand",e.Reminder="Reminder",e.PreventTargetPiece="PreventTargetPiece",e.PreventTerrorLevelAndResolveFearCards="PreventTerrorLevelAndResolveFearCards",e.RemoveFearBasedVictory="RemoveFearBasedVictory",e.RepeatPowerCard="RepeatPowerCard",e.ShowLossCondition="ShowLossCondition",e.SkipNextBuildCard="SkipNextBuildCard",e.SkipNextExploreCard="SkipNextExploreCard",e.SkipNextRavageCard="SkipNextRavageCard",e.SpiritHasExtraGrowthOptions="SpiritHasExtraGrowthOptions",e.StartOfRavageStep="StartOfRavageStep",e.StartOfSlowPhase="StartOfSlowPhase",e.StartOfSpiritPhase="StartOfSpiritPhase",e.TargetSpirit="TargetSpirit",e.TimePasses="TimePasses",e.TreatAllORsAsANDs="TreatAllORsAsANDs",e.TreatElementAsElement="TreatElementAsElement",e.TreatElementsAsElements="TreatElementsAsElements",e.UpToMustBeUsedAtMaximum="UpToMustBeUsedAtMaximum",e.WhenAddingBlight="WhenAddingBlight",e.WinCondition="WinCondition"}(Pn||(Pn={}));const Sn={name:"Downward Spiral",set:gn.Base,blightPerPlayer:5,requireEvents:!1,effects:[{textArea:[.245,.331],text:"At the start of each Invader Phase each Spirit destroys 1 of their <presence>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffect({effectId:In.DownwardSpiral,[Pn.BlightedIslandPhase]:async()=>{await e.eachSpirit((a=>e.doBlightCardAction((async()=>{await a.destroyPresence(1)}))))},[Pn.GlobalReminder]:()=>({icon:"<blight>",ongoing:!0})})}}]};var En;!function(e){e.Minor="Minor",e.Major="Major",e.Unique="Unique",e.Innate="Innate",e.NonMinorCard="NonMinorCard",e.NonMajorCard="NonMajorCard",e.NonUniqueCard="NonUniqueCard",e.AnyCard="AnyCard",e.Any="Any"}(En||(En={}));const On={name:"Memory Fades to Dust",set:gn.Base,blightPerPlayer:4,requireEvents:!1,effects:[{textArea:[.242,.373],text:"At the start of each Invader Phase each Spirit Forgets a Power or destroys 1 of their <presence>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffect({effectId:In.MemoryFadesToDust,[Pn.BlightedIslandPhase]:async()=>{await e.eachSpirit((a=>e.doBlightCardAction((()=>e.chooseBetween({effects:[{actionId:"ForgetPower",text:"Forget a Power.",[Pn.Now]:async()=>{await a.forgetPowers()},condition:()=>a.hasAtLeastNonBlessed(1,En.AnyCard)},{actionId:"DestroyPresence",text:"Destroy 1 of your <presence>.",[Pn.Now]:async()=>{await a.destroyPresence(1)},condition:()=>a.presence().count>0}]})))))},[Pn.GlobalReminder]:()=>({icon:"<blight>",ongoing:!0})})}}]};var kn;!function(e){e.Unique="Unique",e.Minor="Minor",e.Major="Major",e.Innate="Innate",e.Scenario="Scenario"}(kn||(kn={}));const Cn={name:"Aid From Lesser Spirit",set:gn.BranchAndClaw,blightPerPlayer:2,requireEvents:!0,effects:[{textArea:[.25,.463],text:"Immediately, draw 1 Minor Power Card per player plus 1 more. Give 1 to each Spirit. They may be used every turn as if played, but cost no Card Plays/Energy. Place unselected card in Minor Powers discard pile.",[Pn.Now]:async({$:e})=>{let a=[];await e.eachSpirit((t=>e.doBlightCardAction((async()=>{const n=await t.gainPowerCard({powerType:kn.Minor,drawAmount:e.spiritCount+1,discardAfter:2===a.length,gifted:!0,fromSelection:a.length>0?a:void 0});a=n.notChosen,await n.chosen[0].bless()}))))}}]},Dn={name:"A Pall Upon The Land",set:gn.BranchAndClaw,blightPerPlayer:3,requireEvents:!0,effects:[{textArea:[.248,.334],text:"Immediately, on each board: destroy 1 <presence> and remove 1 <town>.",[Pn.Now]:async({$:e})=>{await e.doBlightCardActionOnEachBoard((async a=>{await a.presence().pickOne((async e=>{await e.destroy()}),{text:"Destroy 1 <presence>.",highlightBoards:[a],noOptions:`On board ${a.name}: No <presence> to remove.`}),await a.forPiecesThatIs(e.Town).pickOne((async e=>{await e.remove()}),{text:"Remove 1 <town>.",highlightBoards:[a],noOptions:`On board ${a.name}: No <town> to remove.`})}))}}]},Bn={name:"Back Against The Wall",set:gn.BranchAndClaw,blightPerPlayer:2,requireEvents:!0,effects:[{textArea:[.245,.332],text:"Every Spirit Phase each Spirit gains +1 Energy and +1 Card Play.",[Pn.Now]:async({$:e})=>{const a=async()=>{await e.eachSpirit((a=>e.doBlightCardAction((async()=>{await a.gainEnergy(1),await a.gainCardPlays(1)}))))};await e.clickToContinue(),e.spiritPhase&&await a(),await e.addSubEffect({effectId:In.BackAgainstTheWall,[Pn.StartOfSpiritPhase]:async()=>{await e.clickToContinue(),await a()},[Pn.GlobalReminder]:()=>({icon:"<blight>",ongoing:!0})})}}]};var Ln;!function(e){e.Badlands="Badlands",e.Beasts="Beasts",e.Blight="Blight",e.City="City",e.Dahan="Dahan",e.Deeps="Deeps",e.Disease="Disease",e.Explorer="Explorer",e.FlameMarker="FlameMarker",e.HiddenLocation="HiddenLocation",e.IncarnaBehemoth="IncarnaBehemoth",e.IncarnaDarkness="IncarnaDarkness",e.IncarnaLair="IncarnaLair",e.IncarnaLocus="IncarnaLocus",e.IncarnaRoots="IncarnaRoots",e.IncarnaVoice="IncarnaVoice",e.IncarnaWarrior="IncarnaWarrior",e.Omen="Omen",e.Presence="Presence",e.Quake="Quake",e.Strife="Strife",e.Thief="Thief",e.Town="Town",e.Vitality="Vitality",e.WardingPattern="WardingPattern",e.Wilds="Wilds"}(Ln||(Ln={}));const Fn={name:"Disintegrating Ecosystem",set:gn.BranchAndClaw,blightPerPlayer:5,requireEvents:!0,effects:[{textArea:[.248,.34],text:"Immediately, on each board: Destroy 1 <beasts>, then add 1 <blight> to a land with <town>/<city>.",[Pn.Now]:async({$:e})=>{await e.doBlightCardActionOnEachBoard((async a=>{await e.addSubEffect({effects:[{highlightBoards:[a],textArea:[.25,.29],text:"Destroy 1 <beasts>",[Pn.Now]:()=>e.countPieceOnlyIfHavingPiece(Ln.Beasts,(()=>a.forPiecesThatIs(e.Beasts))).pickOne((async e=>{await e.destroy()}),{highlightBoards:[a],noOptions:`On board ${a.name}: No <beasts> to destroy.`})},{highlightBoards:[a],textArea:[.295,.335],text:"Add 1 <blight> to a land with <town>/<city>.",[Pn.Now]:async()=>{await a.inLandsWith(e.TownOrCity).pickOne((async e=>{await e.addBlight(1)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <town>/<city>.`})}}]})}))}}]},Rn={name:"Erosion Of Will",set:gn.BranchAndClaw,blightPerPlayer:3,requireEvents:!0,effects:[{textArea:[.248,.335],text:"Immediately, 2 <fear> per player. Each Spirit destroys 1 of their <presence> and loses 1 Energy.",[Pn.Now]:async({$:e})=>{await e.doBlightCardAction((async()=>{await e.clickToContinue(),await e.fear(2*e.spiritCount),await e.eachSpirit((a=>e.doBlightCardAction((async()=>{await e.addSubEffect({effects:[{textArea:[.248,.335],text:"Each Spirit destroys 1 of their <presence> and loses 1 Energy.",[Pn.Now]:async()=>{await a.destroyPresence(1),await a.loseEnergy(1)}}]})}))))}))}}]},Mn={name:"Promising Farmlands",set:gn.BranchAndClaw,blightPerPlayer:4,requireEvents:!0,effects:[{textArea:[.25,.337],text:"Immediately, on each board: Add 1 <town> and 1 <city> to an Inland land with no <town>/<city>.",[Pn.Now]:async({$:e})=>{await e.doBlightCardActionOnEachBoard((async a=>{await a.inLandsWhere((a=>a.isInland&&!a.has(e.TownOrCity))).pickOne((async a=>{await a.add(1,e.Town),await a.add(1,e.City)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No Inland lands without <town>/<city>`})}))}}]},Nn={name:"Tipping Point",banned:!0,set:gn.BranchAndClaw,blightPerPlayer:5,requireEvents:!0,effects:[{textArea:[.248,.288],text:"Immediately, destroy 3 <presence> from each Spirit.",[Pn.Now]:async({$:e})=>{await e.eachSpirit((a=>e.doBlightCardAction((async()=>{await a.destroyPresence(3)}))))}}]};var Wn;!function(e){e.DirectDestroy="DirectDestroy",e.DestroyByDamageOrBlight="DestroyByDamageOrBlight",e.DestroyByHealthChange="DestroyByHealthChange",e.Drown="Drown",e.Remove="Remove",e.Replace="Replace",e.RemoveFromGame="RemoveFromGame",e.Relocate="Relocate",e.Silent="Silent"}(Wn||(Wn={}));const $n={name:"All Things Weaken",set:gn.JaggedEarth,blightPerPlayer:3,requireEvents:!1,effects:[{textArea:[.25,.337],text:"Ongoing, starting next turn: Invaders and <dahan> have -1 Health (min. 1).",[Pn.Now]:async({$:e})=>{const a=e.turn;await e.clickToContinue(),await e.addSubEffect({effectId:In.AllThingsWeaken,[Pn.AdjustHealth]:({piece:t})=>e.turn>a&&t.isOneOf(e.Invader,e.Dahan)?-1:0,[Pn.StartOfSpiritPhase]:async()=>{e.turn===a+1&&await e.globalHealthCheck()},[Pn.GlobalReminder]:()=>({text:"Ongoing, starting next turn: Invaders and <dahan> have -1 Health (min. 1).<br><br>The land takes <blight> on 1 less Damage (normally 1).<br><br>When you add <blight>, it Destroys all <presence>/<beasts> in that land and 1 <presence> (total) in an adjacent land.",icon:"<blight>",ongoing:!0})})}},{textArea:[.289,.38],text:"The land takes <blight> on 1 less Damage (normally 1).",[Pn.Now]:async({$:e})=>{const a=e.turn;await e.clickToContinue(),await e.addSubEffect({[Pn.AdjustLandHealth]:()=>e.turn>a?-1:0})}},{textArea:[.334,.466],text:"When you add <blight>, it Destroys all <presence>/<beasts> in that land and 1 <presence> (total) in an adjacent land.",[Pn.Now]:async({$:e})=>{const a=e.turn;await e.clickToContinue(),await e.addSubEffect({[Pn.WhenAddingBlight]:async({land:t})=>{e.turn<=a||(e.dontCountAs(Ln.Beasts),e.dontCountAs(Ln.Presence),await t.piecesThatAre(e.Presence).forEach((async e=>{t.blightIsPreventedFromDestroyingPresenceOf(e.owner)||await e.remove(Wn.DestroyByDamageOrBlight)})),await t.destroyAll(e.Beasts,{removement:Wn.DestroyByDamageOrBlight}),await e.countPieceOnlyIfHavingPiece(Ln.Presence,(()=>t.adjacentPiecesInLandsWhere((e=>e.isPresence)))).pickOne((async e=>{t.blightIsPreventedFromDestroyingPresenceOf(e.owner)||await e.remove(Wn.DestroyByDamageOrBlight)}),{noOptions:"No adjacent lands with <presence>."}))}})}}]},Gn={name:"Invaders Find The Land To Their Liking",set:gn.JaggedEarth,blightPerPlayer:2,requireEvents:!1,stillHealthy:!0,effects:[{textArea:[.252,.381],text:"Immediately: If the Terror Level is I / II / III, add 1 / 1.5 / 2 Fear Markers per player to the Fear pool. (Round down at Terror Level II.)",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addFearToPool(Math.floor((.5*e.terrorLevel+.5)*e.spiritCount))}}]},Un={name:"Power Corrodes The Spirit",set:gn.JaggedEarth,blightPerPlayer:4,requireEvents:!1,effects:[{textArea:[.292,.465],text:"Each Invader Phase: Each Spirit Destroys 1 of their <presence> if they have 3 or more Power Cards in play, or have a Power Card in play costing 4 or more (printed) Energy.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffect({effectId:In.PowerCorrodesTheSpirit,[Pn.BlightedIslandPhase]:()=>e.spiritsWhich((e=>e.powerCardsInPlay.length>=3||e.powerCardsInPlay.some((e=>e.costToPlay>=4)))).forEach((a=>e.doBlightCardAction((async()=>{await a.destroyPresence(1)})))),[Pn.GlobalReminder]:()=>({icon:"<blight>",ongoing:!0})})}}]},Hn={name:"Strong Earth Shatters Slowly",set:gn.JaggedEarth,blightPerPlayer:2,requireEvents:!1,stillHealthy:!0,effects:[{textArea:[.248,.332],text:"Immediately: Each player adds 1 <blight> (from this card) to a land adjacent to <blight>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doBlightCardAction((()=>e.inLocationsWhere((a=>a.isLandForBlight&&a.hasAdjacentLocationWhere((a=>a.isLandForBlight&&a.has(e.Blight))))).pickOne((async e=>{await e.addBlight(1)}))))))}]},qn={name:"Thriving Communities",set:gn.JaggedEarth,blightPerPlayer:4,requireEvents:!0,effects:[{textArea:[.291,.388],text:"Immediately, on each board: In 4 different lands with <explorer>/<town>, Replace 1 <town> with 1 <city> or Replace 1 <explorer> with 1 <town>.",[Pn.Now]:({$:e})=>e.doBlightCardActionOnEachBoard((a=>a.inLandsWith(e.ExplorerOrTown).selectOrder().pickMultiple({amount:4,effect:{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <explorer>/<town>`},forPickedItem:async a=>{await a.piecesThatAre(e.ExplorerOrTown).pickOne((async a=>{a.isA(e.Explorer)?await a.replace([Ln.Town]):await a.replace([Ln.City])}))}})))}]},jn={name:"Unnatural Proliferation",set:gn.JaggedEarth,blightPerPlayer:3,requireEvents:!1,effects:[{textArea:[.25,.331],text:"Immediately: Each Spirit adds 1 <presence> to a land with their <presence>.",[Pn.Now]:({$:e})=>e.eachSpirit((a=>e.doBlightCardAction((async()=>{await a.addPresence()}))))},{textArea:[.332,.473],text:"On Each Board: Add 1 <dahan> to a land with <dahan>, and 2 <city> to the land with fewest <town>/<city> (min. 1).",[Pn.Now]:({$:e})=>e.doBlightCardActionOnEachBoard((async a=>{await e.addSubEffect({effects:[{highlightBoards:[a],textArea:[.335,.426],text:"Add 1 <dahan> to a land with <dahan>",[Pn.Now]:()=>a.inLandsWith(e.Dahan).pickOne((async a=>{await a.add(1,e.Dahan)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <dahan>.`})},{highlightBoards:[a],textArea:[.38,.475],text:"Add 2 <city> to the land with fewest <town>/<city> (min. 1).",[Pn.Now]:()=>a.inLandsWith(e.TownOrCity).withLeast((a=>a.numberOf(e.TownOrCity))).pickOne((async a=>{await a.add(2,e.City)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <town>/<city>.`})}]})}))}]},_n={name:"Untended Land Crumbles",set:gn.JaggedEarth,blightPerPlayer:4,requireEvents:!1,effects:[{textArea:[.292,.509],text:"Each Invader Phase: On Each Board: Add 1 <blight> to a land adjacent to <blight>. Spirits may prevent this on any/all boards; each board to be protected requires jointly paying 3 Energy or Destroying 1 <presence> from that board.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffect({effectId:In.UntendedLandCrumbles,[Pn.BlightedIslandPhase]:()=>e.onEachBoard((async a=>{await e.chooseBetween({highlightBoards:[a],effects:[{actionId:"AddBlight",textArea:[.292,.38],text:"Add 1 <blight> to a land adjacent to <blight>.",[Pn.Now]:()=>a.inLocationsWhere((a=>a.isLandForBlight&&a.hasAdjacentLocationWhere((a=>a.isLandForBlight&&a.has(e.Blight))))).pickOne((async e=>{await e.addBlight(1)})),condition:()=>a.hasOneLocationWhere((a=>a.isLandForBlight&&a.hasAdjacentLocationWhere((a=>a.isLandForBlight&&a.has(e.Blight)))))},{actionId:"PreventByEnergy",textArea:[.424,.464],text:"Prevent this by jointly paying 3 Energy.",[Pn.Now]:async()=>{await e.payEnergyJointlyAidedBy({energy:3})},condition:()=>e.playersCanJointlyPayEnergyAidedBy({energy:3})},{actionId:"PreventByDestroyingPresence",textArea:[.469,.509],text:"Prevent this by Destroying 1 <presence> from that board.",[Pn.Now]:()=>a.destroyPresence(1),condition:()=>a.numberOf(e.Presence)>=1}]})})),[Pn.GlobalReminder]:()=>({icon:"<blight>",ongoing:!0})})}}]},Vn={name:"Attenuated Essence",set:gn.NatureIncarnate,blightPerPlayer:4,requireEvents:!1,effects:[{textArea:[.248,.334],text:"Each Invader Phase: Each Spirit with at least 5 <presence> on the island Destroys 1 <presence>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffect({effectId:In.AttenuatedEssence,[Pn.BlightedIslandPhase]:()=>e.spiritsWhich((e=>e.numberOfPresenceInLands>=5)).forEach((a=>e.doBlightCardAction((async()=>{await a.destroyPresence(1)})))),[Pn.GlobalReminder]:()=>({icon:"<blight>",ongoing:!0})})}}]},Jn={name:"Blight Corrodes The Spirit",set:gn.NatureIncarnate,blightPerPlayer:4,requireEvents:!1,effects:[{textArea:[.251,.337],text:"Each Invader Phase: On Each Board, Destroy 1 <presence> in a land with <blight>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffect({effectId:In.BlightCorrodesTheSpirit,[Pn.BlightedIslandPhase]:()=>e.doBlightCardActionOnEachBoard((async a=>(await e.countPieceOptionally(Ln.Presence,(()=>a.forPiecesThatIs(e.Presence).where((a=>a.location.has(e.Blight)))))).pickOne((async e=>{await e.destroy()})))),[Pn.GlobalReminder]:()=>({icon:"<blight>",ongoing:!0})})}}]};var zn;!function(e){e.Adjacent="Adjacent",e.AnyLands="Any",e.AnyLocations="AnyLocations",e.OnThisBoard="OnThisBoard",e.Remove="Remove",e.RemoveFromGame="RemoveFromGame",e.Time="Time",e.ToAnyOcean="ToAnyOcean",e.ToOneOfYourLands="ToOneOfYourLands",e.ToClosestLegalLand="ToClosestLegalLand",e.ToThisLocation="InThisLocation",e.WithinRange="WithinRange"}(zn||(zn={}));const Yn={name:"Burn Brightest Before The End",set:gn.NatureIncarnate,blightPerPlayer:2,requireEvents:!0,effects:[{textArea:[.249,.423],text:"Immediately: Each Spirit Adds 1 <presence> to one of their lands or removes 1 <presence> from their Presence Tracks. (<presence> removed from Presence Tracks goes to the <broken> supply.)",[Pn.Now]:({$:e})=>e.eachSpirit((a=>e.doBlightCardAction((async()=>{await e.chooseBetween({effects:[{actionId:"AddToLands",text:"Add 1 <presence> to one of your lands.",[Pn.Now]:async()=>{await a.addPresence()}},{actionId:"Remove",text:"Remove 1 <presence> from your Presence Tracks.",[Pn.Now]:async()=>{await a.addPresence({locations:zn.Remove})}}]})}))))}]},Kn={name:"Intensifying Exploitation",set:gn.NatureIncarnate,blightPerPlayer:5,requireEvents:!1,effects:[{textArea:[.251,.334],text:"Ongoing, starting next turn: During Ravage Actions, Invaders deal +2 Damage (per land).",[Pn.Now]:async({$:e})=>{const a=e.turn;await e.clickToContinue(),await e.addSubEffect({effectId:In.IntensifyingExploitation,[Pn.AdjustCollectiveInvaderRavageDamage]:()=>e.turn>a?2:0,[Pn.GlobalReminder]:()=>({icon:"<blight>",ongoing:!0})})}}]},Qn={name:"Shattered Fragments Of Power",set:gn.NatureIncarnate,blightPerPlayer:2,requireEvents:!0,effects:[{textArea:[.249,.423],text:"Immediately: Draw 1 Major Power Card per Spirit plus 2 more. Each Spirit Takes 1 and gains 2 Energy. (Discard the 2 unselected cards.)",[Pn.Now]:async({$:e})=>{let a=[];await e.eachSpirit((t=>e.doBlightCardAction((async()=>{const n=await t.gainPowerCard({powerType:kn.Major,drawAmount:e.spiritCount+2,discardAfter:3===a.length,withoutForgetting:!0,fromSelection:a.length>0?a:void 0,taken:!0});a=n.notChosen,await t.gainEnergy(2)}))))}}]};var Xn;!function(e){e.AllPieces="AllPieces",e.AllPiecesButDahanPresenceAndSpiritTokens="AllPiecesButDahanPresenceAndSpiritTokens",e.Badlands="Badlands",e.BadlandsOrBeasts="BadlandsOrBeasts",e.BadlandsOrDisease="BadlandsOrDisease",e.BadlandsOrStrife="BadlandsOrStrife",e.Beasts="Beasts",e.BeastsDiseaseOrWilds="BeastsDiseaseOrWilds",e.BadlandsBeastsDiseaseOrWilds="BadlandsBeastsDiseaseOrWilds",e.BlightExplorerOrTown="BlightExplorerOrTown",e.Blight="Blight",e.City="City",e.Dahan="Dahan",e.Deeps="Deeps",e.Disease="Disease",e.Explorer="Explorer",e.ExplorerDahanOrBlight="ExplorerDahanOrBlight",e.ExplorerOrDahan="ExplorerOrDahan",e.ExplorerOrTown="ExplorerOrTown",e.ExplorerTownOrDahan="ExplorerTownOrDahan",e.ExplorerTownDahanOrBeasts="ExplorerTownDahanOrBeast",e.FlameMarker="FlameMarker",e.HiddenLocation="HiddenLocation",e.Incarna="Incarna",e.IncarnaBehemoth="IncarnaBehemoth",e.IncarnaDarkness="IncarnaDarkness",e.IncarnaLair="IncarnaLair",e.IncarnaLocus="IncarnaLocus",e.IncarnaRoots="IncarnaRoots",e.IncarnaVoice="IncarnaVoice",e.IncarnaWarrior="IncarnaWarrior",e.Invader="Invader",e.InvaderDahanPresenceOrBeast="InvaderDahanPresenceOrBeast",e.InvaderDahanOrBeast="InvaderDahanOrBeast",e.InvaderOrDahan="InvaderOrDahan",e.Omen="Omen",e.Presence="Presence",e.Quake="Quake",e.Strife="Strife",e.Thief="Thief",e.Town="Town",e.TownCityOrDahan="TownCityOrDahan",e.TownOrCity="TownOrCity",e.TownOrDahan="TownOrDahan",e.TownPresenceOrBeasts="TownPresenceOrBeasts",e.Vitality="Vitality",e.WardingPattern="WardingPattern",e.Wilds="Wilds"}(Xn||(Xn={}));const Zn={[Xn.AllPieces]:{name:"Piece",text:"piece",pieces:[Ln.Badlands,Ln.Beasts,Ln.Blight,Ln.City,Ln.Dahan,Ln.Deeps,Ln.Disease,Ln.Explorer,Ln.FlameMarker,Ln.HiddenLocation,Ln.IncarnaBehemoth,Ln.IncarnaDarkness,Ln.IncarnaLair,Ln.IncarnaLocus,Ln.IncarnaRoots,Ln.IncarnaVoice,Ln.IncarnaWarrior,Ln.Omen,Ln.Presence,Ln.Quake,Ln.Strife,Ln.Thief,Ln.Town,Ln.Vitality,Ln.WardingPattern,Ln.Wilds],includesInvaders:!0,ignoreCountAs:!0},[Xn.AllPiecesButDahanPresenceAndSpiritTokens]:{name:"Piece",text:"piece",pieces:[Ln.Blight,Ln.City,Ln.Explorer,Ln.FlameMarker,Ln.HiddenLocation,Ln.IncarnaBehemoth,Ln.IncarnaDarkness,Ln.IncarnaLair,Ln.IncarnaLocus,Ln.IncarnaRoots,Ln.IncarnaVoice,Ln.IncarnaWarrior,Ln.Omen,Ln.Thief,Ln.Town,Ln.WardingPattern],includesInvaders:!0,ignoreCountAs:!0},[Xn.Incarna]:{name:"Incarna",text:"incarna",pieces:[Ln.IncarnaBehemoth,Ln.IncarnaDarkness,Ln.IncarnaLair,Ln.IncarnaLocus,Ln.IncarnaRoots,Ln.IncarnaVoice,Ln.IncarnaWarrior],includesInvaders:!1,ignoreCountAs:!0},[Xn.BeastsDiseaseOrWilds]:{name:"Beasts, Disease or Wilds",text:"<beasts>/<disease>/<wilds>",pieces:[Ln.Beasts,Ln.Disease,Ln.Wilds],includesInvaders:!1,ignoreCountAs:!1},[Xn.BadlandsBeastsDiseaseOrWilds]:{name:"Badlands, Beasts, Disease or Wilds",text:"<badlands>/<beasts>/<disease>/<wilds>/<strife>",pieces:[Ln.Badlands,Ln.Beasts,Ln.Disease,Ln.Wilds,Ln.Strife],includesInvaders:!1,ignoreCountAs:!1},[Xn.Badlands]:{name:"Badlands",text:"<badlands>",pieces:[Ln.Badlands],includesInvaders:!1,ignoreCountAs:!1},[Xn.BadlandsOrBeasts]:{name:"Badlands or Beasts",text:"<badlands>/<beasts>",pieces:[Ln.Badlands,Ln.Beasts],includesInvaders:!1,ignoreCountAs:!1},[Xn.BadlandsOrDisease]:{name:"Badlands or Disease",text:"<badlands>/<disease>",pieces:[Ln.Badlands,Ln.Disease],includesInvaders:!1,ignoreCountAs:!1},[Xn.BadlandsOrStrife]:{name:"Badlands or Strife",text:"<badlands>/<strife>",pieces:[Ln.Badlands,Ln.Strife],includesInvaders:!1,ignoreCountAs:!1},[Xn.Beasts]:{name:"Beasts",text:"<beasts>",pieces:[Ln.Beasts],includesInvaders:!1,ignoreCountAs:!1},[Xn.Blight]:{name:"Blight",text:"<blight>",pieces:[Ln.Blight],includesInvaders:!1,ignoreCountAs:!0},[Xn.BlightExplorerOrTown]:{name:"Blight, Explorer or Town",text:"<blight>/<explorer>/<town>",pieces:[Ln.Blight,Ln.Explorer,Ln.Town],includesInvaders:!0,ignoreCountAs:!1},[Xn.City]:{name:"City",text:"<city>",pieces:[Ln.City],includesInvaders:!0,ignoreCountAs:!0},[Xn.Dahan]:{name:"Dahan",text:"<dahan>",pieces:[Ln.Dahan],includesInvaders:!1,ignoreCountAs:!0},[Xn.Deeps]:{name:"Deeps",text:"<deeps>",pieces:[Ln.Deeps],includesInvaders:!1,ignoreCountAs:!0},[Xn.Disease]:{name:"Disease",text:"<disease>",pieces:[Ln.Disease],includesInvaders:!1,ignoreCountAs:!0},[Xn.Explorer]:{name:"Explorer",text:"<explorer>",pieces:[Ln.Explorer],includesInvaders:!0,ignoreCountAs:!1},[Xn.ExplorerDahanOrBlight]:{name:"Explorer / Dahan / Blight",text:"<explorer>/<dahan>/<blight>",pieces:[Ln.Explorer,Ln.Dahan,Ln.Blight],includesInvaders:!0,ignoreCountAs:!1},[Xn.ExplorerOrDahan]:{name:"Explorer / Dahan",text:"<explorer>/<dahan>",pieces:[Ln.Explorer,Ln.Dahan],includesInvaders:!0,ignoreCountAs:!1},[Xn.ExplorerOrTown]:{name:"Explorer / Town",text:"<explorer>/<town>",pieces:[Ln.Explorer,Ln.Town],includesInvaders:!0,ignoreCountAs:!1},[Xn.ExplorerTownOrDahan]:{name:"Explorer / Town / Dahan",text:"<explorer>/<town>/<dahan>",pieces:[Ln.Explorer,Ln.Town,Ln.Dahan],includesInvaders:!0,ignoreCountAs:!1},[Xn.ExplorerTownDahanOrBeasts]:{name:"Explorer / Town / Dahan / Beasts",text:"<explorer>/<town>/<dahan>/<beasts>",pieces:[Ln.Explorer,Ln.Town,Ln.Dahan,Ln.Beasts],includesInvaders:!0,ignoreCountAs:!1},[Xn.FlameMarker]:{name:"FlameMarker",text:"Flame Marker",pieces:[Ln.FlameMarker],includesInvaders:!1,ignoreCountAs:!0},[Xn.HiddenLocation]:{name:"Hidden Location",text:"Hidden Location",pieces:[Ln.HiddenLocation],includesInvaders:!1,ignoreCountAs:!0},[Xn.IncarnaBehemoth]:{name:"Incarna",text:"<incarna-behemoth>",pieces:[Ln.IncarnaBehemoth],includesInvaders:!1,ignoreCountAs:!0},[Xn.IncarnaDarkness]:{name:"Incarna",text:"<incarna-darkness>",pieces:[Ln.IncarnaDarkness],includesInvaders:!1,ignoreCountAs:!0},[Xn.IncarnaLair]:{name:"Incarna",text:"<incarna-lair>",pieces:[Ln.IncarnaLair],includesInvaders:!1,ignoreCountAs:!0},[Xn.IncarnaLocus]:{name:"Incarna",text:"<incarna-locus>",pieces:[Ln.IncarnaLocus],includesInvaders:!1,ignoreCountAs:!0},[Xn.IncarnaRoots]:{name:"Incarna",text:"<incarna-roots>",pieces:[Ln.IncarnaRoots],includesInvaders:!1,ignoreCountAs:!0},[Xn.IncarnaVoice]:{name:"Incarna",text:"<incarna-voice>",pieces:[Ln.IncarnaVoice],includesInvaders:!1,ignoreCountAs:!0},[Xn.IncarnaWarrior]:{name:"Incarna",text:"<incarna-warrior>",pieces:[Ln.IncarnaWarrior],includesInvaders:!1,ignoreCountAs:!0},[Xn.Invader]:{name:"Invader",text:"Invader",pieces:[Ln.Explorer,Ln.Town,Ln.City],includesInvaders:!0,ignoreCountAs:!1},[Xn.InvaderDahanPresenceOrBeast]:{name:"Invader / Dahan / Presence / Beasts",text:"Invader or <dahan>/<presence>/<beasts>",pieces:[Ln.Explorer,Ln.Town,Ln.City,Ln.Dahan,Ln.Presence,Ln.Beasts],includesInvaders:!0,ignoreCountAs:!1},[Xn.InvaderDahanOrBeast]:{name:"Invader / Dahan / Beasts",text:"Invader or <dahan>/<beasts>",pieces:[Ln.Explorer,Ln.Town,Ln.City,Ln.Dahan,Ln.Beasts],includesInvaders:!0,ignoreCountAs:!1},[Xn.InvaderOrDahan]:{name:"Invader / Dahan",text:"Invader or <dahan>",pieces:[Ln.Explorer,Ln.Town,Ln.City,Ln.Dahan],includesInvaders:!0,ignoreCountAs:!1},[Xn.Omen]:{name:"Omen",text:"Omen",pieces:[Ln.Omen],includesInvaders:!1,ignoreCountAs:!0},[Xn.Presence]:{name:"Presence",text:"<presence>",pieces:[Ln.Presence],includesInvaders:!1,ignoreCountAs:!1},[Xn.Quake]:{name:"Quake",text:"<quake>",pieces:[Ln.Quake],includesInvaders:!1,ignoreCountAs:!0},[Xn.Strife]:{name:"Strife",text:"<strife>",pieces:[Ln.Strife],includesInvaders:!1,ignoreCountAs:!0},[Xn.Thief]:{name:"Thief",text:"thief",pieces:[Ln.Thief],includesInvaders:!1,ignoreCountAs:!0},[Xn.Town]:{name:"Town",text:"<town>",pieces:[Ln.Town],includesInvaders:!0,ignoreCountAs:!0},[Xn.TownCityOrDahan]:{name:"Town / City / Dahan",text:"<town>/<city>/<dahan>",pieces:[Ln.Town,Ln.City,Ln.Dahan],includesInvaders:!0,ignoreCountAs:!0},[Xn.TownPresenceOrBeasts]:{name:"Town / Presence / Beasts",text:"<town>/<presence>/<beasts>",pieces:[Ln.Town,Ln.Presence,Ln.Beasts],includesInvaders:!0,ignoreCountAs:!1},[Xn.TownOrCity]:{name:"Town / City",text:"<town>/<city>",pieces:[Ln.Town,Ln.City],includesInvaders:!0,ignoreCountAs:!0},[Xn.TownOrDahan]:{name:"Town / Dahan",text:"<town>/<dahan>",pieces:[Ln.Town,Ln.Dahan],includesInvaders:!0,ignoreCountAs:!0},[Xn.Vitality]:{name:"Vitality",text:"<vitality>",pieces:[Ln.Vitality],includesInvaders:!1,ignoreCountAs:!0},[Xn.WardingPattern]:{name:"Warding Pattern",text:"Warding Pattern",pieces:[Ln.WardingPattern],includesInvaders:!1,ignoreCountAs:!0},[Xn.Wilds]:{name:"Wilds",text:"<wilds>",pieces:[Ln.Wilds],includesInvaders:!1,ignoreCountAs:!0}},er={name:"Slow Dissolution Of Will",set:gn.NatureIncarnate,blightPerPlayer:3,requireEvents:!1,effects:[{textArea:[.249,.506],text:"Immediately: Each Spirit chooses one of <badlands>, <beasts>, or <wilds>.<br><br>Each Invader Phase: Each Spirit Replaces 1 <presence> with their chosen type of Spirit Token. (The <presence> goes to the <broken> supply.)",[Pn.Now]:async({$:e})=>{await e.eachSpirit((a=>e.doBlightCardAction((()=>e.chooseBetween({effects:[Ln.Badlands,Ln.Beasts,Ln.Wilds].map((t=>({actionId:t,text:Zn[t].text,[Pn.Now]:async()=>{await e.addSubEffect({textArea:[.377,.513],text:"Each Invader Phase: Each Spirit Replaces 1 <presence> with their chosen type of Spirit Token. (The <presence> goes to the <broken> supply.)",[Pn.BlightedIslandPhase]:()=>a.presence().pickOne((async e=>{await e.replace([t])})),[Pn.GlobalReminder]:()=>({icon:`<broken> = <br>${Zn[t].text}`,spirit:a,players:[a],ongoing:!0})})}})))})))))}}]};var ar;!function(e){e.APallUponTheLand="APallUponTheLand",e.AidFromLesserSpirit="AidFromLesserSpirit",e.AllThingsWeaken="AllThingsWeaken",e.AttenuatedEssence="AttenuatedEssence",e.BackAgainstTheWall="BackAgainstTheWall",e.BlightCorrodesTheSpirit="BlightCorrodesTheSpirit",e.BurnBrightestBeforeTheEnd="BurnBrightestBeforeTheEnd",e.DisintegratingEcosystem="DisintegratingEcosystem",e.DownwardSpiral="DownwardSpiral",e.ErosionOfWill="ErosionOfWill",e.IntensifyingExploitation="IntensifyingExploitation",e.InvadersFindTheLandToTheirLiking="InvadersFindTheLandToTheirLiking",e.MemoryFadesToDust="MemoryFadesToDust",e.PowerCorrodesTheSpirit="PowerCorrodesTheSpirit",e.PromisingFarmlands="PromisingFarmlands",e.ShatteredFragmentsOfPower="ShatteredFragmentsOfPower",e.SlowDissolutionOfWill="SlowDissolutionOfWill",e.StrongEarthShattersSlowly="StrongEarthShattersSlowly",e.TheBorderOfLifeAndDeath="TheBorderOfLifeAndDeath",e.ThrivingCommunities="ThrivingCommunities",e.ThrivingCrops="ThrivingCrops",e.TippingPoint="TippingPoint",e.UnnaturalProliferation="UnnaturalProliferation",e.UntendedLandCrumbles="UntendedLandCrumbles"}(ar||(ar={}));const tr={name:"The Border Of Life And Death",set:gn.NatureIncarnate,blightPerPlayer:1,requireEvents:!1,stillHealthy:!0,effects:[{textArea:[.251,.426],text:"Now and Each Invader Phase (until this card is replaced): Each Spirit with at least 2 <presence> on the island Destroys 1 <presence> and may discard a Power Card to gain 1 Energy.",[Pn.Now]:async({$:e})=>{const a=async()=>{await e.spiritsWhich((e=>e.numberOfPresenceInLands>=2)).forEach((a=>e.doBlightCardAction((async()=>{await a.destroyPresence(1),a.numberOfPowerCardsInHand>0&&await e.may({prompt:"Discard a Power Card to gain 1 Energy?"})&&(await a.discardPowerCards(1),await a.gainEnergy(1))}))),{noOptions:"No Spirits with at least 2 <presence>."})};await e.addSubEffect({effectId:In.TheBorderOfLifeAndDeath,[Pn.AfterDrawingBlightCard]:({blightCard:a})=>(a!==ar.TheBorderOfLifeAndDeath&&e.removeThisEffect(),Promise.resolve()),[Pn.BlightedIslandPhase]:async()=>{await a()},[Pn.GlobalReminder]:()=>({icon:"<blight>",ongoing:!0})}),await a()}}]},nr={name:"Thriving Crops",set:gn.NatureIncarnate,blightPerPlayer:2,requireEvents:!1,stillHealthy:!0,effects:[{textArea:[.251,.379],text:"Immediately: On Each Board, Build in 3 lands. (Build Actions in lands without Invaders normally Build 1 <town>.)",[Pn.Now]:({$:e})=>e.doBlightCardActionOnEachBoard((e=>e.inLands().pickMultiple({amount:3,forPickedItem:async e=>{await e.doExtraBuild()},effect:{highlightBoards:[e]}})))}]},rr={[ar.APallUponTheLand]:Dn,[ar.AidFromLesserSpirit]:Cn,[ar.AllThingsWeaken]:$n,[ar.AttenuatedEssence]:Vn,[ar.BackAgainstTheWall]:Bn,[ar.BlightCorrodesTheSpirit]:Jn,[ar.BurnBrightestBeforeTheEnd]:Yn,[ar.DisintegratingEcosystem]:Fn,[ar.DownwardSpiral]:Sn,[ar.ErosionOfWill]:Rn,[ar.IntensifyingExploitation]:Kn,[ar.InvadersFindTheLandToTheirLiking]:Gn,[ar.MemoryFadesToDust]:On,[ar.PowerCorrodesTheSpirit]:Un,[ar.PromisingFarmlands]:Mn,[ar.ShatteredFragmentsOfPower]:Qn,[ar.SlowDissolutionOfWill]:er,[ar.StrongEarthShattersSlowly]:Hn,[ar.TheBorderOfLifeAndDeath]:tr,[ar.ThrivingCommunities]:qn,[ar.ThrivingCrops]:nr,[ar.TippingPoint]:Nn,[ar.UnnaturalProliferation]:jn,[ar.UntendedLandCrumbles]:_n};var ir,sr,or,dr;!function(e){e.Sun="Sun",e.Moon="Moon",e.Fire="Fire",e.Air="Air",e.Water="Water",e.Earth="Earth",e.Plant="Plant",e.Animal="Animal",e.Any="Any",e.SunOrMoon="SunOrMoon",e.WaterOrAnimal="WaterOrAnimal",e.FireOrPlant="FireOrPlant",e.DarkFire="DarkFire"}(ir||(ir={})),function(e){e.Fast="Fast",e.Slow="Slow"}(sr||(sr={})),function(e){e.Land="Land",e.Spirit="Spirit"}(or||(or={})),function(e){e.Beasts="Beasts",e.Blight="Blight",e.BlightAndInvaders="BlightAndInvaders",e.City="City",e.Coastal="Coastal",e.CoastalCity="CoastalCity",e.Dahan="Dahan",e.Deeps="Deeps",e.Disease="Disease",e.Incarna="Incarna",e.IncarnaAndDahan="IncarnaAndDahan",e.IncarnaBehemoth="IncarnaBehemoth",e.IncarnaLair="IncarnaLair",e.IncarnaRoots="IncarnaRoots",e.IncarnaVoice="IncarnaVoice",e.Inland="Inland",e.Invaders="Invaders",e.InvadersAndIncarnaRoots="InvadersAndIncarnaRoots",e.Jungle="Jungle",e.JunglesOrWetlands="JunglesOrWetlands",e.Mountain="Mountain",e.MountainOrJungles="MountainOrJungles",e.NoInvaders="NoInvaders",e.NonBlight="NonBlight",e.NonOceanLand="NonOceanLand",e.NotWetlands="NotWetlands",e.Quake="Quake",e.SacredSite="SacredSite",e.SacredSiteAndDahan="SacredSiteAndDahan",e.Sands="Sands",e.Strife="Strife",e.TheEndlessDark="TheEndlessDark",e.Town="Town",e.TownOrCity="TownOrCity",e.TwoBeasts="TwoBeasts",e.TwoBeastsAndInvaders="TwoBeastsAndInvaders",e.TwoDahan="TwoDahan",e.WardTheShores="WardTheShores",e.Wetlands="Wetlands"}(dr||(dr={}));const lr={name:"Accelerated Rot",type:kn.Major,speed:sr.Slow,energy:4,elements:[ir.Sun,ir.Water,ir.Plant],set:gn.Base,target:or.Land,targetFilter:[dr.Jungle,dr.Wetlands],range:2,blightWhiteListedPower:!0,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.636,.676],text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.679,.719],text:"4 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(4)}},{textArea:[.897,.937],text:"If you have 3 <sun> 2 <water> 3 <plant>:<br>+5 Damage.<br>Remove 1 <blight>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Sun]:3,[ir.Water]:2,[ir.Plant]:3})&&await e.addSubEffect({effects:[{text:"+5 Damage.",[Pn.Now]:async()=>{await t.damage(5)}},{text:"Remove 1 <blight>.",[Pn.Now]:async()=>{await t.removeBlight()}}]})}}]},cr={name:"Blazing Renewal",type:kn.Major,speed:sr.Fast,energy:5,elements:[ir.Fire,ir.Earth,ir.Plant],set:gn.Base,target:or.Spirit,hasDamageInstructions:!0,fullText:["Target Spirit adds 2 of their destroyed <presence> into a single land, up to <range-2> from your <presence>.","If any <presence> was added, 2 Damage to each <town>/<city> in that land.","If you have 3 <fire> 3 <earth> 2 <plant>:<br>4 Damage in that land."],effects:[{textArea:[.598,.717],text:"Target Spirit adds 2 of their destroyed <presence> into a single land, up to <range-2> from your <presence>.",[Pn.TargetSpirit]:async({$:e,you:a,spirit:t})=>{await e.inLocationsWhere((e=>e.inLandsWithin(2,a).hasOneWhere((e=>e.hasPresenceOf(a))))).pickOne((async n=>{if(t.destroyedPresence>0){const a=await t.addPresence({amount:Math.min(t.destroyedPresence,2),together:!0,locations:zn.AnyLands,filter:e=>e===n,range:2,destroyed:!0,autoPlayOneOption:!0});a.length>0&&await e.addSubEffect({textArea:[.676,.802],text:"If any <presence> was added, 2 Damage to each <town>/<city> in that land.",[Pn.Now]:async()=>{await a[0].location.damageEach(2,e.TownOrCity)}})}await e.addSubEffect({textArea:[.899,.939],text:"If you have 3 <fire> 3 <earth> 2 <plant>:<br>4 Damage in that land.",[Pn.Now]:async()=>{await a.askToConvertElements({[ir.Fire]:3,[ir.Earth]:2,[ir.Plant]:2})&&await n.damage(4)}})}))}}]},hr={name:"Cleansing Floods",type:kn.Major,speed:sr.Slow,energy:5,elements:[ir.Sun,ir.Water],set:gn.Base,target:or.Land,sourceFilter:[dr.Wetlands],range:1,blightWhiteListedPower:!0,hasDamageInstructions:!0,effects:[{textArea:[.636,.676],text:"4 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(4)}},{textArea:[.68,.72],text:"Remove 1 <blight>.",[Pn.InTargetLand]:async({land:e})=>{await e.removeBlight()}},{textArea:[.899,.939],text:"If you have 4 <water>:<br>+10 Damage.",[Pn.InTargetLand]:async({you:e,land:a})=>{await e.askToConvertElements({[ir.Water]:4})&&await a.damage(10)}}]};var ur;!function(e){e.Exactly="Exactly",e.UpTo="UpTo",e.AtLeast="AtLeast",e.All="All",e.Any="Any",e.UpToMinimumOne="UpToMinimumOne",e.May="May"}(ur||(ur={}));const gr={name:"Dissolve The Bonds Of Kinship",type:kn.Major,speed:sr.Slow,energy:4,elements:[ir.Fire,ir.Water,ir.Animal],set:gn.Base,target:or.Land,range:1,hasPushOrGather:!0,hasDamageInstructions:!0,fullText:["Replace 1 <city> with 2 <explorer>. Replace 1 <town> with 1 <explorer>. Replace 1 <dahan> with 1 <explorer>. Push all <explorer> from target land to as many different lands as possible.","If you have 2 <fire> 2 <water> 3 <animal>:<br>Before Pushing, <explorer> and <town>/<city> do Damage to each other."],effects:[{textArea:[.611,.651],text:"Replace 1 <city> with 2 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.replaceOne({pieces:e.City,withAmount:2,withPiece:Ln.Explorer})}},{textArea:[.611,.683],text:"Replace 1 <town> with 1 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.replaceOne({pieces:e.Town,withPiece:Ln.Explorer})}},{textArea:[.646,.686],text:"Replace 1 <dahan> with 1 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.replaceOne({pieces:e.Dahan,withPiece:Ln.Explorer})}},{textArea:[.858,.937],text:"If you have 2 <fire> 2 <water> 3 <animal>:<br><explorer> and <town>/<city> do Damage to each other.<br>",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{if(await a.askToConvertElements({[ir.Fire]:2,[ir.Water]:2,[ir.Animal]:3})){const a=t.piecesThatAre(e.Explorer).sum((e=>e.strengthOutOfRavage)),n=t.piecesThatAre(e.TownOrCity).sum((e=>e.strengthOutOfRavage));await t.damage(a,e.TownOrCity),await t.damage(n,e.Explorer)}}},{textArea:[.646,.752],text:"Push all <explorer> from target land to as many different lands as possible.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.push({quantifier:ur.All,pieces:e.Explorer,differentLands:!0})}}]};var fr;!function(e){e.Another="Another",e.Yourself="Yourself"}(fr||(fr={}));const yr={name:"Entwined Power",type:kn.Major,speed:sr.Fast,energy:2,elements:[ir.Moon,ir.Water,ir.Plant],set:gn.Base,target:or.Spirit,targetFilter:[fr.Another],effects:[{textArea:[.607,.682],text:"You and target Spirit may use each other's <presence> to target Powers.",[Pn.TargetSpirit]:async({$:e,you:a,power:t,spirit:n})=>{n!==a&&await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({power:t.power,players:[a,n]}),[Pn.MayUseOtherSpiritPresenceForTargeting]:e=>e.spirit===n?a.presence().items:e.spirit===a?n.presence().items:[]})}},{textArea:[.644,.746],text:"Target Spirit gains a Power Card. You gain one of the Power Cards they did not keep.",[Pn.TargetSpirit]:async({you:e,spirit:a})=>{const{notChosen:t}=await a.gainPowerCard();await e.gainPowerCard({fromSelection:t})}},{textArea:[.861,.936],text:"If you have 4 <water> 2 <plant>:<br>You and target Spirit each gain 3 Energy and may gift the other 1 Power from hand.",[Pn.TargetSpirit]:async({you:e,spirit:a})=>{await e.askToConvertElements({[ir.Water]:2,[ir.Plant]:4})&&(await e.gainEnergy(3),await a.gainEnergy(3),a!==e&&(await e.powersWhere((e=>e.isInHand)).optionallyPickOne((async e=>{await a.givePower(e)}),{noOptions:`${e.nameLink} has no Powers in hand to gift.`,prompt:`Gift ${a.nameLink} 1 Power from hand?`,players:[e]}),await a.powersWhere((e=>e.isInHand)).optionallyPickOne((async a=>{await e.givePower(a)}),{noOptions:`${a.nameLink} has no Powers in hand to gift.`,prompt:`Gift ${e.nameLink} 1 Power from hand?`,players:[a]})))}}]},pr={name:"Indomitable Claim",type:kn.Major,speed:sr.Fast,energy:4,elements:[ir.Sun,ir.Earth],set:gn.Base,target:or.Land,range:1,generatesFear:!0,effects:[{textArea:[.594,.722],text:"Add 1 <presence> in target land even if you normally could not due to land type.",[Pn.InTargetLand]:async({you:e,land:a})=>{await a.addPresence(e,{ignoreLandType:!0})}},{textArea:[.68,.72],text:"Defend 20.",[Pn.InTargetLand]:async({land:e})=>{await e.defend(20)}},{textArea:[.802,.939],text:"If you have 2 <sun> 3 <earth>:<br>3 <fear> if Invaders are present.<br>Invaders skip all Actions in target land this turn.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Sun]:2,[ir.Earth]:3})&&await e.addSubEffect({effects:[{textArea:[.812,.852],text:"3 <fear> if Invaders are present.",[Pn.Now]:async()=>{t.hasInvaders&&await t.fear(3)}},{textArea:[.855,.937],text:"Invaders skip all Actions in target land this turn.",[Pn.Now]:async()=>{await t.skipInvaderAction({all:!0})}}]})}}]},wr={[Wn.DirectDestroy]:{verb:"Destroy",textPast:"destroyed",isDestroyLike:!0},[Wn.DestroyByDamageOrBlight]:{verb:"Destroy",textPast:"destroyed",isDestroyLike:!0},[Wn.DestroyByHealthChange]:{verb:"Destroy",textPast:"destroyed",isDestroyLike:!0},[Wn.Drown]:{verb:"Drown",textPast:"drowned",isDestroyLike:!0},[Wn.Relocate]:{verb:"Relocate",textPast:"relocated",isDestroyLike:!1},[Wn.Remove]:{verb:"Remove",textPast:"removed",isDestroyLike:!1},[Wn.RemoveFromGame]:{verb:"Remove from game",textPast:"removed from the game",isDestroyLike:!1},[Wn.Replace]:{verb:"Replace",textPast:"replaced",isDestroyLike:!1},[Wn.Silent]:{verb:"Silent",textPast:"replaced",isDestroyLike:!1,skipEvent:!0}},mr={name:"Infinite Vitality",type:kn.Major,speed:sr.Fast,energy:3,elements:[ir.Earth,ir.Plant,ir.Animal],set:gn.Base,target:or.Land,sourceFilter:[dr.SacredSite],range:1,blightWhiteListedPower:!0,effects:[{textArea:[.611,.651],text:"<dahan> have +4 Health while in target land.",[Pn.InTargetLand]:async({$:e,land:a,effect:t})=>{a.isLand&&await e.addSubEffectUntilEndOfTurn({[Pn.AdjustHealth]:({piece:t})=>t.location===a&&t.isA(e.Dahan)?4:0,[Pn.Reminder]:e=>e===a?t.text:void 0})}},{textArea:[.647,.719],text:"Whenever <blight> would be added to target land, instead leave it on the card.",[Pn.InTargetLand]:async({$:e,land:a,effect:t})=>{await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===a?t.text:void 0,[Pn.PreventAddBlight]:({location:e})=>Promise.resolve(e===a)})}},{textArea:[.827,.934],text:"If you have 4 <earth>:<br><dahan> ignore Damage and Destruction effects. Remove 1 <blight> from target or adjacent land.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Earth]:4})&&await e.addSubEffect({effects:[{textArea:[.828,.899],text:"<dahan> ignore Damage and Destruction effects.",[Pn.Now]:async({effect:a})=>{t.isLand&&await e.addSubEffectUntilEndOfTurn({[Pn.PreventDamagingPiece]:({piece:a})=>Promise.resolve(a.location===t&&a.isA(e.Dahan)),[Pn.PreventRemovePiece]:({piece:a,location:n,removement:r})=>Promise.resolve(a.isA(e.Dahan)&&n===t&&wr[r].isDestroyLike),[Pn.Reminder]:e=>e===t?a.text:void 0})}},{textArea:[.864,.933],text:"Remove 1 <blight> from target or adjacent land.",[Pn.Now]:async()=>{await t.piecesInThisAndAdjacentLocations().where((a=>a.isA(e.Blight)&&a.location.isLandForBlight)).pickOne((async e=>{await e.location.removeBlight()}),{noOptions:"No <blight> to remove in target or adjacent lands."})}}]})}}]},vr={name:"Mists Of Oblivion",type:kn.Major,speed:sr.Slow,energy:4,elements:[ir.Moon,ir.Air,ir.Water],set:gn.Base,target:or.Land,range:3,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.61,.703],text:"1 <fear> per <town>/<city> this Power destroys (to a maximum of 4).",[Pn.InTargetLand]:async({$:e,action:a,land:t})=>{a.data.buildingsDestroyed=0,await e.addEffectUntilEndOfAction({[Pn.ActionEnds]:async()=>{await e.sendEvent({type:Tn.GenericMain,text:`<p>MistsOfOblivion</p> destroyed ${a.data.buildingsDestroyed} <town>/<city>.`}),await t.fear(Math.min(a.data.buildingsDestroyed,4))}})}},{textArea:[.705,.745],text:"1 Damage to each Invader.",[Pn.InTargetLand]:async({$:e,action:a,land:t})=>{const n=await t.damageEach(1);a.data.buildingsDestroyed+=n.filter((a=>wr[a.removement].isDestroyLike&&a.piece.isA(e.TownOrCity))).length}},{textArea:[.884,.924],text:"If you have 2 <moon> 3 <air> 2 <water>:<br>3 Damage.",[Pn.InTargetLand]:async({$:e,you:a,land:t,action:n})=>{if(await a.askToConvertElements({[ir.Moon]:2,[ir.Air]:3,[ir.Water]:2})){const a=await t.damage(3);n.data.buildingsDestroyed+=a.filter((a=>wr[a.removement].isDestroyLike&&a.piece.isA(e.TownOrCity))).length}}}]},xr={name:"Paralyzing Fright",type:kn.Major,speed:sr.Fast,energy:4,elements:[ir.Air,ir.Earth],set:gn.Base,target:or.Land,sourceFilter:[dr.SacredSite],range:1,generatesFear:!0,effects:[{textArea:[.617,.657],text:"4 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(4)}},{textArea:[.664,.748],text:"Invaders skip all Actions in target land this turn.",[Pn.InTargetLand]:async({land:e})=>{await e.skipInvaderAction({all:!0})}},{textArea:[.878,.918],text:"If you have 2 <air> 3 <earth>:<br>+4 <fear>.",[Pn.InTargetLand]:async({you:e,land:a})=>{await e.askToConvertElements({[ir.Air]:2,[ir.Earth]:3})&&await a.fear(4)}}]},br={name:"Pillar of Living Flame",type:kn.Major,speed:sr.Slow,energy:5,elements:[ir.Fire],set:gn.Base,target:or.Land,sourceFilter:[dr.SacredSite],range:2,blightWhiteListedPower:!0,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.592,.632],text:"3 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(3)}},{textArea:[.637,.677],text:"5 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(5)}},{textArea:[.709,.815],text:"If target land is <jungles>/<wetlands>, add 1 <blight>.",[Pn.InTargetLand]:async({land:e})=>{e.isJungleOrWetlands&&await e.addBlight(1)}},{textArea:[.897,.937],text:"If you have 4 <fire>:<br>+2 <fear> and +5 damage.",[Pn.InTargetLand]:async({land:e,you:a})=>{await a.askToConvertElements({[ir.Fire]:4})&&(await e.fear(2),await e.damage(5))}}]},Tr={name:"Poisoned Land",type:kn.Major,speed:sr.Slow,energy:3,elements:[ir.Earth,ir.Plant,ir.Animal],set:gn.Base,target:or.Land,range:1,blightWhiteListedPower:!0,generatesFear:!0,hasDestroyInstructions:!0,hasDamageInstructions:!0,effects:[{textArea:[.617,.657],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.661,.701],text:"7 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(7)}},{textArea:[.705,.745],text:"Add 1 <blight> and destroy all <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.addBlight(1),await a.destroyAll(e.Dahan)}},{textArea:[.847,.934],text:"If you have 3 <earth> 2 <plant> 2 <animal>:<br>For each <blight> then present, +1 <fear> and +4 Damage.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Earth]:3,[ir.Plant]:2,[ir.Animal]:2})&&(await t.fear(t.numberOf(e.Blight)),await t.damage(4*t.numberOf(e.Blight)))}}]},Ar={name:"Powerstorm",type:kn.Major,speed:sr.Fast,energy:3,elements:[ir.Sun,ir.Fire,ir.Air],set:gn.Base,target:or.Spirit,fullText:["Target Spirit gains 3 Energy.","Once this turn, target may Repeat a Power Card by paying its cost again.","If you have 2 <sun> 2 <fire> 3 <air>:<br>Target may Repeat up to 2 more Power Cards by paying their costs."],effects:[{textArea:[.587,.627],text:"Target Spirit gains 3 Energy.",[Pn.TargetSpirit]:async({spirit:e})=>{await e.gainEnergy(3)}},{textArea:[.636,.762],text:"Once this turn, target may Repeat a Power Card by paying its cost again.",[Pn.TargetSpirit]:async({$:e,...a})=>{if(a.isRepeat)return;const t=await a.spirit.askToConvertElements({[ir.Sun]:2,[ir.Fire]:2,[ir.Air]:3})?3:1,n=De.box([]);await e.addSubEffectUntilEndOfTurn({textArea:0===n.get().length||1===t?[.636,.762]:[.848,.934],[Pn.GlobalReminder]:()=>({icon:`Repeat<br>${n.get().length} / ${t}`,players:[a.spirit]}),[Pn.MayRepeatPowercard]:({power:e,speed:r})=>n.get().length<t&&e.owner===a.spirit&&e.costToPlay<=a.spirit.energy&&e.data.type!==kn.Innate&&!n.get().includes(e)&&e.possibleToRepeatAtSpeed(r),[Pn.RepeatPowerCard]:async({power:a,speed:r})=>{n.get().push(a),n.get().length===t&&e.removeThisEffect(),await a.payForPlay(),await a.replay(r)}})}}]},Ir={name:"Talons Of Lightning",type:kn.Major,speed:sr.Fast,energy:6,elements:[ir.Fire,ir.Air],set:gn.Base,target:or.Land,targetFilter:[dr.Mountain,dr.Wetlands],range:1,generatesFear:!0,hasDestroyInstructions:!0,hasDamageInstructions:!0,modifiesRange:({spirit:e,withConvert:a})=>e.hasElements({[ir.Fire]:3,[ir.Air]:3},a)?2:0,payForRange:async({spirit:e})=>{await e.convertElements({[ir.Fire]:3,[ir.Air]:3})},effects:[{textArea:[.636,.676],text:"3 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(3)}},{textArea:[.68,.72],text:"5 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(5)}},{textArea:[.848,.888],text:"If you have 3 <fire> 3 <air>:<br>Destroy 1 <town> in each adjacent land. Increase this Power's Range to <range-3>.",[Pn.InTargetLand]:async({you:e,$:a,land:t,power:n})=>{n.validOriginsGivenTargetLand(t).hasAtLeast(1,(a=>a.landsWithin(1,e,{targetingLands:!0}).includes(t)))&&!await e.askToConvertElements({[ir.Fire]:3,[ir.Air]:3})||await t.inAdjacentLands().where((e=>e.has(a.Town))).selectOrder().forEach((async e=>{await e.destroyOne(a.Town)}),{noOptions:"No adjacent lands with at <town>."})}}]},Pr={name:"Terrifying Nightmares",type:kn.Major,speed:sr.Fast,energy:4,elements:[ir.Moon,ir.Air],set:gn.Base,target:or.Land,range:2,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.636,.676],text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.68,.72],text:"Push up to 4 <explorer>/<town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(4,e.ExplorerOrTown)}},{textArea:[.888,.928],text:"If you have 4 <moon>:<br>+4 <fear>.",[Pn.InTargetLand]:async({you:e,land:a})=>{await e.askToConvertElements({[ir.Moon]:4})&&await a.fear(4)}}]},Sr={name:"The Jungle Hungers",type:kn.Major,speed:sr.Slow,energy:3,elements:[ir.Moon,ir.Plant],set:gn.Base,target:or.Land,sourceFilter:[dr.Jungle],range:1,hasDestroyInstructions:!0,effects:[{textArea:[.636,.676],text:"Destroy all <explorer> and all <town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.destroyAll(e.ExplorerOrTown)}},{textArea:[.679,.719],text:"Destroy all <dahan>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Moon]:2,[ir.Plant]:3})||await t.destroyAll(e.Dahan)}},{textArea:[.858,.898],text:"If you have 2 <moon> 3 <plant>:<br>Destroy 1 <city>. Do not destroy any <dahan>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{a.hasElements({[ir.Moon]:2,[ir.Plant]:3})&&await t.destroyOne(e.City)}}]},Er={name:"The Land Thrashes In Furious Pain",type:kn.Major,speed:sr.Slow,energy:4,elements:[ir.Moon,ir.Fire,ir.Earth],set:gn.Base,target:or.Land,targetFilter:[dr.Blight],range:2,hasDamageInstructions:!0,effects:[{textArea:[.643,.683],text:"2 Damage per <blight> in target land.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(2*a.numberOf(e.Blight))}},{textArea:[.686,.726],text:"+1 Damage per adjacent <blight>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(a.adjacentPiecesInLocationsWhere((a=>a.location.isLandForBlight&&a.isA(e.Blight))).count)}},{textArea:[.877,.917],text:"If you have 3 <moon> 3 <earth>:<br>Repeat on an adjacent land.",[Pn.InTargetLand]:async({you:e,power:a,isRepeat:t,land:n})=>{!t&&await e.askToConvertElements({[ir.Moon]:3,[ir.Earth]:3})&&await n.inAdjacentLands().pickOne((async e=>{await a.repeatInLocations([e])}))}}]},Or={name:"The Trees And Stones Speak Of War",type:kn.Major,speed:sr.Fast,energy:2,elements:[ir.Sun,ir.Earth,ir.Plant],set:gn.Base,target:or.Land,targetFilter:[dr.Dahan],range:1,hasPushOrGather:!0,hasDamageInstructions:!0,effects:[{textArea:[.624,.722],text:"For each <dahan> in target land, 1 Damage and Defend 2.",[Pn.InTargetLand]:async({$:e,land:a})=>{const t=a.numberOf(e.Dahan);await a.damage(t),await a.defend(2*t)}},{textArea:[.851,.94],text:"If you have 2 <sun> 2 <earth> 2 <plant>:<br>You may Push up to 2 <dahan>, moving each one's Defend with them.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{if(await a.askToConvertElements({[ir.Sun]:2,[ir.Earth]:2,[ir.Plant]:2})){const a=await t.pushUpTo(2,e.Dahan);for(const{source:e,destination:t}of a)await e.defend(-2,{singleLand:!1}),await t.defend(2,{singleLand:!1})}}}]},kr={name:"Tsunami",type:kn.Major,speed:sr.Slow,energy:6,elements:[ir.Water,ir.Earth],set:gn.Base,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Coastal],range:2,generatesFear:!0,hasDestroyInstructions:!0,hasDamageInstructions:!0,effects:[{textArea:[.592,.632],text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.636,.676],text:"8 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(8)}},{textArea:[.68,.72],text:"Destroy 2 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.destroy({amount:2,pieces:e.Dahan})}},{textArea:[.809,.942],text:"If you have 3 <water> 2 <earth>:<br>In each other Coastal land on the same board: 1 <fear>, 4 Damage, and Destroy 1 <dahan>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Water]:3,[ir.Earth]:2})&&await t.boards().pickOne((a=>a.inCoastalLands().where((e=>e!==t)).selectOrder().forEach((async a=>{await e.addSubEffect({effects:[{textArea:[.854,.894],text:"1 <fear>.",[Pn.Now]:async()=>{await a.fear(1)}},{textArea:[.854,.894],text:"4 Damage.",[Pn.Now]:async()=>{await a.damage(4)}},{textArea:[.897,.937],text:"Destroy 1 <dahan>.",[Pn.Now]:async()=>{await a.destroyOne(e.Dahan)}}]})}))))}}]},Cr={name:"Vengeance Of The Dead",type:kn.Major,speed:sr.Fast,energy:3,elements:[ir.Moon,ir.Fire,ir.Animal],set:gn.Base,target:or.Land,range:3,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.587,.627],text:"3 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(3)}},{textArea:[.63,.94],text:"After each effect that destroys <town>/<city>/<dahan> in target land, 1 Damage per <town>/<city>/<dahan> destroyed.<br><br>If you have 3 <animal>:<br>Damage from this Power may be dealt into adjacent lands.",[Pn.InTargetLand]:async({$:e,you:a,land:t,effect:n,...r})=>{const i=await a.askToConvertElements({[ir.Animal]:3}),s=e.nextTriggerId(),o={triggerId:s,text:i?"1 Damage per <town>/<city>/<dahan> destroyed.<br><br>If you have 3 <animal>:<br>Damage from this Power may be dealt into adjacent lands.":"1 Damage per <town>/<city>/<dahan> destroyed.",textArea:i?[.706,.94]:[.717,.757],[Pn.Now]:async({action:e})=>{const a=e.parentData.destroyedCount[s];i?await t.damageInThisAndAdjacentLands(a):await t.damage(a)}};await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===t?"After each effect that destroys <town>/<city>/<dahan> in target land, 1 Damage per <town>/<city>/<dahan> destroyed."+(i?"<br><br>Damage from this Power may be dealt into adjacent lands.":""):void 0,[Pn.AfterRemovePiece]:async({location:a,piece:i,removement:d})=>{a===t&&(i.isA(e.TownOrCity)||i.isA(e.Dahan))&&wr[d].isDestroyLike&&(void 0===e.action.data.destroyedCount&&(e.action.data.destroyedCount={}),e.action.data.destroyedCount[s]=(e.action.data.destroyedCount[s]??0)+1,await e.addTrigger(o,n,r.action))}})}}]},Dr=e=>e.filter(((a,t)=>e.indexOf(a)===t)),Br={name:"Vigor Of The Breaking Dawn",type:kn.Major,speed:sr.Fast,energy:3,elements:[ir.Sun,ir.Animal],set:gn.Base,target:or.Land,targetFilter:[dr.Dahan],range:2,hasPushOrGather:!0,hasDamageInstructions:!0,effects:[{textArea:[.638,.678],text:"2 Damage per <dahan> in target land.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(2*a.numberOf(e.Dahan))}},{textArea:[.807,.939],text:"If you have 3 <sun> 2 <animal>:<br>You may Push up to 2 <dahan>. In lands you Pushed <dahan> to, 2 Damage per <dahan>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{if(await a.askToConvertElements({[ir.Sun]:3,[ir.Animal]:2})){let a=[];await e.addSubEffect({effects:[{textArea:[.811,.851],text:"You may Push up to 2 <dahan>.",[Pn.Now]:async()=>{const n=await t.pushUpTo(2,e.Dahan);a=Dr(n.filter((({piece:a})=>a.isA(e.Dahan))).map((({destination:e})=>e)))}}]}),await e.addSubEffect({effects:[{textArea:[.853,.937],text:"In lands you Pushed <dahan> to, 2 Damage per <dahan>.",[Pn.Now]:async()=>{for(t of a)await t.damage(2*t.numberOf(e.Dahan))}}]})}}}]},Lr={name:"Winds Of Rust And Atrophy",type:kn.Major,speed:sr.Fast,energy:3,elements:[ir.Air,ir.Water,ir.Animal],set:gn.Base,target:or.Land,sourceFilter:[dr.SacredSite],range:3,generatesFear:!0,effects:[{textArea:[.611,.651],text:"1 <fear> and Defend 6. ",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1),await e.defend(6)}},{textArea:[.651,.749],text:"Replace 1 <city> with 1 <town> or 1 <town> with 1 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.piecesWhere((a=>a.isA(e.TownOrCity))).pickOne((async e=>{await e.downgrade()}))}},{textArea:[.876,.916],text:"If you have 3 <air> 3 <water> 2 <animal>:<br>Repeat this Power.",[Pn.InTargetLand]:async({you:e,power:a,isRepeat:t})=>{!t&&await e.askToConvertElements({[ir.Air]:3,[ir.Water]:3,[ir.Animal]:2})&&await a.repeat()}}]},Fr={name:"Wrap In Wings Of Sunlight",type:kn.Major,speed:sr.Fast,energy:3,elements:[ir.Sun,ir.Air,ir.Animal],set:gn.Base,target:or.Land,range:0,hasPushOrGather:!0,fullText:["Move up to 5 <dahan> from target land to any land. Defend 5 in that land.","If you have 2 <sun> 2 <air> 2 <animal>: First, Gather up to 3 <dahan>."],effects:[{textArea:[.88,.92],text:"If you have 2 <sun> 2 <air> 2 <animal>: First, Gather up to 3 <dahan>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Sun]:2,[ir.Air]:2,[ir.Animal]:2})&&await t.gatherUpTo(3,e.Dahan)}},{textArea:[.61,.743],text:"Move up to 5 <dahan> from target land to any land. Defend 5 in that land.",[Pn.InTargetLand]:async({$:e,land:a})=>{const t=await a.move({quantifier:ur.UpTo,amount:5,pieces:e.Dahan,locations:{target:zn.AnyLands},together:!0});t.length>0&&await t[0].destination.defend(5)}}]},Rr={name:"Bloodwrack Plague",type:kn.Major,speed:sr.Fast,energy:4,elements:[ir.Water,ir.Earth,ir.Animal],set:gn.BranchAndClaw,target:or.Land,sourceFilter:[dr.SacredSite],range:1,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.607,.647],text:"Add 2 <disease>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(2,e.Disease)}},{textArea:[.641,.715],text:"For each <disease> in target land, Defend 1 in target and all adjacent lands.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.inThisAndAdjacentLands().forEach((async t=>{await t.defend(a.numberOf(e.Disease),{singleLand:!1})}))}},{textArea:[.824,.932],text:"If you have 2 <earth> 4 <animal>:<br>2 <fear>. For each <disease> in target land, do 1 Damage in target or an adjacent land.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Earth]:2,[ir.Animal]:4})&&(await t.fear(2),await t.damageInThisAndAdjacentLands(t.numberOf(e.Disease)))}}]};var Mr;!function(e){e.Bring="Bring",e.Gather="Gather",e.Move="Move",e.Push="Push",e.Relocate="Relocate"}(Mr||(Mr={}));const Nr={name:"Cast Down Into The Briny Deep",type:kn.Major,speed:sr.Slow,energy:9,elements:[ir.Sun,ir.Moon,ir.Water,ir.Earth],set:gn.BranchAndClaw,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Coastal],range:1,blightWhiteListedPower:!0,generatesFear:!0,hasDestroyInstructions:!0,effects:[{textArea:[.607,.647],text:"6 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(6)}},{textArea:[.641,.681],text:"Destroy all Invaders.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.isLand&&await a.destroyAll(e.Invader)}},{textArea:[.792,.933],text:"If you have 2 <sun> 2 <moon> 4 <water> 4 <earth>:<br>Destroy the board containing target land and everything on that board. All destroyed <blight> is removed from the game instead of being returned to the Blight Card.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Sun]:2,[ir.Moon]:2,[ir.Water]:4,[ir.Earth]:4})&&await t.boards().pickOne((async a=>{for(const t of a.existingLocations){await t.destroyAll(e.AllPieces,{autoPlay:!0});for(const a of e.reminderEffects)void 0!==a[Pn.Reminder]&&void 0!==a[Pn.Reminder](t)&&e.removeEffect(a)}await e.oneEffectActivates(Pn.PreventRemoveBoard),Wn.DirectDestroy,await a.destroy()}))}}]},Wr={name:"Death Falls Gently From Open Blossoms",type:kn.Major,speed:sr.Slow,energy:4,elements:[ir.Moon,ir.Air,ir.Plant],set:gn.BranchAndClaw,target:or.Land,targetFilter:[dr.Jungle,dr.Sands],range:3,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.607,.647],text:"4 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(4)}},{textArea:[.653,.693],text:"If any Invaders remain, add 1 <disease>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.hasInvaders&&await a.add(1,e.Disease)}},{textArea:[.811,.939],text:"If you have 3 <air> 3 <plant>:<br>3 <fear>.<br>Add 1 <disease> to 2 adjacent lands with Invaders.",[Pn.InTargetLand]:async({$:e,land:a,you:t})=>{await t.askToConvertElements({[ir.Air]:3,[ir.Plant]:3})&&(await a.fear(3),await a.inAdjacentLandsWhere((e=>e.hasInvaders)).pickMultiple({amount:2,forPickedItem:async a=>{await a.add(1,e.Disease)}}))}}]},$r={name:"Fire And Flood",type:kn.Major,speed:sr.Slow,energy:7,elements:[ir.Sun,ir.Fire,ir.Water],set:gn.BranchAndClaw,specifyOrigin:!0,target:or.Land,ranges:[1,2],sourceFilter:[dr.SacredSite],hasDamageInstructions:!0,fullText:["4 Damage in each target land. (Range must be measured from the same <sacred>.)","If you have 3 <fire>:<br>+4 Damage in either target land.","If you have 3 <water>:<br>+4 Damage in either target land."],effects:[{textArea:[.592,.72],text:"4 Damage in each target land. (Range must be measured from the same <sacred>.)",[Pn.InTargetLand]:async({$:e,you:a,lands:t})=>{const n=t[0],r=t.length>1?t[1]:null;await e.addSubEffectUntilEndOfTurn({effects:[{text:"4 Damage in each target land.",[Pn.Now]:async()=>{await n.damage(4),await(r?.damage(4))}},{textArea:[.812,.852],text:"If you have 3 <fire>:<br>+4 Damage in either target land.",[Pn.Now]:async()=>{await a.askToConvertElements({[ir.Fire]:3})&&await e.ofTheseLocations(t).pickOne((async e=>{await e.damage(4)}))}},{textArea:[.897,.937],text:"If you have 3 <water>:<br>+4 Damage in either target land.",[Pn.Now]:async()=>{await a.askToConvertElements({[ir.Water]:3})&&await e.ofTheseLocations(t).pickOne((async e=>{await e.damage(4)}))}}]})}}]},Gr={name:"Flow Like Water Reach Like Air",type:kn.Major,speed:sr.Fast,energy:2,elements:[ir.Air,ir.Water],set:gn.BranchAndClaw,target:or.Spirit,hasPushOrGather:!0,effects:[{textArea:[.6,.64],text:"Target Spirit gets <range+2> with all Powers.",[Pn.TargetSpirit]:async({$:e,power:a,spirit:t})=>{await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({power:a.power,players:[t]}),[Pn.ExtraRange]:e=>e.spirit===t?2:0})}},{textArea:[.638,.933],text:"Target Spirit may Push 1 of their <presence> to an adjacent land, bringing up to 2 <explorer>, 2 <town>, and 2 <dahan> along with it.<br><br>If you have 2 <air> 2 <water>:<br>The moved <presence> may also bring along up to 2 <city> and up to 2 <blight>.",[Pn.TargetSpirit]:async({$:e,you:a,spirit:t})=>{const n=await a.askToConvertElements({[ir.Air]:2,[ir.Water]:2});await t.inLands().optionallyPickOne((async a=>{const r=await a.push({pieces:e.Presence,owner:t});if(r.length>0){const t=[e.Explorer,e.Town,e.Dahan];n&&t.push(e.City,e.Blight);for(const e of t)await a.move({quantifier:ur.UpTo,amount:2,pieces:e,movement:Mr.Bring,locations:{target:zn.ToThisLocation,location:r[0].destination}})}}))}}]},Ur={name:"Grant Hatred A Ravenous Form",type:kn.Major,speed:sr.Slow,energy:4,elements:[ir.Moon,ir.Fire],set:gn.BranchAndClaw,target:or.Land,range:1,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.595,.773],text:"For each <strife>/<blight> in target land, 1 <fear> and 2 Damage.<br><br>If this destroys all Invaders in target land, add 1 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{const t=a.invaders(),n=t.count>0,r=a.numberOfStrife+a.numberOf(e.Blight);await a.fear(r);const i=await a.damage(2*r);for(const e of i)wr[e.removement].isDestroyLike&&t.remove(e.piece);n&&0===t.count&&await a.add(1,e.Beasts)}},{textArea:[.891,.931],text:"If you have 4 <moon> 2 <fire>:<br>Add 1 <strife> in up to 3 adjacent lands.",[Pn.InTargetLand]:async({you:e,land:a})=>{await e.askToConvertElements({[ir.Moon]:4,[ir.Fire]:2})&&await a.inAdjacentLands().pickMultiple({amount:3,forPickedItem:async e=>{await e.addStrife(1)},optional:!0,effect:{prompt:"Pick an adjacent land to add <strife>."}})}}]},Hr={name:"Insatiable Hunger Of The Swarm",type:kn.Major,speed:sr.Fast,energy:4,elements:[ir.Air,ir.Plant,ir.Animal],set:gn.BranchAndClaw,target:or.Land,sourceFilter:[dr.SacredSite],range:2,hasPushOrGather:!0,generatesFear:!0,hasDestroyInstructions:!0,hasDamageInstructions:!0,effects:[{textArea:[.636,.676],text:"Add 1 <blight>.",[Pn.InTargetLand]:async({land:e})=>{await e.addBlight(1)}},{textArea:[.636,.676],text:"Add 2 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(2,e.Beasts)}},{textArea:[.636,.676],text:"Gather up to 2 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(2,e.Beasts)}},{textArea:[.673,.748],text:"Each <beasts> deal 1 <fear>, 2 Damage to Invaders and 2 Damage to <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{const t=a.numberOf(e.Beasts);await a.fear(t),await a.damage(2*t,e.Invader),await a.damage(2*t,e.Dahan)}},{textArea:[.706,.746],text:"Destroy 1 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.destroyOne(e.Beasts)}},{textArea:[.893,.933],text:"If you have 2 <air> 4 <animal>:<br>Repeat this Power on an adjacent land.",[Pn.InTargetLand]:async({you:e,power:a,land:t,isRepeat:n})=>{!n&&await e.askToConvertElements({[ir.Air]:2,[ir.Animal]:4})&&await t.inAdjacentLands().pickOne((async e=>{await a.repeatInLocations([e])}))}}]};var qr;!function(e){e.Explore="Explore",e.Build="Build",e.Ravage="Ravage"}(qr||(qr={}));const jr={name:"Instruments Of Their Own Ruin",type:kn.Major,speed:sr.Fast,energy:4,elements:[ir.Sun,ir.Fire,ir.Air,ir.Animal],set:gn.BranchAndClaw,target:or.Land,sourceFilter:[dr.SacredSite],range:1,blightWhiteListedPower:!0,hasDamageInstructions:!0,effects:[{textArea:[.592,.632],text:"Add 1 <strife>.",[Pn.InTargetLand]:async({land:e})=>{await e.addStrife(1)}},{textArea:[.63,.937],text:"Each Invader with <strife> deals Damage to other Invaders in target land.<br><br>If you have 4 <sun> 2 <fire> 2 <animal>:<br><br>Instead, if Invaders Ravage in target land, they Damage Invaders in adjacent lands instead of <dahan> and the land. <dahan> in target land do not fight back.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{t.isLand&&(await a.askToConvertElements({[ir.Sun]:4,[ir.Fire]:2,[ir.Animal]:2})?(await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===t?"If Invaders Ravage in target land, they Damage Invaders in adjacent lands instead of <dahan> and the land. <dahan> in target land do not fight back.":void 0,[Pn.AlterInvaderActionInLand]:async e=>{if(e.land===t&&e.invaderAction===qr.Ravage){let a=t.participatingInvaders().sum((a=>a.strengthDuringRavage+a.adjustedIndividualInvaderRavageDamage({towardsLand:!1,normal:e.normal})));return a>0&&(a+=e.land.sumAdjustedCollectiveInvaderRavageDamage({normal:e.normal,towardsLand:!1}),await t.damageInAdjacentLands(a)),!0}return!1}})):await t.piecesWithStrifeDealsDamageToOtherInvaders())}}]},_r={name:"Manifest Incarnation",type:kn.Major,speed:sr.Slow,energy:6,elements:[ir.Sun,ir.Moon,ir.Earth,ir.Animal],set:gn.BranchAndClaw,target:or.Land,targetFilter:[dr.City],range:0,generatesFear:!0,effects:[{textArea:[.601,.641],text:"6 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(6)}},{textArea:[.643,.713],text:"+1 <fear> for each <town>/<city> and for each of your <presence> in target land.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await t.fear(t.numberOf(e.TownOrCity)+t.numberOfPresenceOf(a))}},{textArea:[.677,.75],text:"Remove 1 <city>, 1 <town> and 1 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.remove({amount:1,pieces:e.City}),await a.remove({amount:1,pieces:e.Town}),await a.remove({amount:1,pieces:e.Explorer})}},{textArea:[.71,.75],text:"Then, Invaders in target land Ravage.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Sun]:3,[ir.Moon]:3})&&await e.addEffectUntilEndOfAction({text:"Invaders do -6 Damage on their Ravage.",[Pn.AdjustCollectiveInvaderRavageDamage]:e=>e.land===t?-6:0}),await t.doExtraRavage()}},{textArea:[.853,.893],text:"If you have 3 <sun> 3 <moon>:<br>3 <fear>.<br>Invaders do -6 Damage on their Ravage.",[Pn.InTargetLand]:async({$:e,you:a})=>{a.hasElements({[ir.Sun]:3,[ir.Moon]:3})&&await e.fear(3)}}]},Vr=(e,a)=>{const t=a instanceof Function?e.findIndex(a):e.indexOf(a);if(t>-1){const[a]=e.splice(t,1);return a}return null},Jr=async(e,a)=>{for(let t=0;t<e;t+=1)await a(t)},zr={name:"Pentup Calamity",type:kn.Major,speed:sr.Fast,energy:3,elements:[ir.Moon,ir.Fire,ir.Earth,ir.Plant,ir.Animal],set:gn.BranchAndClaw,target:or.Land,range:2,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.611,.943],text:"Add 1 <disease> and 1 <strife>.<or>Remove any number of <beasts>/<disease>/<strife>/<wilds>. For each token removed, 1 <fear> and 3 Damage.<br><br>If you have 2 <moon> 3 <fire>:<br>If you have removed tokens, return up to 2 of them. Otherwise, add 2 <strife>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await e.chooseBetween({effects:[{actionId:"AddDiseaseAndStrife",textArea:[.613,.653],text:"Add 1 <disease> and 1 <strife>.",[Pn.Now]:async()=>{await t.add(1,e.Disease),await t.addStrife(1),await a.askToConvertElements({[ir.Moon]:2,[ir.Fire]:3})&&await e.addSubEffect({textArea:[.9,.94],text:"If you have 2 <moon> 3 <fire>:<br>If you have removed tokens, return up to 2 of them. Otherwise, add 2 <strife>.",[Pn.Now]:async()=>{await t.addStrife(2)}})}},{actionId:"RemoveTokens",textArea:[.68,.762],text:"Remove any number of <beasts>/<disease>/<strife>/<wilds>. For each token removed, 1 <fear> and 3 Damage.",[Pn.Now]:async()=>{const n=[];for(;;){const a=n.length;if(await t.piecesWhere((a=>a.isA(e.BeastsDiseaseOrWilds)||a.strife>0)).optionallyPickOne((async e=>{if(e.isInvader)await e.removeStrife(),n.push(Ln.Strife);else{const a=await e.remove();a.length>0&&n.push(a[0].piece.piece)}}),{prompt:`Pick any number of <beasts>/<disease>/<strife>/<wilds>. ${n.length} removed.`}),n.length===a)break}n.length>0&&(await t.fear(n.length),await t.damage(3*n.length),await a.askToConvertElements({[ir.Moon]:2,[ir.Fire]:3})&&await e.addSubEffect({textArea:[.867,.94],text:"If you have 2 <moon> 3 <fire>:<br>If you have removed tokens, return up to 2 of them. Otherwise, add 2 <strife>.",[Pn.Now]:async()=>{await Jr(2,(async a=>{await e.chooseBetween({prompt:`Pick token to return. ${2-a} left.`,effects:n.map((e=>({actionId:e,label:Zn[Xn[e]].text,[Pn.Now]:async()=>{Vr(n,e),e===Ln.Strife?await t.addStrife(1):await t.add(1,Xn[e])}})))})}))}}))}}]})}}]},Yr={name:"Pyroclastic Flow",type:kn.Major,speed:sr.Fast,energy:3,elements:[ir.Fire,ir.Air,ir.Earth],set:gn.BranchAndClaw,target:or.Land,sourceFilter:[dr.Mountain],range:1,hasDestroyInstructions:!0,hasDamageInstructions:!0,effects:[{textArea:[.602,.642],text:"2 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(2)}},{textArea:[.602,.642],text:"Destroy all <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.destroyAll(e.Explorer)}},{textArea:[.683,.786],text:"If target land is <jungles-wetlands>, add 1 <blight>.",[Pn.InTargetLand]:async({land:e})=>{e.isJungleOrWetlands&&await e.addBlight(1)}},{textArea:[.89,.93],text:"If you have 2 <fire> 3 <air> 2 <earth>:<br>+4 Damage. Add 1 <wilds>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Fire]:2,[ir.Air]:3,[ir.Earth]:2})&&(await t.damage(4),await t.add(1,e.Wilds))}}]},Kr={name:"Savage Transformation",type:kn.Major,speed:sr.Slow,energy:2,elements:[ir.Moon,ir.Animal],set:gn.BranchAndClaw,target:or.Land,range:1,generatesFear:!0,effects:[{textArea:[.623,.663],text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.666,.706],text:"Replace 1 <explorer> with 1 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.replaceOne({pieces:e.Explorer,withPiece:Ln.Beasts})}},{textArea:[.841,.936],text:"If you have 2 <moon> 3 <animal>:<br>Replace 1 additional <explorer> with 1 <beasts> in either target or adjacent land.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Moon]:2,[ir.Animal]:3})&&await t.inThisAndAdjacentLands().where((a=>a.has(e.Explorer))).pickOne((async a=>{await a.replaceOne({pieces:e.Explorer,withPiece:Ln.Beasts})}),{noOptions:"No more <explorer> in target or adjacent land."})}}]},Qr={name:"Smothering Infestation",type:kn.Major,speed:sr.Slow,energy:3,elements:[ir.Water,ir.Plant],set:gn.BranchAndClaw,target:or.Land,range:0,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.602,.642],text:"Add 1 <disease>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Disease)}},{textArea:[.687,.785],text:"If target land is <jungles-wetlands>, 2 <fear> and 3 Damage.",[Pn.InTargetLand]:async({land:e})=>{e.isJungleOrWetlands&&(await e.fear(2),await e.damage(3))}},{textArea:[.894,.934],text:"If you have 2 <water> 2 <plant>: 1 Damage to each Invader.",[Pn.InTargetLand]:async({you:e,land:a})=>{await e.askToConvertElements({[ir.Water]:2,[ir.Plant]:2})&&await a.damageEach(1)}}]},Xr={name:"Strangling Firevine",type:kn.Major,speed:sr.Slow,energy:4,elements:[ir.Fire,ir.Plant],set:gn.BranchAndClaw,target:or.Land,sourceFilter:[dr.Sands],range:1,hasDestroyInstructions:!0,hasDamageInstructions:!0,effects:[{textArea:[.607,.647],text:"Destroy all <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.destroyAll(e.Explorer)}},{textArea:[.64,.68],text:"Add 1 <wilds>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Wilds)}},{textArea:[.676,.716],text:"Add 1 <wilds> in the originating Sands.",[Pn.InTargetLand]:async({$:e,power:a})=>{await a.validOriginSites.pickOne((async a=>{await a.add(1,e.Wilds)}))}},{textArea:[.71,.75],text:"1 Damage per <wilds> in/adjacent to target land.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(a.numberOfPiecesInThisOrAdjacentLands(e.Wilds))}},{textArea:[.86,.934],text:"If you have 2 <fire> 3 <plant>:<br>+1 Damage per <wilds> in/adjacent to target land.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Fire]:2,[ir.Plant]:3})&&await t.damage(t.numberOfPiecesInThisOrAdjacentLands(e.Wilds))}}]},Zr={name:"Sweep Into The Sea",type:kn.Major,speed:sr.Slow,energy:4,elements:[ir.Sun,ir.Air,ir.Water],set:gn.BranchAndClaw,target:or.Land,range:2,hasPushOrGather:!0,hasDestroyInstructions:!0,effects:[{textArea:[.604,.791],text:"Push all <explorer> and <town> one land towards the nearest Ocean.<or>If target land is Coastal, destroy all <explorer> and <town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"Push",textArea:[.607,.679],text:"Push all <explorer> and <town> one land towards the nearest Ocean.",[Pn.Now]:async()=>{await a.inAdjacentLands().where((e=>e.distanceToNearestOcean<a.distanceToNearestOcean)).pickOne((async t=>{await a.push({quantifier:ur.All,pieces:e.ExplorerOrTown,locations:{target:zn.ToThisLocation,location:t}})}),{noOptions:"No land is closer to the Ocean than target land."})}},{actionId:"DestroyAll",label:"Destroy all <explorer> and <town>.",textArea:[.707,.784],text:"If target land is Coastal, destroy all <explorer> and <town>.",[Pn.Now]:async()=>{await a.destroyAll(e.ExplorerOrTown)},condition:()=>a.isCoastal}]})}},{textArea:[.894,.934],text:"If you have 3 <sun> 2 <water>:<br>Repeat on an adjacent land.",[Pn.InTargetLand]:async({isRepeat:e,you:a,power:t,land:n})=>{!e&&await a.askToConvertElements({[ir.Sun]:3,[ir.Water]:2})&&await n.inAdjacentLands().pickOne((async e=>{await t.repeatInLocations([e])}))}}]},ei={name:"Tigers Hunting",type:kn.Major,speed:sr.Fast,energy:2,elements:[ir.Sun,ir.Moon,ir.Animal],set:gn.BranchAndClaw,target:or.Land,sourceFilter:[dr.Jungle],targetFilter:[dr.NonBlight],range:1,hasPushOrGather:!0,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.613,.653],text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.648,.688],text:"Add 1 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Beasts)}},{textArea:[.648,.688],text:"Gather up to 1 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(1,e.Beasts)}},{textArea:[.686,.726],text:"1 Damage per <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(a.numberOf(e.Beasts))}},{textArea:[.686,.726],text:"Push up to 2 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(2,e.Beasts)}},{textArea:[.85,.93],text:"If you have 2 <sun> 2 <moon> 3 <animal>:<br>1 Damage in a adjacent land without <blight>, and +1 Damage per <beasts> there.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Sun]:2,[ir.Moon]:2,[ir.Animal]:3})&&await t.inAdjacentLandsWhere((a=>!a.has(e.Blight))).pickOne((async a=>{await a.damage(1+a.numberOf(e.Beasts))}),{noOptions:"No adjacent land is without <blight>."})}}]},ai={name:"Twisted Flowers Murmur Ultimatums",type:kn.Major,speed:sr.Slow,energy:5,elements:[ir.Sun,ir.Moon,ir.Air,ir.Earth,ir.Plant],set:gn.BranchAndClaw,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Invaders],range:1,generatesFear:!0,hasDamageInstructions:!0,fullText:["4 <fear>.","Add 1 <strife>.","If the Terror Level is 2 or higher, remove 2 Invaders.","If you have 3 <moon> 2 <air> 3 <plant>:<br>+3 <fear>, before the Terror Level check. 3 Damage."],effects:[{textArea:[.607,.647],text:"4 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(4)}},{textArea:[.643,.683],text:"Add 1 <strife>.",[Pn.InTargetLand]:async({land:e})=>{await e.addStrife(1)}},{textArea:[.86,.9],text:"If you have 3 <moon> 2 <air> 3 <plant>:<br>+3 <fear>, before the Terror Level check.",[Pn.InTargetLand]:async({you:e,land:a})=>{await e.askToConvertElements({[ir.Moon]:3,[ir.Air]:2,[ir.Plant]:3})&&await a.fear(3)}},{textArea:[.68,.753],text:"If the Terror Level is 2 or higher, remove 2 Invaders.",[Pn.InTargetLand]:async({$:e,land:a})=>{e.terrorLevel>=2&&await a.remove({amount:2,pieces:e.Invader})}},{textArea:[.896,.936],text:"If you have 3 <moon> 2 <air> 3 <plant>:<br>3 Damage.",[Pn.InTargetLand]:async({you:e,land:a})=>{e.hasElements({[ir.Moon]:3,[ir.Air]:2,[ir.Plant]:3})&&await a.damage(3)}}]},ti={name:"Unlock The Gates Of Deepest Power",type:kn.Major,speed:sr.Fast,energy:4,elements:[ir.Sun,ir.Moon,ir.Fire,ir.Air,ir.Water,ir.Earth,ir.Plant,ir.Animal],set:gn.BranchAndClaw,target:or.Spirit,effects:[{textArea:[.595,.705],text:"Target Spirit gains a Major Power by drawing 2 and keeping 1, without having to Forget another Power Card.",[Pn.TargetSpirit]:async({spirit:e,action:a})=>{a.data.powerGain=await e.gainPowerCard({powerType:kn.Major,drawAmount:2,withoutForgetting:!0,forgetOptional:!0})}},{textArea:[.799,.94],text:"If you have 2 <sun> 2 <moon> 2 <fire> 2 <air> 2 <water> 2 <earth> 2 <plant> 2 <animal>:<br>Target Spirit may now play the Major Power they keep by paying half its cost (round up) OR by Forgetting it at the end of turn. It gains all elemental thresholds.",[Pn.TargetSpirit]:async({$:e,spirit:a,you:t,action:n,power:r})=>{await t.askToConvertElements({[ir.Sun]:2,[ir.Moon]:2,[ir.Fire]:2,[ir.Air]:2,[ir.Water]:2,[ir.Earth]:2,[ir.Plant]:2,[ir.Animal]:2},{optionalThreshold:!1})&&await a.powersWhere((e=>n.data.powerGain.chosen.includes(e))).autoPickOne((async n=>{let i=!1;await e.chooseBetween({effects:[{actionId:"PayEnergy",textArea:[.832,.872],label:`Pay ${Math.ceil(n.costToPlay/2)} energy.`,[Pn.Now]:async()=>{await n.play({payHalfRoundUp:!0,withoutUsingCardPlays:!0}),i=!0},condition:()=>a.energy>=Math.ceil(n.costToPlay/2)},{actionId:"ForgetPower",textArea:[.865,.905],text:`Forget ${dg[n.power].name} at the end of turn.`,[Pn.Now]:async()=>{await n.play({withoutPaying:!0}),await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({power:r.power,players:[t]}),[Pn.AtTimePassesBegin]:async()=>{await n.forget()}}),i=!0}},{actionId:"Neither",text:"Neither."}]}),i&&await e.addSubEffectUntilEndOfTurn({text:"It gains all elemental thresholds.",[Pn.GlobalReminder]:()=>({power:n.power,players:[t]}),[Pn.PowerHasAllThresholds]:e=>e.power===n})}),{prompt:"Pick which Major Power to apply threshold with."})}}]},ni={name:"Unrelenting Growth",type:kn.Major,speed:sr.Slow,energy:4,elements:[ir.Sun,ir.Fire,ir.Water,ir.Plant],set:gn.BranchAndClaw,target:or.Spirit,effects:[{textArea:[.604,.7],text:"Target Spirit adds 2 <presence> and 1 <wilds> to a land at <range-1>.",[Pn.TargetSpirit]:async({$:e,spirit:a,action:t})=>{t.data.addition=await a.addPresenceInRange(1,{together:!0,amount:2}),t.data.addition.length>0&&await t.data.addition[0].location.add(1,e.Wilds)}},{textArea:[.811,.94],text:"If you have 3 <sun> 3 <plant>:<br>In that land, add 1 additional <wilds> and remove 1 <blight>. Target Spirit gains a Power Card.",[Pn.TargetSpirit]:async({$:e,you:a,action:t,spirit:n})=>{if(await a.askToConvertElements({[ir.Sun]:3,[ir.Plant]:3})){const a=t.data.addition[0].location;await a.add(1,e.Wilds),await a.removeBlight(),await n.gainPowerCard()}}}]},ri={name:"Volcanic Eruption",type:kn.Major,speed:sr.Slow,energy:8,elements:[ir.Fire,ir.Earth],set:gn.BranchAndClaw,target:or.Land,sourceFilter:[dr.Mountain],range:1,blightWhiteListedPower:!0,generatesFear:!0,hasDestroyInstructions:!0,hasDamageInstructions:!0,effects:[{textArea:[.605,.645],text:"6 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(6)}},{textArea:[.643,.683],text:"20 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(20)}},{textArea:[.64,.717],text:"Destroy all <dahan> and <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.isLand&&(e.dontCountAs(Ln.Beasts),await a.destroyAll(e.Dahan),await a.destroyAll(e.Beasts))}},{textArea:[.676,.716],text:"Add 1 <blight>.",[Pn.InTargetLand]:async({land:e})=>{await e.addBlight(1)}},{text:"If you have 4 <fire> 3 <earth>:<br>Destroy all Invaders. Add 1 <wilds>. In each adjacent land: 10 Damage. Destroy all <dahan> and <beasts>. If there are no <blight>, add 1 <blight>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Fire]:4,[ir.Earth]:3})&&await e.addSubEffect({effects:[{textArea:[.827,.867],text:"Destroy all Invaders.",[Pn.Now]:async()=>{await t.destroyAll(e.Invader)}},{textArea:[.827,.867],text:"Add 1 <wilds>.",[Pn.Now]:async()=>{await t.add(1,e.Wilds)}},{textArea:[.865,.934],text:"In each adjacent land: 10 Damage. Destroy all <dahan> and <beasts>. If there are no <blight>, add 1 <blight>.",[Pn.Now]:async()=>{await t.inAdjacentLands().selectOrder().forEach((async a=>{await e.addSubEffect({effects:[{textArea:[.861,.901],text:"10 Damage.",[Pn.Now]:async()=>{await a.damage(10)}},{textArea:[.861,.934],text:"Destroy all <dahan> and <beasts>.",[Pn.Now]:async()=>{await a.destroyAll(e.Dahan),await a.destroyAll(e.Beasts)}},{textArea:[.899,.939],text:"If there are no <blight>, add 1 <blight>.",[Pn.Now]:async()=>{a.has(e.Blight)||await a.addBlight(1)}}]})}))}}]})}}]},ii={name:"Angry Bears",type:kn.Major,speed:sr.Slow,energy:3,elements:[ir.Sun,ir.Fire,ir.Animal],set:gn.JaggedEarth,target:or.Land,range:0,hasPushOrGather:!0,generatesFear:!0,hasDestroyInstructions:!0,hasDamageInstructions:!0,effects:[{textArea:[.597,.637],text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.597,.637],text:"2 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(2)}},{textArea:[.65,.776],text:"If no <beasts> are present, add 1 <beasts>. Otherwise, +2 Damage, and Push up to 1 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.possiblyDontCountPiecesAs(Ln.Beasts),a.doesntHave(e.Beasts)?await e.addSubEffect({textArea:[.65,.69],text:"Add 1 <beasts>.",[Pn.Now]:async()=>{await a.add(1,e.Beasts)}}):await e.addSubEffect({textArea:[.69,.775],text:"Otherwise, +2 Damage, and Push up to 1 <beasts>.",[Pn.Now]:async()=>{await a.damage(2),await a.pushUpTo(1,e.Beasts)}})}},{textArea:[.86,.946],text:"If you have 2 <fire> 3 <animal>:<br>1 <fear> and Destroy 1 <explorer>/<town> in an adjacent land with <beasts>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Fire]:2,[ir.Animal]:3})&&(await t.fear(1),await t.adjacentPiecesInLandsWhere((a=>a.isA(e.ExplorerOrTown)&&a.location.has(e.Beasts))).pickOne((async e=>{await e.destroy()}),{noOptions:"No adjacent land with <explorer>/<town> and <beasts>"}))}}]},si={name:"Bargains Of Power And Protection",type:kn.Major,speed:sr.Fast,energy:2,elements:[ir.Sun,ir.Water,ir.Earth,ir.Animal],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Dahan],range:0,fullText:["Remove 1 of your <presence> on the island from the game, setting it on the Reminder Card.","From now on: Each <dahan> within <range-1> of your <presence> provides Defend 1 in its land, and you gain 1 less Energy each turn. (This effect stacks if used multiple times.)","If you have 3 <sun> 2 <water> 2 <earth>:<br>The <presence> instead comes from your <presence> track."],effects:[{text:"Remove 1 of your <presence> on the island from the game.",[Pn.InTargetLand]:async({$:e,you:a})=>{a.unlockedTrackPresence.length>0&&await a.askToConvertElements({[ir.Sun]:3,[ir.Water]:2,[ir.Earth]:2})?await e.addSubEffect({textArea:[.911,.951],text:"If you have 3 <sun> 2 <water> 2 <earth>:<br>The <presence> instead comes from your <presence> track.",[Pn.Now]:async()=>{await a.addPresence({locations:zn.RemoveFromGame})}}):await e.addSubEffect({textArea:[.592,.664],text:"Remove 1 of your <presence> on the island from the game.",[Pn.Now]:async()=>{await a.destroyPresence(1,Wn.RemoveFromGame)}})}},{textArea:[.667,.815],text:"From now on: Each <dahan> within <range-1> of your <presence> provides Defend 1 in its land, and you gain 1 less Energy each turn. (This effect stacks if used multiple times.)",[Pn.InTargetLand]:async({$:e,power:a,you:t})=>{let n=!1;await e.addSubEffect({effectId:In.BargainsOfPowerAndProtection,[Pn.GlobalReminder]:()=>({power:a.power,players:[t]}),[Pn.DefendFromSpirits]:({land:e})=>e.numberOfParticipatingDahan>0&&e.inLandsWithin(1,t).hasOneWhere((e=>e.hasPresenceOf(t)))?e.numberOfParticipatingDahan:0,[Pn.EnergyDebt]:({spirit:e})=>e!==t||n?0:1,[Pn.PreventGainEnergy]:async({spirit:a})=>!n&&a===t&&(n=!0,await e.sendEvent({type:Tn.GenericMain,text:`${t.nameLink} gained 1 less Energy from <p>BargainsOfPowerAndProtection</p>.`}),!0),[Pn.TimePasses]:()=>(n=!1,Promise.resolve())})}}]},oi={name:"Draw Towards A Consuming Void",type:kn.Major,speed:sr.Slow,energy:8,elements:[],set:gn.JaggedEarth,target:or.Land,range:0,hasPushOrGather:!0,generatesFear:!0,hasDestroyInstructions:!0,hasDamageInstructions:!0,effects:[{textArea:[.607,.682],text:"Gather 1 <explorer>, <town>, <city>, <dahan>, <beasts>, and 1 <presence> (from any Spirit) from each adjacent land.",[Pn.InTargetLand]:({$:e,land:a})=>a.inAdjacentLands().forEach((async t=>{for(const n of[e.Explorer,e.Town,e.City,e.Dahan,e.Beasts,e.Presence])await a.gather({amount:1,pieces:n,filter:e=>e===t,pickPiecesEffect:{autoPlayOneOption:!0}})}))},{textArea:[.687,.727],text:"4 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(4)}},{textArea:[.687,.727],text:"15 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(15)}},{textArea:[.687,.727],text:"5 Damage to <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(5,e.Dahan)}},{textArea:[.722,.762],text:"Destroy 1 <presence> from each Spirit.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.eachSpirit((async t=>{await a.destroy({amount:1,pieces:e.Presence,owner:t})}))}},{textArea:[.722,.762],text:"Remove 2 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.destroy({amount:2,pieces:e.Beasts})}},{textArea:[.831,.94],text:"If you have no other power cards in play: Any number of times: Forget a Minor Power, a Major Power, and a Unique Power to perform the above effects again.",[Pn.InTargetLand]:async({$:e,power:a,you:t,land:n})=>{1===t.powerCardsInPlayNotBlessed.length&&t.hasAtLeastNonBlessed(1,En.Minor)&&t.hasAtLeastNonBlessed(1,En.Major)&&t.hasAtLeastNonBlessed(1,En.Unique)&&await e.may({prompt:"Forget a Minor Power, a Major Power, and a Unique Power to perform the above effects again?"})&&(await t.forgetPowers({powerFilter:En.Minor}),await t.forgetPowers({powerFilter:En.Major}),await t.forgetPowers({powerFilter:En.Unique}),await t.resolvePowerInLocations(a,[n],!1,!0))}}]},di={name:"Dream Of The Untouched Land",type:kn.Major,speed:sr.Fast,energy:6,elements:[ir.Moon,ir.Water,ir.Earth,ir.Plant,ir.Animal],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],range:1,blightWhiteListedPower:!0,effects:[{textArea:[.584,.663],text:"Remove up to 3 <blight> and up to 3 Health worth of Invaders.",[Pn.InTargetLand]:async({land:e})=>{await e.removeBlight({amount:3,quantifier:ur.UpTo}),await e.removeInvadersWorthOfHealthUpTo(3)}},{textArea:[.736,.94],text:'If you have 3 <moon> 2 <water> 3 <earth> 2 <plant>:<br>(Max. 1x/game) Add a random new Island Board next to target board. Ignore its Setup icons; add 2 <beasts>, 2 <wilds>, 2 <badlands> and up to 2 <presence> (from any Spirits) anywhere on it. From now on, Build Cards and "Each board/Each land" Adversary Actions skip 1 board.',[Pn.InTargetLand]:async({$:e,you:a,power:t,land:n})=>{e.hasEffectNamed("Dream Of The Untouched Land")||await a.askToConvertElements({[ir.Moon]:3,[ir.Water]:2,[ir.Earth]:3,[ir.Plant]:2})&&await n.boards().pickOne((async a=>{const n=await a.addRandomBoard();null!==n&&await e.addSubEffect({effects:[{[Pn.Now]:async()=>{for(const a of[e.Beasts,e.Wilds,e.Badlands])await n.inLands().pickMultiple({amount:2,effect:{textArea:[.802,.876],text:`Add 2 ${Zn[a].text} anywhere on it.`},forPickedItem:async e=>{await e.add(1,a)},repeatSame:!0})}},{textArea:[.802,.876],text:"Add up to 2 <presence> anywhere on it.",[Pn.Now]:async()=>{await e.fromAllSpirits().pickMultiple({amount:2,forPickedItem:async e=>{await n.addPresence(e)},effect:{autoPlayOneOption:!0},repeatSame:!0})}},{textArea:[.87,.942],text:'From now on, Build Cards and "Each board/Each land" Adversary Actions skip 1 board.',[Pn.Now]:async()=>{await e.clickToContinue(),await e.addSubEffect({effectId:In.DreamOfTheUntouchedLand,[Pn.GlobalReminder]:()=>({power:t.power}),[Pn.BeforeResolvingInvaderCard]:async({invaderAction:a})=>{a===qr.Build&&await e.inBoards().pickOne((async a=>(await e.addSubEffectUntilEndOfTurn({name:"Skip Board",effectId:In.DreamOfTheUntouchedLandSkipBoard,[Pn.OverrideMatchesInvaderCard]:e=>!e.land.boards().has(a)&&void 0}),Promise.resolve())),{text:`From now on, Build Cards and "Each board/Each land" Adversary Actions skip 1 board.<br><br>Choose a Board to skip the following effect:<br><br>${e.parentEffect?.text}`})},[Pn.AfterResolvingBuildCard]:()=>(e.removeEffectsWithId(In.DreamOfTheUntouchedLandSkipBoard),Promise.resolve()),[Pn.BeforeAdversaryActionsOnEachBoard]:async()=>{await e.inBoards().pickOne((async a=>(await e.addSubEffectUntilEndOfTurn({effectId:In.DreamOfTheUntouchedLandSkipBoard,name:"Skip Board",[Pn.PreventAdversaryActionOnBoard]:e=>e.board===a}),Promise.resolve())),{text:`From now on, Build Cards and "Each board/Each land" Adversary Actions skip 1 board.<br><br>Choose a Board to skip the following effect:<br><br>${e.parentEffect?.text}`})},[Pn.AfterAdversaryActionsOnEachBoard]:()=>(e.removeEffectsWithId(In.DreamOfTheUntouchedLandSkipBoard),Promise.resolve())})}}]})}))}}]},li={name:"Focus The Land's Anguish",type:kn.Major,speed:sr.Slow,energy:5,elements:[ir.Sun],set:gn.JaggedEarth,target:or.Land,range:1,hasPushOrGather:!0,blightWhiteListedPower:!0,generatesFear:!0,hasDamageInstructions:!0,fullText:["If this Power Destroys any <town>/<city>, 5 <fear>.","Gather up to 5 <blight>. 1 Damage per <blight>.","If you have 3 <sun>:<br>+1 Damage per <blight>."],effects:[{textArea:[.697,.779],text:"Gather up to 5 <blight>. 1 Damage per <blight>.",[Pn.InTargetLand]:async({$:e,land:a,action:t})=>{await a.gatherUpTo(5,e.Blight);const n=await a.damage(a.numberOf(e.Blight));t.data.destroyedBuilding=n.some((a=>wr[a.removement].isDestroyLike&&a.piece.isA(e.TownOrCity)))}},{textArea:[.894,.934],text:"If you have 3 <sun>:<br>+1 Damage per <blight>.",[Pn.InTargetLand]:async({$:e,you:a,land:t,action:n})=>{if(await a.askToConvertElements({[ir.Sun]:3})){const a=await t.damage(t.numberOf(e.Blight));n.data.destroyedBuilding=n.data.destroyedBuilding||a.some((a=>wr[a.removement].isDestroyLike&&a.piece.isA(e.TownOrCity)))}}},{textArea:[.613,.699],text:"If this Power Destroyed any <town>/<city>, 5 <fear>.",[Pn.InTargetLand]:async({land:e,action:a})=>{a.data.destroyedBuilding&&await e.fear(5)}}]},ci={name:"Forests Of Living Obsidian",type:kn.Major,speed:sr.Slow,energy:4,elements:[ir.Sun,ir.Fire,ir.Earth,ir.Plant],set:gn.JaggedEarth,target:or.Land,range:0,hasPushOrGather:!0,hasDamageInstructions:!0,effects:[{textArea:[.598,.638],text:"Add 1 <badlands>.",[Pn.InTargetLand]:async({$:e,land:a,action:t,power:n})=>{t.data.validOrigins=n.validOriginsGivenTargetLand(a),await a.add(1,e.Badlands)}},{textArea:[.598,.638],text:"Push all <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushAll(e.Dahan)}},{textArea:[.657,.697],text:"1 Damage to each Invader.",[Pn.InTargetLand]:async({land:e})=>{await e.damageEach(1)}},{textArea:[.702,.782],text:"If the origin land is your <sacred>, +1 Damage to each Invader.",[Pn.InTargetLand]:async({you:e,land:a,action:t})=>{t.data.validOrigins.hasOneWhere((a=>a.hasSacredSiteOf(e)))&&await a.damageEach(1)}},{textArea:[.89,.93],text:"If you have 2 <sun> 3 <fire> 3 <earth>:<br>Repeat this Power.",[Pn.InTargetLand]:async({isRepeat:e,you:a,power:t})=>{!e&&await a.askToConvertElements({[ir.Sun]:2,[ir.Fire]:3,[ir.Earth]:3})&&await t.repeat()}}]},hi={name:"Infestation Of Venomous Spiders",type:kn.Major,speed:sr.Fast,energy:4,elements:[ir.Air,ir.Earth,ir.Plant,ir.Animal],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Invaders],range:2,hasPushOrGather:!0,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.607,.647],text:"Add 1 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Beasts)}},{textArea:[.607,.647],text:"Gather up to 1 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(1,e.Beasts)}},{textArea:[.666,.939],text:"For each <beasts>, 1 <fear> (max. 4) and Invaders skip one Action in target land.<br><br>If you have 2 <air> 2 <earth> 3 <animal>:<br>After this Power causes Invaders to skip an Action, 4 Damage.",[Pn.InTargetLand]:async({$:e,you:a,land:t,effect:n,action:r})=>{const i=Math.min(t.numberOf(e.Beasts),4);await t.fear(i);const s={textArea:[.86,.939],text:"If you have 2 <air> 2 <earth> 3 <animal>:<br>After this Power causes Invaders to skip an Action, 4 Damage.",triggerId:e.nextTriggerId(),[Pn.Now]:async()=>{await t.damage(4)}},o=await a.askToConvertElements({[ir.Air]:2,[ir.Earth]:2,[ir.Animal]:3});await t.skipInvaderAction({text:"For each <beasts>, Invaders skip one Action in target land."+(o?"<br><br>After this Power causes Invaders to skip an Action, 4 Damage.":""),amount:i,afterSkip:async()=>{o&&await e.addTrigger(s,n,r)}})}}]},ui={name:"Irresistible Call",type:kn.Major,speed:sr.Fast,energy:6,elements:[ir.Sun,ir.Air,ir.Plant],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Inland],range:2,hasPushOrGather:!0,effects:[{textArea:[.624,.715],text:"Gather 5 <town>, 5 <dahan>, 5 <beasts>, and 15 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.possiblyDontCountPiecesAs(Ln.Beasts),await a.gather({amount:5,pieces:e.Town}),await a.gather({amount:5,pieces:e.Dahan}),await a.gather({amount:5,pieces:e.Beasts}),await a.gather({amount:15,pieces:e.Explorer})}},{textArea:[.848,.939],text:"If you have 2 <sun> 3 <air> 2 <plant>:<br>Invaders skip all Actions in target land. Isolate target land.",[Pn.InTargetLand]:async({you:e,land:a})=>{await e.askToConvertElements({[ir.Sun]:2,[ir.Air]:3,[ir.Plant]:2})&&(await a.skipInvaderAction({text:"Invaders skip all Actions in target land.",all:!0}),await a.isolate())}}]},gi={name:"Melt Earth Into Quicksand",type:kn.Major,speed:sr.Fast,energy:4,elements:[ir.Moon,ir.Water,ir.Earth],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Sands,dr.Wetlands],range:1,generatesFear:!0,hasDestroyInstructions:!0,hasDamageInstructions:!0,effects:[{textArea:[.607,.647],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.607,.647],text:"2 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(2)}},{textArea:[.607,.647],text:"Isolate target land.",[Pn.InTargetLand]:async({land:e})=>{await e.isolate()}},{textArea:[.663,.75],text:"After Invaders/<dahan> are Moved into target land, Destroy them.",[Pn.InTargetLand]:async({$:e,land:a,effect:t,...n})=>{const r={triggerId:e.nextTriggerId(),[Pn.Now]:async({action:t})=>{for(const n of t.parentData.piecesToDestroy)n.isAlive&&n.location===a&&(await e.sendEvent({type:Tn.GenericMain,text:`<p>MeltEarthIntoQuicksand</p> triggered from ${Zn[n.piece].text} moving into ${a.coordinateLink}.`}),await n.destroy())}};await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===a?t.text:void 0,[Pn.AfterMoving]:async({piece:i,source:s,destination:o,movement:d})=>{i.isA(e.InvaderOrDahan)&&s!==a&&o===a&&d!==Mr.Relocate&&(void 0===e.action.data.piecesToDestroy&&(e.action.data.piecesToDestroy=[]),e.action.data.piecesToDestroy.push(i),await e.addTrigger(r,t,n.action,{movingAction:e.action}))}})}},{textArea:[.874,.914],text:"If you have 2 <moon> 4 <water> 2 <earth>:<br>+4 Damage. Add 1 <badlands>. Add 1 <wilds>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Fire]:2,[ir.Water]:4,[ir.Earth]:2})&&(await t.damage(4),await t.add(1,e.Badlands),await t.add(1,e.Wilds))}}]},fi={name:"Sea Monsters",type:kn.Major,speed:sr.Slow,energy:5,elements:[ir.Water,ir.Animal],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Coastal,dr.Wetlands],range:1,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.594,.634],text:"Add 1 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Beasts)}},{textArea:[.641,.681],text:"If Invaders are present, 2 <fear> per <beasts> (max. 8 <fear>).",[Pn.InTargetLand]:async({$:e,land:a})=>{a.hasInvaders&&await a.fear(Math.min(2*a.numberOf(e.Beasts),8))}},{textArea:[.683,.723],text:"3 Damage per <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(3*a.numberOf(e.Beasts))}},{textArea:[.729,.769],text:"1 Damage per <blight>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(a.numberOf(e.Blight))}},{textArea:[.878,.918],text:"If you have 3 <water> 3 <animal>:<br>Repeat this Power.",[Pn.InTargetLand]:async({you:e,isRepeat:a,power:t})=>{!a&&await e.askToConvertElements({[ir.Water]:3,[ir.Animal]:3})&&await t.repeat()}}]},yi={name:"Settle Into Hunting-Grounds",type:kn.Major,speed:sr.Fast,energy:3,elements:[ir.Moon,ir.Fire,ir.Plant,ir.Animal],set:gn.JaggedEarth,target:or.Spirit,targetFilter:[fr.Yourself],generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.595,.687],text:"Your <presence> may count as <badlands> and <beasts>. (Decide per <presence>, per Action.)",[Pn.TargetSpirit]:async({$:e,power:a,you:t})=>{await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({text:"Your <presence> may count as <badlands> and <beasts>. (Decide per <presence>, per Action.)<br><br>Your <presence> cannot move.",power:a.power,players:[t]}),[Pn.PresenceCountsAsBadlandsOrBeasts]:({spirit:e})=>e===t})}},{textArea:[.696,.736],text:"Your <presence> cannot move.",[Pn.TargetSpirit]:async({$:e,you:a})=>{await e.addSubEffectUntilEndOfTurn({[Pn.PreventMovePiece]:({piece:e,movement:t})=>e.isAPresenceOf(a)&&t!==Mr.Relocate})}},{textArea:[.845,.937],text:"If you have 2 <plant> 3 <animal>:<br>2 <fear> and 2 Damage in on of your lands.",[Pn.TargetSpirit]:async({you:e})=>{await e.askToConvertElements({[ir.Plant]:2,[ir.Animal]:3})&&await e.inLands().pickOne((async e=>{await e.fear(2),await e.damage(2)}))}}]},pi={name:"Sleep And Never Waken",type:kn.Major,speed:sr.Fast,energy:3,elements:[ir.Moon,ir.Air,ir.Earth,ir.Animal],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.Sands],range:2,generatesFear:!0,effects:[{textArea:[.594,.634],text:"Invaders skip all Actions in target land.",[Pn.InTargetLand]:async({land:e})=>{await e.skipInvaderAction({all:!0})}},{textArea:[.648,.923],text:"1 <fear> per 2 <explorer> this Power Removes. Remove up to 2 <explorer>.<br><br>If you have 3 <moon> 2 <air> 2 <animal>:<br>Remove up to 6 <explorer> from among your lands.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{const n=[];n.push(...await t.remove({quantifier:ur.UpTo,amount:2,pieces:e.Explorer})),await a.askToConvertElements({[ir.Moon]:3,[ir.Air]:2,[ir.Animal]:2})&&await a.forPieces().pickMultiple({amount:6,where:a=>a.isA(e.Explorer),forPickedItem:async e=>{n.push(...await e.remove())},optional:!0});const r=n.filter((a=>a.piece.isA(e.Explorer)&&a.removement===Wn.Remove)).length;await t.fear(Math.floor(r/2))}}]},wi={name:"Spill Bitterness Into The Earth",type:kn.Major,speed:sr.Fast,energy:5,elements:[ir.Fire,ir.Water,ir.Earth],set:gn.JaggedEarth,target:or.Land,range:0,blightWhiteListedPower:!0,hasDamageInstructions:!0,effects:[{textArea:[.601,.641],text:"6 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(6)}},{textArea:[.601,.641],text:"Add 2 <badlands>/<strife> and 1 <blight>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.isLand&&await a.add(2,e.BadlandsOrStrife),await a.addBlight(1)}},{textArea:[.648,.733],text:"In up to 3 adjacent lands with <blight>, add 1 <badlands>/<strife>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.inAdjacentLands().pickMultiple({amount:3,where:a=>a.has(e.Blight),forPickedItem:async a=>{await a.add(1,e.BadlandsOrStrife)}})}},{textArea:[.848,.927],text:"If you have 3 <fire> 3 <water>:<br>In up to 3 adjacent lands, 1 Damage to each Invader.",[Pn.InTargetLand]:async({you:e,land:a})=>{await e.askToConvertElements({[ir.Fire]:3,[ir.Water]:3})&&await a.inAdjacentLands().pickMultiple({amount:3,forPickedItem:async e=>{await e.damageEach(1)}})}}]},mi={name:"Storm-Swath",type:kn.Major,speed:sr.Slow,energy:3,elements:[ir.Fire,ir.Air,ir.Water],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],range:1,generatesFear:!0,hasDestroyInstructions:!0,hasDamageInstructions:!0,modifiesRange:({spirit:e,withConvert:a})=>e.hasElements({[ir.Fire]:2,[ir.Air]:3,[ir.Water]:2},a)?1:0,payForRange:async({spirit:e})=>{await e.convertElements({[ir.Fire]:2,[ir.Air]:3,[ir.Water]:2})},effects:[{textArea:[.6,.64],text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.601,.676],text:"In both origin land and target land: 1 Damage to each Invader.",[Pn.InTargetLand]:async({land:e,power:a,action:t})=>{await a.validOriginsGivenTargetLand(e).pickOne((async a=>{await a.damageEach(1),await e.damageEach(1),t.data.originLand=a}),{prompt:"Select origin land."})}},{textArea:[.773,.94],text:"If you have 2 <fire> 3 <air> 2 <water>:<br>+1 <fear>. This Power has <range+1>.<br>In a land adjacent to both origin and target, 1 Damage to each Invader.<br>In lands where you did Damage, Destroy 1 <town>.",[Pn.InTargetLand]:async({$:e,you:a,land:t,action:n})=>{if(await a.askToConvertElements({[ir.Fire]:2,[ir.Air]:3,[ir.Water]:2})){let a=null;await e.addSubEffect({effects:[{textArea:[.773,.813],text:"If you have 2 <fire> 3 <air> 2 <water>:<br>+1 <fear>.",[Pn.Now]:async()=>{await t.fear(1)}},{textArea:[.819,.893],text:"In a land adjacent to both origin and target, 1 Damage to each Invader.",[Pn.Now]:async()=>{await e.inLandsWhere((e=>e.isAdjacentTo(t)&&e.isAdjacentTo(n.data.originLand))).pickOne((async e=>{await e.damageEach(1),a=e}),{noOptions:"No land adjacent to both origin and target."})}},{textArea:[.903,.943],text:"In lands where you did Damage, Destroy 1 <town>.",[Pn.Now]:async()=>{await e.addSubEffect({effects:[{highlightLocations:[t],[Pn.Now]:async()=>{await t.destroyOne(e.Town)}},{highlightLocations:[n.data.originLand],[Pn.Now]:async()=>{n.data.originLand!==t&&await n.data.originLand.destroyOne(e.Town)}},{highlightLocations:[a],[Pn.Now]:async()=>{await(a?.destroyOne(e.Town))}}]})}}]})}}}]},vi={name:"The Wounded Wild Turns On Its Assailants",type:kn.Major,speed:sr.Slow,energy:4,elements:[ir.Fire,ir.Plant,ir.Animal],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Blight],range:1,hasPushOrGather:!0,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.613,.653],text:"Add 2 <badlands>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(2,e.Badlands)}},{textArea:[.613,.653],text:"Gather up to 2 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(2,e.Beasts)}},{textArea:[.67,.71],text:"1 Damage per <blight>/<beasts>/<wilds>.",[Pn.InTargetLand]:async({$:e,land:a,action:t})=>{t.data.removed=await a.damage(a.numberOf(e.Blight)+a.numberOf(e.Beasts)+a.numberOf(e.Wilds))}},{textArea:[.837,.924],text:"If you have 2 <fire> 3 <plant> 2 <animal>:<br>2 <fear> per Invader Destroyed by this Power (max. 8 <fear>).",[Pn.InTargetLand]:async({you:e,land:a,action:t})=>{if(await e.askToConvertElements({[ir.Fire]:2,[ir.Plant]:3,[ir.Animal]:2})){const e=t.data.removed.filter((({piece:e,removement:a})=>e.isInvader&&wr[a].isDestroyLike)).length;await a.fear(Math.min(2*e,8))}}}]},xi={name:"Thickets Erupt With Every Touch Of Breeze",type:kn.Major,speed:sr.Fast,energy:3,elements:[ir.Air,ir.Plant],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Inland],range:2,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.607,.647],text:"2 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(2)}},{textArea:[.659,.792],text:"Then either: Add 3 <wilds><or>Remove 1 <blight>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"AddWilds",textArea:[.663,.703],text:"Add 3 <wilds>.",[Pn.Now]:async()=>{await a.add(3,e.Wilds)}},{actionId:"RemoveBlight",textArea:[.748,.788],text:"Remove 1 <blight>.",[Pn.Now]:async()=>{await a.removeBlight()}}]})}},{textArea:[.887,.927],text:"If you have 3 <plant>:<br>1 <fear>. +2 Damage.",[Pn.InTargetLand]:async({you:e,land:a})=>{await e.askToConvertElements({[ir.Plant]:3})&&(await a.fear(1),await a.damage(2))}}]},bi={name:"Transform To A Murderous Darkness",type:kn.Major,speed:sr.Slow,energy:6,elements:[ir.Moon,ir.Fire,ir.Air,ir.Water,ir.Plant],set:gn.JaggedEarth,target:or.Spirit,hasPushOrGather:!0,generatesFear:!0,hasDamageInstructions:!0,fullText:["Target Spirit may choose one of their <sacred>.","In that land: Replace each of their <presence> with <badlands>; the Replaced <presence> leaves the game.","Push any number of those <badlands>. 3 <fear>.","3 Damage per <presence> Replaced.","If you have 3 <moon> 2 <fire> 2 <air>:<br>1 Damage in an adjacent land.<br>1 Damage in an adjacent land."],effects:[{textArea:[.59,.63],text:"Target Spirit may choose one of their <sacred>.",[Pn.TargetSpirit]:async({$:e,spirit:a,action:t})=>{await a.inSacredSites().optionallyPickOne((async n=>{let r;t.data.targetLand=n,await e.addSubEffect({effects:[{textArea:[.64,.709],text:"In that land: Replace each of their <presence> with <badlands>; the Replaced <presence> leaves the game.",[Pn.Now]:async()=>{await n.possiblyDontCountPiecesAs(Ln.Presence),r=await n.replaceIndividually({amount:n.numberOfPresenceOf(a),pieces:e.Presence,withPiece:Ln.Badlands,owner:a,removement:Wn.RemoveFromGame})}},{textArea:[.705,.745],text:"Push any number of those <badlands>.",[Pn.Now]:async()=>{e.action.data.dontCountAnythingAsBadlands=!0,await n.pushUpTo(r.added.length,e.Badlands)}},{textArea:[.705,.745],text:"3 <fear>.",[Pn.Now]:async()=>{await n.fear(3)}},{textArea:[.742,.782],text:"3 Damage per <presence> Replaced.",[Pn.Now]:async()=>{e.action.data.dontCountAnythingAsBadlands=!1,await n.damage(3*r.removed.length)}}]})}))}},{text:"If you have 3 <moon> 2 <fire> 2 <air>:<br>1 Damage in an adjacent land.<br>1 Damage in an adjacent land.",[Pn.TargetSpirit]:async({$:e,you:a,action:t})=>{if(await a.askToConvertElements({[ir.Moon]:3,[ir.Fire]:2,[ir.Air]:2})){const a=t.data.targetLand;a&&(await e.addSubEffect({text:"1 Damage in an adjacent land.",textArea:[.867,.907],[Pn.Now]:async()=>{await a.damageInAdjacentLands(1)}}),await e.addSubEffect({text:"1 Damage in an adjacent land.",textArea:[.9,.94],[Pn.Now]:async()=>{await a.damageInAdjacentLands(1)}}))}}}]},Ti={name:"Trees Radiate Celestial Brilliance",type:kn.Major,speed:sr.Fast,energy:3,elements:[ir.Sun,ir.Moon,ir.Plant],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Jungle,dr.NonBlight],range:1,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.62,.66],text:"3 <fear>",[Pn.InTargetLand]:async({land:e})=>{await e.fear(3)}},{textArea:[.62,.66],text:"Defend 6",[Pn.InTargetLand]:async({land:e})=>{await e.defend(6)}},{textArea:[.68,.766],text:"This turn, Invaders in target land skip the next Build Action.",[Pn.InTargetLand]:async({land:e})=>{await e.skipInvaderAction({filter:e=>e.invaderAction===qr.Build,next:!0})}},{textArea:[.888,.928],text:"If you have 3 <sun> 2 <moon> 2 <plant>:<br>1 Damage per <sun> you have.",[Pn.InTargetLand]:async({you:e,land:a})=>{await e.askToConvertElements({[ir.Sun]:3,[ir.Moon]:2,[ir.Plant]:2})&&(await e.askToConvertElementsToCombo({[ir.Sun]:1}),await a.damage(e.elements[ir.Sun]))}}]},Ai={name:"Unleash A Torrent Of The Selfs Own Essence",type:kn.Major,speed:sr.Fast,energy:2,elements:[ir.Sun,ir.Moon,ir.Fire,ir.Water],set:gn.JaggedEarth,target:or.Spirit,targetFilter:[fr.Yourself],hasDamageInstructions:!0,fullText:["Gain 4 Energy. You may Forget a Power Card to gain 4 more Energy.<or>Pay X Energy (min.1) to deal X Damage in a land at <range-0>.","If you have 2 <sun> 3 <fire>:<br>You may do both."],effects:[{textArea:[.601,.786],text:"Gain 4 Energy. You may Forget a Power Card to gain 4 more Energy.<or>Pay X Energy (min.1) to deal X Damage in a land at <range-0>.",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{const t={actionId:"GainEnergy",textArea:[.598,.676],text:"Gain 4 Energy. You may Forget a Power Card to gain 4 more Energy.",[Pn.Now]:async()=>{await a.gainEnergy(4),await e.may({prompt:"Forget a Power Card to gain 4 more Energy?"})&&(await a.forgetPowers(),await a.gainEnergy(4))}},n={actionId:"DealDamage",textArea:[.702,.786],text:"Pay X Energy (min.1) to deal X Damage in a land at <range-0>.",condition:()=>a.energy>=1,[Pn.Now]:async()=>{const t=await e.selectX(1,a.energy);await a.payEnergy(t),await a.inLandsWithinRange(0).pickOne((async e=>{await e.damage(t)}))}};await e.chooseBetween({effects:[t,n,{actionId:"DoBoth",textArea:[.888,.928],text:"Do both.",condition:()=>!e.treatingAllOrsAsAnds&&a.hasElementsWithConvert({[ir.Sun]:2,[ir.Fire]:3}),effects:[{[Pn.Now]:async()=>{await a.convertElements({[ir.Sun]:2,[ir.Fire]:3})}},t,n]}]})}}]},Ii={name:"Utter A Curse Of Dread And Bone",type:kn.Major,speed:sr.Slow,energy:4,elements:[ir.Moon,ir.Animal],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],range:1,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.604,.687],text:"For each <blight> in or adjacent to target land, add 1 <badlands>, 1 <disease> or 1 <strife>. (Max +3 of each.)",[Pn.InTargetLand]:async({$:e,land:a,action:t})=>{const n=a.numberOf(e.Blight)+a.inAdjacentLocations().sum((a=>a.isLandForBlight?a.numberOf(e.Blight):0));t.data.addedPieces={},await Jr(n,(async r=>{await e.chooseBetween({text:`Select piece. ${n-r} left.`,effects:[e.Badlands,e.Disease,e.Strife].map((e=>({actionId:e,label:Zn[e].text,condition:()=>(t.data.addedPieces[e]??0)<3,[Pn.Now]:async()=>{t.data.addedPieces[e]=(t.data.addedPieces[e]??0)+1,await a.add(1,e)}})))})}))}},{textArea:[.692,.732],text:"Then: 2 <fear>. 1 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2),await e.damage(1)}},{textArea:[.831,.934],text:"If you have 3 <moon> 2 <animal>:<br>For each type of token you added, add 1 more within <range-1>. 1 Damage in an adjacent land.",[Pn.InTargetLand]:async({$:e,you:a,land:t,action:n})=>{await a.askToConvertElements({[ir.Moon]:3,[ir.Animal]:2})&&await e.addSubEffect({effects:[{textArea:[.831,.906],text:"If you have 3 <moon> 2 <animal>:<br>For each type of token you added, add 1 more within <range-1>.",[Pn.Now]:async()=>{for(const r of Object.keys(n.data.addedPieces))r===e.Strife?await t.forPiecesWithin(1,a).where((e=>e.isInvader)).pickOne((async e=>{await e.addStrife()}),{prompt:"Add 1 <strife> to an Invader within <range-1>."}):await t.inLandsWithin(1,a).pickOne((async e=>{await e.add(1,r)}),{prompt:`Pick a land to add ${Zn[r].text}.`})}},{textArea:[.899,.939],text:"1 Damage in an adjacent land.",[Pn.Now]:async()=>{await t.damageInAdjacentLands(1)}}]})}}]},Pi={name:"Vanish Softly Away Forgotten By All",type:kn.Major,speed:sr.Slow,energy:3,elements:[ir.Moon,ir.Air],set:gn.JaggedEarth,target:or.Land,range:2,effects:[{textArea:[.587,.788],text:"Remove 1 Invader and 1 <explorer>/<town>.<or>Remove all Damaged Invaders.<br><br>Adversary or Scenario rules that prevent or alter Removal do not affect this Power.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.addEffectUntilEndOfActionTree({[Pn.PreventRemovalEffects]:()=>!0}),await e.chooseBetween({effects:[{actionId:"RemoveInvader",textArea:[.588,.628],text:"Remove 1 Invader and 1 <explorer>/<town>.",[Pn.Now]:async()=>{await a.remove({amount:1,pieces:e.Invader}),await a.remove({amount:1,pieces:e.ExplorerOrTown})}},{actionId:"RemoveDamaged",textArea:[.657,.697],text:"Remove all Damaged Invaders.",[Pn.Now]:async()=>{await a.remove({quantifier:ur.All,pieces:e.Invader,filter:e=>e.damage>0})}}]})}},{textArea:[.88,.95],text:"If you have 3 <moon> 3 <air>:<br>In any 2 lands with 4 or more Invaders: Remove 1 Invader.",[Pn.InTargetLand]:async({$:e,you:a})=>{await a.askToConvertElements({[ir.Moon]:3,[ir.Air]:3})&&await e.inLandsWhere((a=>a.numberOf(e.Invader)>=4)).pickMultiple({amount:2,forPickedItem:async a=>{await a.remove({amount:1,pieces:e.Invader})}})}}]},Si={name:"Voice Of Command",type:kn.Major,speed:sr.Fast,energy:3,elements:[ir.Sun,ir.Air],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Dahan],range:1,hasPushOrGather:!0,hasDamageInstructions:!0,fullText:["1 Damage per <dahan>/<explorer>, to <town>/<city> only.","Defend 2.","During Ravage Actions, <explorer> fight alongside <dahan>. (Deal/take Damage at the same time, and to/from the same sources.)","If you have 3 <sun> 2 <air>:<br>First, Gather up to 2 <explorer>/<town>/<dahan>."],effects:[{textArea:[.878,.918],text:"If you have 3 <sun> 2 <air>:<br>First, Gather up to 2 <explorer>/<town>/<dahan>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Sun]:3,[ir.Air]:2})&&await t.gatherUpTo(2,e.ExplorerTownOrDahan)}},{textArea:[.597,.637],text:"1 Damage per <dahan>/<explorer>, to <town>/<city> only.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(a.numberOf(e.Dahan)+a.numberOf(e.Explorer),e.TownOrCity)}},{textArea:[.653,.693],text:"Defend 2.",[Pn.InTargetLand]:async({land:e})=>{await e.defend(2)}},{textArea:[.653,.766],text:"During Ravage Actions, <explorer> fight alongside <dahan>. (Deal/take Damage at the same time, and to/from the same sources.)",[Pn.InTargetLand]:async({$:e,land:a,effect:t})=>{await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===a?t.text:void 0,[Pn.ExplorersFightWithDahan]:e=>e.land===a})}}]},Ei={name:"Walls Of Rock And Thorn",type:kn.Major,speed:sr.Fast,energy:4,elements:[ir.Sun,ir.Earth,ir.Plant],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Mountain,dr.Jungle],range:2,hasDamageInstructions:!0,effects:[{textArea:[.597,.637],text:"2 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(2)}},{textArea:[.597,.637],text:"Defend 8.",[Pn.InTargetLand]:async({land:e})=>{await e.defend(8)}},{textArea:[.653,.693],text:"Add 1 <wilds>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Wilds)}},{textArea:[.653,.693],text:"Isolate target land.",[Pn.InTargetLand]:async({land:e})=>{await e.isolate()}},{text:"If you have 2 <earth> 2 <plant>:<br>+2 Damage. +2 Defend. Add 1 <badlands>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Earth]:2,[ir.Plant]:2})&&(await e.addSubEffect({effects:[{textArea:[.822,.862],text:"+2 Damage.",[Pn.Now]:async()=>{await t.damage(2)}}]}),await e.addSubEffect({effects:[{textArea:[.822,.862],text:"+2 Defend.",[Pn.Now]:async()=>{await t.defend(2)}}]}),await e.addSubEffect({effects:[{textArea:[.865,.905],text:"Add 1 <badlands>.",[Pn.Now]:async()=>{await t.add(1,e.Badlands)}}]}))}}]},Oi={name:"Weave Together The Fabric Of Place",type:kn.Major,speed:sr.Fast,energy:4,elements:[ir.Sun,ir.Moon,ir.Air,ir.Water,ir.Earth],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],range:1,generatesFear:!0,effects:[{textArea:[.591,.776],text:"Target land and a land adjacent to it become a single land for this turn. (It has the terrain and land # of both lands. When this effect expires, divide pieces as you wish; all of them are considered moved.)",[Pn.InTargetLand]:async({$:e,land:a,...t})=>{await a.inAdjacentLands().pickOne((async n=>{const r=n.adjacentLocations.filter((e=>!a.isAdjacentTo(e)&&a!==e)).map((e=>({land1:a,land2:e})));await n.move({quantifier:ur.All,pieces:Xn.AllPieces,movement:Mr.Relocate,locations:{target:zn.ToThisLocation,location:a}}),n.exists=!1,await e.addSubEffectUntilEndOfTimePasses({[Pn.LocationIsOcean]:({location:e})=>e===a&&n.isOcean,[Pn.LocationIsTerrain]:({location:e,terrain:t})=>e===a&&n.terrain===t,[Pn.ExtraLandNumber]:({location:e})=>e===a&&a.landNumber!==n.landNumber?n.landNumber:null,[Pn.ExtraBoard]:({location:e})=>e===a&&a.board!==n.board?n.board:null,[Pn.Reminder]:e=>e===a||e===n?t.effect.text:void 0,[Pn.BoardHasExtraLocation]:({board:e})=>n.board===e&&a.board!==e?a:null,[Pn.AtTimePassesEnds]:async()=>{a.exists&&(n.exists=!0),e.removeThisEffect(),e.setupAdjacencies(),await e.doSpiritAction((async()=>{await a.forPieces().forEach((async e=>{await e.move({locations:{target:zn.AnyLocations},destinationFilter:e=>e===a||e===n,oceanIsAllowed:!0,pickPiecesEffect:{textArea:[.707,.779],highlightLocations:[a,n],text:"When this effect expires, divide pieces as you wish; all of them are considered moved."}})}))}),{spirit:t.action.spirit})},[Pn.ExtraAdjacency]:()=>r}),e.setupAdjacencies()}))}},{textArea:[.864,.934],text:"If you have 4 <air>:<br>Isolate the joined land. If it has Invaders, 2 <fear>, and Remove up to 2 Invaders.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Air]:4})&&(await t.isolate(),t.hasInvaders&&(await t.fear(2),await t.remove({quantifier:ur.UpTo,amount:2,pieces:e.Invader})))}}]},ki={name:"Bargain Of Coursing Paths",type:kn.Major,speed:sr.Fast,energy:2,elements:[ir.Moon,ir.Air,ir.Water,ir.Earth],set:gn.NatureIncarnate,target:or.Land,targetFilter:[dr.TwoDahan],range:0,effects:[{textArea:[.907,.947],text:"Bargain: 1 <presence> now and -1 Energy/turn.<br><br>If you have 3 <air> 2 <water> 2 <earth>:<br>The <presence> cost comes from your <presence> tracks.",[Pn.InTargetLand]:async({$:e,power:a,you:t})=>{t.unlockedTrackPresence.length>0&&await t.askToConvertElements({[ir.Air]:3,[ir.Water]:2,[ir.Earth]:2})?await e.addSubEffect({[Pn.Now]:async()=>{await t.addPresence({locations:zn.RemoveFromGame})}}):await e.addSubEffect({textArea:[.588,.628],text:"Bargain: 1 <presence> now and -1 Energy/turn.",[Pn.Now]:async()=>{await t.destroyPresence(1,Wn.RemoveFromGame)}});let n=!1;await e.addSubEffect({effectId:In.BargainsOfCoursingPath,[Pn.GlobalReminder]:()=>({textArea:[.588,.628],text:"-1 Energy/turn.<br><br>"+(n?"Have paid cost this turn.":"Have not paid cost this turn."),ongoing:!0,power:a.power,players:[t]}),[Pn.EnergyDebt]:({spirit:e})=>e!==t||n?0:1,[Pn.PreventGainEnergy]:async({spirit:a})=>!n&&a===t&&(n=!0,await e.sendEvent({type:Tn.GenericMain,text:`${t.nameLink} gained 1 less Energy from <p>BargainOfCoursingPaths</p>.`}),!0),[Pn.TimePasses]:()=>(n=!1,Promise.resolve())})}},{textArea:[.63,.706],text:"Now: Mark both target land and another land with 2 or more <dahan>.",[Pn.InTargetLand]:async({$:e,land:a,action:t})=>{t.data.markedLands=[a],await e.addSubEffect({[Pn.Reminder]:e=>t.data.markedLands.includes(e)?"Ongoing: After pieces are added or moved into the marked lands: choose any land, then Move those pieces directly to that land.":void 0}),await e.inLandsWhere((t=>t!==a&&t.hasAtLeast(2,e.Dahan))).pickOne((e=>(t.data.markedLands.push(e),Promise.resolve())),{noOptions:"No other land with 2 or more <dahan>."})}},{textArea:[.71,.818],text:"Ongoing: After pieces are added or moved into the marked lands: choose any land, then Move those pieces directly to that land.",[Pn.InTargetLand]:async({$:e,...a})=>{const t=a.action.data.markedLands;await e.afterPiecesAreAddedOrMovedAddTrigger({reminder:!1,permanent:!0,pieces:Xn.AllPieces,locationFilter:e=>t.includes(e),trigger:{triggerId:e.nextTriggerId(),[Pn.Now]:async({action:a})=>{for(const n of[...a.parentData.piecesAddedOrMoved])n.isA(e.InvaderOrDahan)&&!n.isAlive||!t.includes(n.location)||await n.move({locations:{target:zn.AnyLands}})}},effect:a.effect,action:a.action})}}]},Ci={name:"Bombard With Boulders And Stinging Seeds",type:kn.Major,speed:sr.Slow,energy:2,elements:[ir.Air,ir.Earth,ir.Plant],set:gn.NatureIncarnate,target:or.Land,sourceFilter:[dr.MountainOrJungles],range:2,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.629,.67],text:"1 <fear>",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.629,.67],text:"2 Damage",[Pn.InTargetLand]:async({land:e})=>{await e.damage(2)}},{textArea:[.696,.737],text:"Add 1 <badlands>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Badlands)}},{textArea:[.854,.938],text:"If you have 2 <air>, 2 <earth>, 3 <plant>:<br><br>1 <fear>. 2 Damage. Add 1 <wilds>.",[Pn.InTargetLand]:async({you:e,land:a,$:t})=>{await e.askToConvertElements({[ir.Air]:2,[ir.Earth]:2})&&await t.addSubEffect({effects:[{text:"1 <fear>.",[Pn.Now]:async()=>{await a.fear(1)}},{text:"2 Damage.",[Pn.Now]:async()=>{await a.damage(2)}},{text:"Add 1 <wilds>.",[Pn.Now]:async()=>{await a.add(1,t.Wilds)}}]})}}]},Di={name:"Exaltation Of The Incandescent Sky",type:kn.Major,speed:sr.Fast,energy:7,elements:[ir.Sun,ir.Fire,ir.Air,ir.Water],set:gn.NatureIncarnate,target:or.Spirit,targetFilter:[fr.Another],generatesFear:!0,hasDamageInstructions:!0,fullText:["Target Spirit may play 1 Power Card by paying its cost, make up to 2 of their Powers <fast> this turn, and do 3 Damage in one of their lands.","You may do likewise.","If you have<br>3 <sun> 3 <fire> 4 <air> 2 <water>:<br><br>In any 4 lands on the island, Skip 1 Invader Action. 5 <fear> (total)."],effects:[{textArea:[.596,.738],text:"Target Spirit may play 1 Power Card by paying its cost, make up to 2 of their Powers <fast> this turn, and do 3 Damage in one of their lands.",[Pn.TargetSpirit]:async({$:e,you:a,spirit:t})=>{await t.andAnotherSpirit(a,{now:async(a,t)=>{await e.addSubEffect({effects:[{textArea:t?[.593,.671]:[.729,.77],text:(t?"Target Spirit":"You")+" may play 1 Power Card by paying its cost.",[Pn.Now]:async()=>{await a.playAPowerCardByPayingItsCost()}},{textArea:t?[.629,.701]:[.729,.77],text:`${t?"Target Spirit":"You"} may make up to 2 of ${t?"their":"your"} Powers <fast> this turn.`,[Pn.Now]:async()=>{await e.clickToContinue(),await a.gainMakeFastBuff({amount:2})}},{textArea:t?[.693,.734]:[.729,.77],text:`${t?"Target Spirit deals":"You deal"} 3 Damage in one of ${t?"their":"your"} lands.`,[Pn.Now]:async()=>{await a.inLands().pickOne((async e=>{await e.damage(3)}))}}]})}})}},{textArea:[.771,.935],text:"If you have<br>3 <sun> 3 <fire> 4 <air> 2 <water>:<br><br>In any 4 lands on the island, Skip 1 Invader Action. 5 <fear> (total).",[Pn.TargetSpirit]:async({you:e,$:a})=>{await e.askToConvertElements({[ir.Sun]:3,[ir.Fire]:3,[ir.Air]:4,[ir.Water]:2})&&(await a.inLands().pickMultiple({amount:4,forPickedItem:async e=>{await e.skipInvaderAction()}}),await a.fear(5))}}]},Bi={name:"Flocking Red Talons",type:kn.Major,speed:sr.Fast,energy:3,elements:[ir.Air,ir.Water,ir.Plant,ir.Animal],set:gn.NatureIncarnate,target:or.Land,sourceFilter:[dr.Wetlands],range:3,hasPushOrGather:!0,hasDamageInstructions:!0,effects:[{textArea:[.612,.653],text:"Add 1 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Beasts)}},{textArea:[.61,.683],text:"Move up to 2 <beasts> within <range-3> to target land.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await t.forPiecesWithin(3,a).where((a=>a.isA(e.Beasts))).pickMultiple({amount:2,forPickedItem:async e=>{await e.move({locations:{target:zn.ToThisLocation,location:t}})},repeatSame:!0,optional:!0})}},{textArea:[.65,.762],text:"For each <beasts> present, choose a different Invader. 1 Damage to each of those Invaders.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.piecesThatAre(e.Invader).pickMultiple({amount:a.numberOf(e.Beasts),forPickedItem:async e=>{await e.damageOnlyThis(1)}})}},{textArea:[.718,.759],text:"Push 1 <explorer>/<town> per <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.push({amount:a.numberOf(e.Beasts),pieces:e.ExplorerOrTown})}},{textArea:[.774,.935],text:"If you have 2 <air> 2 <plant> 3 <animal>:<br>Repeat this Power on a different land within <range-3> of target land.",[Pn.InTargetLand]:async({you:e,land:a,power:t,isRepeat:n})=>{!n&&await e.askToConvertElements({[ir.Air]:2,[ir.Plant]:2,[ir.Animal]:3})&&await a.inLandsWithin(3).where((e=>e!==a)).pickOne((async e=>{await t.repeatInLocations([e])}))}}]},Li={name:"Fragments Of Yesteryear",type:kn.Major,speed:sr.Slow,energy:7,elements:[ir.Sun,ir.Moon],set:gn.NatureIncarnate,target:or.Land,range:0,mayBeSpeed:{effect:{textArea:[.726,.82],text:"If you have 3 <sun>:<br>This power may be <fast>.",[Pn.Now]:async({action:e})=>{await e.spirit.convertElements({[ir.Sun]:3}),await e.power.makeFast()}},condition:({speed:e,spirit:a})=>e===sr.Fast&&a.hasElementsWithConvert({[ir.Sun]:3})},fullText:["Remove all pieces, then Add the pieces matching the target land's Setup Symbols.","If you have 3 <sun>:<br>This power may be <fast>.","If you have 3 <moon>:<br>Don't Remove <dahan>, any Spirit's <presence>, or Spirit Tokens. Don't Add Invaders/<blight>."],effects:[{textArea:[.607,.946],text:"Remove all pieces, then Add the pieces matching the target land's Setup Symbols.<br><br>If you have 3 <moon>:<br>Don't Remove <dahan>, any Spirit's <presence>, or Spirit Tokens. Don't Add Invaders/<blight>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Moon]:3})?(await t.remove({quantifier:ur.All,pieces:e.AllPiecesButDahanPresenceAndSpiritTokens,autoPlay:!0}),await t.restoreToSetupSymbols({removeFirst:!1,exceptPieces:[e.Invader,e.Blight]})):await t.restoreToSetupSymbols()}}]},Fi={name:"Inspire The Release Of StolenLands",type:kn.Major,speed:sr.Slow,energy:4,elements:[ir.Sun,ir.Water,ir.Plant,ir.Animal],set:gn.NatureIncarnate,target:or.Land,targetFilter:[dr.NonBlight],hasPushOrGather:!0,range:2,fullText:["Gather up to 3 <dahan>. Remove up to 3 Health worth of Invaders per <dahan>.","If you have 3 <sun> 3 <water> 2 <animal>:<br><br>This Power can target lands with <blight>.","If <dahan> are present, Remove 1 <blight> from target land, then Remove 1 <explorer>, 1 <town>, and 1 <city> from a land with <range-1> (of target land)."],effects:[{textArea:[.713,.843],text:"If you have 3 <sun> 3 <water> 2 <animal>:<br><br>This Power can target lands with <blight>.",[Pn.InTargetLand]:async({$:e,land:a,you:t})=>{a.has(e.Blight)&&!await t.askToConvertElements({[ir.Sun]:3,[ir.Water]:3,[ir.Animal]:2})||await e.addSubEffect({effects:[{textArea:[.618,.659],text:"Gather up to 3 <dahan>.",[Pn.Now]:async()=>{await a.gatherUpTo(3,e.Dahan)}},{textArea:[.621,.694],text:"Remove up to 3 Health worth of Invaders per <dahan>.",[Pn.Now]:async()=>{await a.removeInvadersWorthOfHealthUpTo(3*a.numberOf(e.Dahan))}},{textArea:[.834,.941],text:"If <dahan> are present, Remove 1 <blight> from target land, then Remove 1 <explorer>, 1 <town>, and 1 <city> from a land with <range-1> (of target land).",[Pn.Now]:async()=>{(a.has(e.Blight)||await t.askToConvertElements({[ir.Sun]:3,[ir.Water]:3,[ir.Animal]:2}))&&a.has(e.Dahan)&&(await a.removeBlight(),await a.inLandsWithin(1,t).pickOne((async a=>{await a.removeOne(e.Explorer),await a.removeOne(e.Town),await a.removeOne(e.City)})))}}]})}}]},Ri={name:"Plague Ships Sail To Distant Ports",type:kn.Major,speed:sr.Fast,energy:4,elements:[ir.Fire,ir.Air,ir.Water,ir.Animal],set:gn.NatureIncarnate,target:or.Land,targetFilter:[dr.CoastalCity],range:1,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.598,.941],text:"1 <fear>. Add 4 <disease> among Coastal lands (on any boards) other than target land.<br><br>If you have 2 <fire> 2 <water> 2 <animal>:<br><br>Instead: 1 <fear>. 3 Damage. Spirits may jointly spend 3 Energy per player (aided by Removing <disease> from the island for 3 Energy each) to remove the top card of the Fear Deck from the game. Add 1 <disease>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Fire]:2,[ir.Water]:2,[ir.Animal]:2})?await e.addSubEffect({effects:[{textArea:[.768,.809],text:"Instead: 1 <fear>.",[Pn.Now]:async()=>{await t.fear(1)}},{textArea:[.768,.809],text:"3 Damage.",[Pn.Now]:async()=>{await t.damage(3)}},{textArea:[.801,.938],text:"Spirits may jointly spend 3 Energy per player (aided by Removing <disease> from the island for 3 Energy each) to remove the top card of the Fear Deck from the game. Add 1 <disease>.",[Pn.Now]:async()=>{e.playersCanJointlyPayEnergyAidedBy({energy:3*e.spiritCount,aidedByRemovingDisease:!0})&&await e.may({prompt:"Pay jointly 3 Energy per player (aided by Removing <disease> from the island for 3 Energy each) to remove the top card of the Fear Deck from the game?"})&&(await e.payEnergyJointlyAidedBy({energy:3*e.spiritCount,aidedByRemovingDisease:!0}),await e.removeTopFearCard())}},{textArea:[.899,.94],text:"Add 1 <disease>.",[Pn.Now]:async()=>{await t.add(1,e.Disease)}}]}):await e.addSubEffect({effects:[{textArea:[.764,.805],text:"1 <fear>",[Pn.Now]:async()=>{await t.fear(1)}},{textArea:[.601,.674],text:"Add 4 <disease> among Coastal lands (on any boards) other than target land.",[Pn.Now]:async()=>{await e.inCoastalLands().where((e=>e!==t)).pickMultiple({amount:4,forPickedItem:async a=>{await a.add(1,e.Disease)},repeatSame:!0})}}]})}}]},Mi={name:"Ravaged Undergrowth Slithers Back To Life",type:kn.Major,speed:sr.Slow,energy:3,elements:[ir.Water,ir.Plant,ir.Animal],set:gn.NatureIncarnate,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Blight],range:1,hasPushOrGather:!0,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.607,.648],text:"Replace 1 <blight> with 1 <wilds>.",[Pn.InTargetLand]:async({$:e,land:a,action:t})=>{t.data.replacement=await a.replaceOne({pieces:e.Blight,withAmount:1,withPiece:Ln.Wilds})}},{textArea:[.652,.693],text:"1 <fear>",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.652,.693],text:"3 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(3)}},{textArea:[.699,.74],text:"Push that <wilds>.",[Pn.InTargetLand]:async({action:e,land:a})=>{const t=e.data.replacement.added;t.length>0&&t[0].location===a&&await t[0].piece.push()}},{textArea:[.747,.941],text:"If you have 3 <water> 2 <plant>:<br><br>Add 1 <wilds>. You may Push it. In each land with <wilds> within <range-1> (of target land):<br>Push 1 <explorer> and 1 <town> to lands without <wilds>.",[Pn.InTargetLand]:async({land:e,you:a,$:t})=>{if(await a.askToConvertElements({[ir.Water]:3,[ir.Plant]:2})){const n=await e.add(1,t.Wilds);n.length>0&&n[0].location===e&&await t.addSubEffect({textArea:[.831,.872],text:"You may Push it.",[Pn.Now]:async()=>{await n[0].piece.push({quantifier:ur.May})}}),await e.inLandsWithin(1,a).where((e=>e.has(t.Wilds))).selectOrder().forEach((async e=>{await t.addSubEffect({textArea:[.899,.94],text:"Push 1 <explorer> and 1 <town> to lands without <wilds>.",[Pn.Now]:async()=>{await e.push({pieces:t.Explorer,destinationFilter:e=>e.doesntHave(t.Wilds)}),await e.push({pieces:t.Town,destinationFilter:e=>e.doesntHave(t.Wilds)})}})}),{textArea:[.834,.941],text:"In each land with <wilds> within <range-1> (of target land):<br>Push 1 <explorer> and 1 <town> to lands without <wilds>."})}}}]},Ni={name:"Rumbling Earthquakes",type:kn.Major,speed:sr.Slow,energy:6,elements:[ir.Fire,ir.Earth],set:gn.NatureIncarnate,target:or.Land,sourceFilter:[dr.SacredSite],range:1,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.607,.648],text:"This Power ignores Health bonuses.",[Pn.InTargetLand]:async({$:e})=>{await e.addEffectUntilEndOfAction({[Pn.DamageIgnoreHealthBonuses]:()=>!0})}},{textArea:[.651,.692],text:"3 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(3)}},{textArea:[.651,.692],text:"6 Damage, to <town>/<city> only.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(6,e.TownOrCity)}},{textArea:[.688,.768],text:"6 Damage among adjacent lands, to <town>/<city> only.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damageInAdjacentLands(6,e.TownOrCity)}},{textArea:[.779,.941],text:"If you have 4 <earth>:<br>6 Damage among target/adjacent lands, to <town>/<city> only.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Earth]:4})&&await t.damageInThisAndAdjacentLands(6,e.TownOrCity)}}]},Wi={name:"Solidify Echoes Of Majesty Past",type:kn.Major,speed:sr.Fast,energy:4,elements:[ir.Sun,ir.Moon,ir.Air,ir.Earth],set:gn.NatureIncarnate,target:or.Spirit,effects:[{textArea:[.581,.758],text:"Choose one of target Spirit's lands. In that land and each adjacent land, Defend 3. They Add 1 <broken> to each adjacent land. Skip up to 1 Invader Action at each added <broken>.",[Pn.TargetSpirit]:async({spirit:e})=>{await e.inLands().pickOne((async a=>{await a.inThisAndAdjacentLands().forEach((async e=>{await e.defend(3)})),await a.inAdjacentLands().selectOrder(e.destroyedPresence>0).forEach((async t=>{if(t!==a&&e.destroyedPresence>0){(await t.addPresence(e,{destroyed:!0})).length>0&&await t.skipInvaderAction({textArea:[.685,.757],text:"Skip up to 1 Invader Action at each added <broken>."})}}),{highlightLocations:[a]})}))}},{textArea:[.756,.947],text:"If you have 2 <sun>, 2 <moon>, 2 <earth>:<br><br>Target Spirit either Reclaims 1 Power Card or re-gains a Unique Power they previously forgot. They may play it by paying its cost.",[Pn.TargetSpirit]:async({you:e,spirit:a,$:t})=>{await e.askToConvertElements({[ir.Sun]:2,[ir.Moon]:2,[ir.Earth]:2})&&await t.chooseBetween({players:[a],effects:[{actionId:"Reclaim",textArea:[.834,.875],text:"Reclaim 1 Power Card.",[Pn.Now]:async()=>{const e=await a.reclaim(1);e.length>0&&e[0].isPlayable&&await t.may({textArea:[.907,.948],text:"They may play it by paying its cost.",prompt:`Play ${e[0].powerLink} by paying its cost?`})&&await e[0].play({withoutUsingCardPlays:!0})},condition:()=>a.hasReclaimableCards},{actionId:"Regain",textArea:[.871,.944],text:"Regain a Unique Power you previously forgot.",condition:()=>a.availableRememberedUniques.length>0,[Pn.Now]:async()=>{const e=await a.gainPowerCard({fromSelection:a.availableRememberedUniques,taken:!0});e.chosen.length>0&&e.chosen[0].isPlayable&&await t.may({textArea:[.907,.948],text:"They may play it by paying its cost.",prompt:`Play ${e.chosen[0].powerLink} by paying its cost?`})&&await e.chosen[0].play({withoutUsingCardPlays:!0})}}]})}}]},$i={name:"Transformative Sacrifice",type:kn.Major,speed:sr.Fast,energy:3,elements:[ir.Moon,ir.Fire,ir.Water,ir.Plant],set:gn.NatureIncarnate,target:or.Spirit,fullText:["Target Spirit may Remove up to 3 <presence> (from anywhere on the island). Then for each Removed <presence>, they Take a Minor Power and  play it (for free).","If you have 2 <moon> 3 <fire> 2 <plant>:<br>Before taking cards, they may also Remove 1 <presence> from their <presence> track to Take a Minor Power and play it."],effects:[{textArea:[.749,.938],text:"If you have 2 <moon> 3 <fire> 2 <plant>:<br>Before taking cards, they may also Remove 1 <presence> from their <presence> track to Take a Minor Power and play it.",[Pn.TargetSpirit]:async({you:e,spirit:a})=>{if(a.unlockedTrackPresence.length>0&&await e.askToConvertElements({[ir.Moon]:2,[ir.Fire]:3,[ir.Plant]:2})){await a.addPresence({locations:zn.Remove,forcedFromTrack:!0});const e=await a.gainPowerCard({powerType:kn.Minor,drawAmount:1,taken:!0});e.chosen.length>0&&await e.chosen[0].play({withoutPaying:!0,withoutUsingCardPlays:!0})}}},{textArea:[.604,.752],text:"Target Spirit may Remove up to 3 <presence> (from anywhere on the island). Then for each Removed <presence>, they Take a Minor Power and  play it (for free).",[Pn.TargetSpirit]:async({spirit:e,action:a})=>{const t=await e.destroyPresence(3,Wn.Remove,!0),n=a.data.extraGainAndPlay??0;await Jr(t.length+n,(async()=>{const a=await e.gainPowerCard({powerType:kn.Minor,drawAmount:1,taken:!0});a.chosen.length>0&&await a.chosen[0].play({withoutPaying:!0,withoutUsingCardPlays:!0})}))}}]};var Gi,Ui;!function(e){e.AdvanceCards="AdvanceCards",e.BlightedIsland="BlightedIsland",e.Build="Build",e.Event="Event",e.Explore="Explore",e.FastPowers="FastPowers",e.Fear="Fear",e.GainEnergy="GainEnergy",e.Grow="Grow",e.HighImmigration="HighImmigration",e.InitialExplore="InitialExplore",e.PlayPowers="PlayPowers",e.Ravage="Ravage",e.RoyalBacking="RoyalBacking",e.Setup="Setup",e.SetupPresence="SetupPresence",e.SlowPowers="SlowPowers",e.TimePasses="TimePasses"}(Gi||(Gi={})),function(e){e.ACircuitousAndWendingJourney="ACircuitousAndWendingJourney",e.ADreadfulTideOfScurryingFlesh="ADreadfulTideOfScurryingFlesh",e.AYearOfPerfectStillness="AYearOfPerfectStillness",e.AbsoluteStasis="AbsoluteStasis",e.AbsorbCorruption="AbsorbCorruption",e.AbsorbEssence="AbsorbEssence",e.AcceleratedRot="AcceleratedRot",e.AfflictWithBloodthirst="AfflictWithBloodthirst",e.AidFromTheSpiritspeakers="AidFromTheSpiritspeakers",e.AirMovesEarthEndures="AirMovesEarthEndures",e.AllEnvelopingGreen="AllEnvelopingGreen",e.AngryBears="AngryBears",e.AnimatedWrackroot="AnimatedWrackroot",e.AsphyxiatingSmoke="AsphyxiatingSmoke",e.BargainOfCoursingPaths="BargainOfCoursingPaths",e.BargainsOfPowerAndProtection="BargainsOfPowerAndProtection",e.BatsScoutForRaidsByDarkness="BatsScoutForRaidsByDarkness",e.BelligerentAndAggressiveCrops="BelligerentAndAggressiveCrops",e.BesetAndConfoundTheInvaders="BesetAndConfoundTheInvaders",e.BirdsCryWarning="BirdsCryWarning",e.BlazingIntimidation="BlazingIntimidation",e.BlazingRenewal="BlazingRenewal",e.BlindingGlare="BlindingGlare",e.BloodDrawsPredators="BloodDrawsPredators",e.BloodWaterAndBloodlust="BloodWaterAndBloodlust",e.BloodwrackPlague="BloodwrackPlague",e.BloomingOfTheRocksAndTrees="BloomingOfTheRocksAndTrees",e.BlurTheArcOfYears="BlurTheArcOfYears",e.BombardWithBouldersAndStingingSeeds="BombardWithBouldersAndStingingSeeds",e.BoonOfAncientMemories="BoonOfAncientMemories",e.BoonOfCorruptedBlood="BoonOfCorruptedBlood",e.BoonOfGrowingPower="BoonOfGrowingPower",e.BoonOfReimagining="BoonOfReimagining",e.BoonOfResilientPower="BoonOfResilientPower",e.BoonOfSunshinesPromise="BoonOfSunshinesPromise",e.BoonOfSwarmingBedevilment="BoonOfSwarmingBedevilment",e.BoonOfVigor="BoonOfVigor",e.BoonOfWatchfulGuarding="BoonOfWatchfulGuarding",e.CallOfTheDahanWays="CallOfTheDahanWays",e.CallOfTheDeeps="CallOfTheDeeps",e.CallOnHerdersForAid="CallOnHerdersForAid",e.CallOnMidnightsDream="CallOnMidnightsDream",e.CallToAFastnessOfRenewal="CallToAFastnessOfRenewal",e.CallToASunlitHaven="CallToASunlitHaven",e.CallToBloodshed="CallToBloodshed",e.CallToFerocity="CallToFerocity",e.CallToGuard="CallToGuard",e.CallToIsolation="CallToIsolation",e.CallToMigrate="CallToMigrate",e.CallToTend="CallToTend",e.CallToTrade="CallToTrade",e.CallToVigilance="CallToVigilance",e.CarapacedLand="CarapacedLand",e.CastDownIntoTheBrinyDeep="CastDownIntoTheBrinyDeep",e.CleansingFloods="CleansingFloods",e.CloseTheWays="CloseTheWays",e.ConcealingShadows="ConcealingShadows",e.ConfoundingMists="ConfoundingMists",e.ConsiderAHarmoniousNature="ConsiderAHarmoniousNature",e.CoordinatedRaid="CoordinatedRaid",e.CreepersTearIntoMortar="CreepersTearIntoMortar",e.CropsWitherAndFade="CropsWitherAndFade",e.CyclesOfTimeAndTide="CyclesOfTimeAndTide",e.DarkAndTangledWoods="DarkAndTangledWoods",e.DarkSkiesLooseAStingingRain="DarkSkiesLooseAStingingRain",e.DarknessSwallowsTheUnwary="DarknessSwallowsTheUnwary",e.DeathApproachesFromBeneathTheSurface="DeathApproachesFromBeneathTheSurface",e.DeathFallsGentlyFromOpenBlossoms="DeathFallsGentlyFromOpenBlossoms",e.DelusionsOfDanger="DelusionsOfDanger",e.DesiccatingWinds="DesiccatingWinds",e.DevouringAnts="DevouringAnts",e.DireMetamorphosis="DireMetamorphosis",e.DisorientingLandscape="DisorientingLandscape",e.DissolveTheBondsOfKinship="DissolveTheBondsOfKinship",e.DissolvingVapors="DissolvingVapors",e.DomesticatedAnimalsGoBerserk="DomesticatedAnimalsGoBerserk",e.DrawOfTheFruitfulEarth="DrawOfTheFruitfulEarth",e.DrawToTheWatersEdge="DrawToTheWatersEdge",e.DrawTowardsAConsumingVoid="DrawTowardsAConsumingVoid",e.DreadApparitions="DreadApparitions",e.DreamOfTheUntouchedLand="DreamOfTheUntouchedLand",e.DreamsOfTheDahan="DreamsOfTheDahan",e.DriftDownIntoSlumber="DriftDownIntoSlumber",e.Drought="Drought",e.DryWoodExplodesInSmolderingSplinters="DryWoodExplodesInSmolderingSplinters",e.EarthMovesWithVigorAndMight="EarthMovesWithVigorAndMight",e.EarthShuddersBuildingsFall="EarthShuddersBuildingsFall",e.EerieNoisesAndMovingTrees="EerieNoisesAndMovingTrees",e.ElementalAegis="ElementalAegis",e.ElementalBoon="ElementalBoon",e.ElementalTeachings="ElementalTeachings",e.ElusiveAmbushes="ElusiveAmbushes",e.EmergeFromTheDreadNightWind="EmergeFromTheDreadNightWind",e.EncircleTheUnsuspectingPrey="EncircleTheUnsuspectingPrey",e.EncompassingWard="EncompassingWard",e.EnticingAndLullingDreams="EnticingAndLullingDreams",e.EnticingSplendor="EnticingSplendor",e.EntrancingApparitions="EntrancingApparitions",e.EntrapTheForcesOfCorruption="EntrapTheForcesOfCorruption",e.EntwineTheFatesOfAll="EntwineTheFatesOfAll",e.EntwinedPower="EntwinedPower",e.EpidemicsRunRampant="EpidemicsRunRampant",e.EvermultiplyingSwarm="EvermultiplyingSwarm",e.ExaltationOfEchoedSteps="ExaltationOfEchoedSteps",e.ExaltationOfGraspingRoots="ExaltationOfGraspingRoots",e.ExaltationOfMoltenStone="ExaltationOfMoltenStone",e.ExaltationOfTangledGrowth="ExaltationOfTangledGrowth",e.ExaltationOfTheIncandescentSky="ExaltationOfTheIncandescentSky",e.ExaltationOfTheStormWind="ExaltationOfTheStormWind",e.ExaltationOfTheTransformingFlame="ExaltationOfTheTransformingFlame",e.ExhaleConfusionAndDelirium="ExhaleConfusionAndDelirium",e.ExplosiveEruption="ExplosiveEruption",e.FavorOfTheSunAndStarlitDark="FavorOfTheSunAndStarlitDark",e.FavorsCalledDue="FavorsCalledDue",e.FavorsOfStoryAndSeason="FavorsOfStoryAndSeason",e.FerociousRampage="FerociousRampage",e.FetidBreathSpreadsInfection="FetidBreathSpreadsInfection",e.FieldsChokedWithGrowth="FieldsChokedWithGrowth",e.FieryVengeance="FieryVengeance",e.FireAndFlood="FireAndFlood",e.FireBurnsWaterSoothes="FireBurnsWaterSoothes",e.FireInTheSky="FireInTheSky",e.Firestorm="Firestorm",e.FlamesFury="FlamesFury",e.FlashFloods="FlashFloods",e.Flashfires="Flashfires",e.FleshrotFever="FleshrotFever",e.FlockingRedTalons="FlockingRedTalons",e.FlowDownriverBlowDownwind="FlowDownriverBlowDownwind",e.FlowLikeWaterReachLikeAir="FlowLikeWaterReachLikeAir",e.FlowingAndSilentFormsDartBy="FlowingAndSilentFormsDartBy",e.FocusTheLandsAnguish="FocusTheLandsAnguish",e.FocusTheSunsRays="FocusTheSunsRays",e.ForestsOfLivingObsidian="ForestsOfLivingObsidian",e.ForsakeSocietyToChaseAfterDreams="ForsakeSocietyToChaseAfterDreams",e.FoulVaporsAndFetidMuck="FoulVaporsAndFetidMuck",e.FoundationsSinkIntoMud="FoundationsSinkIntoMud",e.FragmentsOfYesteryear="FragmentsOfYesteryear",e.FrenziedAssault="FrenziedAssault",e.FrightfulKeening="FrightfulKeening",e.GatherTheScatteredLightOfStars="GatherTheScatteredLightOfStars",e.GatherTheWarriors="GatherTheWarriors",e.GiftOfAbundance="GiftOfAbundance",e.GiftOfConstancy="GiftOfConstancy",e.GiftOfFlowingPower="GiftOfFlowingPower",e.GiftOfFuriousMight="GiftOfFuriousMight",e.GiftOfLivingEnergy="GiftOfLivingEnergy",e.GiftOfNaturesConnection="GiftOfNaturesConnection",e.GiftOfPower="GiftOfPower",e.GiftOfProliferation="GiftOfProliferation",e.GiftOfSearingHeat="GiftOfSearingHeat",e.GiftOfSeismicEnergy="GiftOfSeismicEnergy",e.GiftOfStrength="GiftOfStrength",e.GiftOfThePrimordialDeeps="GiftOfThePrimordialDeeps",e.GiftOfTheSparkingSky="GiftOfTheSparkingSky",e.GiftOfTheSunlitAir="GiftOfTheSunlitAir",e.GiftOfTheUntamedWild="GiftOfTheUntamedWild",e.GiftOfTwinnedDays="GiftOfTwinnedDays",e.GiftOfWindspedSteps="GiftOfWindspedSteps",e.GnawingRootbiters="GnawingRootbiters",e.GoldsAllure="GoldsAllure",e.GrantHatredARavenousForm="GrantHatredARavenousForm",e.GraspingTide="GraspingTide",e.GrowthThroughSacrifice="GrowthThroughSacrifice",e.GuardTheHealingLand="GuardTheHealingLand",e.GuardianSerpents="GuardianSerpents",e.GuideTheWayOnFeatheredWings="GuideTheWayOnFeatheredWings",e.HarbingersOfTheLightning="HarbingersOfTheLightning",e.HauntedByPrimalMemories="HauntedByPrimalMemories",e.HazardsSpreadAcrossTheIsland="HazardsSpreadAcrossTheIsland",e.HerdTowardsTheLurkingMaw="HerdTowardsTheLurkingMaw",e.HereThereBeMonsters="HereThereBeMonsters",e.HoldTheIslandFastWithABulwarkOfWill="HoldTheIslandFastWithABulwarkOfWill",e.ImbueWithNourishingVitality="ImbueWithNourishingVitality",e.ImpenetrableTanglesOfGreenery="ImpenetrableTanglesOfGreenery",e.ImpersonateAuthority="ImpersonateAuthority",e.InciteTheMob="InciteTheMob",e.IndomitableClaim="IndomitableClaim",e.InfestationOfVenomousSpiders="InfestationOfVenomousSpiders",e.InfestedAquifers="InfestedAquifers",e.InfiniteVitality="InfiniteVitality",e.InflameTheFiresOfLife="InflameTheFiresOfLife",e.InsatiableHungerOfTheSwarm="InsatiableHungerOfTheSwarm",e.InscrutableJourneying="InscrutableJourneying",e.InspireAWindingDance="InspireAWindingDance",e.InspireTheReleaseOfStolenLands="InspireTheReleaseOfStolenLands",e.InstrumentsOfTheirOwnRuin="InstrumentsOfTheirOwnRuin",e.IntractableThicketsAndThorns="IntractableThicketsAndThorns",e.IrresistibleCall="IrresistibleCall",e.JaggedShardsPushFromTheEarth="JaggedShardsPushFromTheEarth",e.KeepWatchForNewIncursions="KeepWatchForNewIncursions",e.LandCreaksWithTension="LandCreaksWithTension",e.LandOfHauntsAndEmbers="LandOfHauntsAndEmbers",e.LavaFlows="LavaFlows",e.LayPathsTheyCannotHelpButWalk="LayPathsTheyCannotHelpButWalk",e.LeadTheFuriousAssault="LeadTheFuriousAssault",e.LeadTheWarriorsToBattle="LeadTheWarriorsToBattle",e.LearnTheInvadersTactics="LearnTheInvadersTactics",e.LeaveATrailOfDeathlySilence="LeaveATrailOfDeathlySilence",e.LetThemBreakThemselvesAgainstTheStone="LetThemBreakThemselvesAgainstTheStone",e.LetsSeeWhatHappens="LetsSeeWhatHappens",e.LightningTornSkiesIncitePandemonium="LightningTornSkiesIncitePandemonium",e.LightningsBoon="LightningsBoon",e.LikeCallsToLike="LikeCallsToLike",e.LostInTheEndlessDark="LostInTheEndlessDark",e.LostInTheSwirlingHaze="LostInTheSwirlingHaze",e.LureOfTheUnknown="LureOfTheUnknown",e.ManifestIncarnation="ManifestIncarnation",e.ManifestationOfPowerAndGlory="ManifestationOfPowerAndGlory",e.MantleOfDread="MantleOfDread",e.MarkTerritoryWithScarsAndTeeth="MarkTerritoryWithScarsAndTeeth",e.MassiveFlooding="MassiveFlooding",e.MeltEarthIntoQuicksand="MeltEarthIntoQuicksand",e.MesmerizedTranquility="MesmerizedTranquility",e.MindShatteringSong="MindShatteringSong",e.MischiefAndSabotage="MischiefAndSabotage",e.MistsOfOblivion="MistsOfOblivion",e.MysteriousAbductions="MysteriousAbductions",e.NaturesResilience="NaturesResilience",e.NeverHeardFromAgain="NeverHeardFromAgain",e.NightTerrors="NightTerrors",e.ObserveTheEverChangingWorld="ObserveTheEverChangingWorld",e.OceanBreaksTheShore="OceanBreaksTheShore",e.OfferPassageBetweenWorlds="OfferPassageBetweenWorlds",e.OpenShiftingWaterways="OpenShiftingWaterways",e.OverenthusiasticArson="OverenthusiasticArson",e.OvergrowInANight="OvergrowInANight",e.PactOfTheJoinedHunt="PactOfTheJoinedHunt",e.ParalyzingFright="ParalyzingFright",e.PathsTiedByNature="PathsTiedByNature",e.PeaceOfTheNighttimeSky="PeaceOfTheNighttimeSky",e.PentupCalamity="PentupCalamity",e.PerilsOfTheDeepestIsland="PerilsOfTheDeepestIsland",e.PillarOfLivingFlame="PillarOfLivingFlame",e.PlagueShipsSailToDistantPorts="PlagueShipsSailToDistantPorts",e.Plaguebearers="Plaguebearers",e.PlowsShatterOnRockyGround="PlowsShatterOnRockyGround",e.PoisonedDew="PoisonedDew",e.PoisonedLand="PoisonedLand",e.PortentsOfDisaster="PortentsOfDisaster",e.PoundShipsToSplinters="PoundShipsToSplinters",e.PourTimeSideways="PourTimeSideways",e.PoweredByTheFurnaceOfTheEarth="PoweredByTheFurnaceOfTheEarth",e.Powerstorm="Powerstorm",e.PredatoryNightmares="PredatoryNightmares",e.PreyOnTheBuilders="PreyOnTheBuilders",e.PromisesOfProtection="PromisesOfProtection",e.ProwlingPanthers="ProwlingPanthers",e.PullBeneathTheHungryEarth="PullBeneathTheHungryEarth",e.PunishThoseWhoTrespass="PunishThoseWhoTrespass",e.PurifyingFlame="PurifyingFlame",e.PursueWithScratchesPecksAndStings="PursueWithScratchesPecksAndStings",e.PyroclasticBombardment="PyroclasticBombardment",e.PyroclasticFlow="PyroclasticFlow",e.QuickenTheEarthsStruggles="QuickenTheEarthsStruggles",e.RadiantAndHallowedGrove="RadiantAndHallowedGrove",e.RadiatingTremors="RadiatingTremors",e.RagingStorm="RagingStorm",e.RainAndMudSuppressConflict="RainAndMudSuppressConflict",e.RainOfAsh="RainOfAsh",e.RainOfBlood="RainOfBlood",e.RangingHunt="RangingHunt",e.RavagedUndergrowthSlithersBackToLife="RavagedUndergrowthSlithersBackToLife",e.RazorsharpUndergrowth="RazorsharpUndergrowth",e.ReachFromTheInfiniteDarkness="ReachFromTheInfiniteDarkness",e.ReachingGrasp="ReachingGrasp",e.ReclaimedByTheDeeps="ReclaimedByTheDeeps",e.RegrowFromRoots="RegrowFromRoots",e.RenewingBoon="RenewingBoon",e.RenewingRain="RenewingRain",e.ResoundingFootfallsSowDismay="ResoundingFootfallsSowDismay",e.RevokeSanctuaryAndCastOut="RevokeSanctuaryAndCastOut",e.RitesOfTheLandsRejection="RitesOfTheLandsRejection",e.RitualsOfDestruction="RitualsOfDestruction",e.RiversBounty="RiversBounty",e.RoilingBogAndSnaggingThorn="RoilingBogAndSnaggingThorn",e.RouseTheTreesAndStones="RouseTheTreesAndStones",e.RumblingEarthquakes="RumblingEarthquakes",e.RumblingsPortendAGreaterQuake="RumblingsPortendAGreaterQuake",e.SacrosanctWilderness="SacrosanctWilderness",e.SanguinaryTaint="SanguinaryTaint",e.SapTheStrengthOfMultitudes="SapTheStrengthOfMultitudes",e.SavageMawbeasts="SavageMawbeasts",e.SavageRevenge="SavageRevenge",e.SavageTransformation="SavageTransformation",e.ScarredAndStonyLand="ScarredAndStonyLand",e.ScatterToTheWinds="ScatterToTheWinds",e.ScorchWithWavesOfHeat="ScorchWithWavesOfHeat",e.ScorchingConvergence="ScorchingConvergence",e.ScourTheLand="ScourTheLand",e.ScreamDiseaseIntoTheWind="ScreamDiseaseIntoTheWind",e.SeaMonsters="SeaMonsters",e.SearAngerIntoTheWildLands="SearAngerIntoTheWildLands",e.SerpentRousesInAnger="SerpentRousesInAnger",e.SerpentWakesInPower="SerpentWakesInPower",e.SetThemOnAnEvertwistingTrail="SetThemOnAnEvertwistingTrail",e.SettleIntoHuntinggrounds="SettleIntoHuntinggrounds",e.ShadowsOfTheBurningForest="ShadowsOfTheBurningForest",e.ShapeTheSelfAnew="ShapeTheSelfAnew",e.ShareMentorshipAndExpertise="ShareMentorshipAndExpertise",e.ShareSecretsOfSurvival="ShareSecretsOfSurvival",e.ShatterHomesteads="ShatterHomesteads",e.ShelterUnderToweringBranches="ShelterUnderToweringBranches",e.SiderealGuidance="SiderealGuidance",e.SkiesHeraldTheSeasonOfReturn="SkiesHeraldTheSeasonOfReturn",e.SkyStretchesToShore="SkyStretchesToShore",e.SleepAndNeverWaken="SleepAndNeverWaken",e.SlipTheFlowOfTime="SlipTheFlowOfTime",e.SmashStompAndFlatten="SmashStompAndFlatten",e.SmiteTheLandWithFulmination="SmiteTheLandWithFulmination",e.SmotheringInfestation="SmotheringInfestation",e.SocietyDissolvesAtTheBeckoningHeart="SocietyDissolvesAtTheBeckoningHeart",e.SoftlyBeckonEverInward="SoftlyBeckonEverInward",e.SolidifyEchoesOfMajestyPast="SolidifyEchoesOfMajestyPast",e.SongOfSanctity="SongOfSanctity",e.SpillBitternessIntoTheEarth="SpillBitternessIntoTheEarth",e.SpiritsMayYetDream="SpiritsMayYetDream",e.SpreadingAndDreadfulMire="SpreadingAndDreadfulMire",e.SpreadingWilds="SpreadingWilds",e.SpurOnWithWordsOfFire="SpurOnWithWordsOfFire",e.StarsBlazeInTheDaytimeSky="StarsBlazeInTheDaytimeSky",e.SteamVents="SteamVents",e.StemTheFlowOfFreshWater="StemTheFlowOfFreshWater",e.StingingSandstorm="StingingSandstorm",e.Stormswath="Stormswath",e.StranglingFirevine="StranglingFirevine",e.StrengthOfTheWakingIsland="StrengthOfTheWakingIsland",e.StretchOutCoilsOfForebodingDread="StretchOutCoilsOfForebodingDread",e.StrikeLowWithSuddenFevers="StrikeLowWithSuddenFevers",e.StrongAndConstantCurrents="StrongAndConstantCurrents",e.StubbornSolidity="StubbornSolidity",e.StudyTheInvadersFears="StudyTheInvadersFears",e.SuckingOoze="SuckingOoze",e.SuddenAmbush="SuddenAmbush",e.SuffocatingShroud="SuffocatingShroud",e.SunsetsFireFlowsAcrossTheLand="SunsetsFireFlowsAcrossTheLand",e.SurgingLahar="SurgingLahar",e.SurroundedByTheDahan="SurroundedByTheDahan",e.SwallowTheLanddwellers="SwallowTheLanddwellers",e.SwallowedByTheEndlessDark="SwallowedByTheEndlessDark",e.SwallowedByTheWilderness="SwallowedByTheWilderness",e.SwarmingWasps="SwarmingWasps",e.SweepIntoTheSea="SweepIntoTheSea",e.SwelteringExhaustion="SwelteringExhaustion",e.SwirlAndSpill="SwirlAndSpill",e.TalonsOfLightning="TalonsOfLightning",e.TeemingRivers="TeemingRivers",e.TeethGleamFromDarkness="TeethGleamFromDarkness",e.TempestOfLeavesAndBranches="TempestOfLeavesAndBranches",e.TerrifyingChase="TerrifyingChase",e.TerrifyingNightmares="TerrifyingNightmares",e.TerrifyingRampage="TerrifyingRampage",e.TerritorialStrife="TerritorialStrife",e.TerrorOfTheHunted="TerrorOfTheHunted",e.TerrorTurnsToMadness="TerrorTurnsToMadness",e.TheBurnedLandRegrows="TheBurnedLandRegrows",e.TheFogClosesIn="TheFogClosesIn",e.TheJungleHungers="TheJungleHungers",e.TheLandThrashesInFuriousPain="TheLandThrashesInFuriousPain",e.ThePastReturnsAgain="ThePastReturnsAgain",e.TheShoreSeethesWithHatred="TheShoreSeethesWithHatred",e.TheTeemingHostArrives="TheTeemingHostArrives",e.TheTreesAndStonesSpeakOfWar="TheTreesAndStonesSpeakOfWar",e.TheWoundedWildTurnsOnItsAssailants="TheWoundedWildTurnsOnItsAssailants",e.ThicketsEruptWithEveryTouchOfBreeze="ThicketsEruptWithEveryTouchOfBreeze",e.ThreateningFlames="ThreateningFlames",e.ThrivingChokefungus="ThrivingChokefungus",e.ThunderingDestruction="ThunderingDestruction",e.TidalBoon="TidalBoon",e.TigersHunting="TigersHunting",e.TooNearTheJungle="TooNearTheJungle",e.TormentingRotflies="TormentingRotflies",e.ToweringWrath="ToweringWrath",e.TransformToAMurderousDarkness="TransformToAMurderousDarkness",e.TransformativeSacrifice="TransformativeSacrifice",e.TravelersBoon="TravelersBoon",e.TreacherousWaterways="TreacherousWaterways",e.TreesRadiateCelestialBrilliance="TreesRadiateCelestialBrilliance",e.Tsunami="Tsunami",e.TurmoilsTouch="TurmoilsTouch",e.TwilightFogBringsMadness="TwilightFogBringsMadness",e.TwistPerceptions="TwistPerceptions",e.TwistedFlowersMurmurUltimatums="TwistedFlowersMurmurUltimatums",e.UnbearableDeluge="UnbearableDeluge",e.UnbearableGaze="UnbearableGaze",e.UnbelievableRegrowth="UnbelievableRegrowth",e.UncannyMelting="UncannyMelting",e.UnearthABeastOfWrathfulStone="UnearthABeastOfWrathfulStone",e.UnexpectedTigers="UnexpectedTigers",e.UnleashATorrentOfTheSelfsOwnEssence="UnleashATorrentOfTheSelfsOwnEssence",e.UnlockTheGatesOfDeepestPower="UnlockTheGatesOfDeepestPower",e.UnnervingPall="UnnervingPall",e.UnquenchableFlames="UnquenchableFlames",e.UnrelentingGrowth="UnrelentingGrowth",e.UtterACurseOfDreadAndBone="UtterACurseOfDreadAndBone",e.VanishSoftlyAwayForgottenByAll="VanishSoftlyAwayForgottenByAll",e.VeilTheNightsHunt="VeilTheNightsHunt",e.VengeanceOfTheDead="VengeanceOfTheDead",e.VigorOfTheBreakingDawn="VigorOfTheBreakingDawn",e.ViolentWindstorms="ViolentWindstorms",e.VisionsOfAShiftingFuture="VisionsOfAShiftingFuture",e.VisionsOfFieryDoom="VisionsOfFieryDoom",e.VoiceOfCommand="VoiceOfCommand",e.VoiceOfThunder="VoiceOfThunder",e.VolcanicEruption="VolcanicEruption",e.VoraciousGrowth="VoraciousGrowth",e.WallsOfRockAndThorn="WallsOfRockAndThorn",e.WardTheShores="WardTheShores",e.WarnOfImpendingConflict="WarnOfImpendingConflict",e.WashAway="WashAway",e.WaterEatsAwayTheDeepRootsOfEarth="WaterEatsAwayTheDeepRootsOfEarth",e.WaterNourishesLifesGrowth="WaterNourishesLifesGrowth",e.WaysOfShoreAndHeartland="WaysOfShoreAndHeartland",e.WeaveTogetherTheFabricOfPlace="WeaveTogetherTheFabricOfPlace",e.WeepForWhatIsLost="WeepForWhatIsLost",e.WhisperedGuidanceThroughTheNight="WhisperedGuidanceThroughTheNight",e.WhyDontYouAndThemFight="WhyDontYouAndThemFight",e.WindsOfRustAndAtrophy="WindsOfRustAndAtrophy",e.WitherBodiesScarStones="WitherBodiesScarStones",e.WoodSeeksGrowthHumansSeekFreedom="WoodSeeksGrowthHumansSeekFreedom",e.WordsOfWarning="WordsOfWarning",e.WrackWithPainAndGrief="WrackWithPainAndGrief",e.WrapInWingsOfSunlight="WrapInWingsOfSunlight"}(Ui||(Ui={}));const Hi="After the next Invader Phase (on any turn) with no Ravage/Build Actions in target land: 3 <fear>. 12 Damage. Add 1 <beasts>. You may Push that <beasts>. 1 <fear> and 2 Damage in its land.",qi=`${Hi}<br><br>If you have 2 <moon> 3 <earth> 3 <animal>:<br>Mark it (<marked-beast>), <marked-beast> can't leave the island. Each <slow> phase: You may Push <marked-beast>. 1 <fear> and 2 Damage at <marked-beast>.`,ji={name:"Unearth A Beast Of Wrathful Stone",type:kn.Major,speed:sr.Fast,energy:5,elements:[ir.Moon,ir.Fire,ir.Earth,ir.Animal],set:gn.NatureIncarnate,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Invaders],range:1,hasPushOrGather:!0,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.579,.943],text:qi,[Pn.InTargetLand]:async({$:e,you:a,land:t,power:n})=>{const r=e.phase===Gi.FastPowers?e.turn:e.turn+1;let i=!1;const s=await a.askToConvertElements({[ir.Moon]:2,[ir.Earth]:3,[ir.Animal]:3}),o=s?qi:Hi;await e.addSubEffect({[Pn.Reminder]:e=>e===t?o:void 0,[Pn.AfterRavaging]:e=>(e.land===t&&(i=!0),Promise.resolve()),[Pn.AfterSuccessfulBuild]:e=>(e.land===t&&(i=!0),Promise.resolve()),[Pn.AfterFastPhase]:()=>(i=!1,Promise.resolve()),[Pn.AfterInvaderPhase]:async()=>{!i&&e.turn>=r&&await e.doPowerAction(a,(async()=>{await e.addSubEffect({effects:[{textArea:[.654,.695],text:"3 <fear>.",[Pn.Now]:async()=>{await t.fear(3)}},{textArea:[.654,.695],text:"12 Damage.",[Pn.Now]:async()=>{await t.damage(12)}},{textArea:[.654,.695],text:"Add 1 <beasts>.",[Pn.Now]:async({action:a})=>{const n=await t.add(1,e.Beasts);n.length>0&&(a.data.beast=n[0].piece)}},{textArea:[.654,.729],text:"You may Push that <beasts>.",[Pn.Now]:async({action:e})=>{const a=e.data.beast;await a.push({quantifier:ur.May})}},{textArea:[.688,.729],text:"1 <fear> and 2 Damage in its land.",[Pn.Now]:async({action:e})=>{const a=e.data.beast;null!=a.location&&(await a.location.fear(1),await a.location.damage(2))}},{textArea:[.721,.946],text:"If you have 2 <moon> 3 <earth> 3 <animal>:<br>Mark it (<marked-beast>), <marked-beast> can't leave the island. Each <slow> phase: You may Push <marked-beast>. 1 <fear> and 2 Damage at <marked-beast>.",[Pn.Now]:async({action:t})=>{if(await a.askToConvertElements({[ir.Moon]:2,[ir.Earth]:3,[ir.Animal]:3})){const r=t.data.beast;s&&await r.mark(),await e.addSubEffect({[Pn.PreventRemovePiece]:({piece:e,removement:a})=>Promise.resolve(e===r&&a!==Wn.Relocate&&a!==Wn.Silent)}),await a.addExtraAction({actionId:`MarkBeast-${r.id}`,icon:"<marked-beast>",text:"You may Push <marked-beast>. 1 <fear> and 2 Damage at <marked-beast>.",enabled:()=>e.phase===Gi.SlowPowers,onActivate:async()=>{void 0!==r.location&&await e.doPowerAction(a,(async()=>{await e.addSubEffect({card:Ui.UnearthABeastOfWrathfulStone,effects:[{textArea:[.86,.901],text:"You may Push <marked-beast>.",[Pn.Now]:async()=>{await r.push({quantifier:ur.May})}},{textArea:[.899,.94],text:"1 <fear> and 2 Damage at <marked-beast>.",[Pn.Now]:async()=>{await(r.location?.fear(1)),await(r.location?.damage(2))}}]})}),n)}})}}}]}),e.removeThisEffect()}),n)}})}}]},_i={name:"Call Of The Dahan Ways",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Moon,ir.Water,ir.Animal],set:gn.Base,target:or.Land,targetFilter:[dr.Dahan],range:1,effects:[{textArea:[.657,.94],text:"Replace 1 <explorer> with 1 <dahan>.<br><br>If you have 2 <moon>:<br>You may instead replace 1 <town> with 1 <dahan>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await t.replaceOne({pieces:await a.askToConvertElements({[ir.Moon]:2})?e.ExplorerOrTown:e.Explorer,withPiece:Ln.Dahan})}}]},Vi={name:"Call to Bloodshed",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Sun,ir.Fire,ir.Animal],set:gn.Base,target:or.Land,targetFilter:[dr.Dahan],range:1,hasPushOrGather:!0,hasDamageInstructions:!0,effects:[{textArea:[.696,.837],text:"1 Damage per <dahan>.<or>Gather up to 3 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"DamagePerDahan",textArea:[.703,.743],text:"1 Damage per <dahan>.",[Pn.Now]:async()=>{await a.damage(a.numberOf(e.Dahan))}},{actionId:"GatherDahan",textArea:[.791,.831],text:"Gather up to 3 <dahan>.",[Pn.Now]:async()=>{await a.gatherUpTo(3,e.Dahan)}}]})}}]},Ji={name:"Call to Isolation",type:kn.Minor,speed:sr.Fast,energy:0,elements:[ir.Sun,ir.Air,ir.Animal],set:gn.Base,target:or.Land,targetFilter:[dr.Dahan],range:1,hasPushOrGather:!0,effects:[{textArea:[.696,.837],text:"Push 1 <explorer>/<town> per <dahan>.<or>Push 1 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"PushExplorerOrTown",textArea:[.707,.747],text:"Push 1 <explorer>/<town> per <dahan>.",[Pn.Now]:async()=>{await a.push({amount:a.numberOf(e.Dahan),pieces:e.ExplorerOrTown})}},{actionId:"PushDahan",textArea:[.792,.832],text:"Push 1 <dahan>.",[Pn.Now]:async()=>{await a.push({amount:1,pieces:e.Dahan})}}]})}}]},zi={name:"Call To Migrate",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Fire,ir.Air,ir.Animal],set:gn.Base,target:or.Land,range:1,hasPushOrGather:!0,effects:[{textArea:[.705,.745],text:"Gather up to 3 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(3,e.Dahan)}},{textArea:[.75,.79],text:"Push up to 3 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(3,e.Dahan)}}]},Yi={name:"Call To Tend",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Water,ir.Plant,ir.Animal],set:gn.Base,target:or.Land,targetFilter:[dr.Dahan],range:1,hasPushOrGather:!0,effects:[{textArea:[.699,.835],text:"Remove 1 <blight>.<or>Push up to 3 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"RemoveBlight",textArea:[.703,.743],text:"Remove 1 <blight>.",[Pn.Now]:async()=>{await a.removeBlight()}},{actionId:"PushDahan",textArea:[.788,.828],text:"Push up to 3 <dahan>.",[Pn.Now]:async()=>{await a.pushUpTo(3,e.Dahan)},condition:()=>a.isLand}]})}}]},Ki={name:"Dark And Tangled Woods",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Moon,ir.Earth,ir.Plant],set:gn.Base,target:or.Land,range:1,generatesFear:!0,effects:[{textArea:[.68,.72],text:"2 <fear>",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.762,.854],text:"If target land is <mountains-jungles>, Defend 3.",[Pn.InTargetLand]:async({land:e})=>{e.isMountainsOrJungles&&await e.defend(3)}}]},Qi={name:"Delusions of Danger",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Moon,ir.Air],set:gn.Base,target:or.Land,range:1,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.705,.837],text:"Push 1 <explorer>.<or>2 <fear>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"PushExplorer",textArea:[.705,.745],text:"Push 1 <explorer>.",[Pn.Now]:async()=>{await a.pushOne(e.Explorer)}},{actionId:"Fear",textArea:[.786,.837],text:"2 <fear>.",[Pn.Now]:async()=>{await a.fear(2)}}]})}}]},Xi={name:"Devouring Ants",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Sun,ir.Earth,ir.Animal],set:gn.Base,target:or.Land,sourceFilter:[dr.SacredSite],range:1,hasDestroyInstructions:!0,hasDamageInstructions:!0,effects:[{textArea:[.636,.676],text:"1 fear.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.68,.72],text:"1 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(1)}},{textArea:[.722,.762],text:"Destroy 1 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.destroyOne(e.Dahan)}},{textArea:[.807,.894],text:"If target land is <jungles-sands>, +1 Damage.",[Pn.InTargetLand]:async({land:e})=>{e.isJungleOrSands&&await e.damage(1)}}]},Zi={name:"Drift Down Into Slumber",type:kn.Minor,speed:sr.Fast,energy:0,elements:[ir.Air,ir.Earth,ir.Plant],set:gn.Base,target:or.Land,range:2,fullText:["Defend 1.","If target land is <jungles-sands> instead, Defend 4."],effects:[{[Pn.InTargetLand]:async({$:e,land:a})=>{a.isJungleOrSands?await e.addSubEffect({textArea:[.762,.854],text:"If target land is <jungles-sands> instead, Defend 4.",[Pn.Now]:async()=>{await a.defend(4)}}):await e.addSubEffect({textArea:[.68,.72],text:"Defend 1.",[Pn.Now]:async()=>{await a.defend(1)}})}}]},es={name:"Drought",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Sun,ir.Fire,ir.Earth],set:gn.Base,target:or.Land,range:1,blightWhiteListedPower:!0,hasDestroyInstructions:!0,hasDamageInstructions:!0,effects:[{textArea:[.62,.66],text:"Destroy 3 <town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.destroy({amount:3,pieces:e.Town})}},{textArea:[.664,.704],text:"1 Damage to each <town>/<city>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damageEach(1,e.TownOrCity)}},{textArea:[.707,.747],text:"Add 1 <blight>.",[Pn.InTargetLand]:async({land:e})=>{await e.addBlight(1)}},{textArea:[.877,.93],text:"If you have 3 <sun>: Destroy 1 <city>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Sun]:3})&&await t.destroyOne(e.City)}}]},as={name:"Elemental Boon",type:kn.Minor,speed:sr.Fast,energy:1,elements:[],set:gn.Base,target:or.Spirit,effects:[{textArea:[.656,.883],text:"Target Spirit gains 3 different Elements of their choice.<br><br>If you target another Spirit, you also gain the chosen Elements.",[Pn.TargetSpirit]:async({you:e,spirit:a})=>{const t=await a.gainElements({amount:3,different:!0});a!==e&&await e.gainElementsUntilEndOfTurn(t)}}]},ts={name:"Encompassing Ward",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Water,ir.Earth],set:gn.Base,target:or.Spirit,effects:[{textArea:[.717,.809],text:"Target Spirit provides Defend 2 in each of its lands.",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{await e.addSubEffectUntilEndOfTurn({[Pn.DefendFromSpirits]:({land:e})=>e.hasPresenceOf(a)?2:0})}}]},ns={name:"Enticing Splendor",type:kn.Minor,speed:sr.Fast,energy:0,elements:[ir.Sun,ir.Air,ir.Plant],set:gn.Base,target:or.Land,targetFilter:[dr.NonBlight],range:0,hasPushOrGather:!0,effects:[{textArea:[.699,.837],text:"Gather 1 <explorer>/<town>.<or>Gather up to 2 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"GatherExplorerOrTown",textArea:[.705,.745],text:"Gather 1 <explorer>/<town>.",[Pn.Now]:async()=>{await a.gatherOne(e.ExplorerOrTown)}},{actionId:"GatherDahan",textArea:[.792,.832],text:"Gather up to 2 <dahan>.",[Pn.Now]:async()=>{await a.gatherUpTo(2,e.Dahan)}}]})}}]},rs={name:"Entrancing Apparitions",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Moon,ir.Air,ir.Water],set:gn.Base,target:or.Land,range:1,hasPushOrGather:!0,effects:[{textArea:[.663,.703],text:"Defend 2.",[Pn.InTargetLand]:async({land:e})=>{await e.defend(2)}},{textArea:[.749,.84],text:"If no Invaders are present, Gather up to 2 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.doesntHave(e.Invader)&&await a.gatherUpTo(2,e.Explorer)}}]},is={name:"Gift Of Constancy",type:kn.Minor,speed:sr.Fast,energy:0,elements:[ir.Sun,ir.Earth],set:gn.Base,target:or.Spirit,effects:[{textArea:[.598,.638],text:"Target Spirit gains 2 Energy.",[Pn.TargetSpirit]:async({spirit:e})=>{await e.gainEnergy(2)}},{textArea:[.641,.769],text:"At end of turn, target Spirit may Reclaim 1 Power Card instead of discarding it.",[Pn.TargetSpirit]:async({power:e,spirit:a})=>{await a.mayReclaimPowerCardInsteadOfDiscarding(e)}},{textArea:[.812,.943],text:"If you target another Spirit, you may also Reclaim 1 Power Card instead of discarding it.",[Pn.TargetSpirit]:async({you:e,power:a,spirit:t})=>{t!==e&&await e.mayReclaimPowerCardInsteadOfDiscarding(a)}}]},ss={name:"Gift Of Living Energy",type:kn.Minor,speed:sr.Fast,energy:0,elements:[ir.Sun,ir.Fire,ir.Plant],set:gn.Base,target:or.Spirit,effects:[{textArea:[.631,.671],text:"Target Spirit gains 1 Energy.",[Pn.TargetSpirit]:async({spirit:e})=>{await e.gainEnergy(1)}},{textArea:[.674,.761],text:"+1 Energy if target Spirit is not yourself.",[Pn.TargetSpirit]:async({you:e,spirit:a})=>{a!==e&&await a.gainEnergy(1)}},{textArea:[.804,.893],text:"If you have at least 2 <sacred>, target Spirit gains +1 Energy.",[Pn.TargetSpirit]:async({you:e,spirit:a})=>{e.inSacredSites().count>=2&&await a.gainEnergy(1)}}]},os={name:"Gift Of Power",type:kn.Minor,speed:sr.Slow,energy:0,elements:[ir.Moon,ir.Water,ir.Earth,ir.Plant],set:gn.Base,target:or.Spirit,effects:[{textArea:[.713,.808],text:"Target Spirit gains a Minor Power Card.",[Pn.TargetSpirit]:async({spirit:e})=>{await e.gainPowerCard({powerType:kn.Minor})}}]},ds={name:"Gnawing Rootbiters",type:kn.Minor,speed:sr.Slow,energy:0,elements:[ir.Earth,ir.Animal],set:gn.Base,target:or.Land,range:1,hasPushOrGather:!0,effects:[{textArea:[.748,.788],text:"Push up to 2 <town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(2,e.Town)}}]},ls={name:"Land Of Haunts And Embers",type:kn.Minor,speed:sr.Fast,energy:0,elements:[ir.Moon,ir.Fire,ir.Air],set:gn.Base,target:or.Land,range:2,hasPushOrGather:!0,blightWhiteListedPower:!0,generatesFear:!0,effects:[{textArea:[.636,.676],text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.636,.676],text:"Push up to 2 <explorer>/<town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(2,e.ExplorerOrTown)}},{textArea:[.723,.763],text:"If target land has <blight>, +2 <fear>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.has(e.Blight)&&await a.fear(2)}},{textArea:[.769,.809],text:"Push up to 2 more <explorer>/<town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.has(e.Blight)&&await a.pushUpTo(2,e.ExplorerOrTown)}},{textArea:[.858,.898],text:"Add 1 <blight>",[Pn.InTargetLand]:async({land:e})=>{await e.addBlight(1)}}]},cs={name:"Lure Of The Unknown",type:kn.Minor,speed:sr.Fast,energy:0,elements:[ir.Moon,ir.Fire,ir.Air,ir.Plant],set:gn.Base,target:or.Land,targetFilter:[dr.NoInvaders],range:2,hasPushOrGather:!0,effects:[{textArea:[.75,.79],text:"Gather 1 <explorer>/<town>",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherOne(e.ExplorerOrTown)}}]},hs={name:"Natures Resilience",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Earth,ir.Plant,ir.Animal],set:gn.Base,target:or.Land,sourceFilter:[dr.SacredSite],range:1,blightWhiteListedPower:!0,effects:[{textArea:[.653,.926],text:"Defend 6.<br><br>If you have 2 <water>: You may instead remove 1 <blight>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await e.chooseBetween({effects:[{actionId:"Defend",textArea:[.663,.703],text:"Defend 6.",[Pn.Now]:async()=>{await t.defend(6)},condition:()=>t.isLand},{actionId:"RemoveBlight",textArea:[.881,.921],text:"Remove 1 <blight>.",[Pn.Now]:async()=>{await a.convertElements({[ir.Water]:2}),await t.removeBlight()},condition:()=>a.hasElementsWithConvert({[ir.Water]:2})}]},{orChoice:!1})}}]},us={name:"Pull Beneath The Hungry Earth",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Moon,ir.Water,ir.Earth],set:gn.Base,target:or.Land,range:1,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.661,.75],text:"If target land has your <presence>, 1 <fear> and 1 Damage.",[Pn.InTargetLand]:async({land:e,you:a})=>{e.hasPresenceOf(a)&&(await e.fear(1),await e.damage(1))}},{textArea:[.785,.878],text:"If target land is <sands-wetlands>, 1 Damage.",[Pn.InTargetLand]:async({land:e})=>{e.isSandsOrWetlands&&await e.damage(1)}}]},gs={name:"Purifying Flame",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Sun,ir.Fire,ir.Air,ir.Plant],set:gn.Base,target:or.Land,sourceFilter:[dr.SacredSite],range:1,hasDamageInstructions:!0,effects:[{textArea:[.67,.864],text:"1 Damage per <blight>. If target land is <mountains>/<sands>, you may instead remove 1 <blight>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"DamagePerBlight",textArea:[.679,.719],text:"1 Damage per <blight>.",[Pn.Now]:async()=>{await a.damage(a.numberOf(e.Blight))}},{actionId:"RemoveBlight",textArea:[.759,.864],text:"Remove 1 <blight>.",[Pn.Now]:async()=>{await a.removeBlight()},condition:()=>a.isMountainsOrSands}]},{orChoice:!1})}}]},fs={name:"Quicken The Earths Struggles",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Moon,ir.Fire,ir.Earth,ir.Animal],set:gn.Base,target:or.Land,sourceFilter:[dr.SacredSite],range:0,hasDamageInstructions:!0,effects:[{textArea:[.693,.842],text:"1 Damage to each <town>/<city>.<or>Defend 10",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"DamageToEach",textArea:[.707,.747],text:"1 Damage to each <town>/<city>.",[Pn.Now]:async()=>{await a.damageEach(1,e.TownOrCity)}},{actionId:"Defend",textArea:[.792,.832],text:"Defend 10.",[Pn.Now]:async()=>{await a.defend(10)}}]})}}]},ys={name:"Rain Of Blood",type:kn.Minor,speed:sr.Slow,energy:0,elements:[ir.Air,ir.Water,ir.Animal],set:gn.Base,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Invaders],range:1,generatesFear:!0,effects:[{textArea:[.659,.699],text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.748,.883],text:"If target land has at least 2 <town>/<city>, +1 <fear>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.hasAtLeast(2,e.TownOrCity)&&await a.fear(1)}}]},ps={name:"Reaching Grasp",type:kn.Minor,speed:sr.Fast,energy:0,elements:[ir.Sun,ir.Air,ir.Water],set:gn.Base,target:or.Spirit,effects:[{textArea:[.716,.814],text:"Target Spirit gets +2 range with all their Powers.",[Pn.TargetSpirit]:async({$:e,power:a,spirit:t})=>{await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({power:a.power,players:[t]}),[Pn.ExtraRange]:e=>e.spirit===t?2:0})}}]},ws={name:"Rouse The Trees And Stones",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Fire,ir.Earth,ir.Plant],set:gn.Base,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.NonBlight],range:1,hasPushOrGather:!0,hasDamageInstructions:!0,effects:[{textArea:[.722,.762],text:"2 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(2)}},{textArea:[.766,.806],text:"Push 1 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushOne(e.Explorer)}}]},ms={name:"Sap The Strength Of Multitudes",type:kn.Minor,speed:sr.Fast,energy:0,elements:[ir.Water,ir.Animal],set:gn.Base,target:or.Land,range:0,modifiesRange:({spirit:e,withConvert:a})=>e.hasElements({[ir.Air]:1},a)?1:0,payForRange:async({spirit:e})=>{await e.convertElements({[ir.Air]:1})},fullText:["Defend 5.","If you have 1 <air>:<br>Increase this Power's Range by 1"],effects:[{textArea:[.664,.704],text:"Defend 5.",[Pn.InTargetLand]:async({land:e})=>{await e.defend(5)}}]},vs={name:"Savage Mawbeasts",type:kn.Minor,speed:sr.Slow,energy:0,elements:[ir.Fire,ir.Animal],set:gn.Base,target:or.Land,sourceFilter:[dr.SacredSite],range:1,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.636,.739],text:"If target land is <jungles-wetlands>, 1 <fear> and 1 Damage.",[Pn.InTargetLand]:async({land:e})=>{e.isJungleOrWetlands&&(await e.fear(1),await e.damage(1))}},{textArea:[.894,.934],text:"If you have 3 <animal>: 1 Damage.",[Pn.InTargetLand]:async({you:e,land:a})=>{await e.askToConvertElements({[ir.Animal]:3})&&await a.damage(1)}}]},xs={name:"Shadows Of The Burning Forest",type:kn.Minor,speed:sr.Slow,energy:0,elements:[ir.Moon,ir.Fire,ir.Plant],set:gn.Base,target:or.Land,targetFilter:[dr.Invaders],range:0,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.66,.7],text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.745,.853],text:"If target land is <mountains-jungles>, Push 1 <explorer> and 1 <town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.isMountainsOrJungles&&(await a.pushOne(e.Explorer),await a.pushOne(e.Town))}}]},bs={name:"Song Of Sanctity",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Sun,ir.Water,ir.Plant],set:gn.Base,target:or.Land,targetFilter:[dr.Mountain,dr.Jungle],range:1,hasPushOrGather:!0,effects:[{textArea:[.673,.863],text:"If target land has <explorer>, Push all <explorer>. Otherwise, remove 1 <blight>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.isLand&&a.has(e.Explorer)?await e.addSubEffect({textArea:[.673,.773],text:"If target land has <explorer>, Push all <explorer>.",[Pn.Now]:async()=>{await a.pushAll(e.Explorer)}}):await e.addSubEffect({textArea:[.815,.855],text:"Otherwise, remove 1 <blight>.",[Pn.Now]:async()=>{await a.removeBlight()}})}}]},Ts={name:"Steam Vents",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Fire,ir.Air,ir.Water,ir.Earth],set:gn.Base,target:or.Land,range:0,hasDestroyInstructions:!0,effects:[{textArea:[.647,.936],text:"Destroy 1 <explorer>.<br><br>If you have 3 <earth>: You may instead destroy 1 <town>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await t.destroy({amount:1,pieces:await a.askToConvertElements({[ir.Earth]:3})?e.ExplorerOrTown:e.Explorer})}}]},As={name:"Uncanny Melting",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Sun,ir.Moon,ir.Water],set:gn.Base,target:or.Land,sourceFilter:[dr.SacredSite],range:1,blightWhiteListedPower:!0,generatesFear:!0,effects:[{textArea:[.671,.711],text:"If Invaders are present, 1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{e.hasInvaders&&await e.fear(1)}},{textArea:[.752,.854],text:"If target land is <sands-wetlands>, remove 1 <blight>.",[Pn.InTargetLand]:async({land:e})=>{e.isSandsOrWetlands&&await e.removeBlight()}}]},Is={name:"Veil The Nights Hunt",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Moon,ir.Air,ir.Animal],set:gn.Base,target:or.Land,targetFilter:[dr.Dahan],range:2,hasPushOrGather:!0,hasDamageInstructions:!0,effects:[{textArea:[.669,.854],text:"Each <dahan> deals 1 Damage to a different Invader.<or>Push up to 3 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"DealDamage",textArea:[.669,.766],text:"Each <dahan> deals 1 Damage to a different Invader.",[Pn.Now]:async()=>{await a.damageDifferent(a.numberOf(e.Dahan),e.Invader)}},{actionId:"PushDahan",textArea:[.808,.848],text:"Push up to 3 <dahan>.",[Pn.Now]:async()=>{await a.pushUpTo(3,e.Dahan)}}]})}}]},Ps={name:"Visions Of Fiery Doom",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Moon,ir.Fire],set:gn.Base,target:or.Land,range:0,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.636,.676],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.68,.72],text:"Push 1 <explorer>/<town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushOne(e.ExplorerOrTown)}},{textArea:[.888,.928],text:"If you have 2 <fire>: +1 <fear>.",[Pn.InTargetLand]:async({you:e,land:a})=>{await e.askToConvertElements({[ir.Fire]:2})&&await a.fear(1)}}]},Ss={name:"Voracious Growth",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Water,ir.Plant],set:gn.Base,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Jungle,dr.Wetlands],range:1,blightWhiteListedPower:!0,hasDamageInstructions:!0,effects:[{textArea:[.703,.837],text:"2 Damage.<or>Remove 1 <blight>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"Damage",textArea:[.705,.745],text:"2 Damage.",[Pn.Now]:async()=>{await a.damage(2)}},{actionId:"RemoveBlight",textArea:[.792,.832],text:"Remove 1 <blight>.",[Pn.Now]:async()=>{await a.removeBlight()}}]})}}]},Es={name:"Absorb Corruption",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Sun,ir.Earth,ir.Plant],set:gn.BranchAndClaw,target:or.Land,range:0,hasPushOrGather:!0,blightWhiteListedPower:!0,effects:[{textArea:[.61,.934],text:"Gather 1 <blight>.<or>Pay 1 Energy to remove 1 <blight>.<br><br>If you have 2 <plant>:<br>You may do both.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await e.chooseBetween({effects:[{actionId:"GatherBlight",textArea:[.615,.655],text:"Gather 1 <blight>",[Pn.Now]:async()=>{await t.gatherOne(e.Blight)},condition:()=>t.hasAdjacentLandWithPiece(e.Blight)},{actionId:"RemoveBlight",textArea:[.702,.742],text:"Pay 1 Energy to remove 1 <blight>.",[Pn.Now]:async()=>{await a.payEnergy(1),await t.removeBlight()},condition:()=>t.has(e.Blight)&&a.energy>=1},{actionId:"DoBoth",textArea:[.605,.752],text:"Do both.",[Pn.Now]:async()=>{await a.convertElements({[ir.Plant]:2}),await e.addSubEffect({textArea:[.615,.655],text:"Gather 1 <blight>",[Pn.Now]:async()=>{await t.gatherOne(e.Blight)}}),await e.addSubEffect({textArea:[.702,.742],text:"Pay 1 Energy to remove 1 <blight>.",[Pn.Now]:async()=>{await a.payEnergy(1),await t.removeBlight()}})},condition:()=>a.hasElementsWithConvert({[ir.Plant]:2})&&t.hasOrIsAdjacentToLandsWith(e.Blight)&&!e.treatingAllOrsAsAnds&&a.energy>=1}]})}}]},Os={name:"Animated Wrackroot",type:kn.Minor,speed:sr.Slow,energy:0,elements:[ir.Moon,ir.Fire,ir.Plant],set:gn.BranchAndClaw,target:or.Land,range:0,generatesFear:!0,hasDestroyInstructions:!0,effects:[{textArea:[.696,.84],text:"1 <fear>. Destroy 1 <explorer>.<or>Add 1 <wilds>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"Fear",textArea:[.705,.745],text:"1 <fear>. Destroy 1 <explorer>.",[Pn.Now]:async()=>{await a.fear(1),await a.destroyOne(e.Explorer)}},{actionId:"AddWilds",textArea:[.791,.831],text:"Add 1 <wilds>.",[Pn.Now]:async()=>{await a.add(1,e.Wilds)}}]})}}]},ks={name:"Call to Ferocity",type:kn.Minor,speed:sr.Slow,energy:0,elements:[ir.Sun,ir.Fire,ir.Earth],set:gn.BranchAndClaw,targetFilter:[dr.Invaders],target:or.Land,range:1,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.67,.863],text:"Gather up to 3 <dahan>.<or>If target land has <dahan>, 1 <fear> and Push 1 <explorer> and 1 <town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"GatherDahan",textArea:[.68,.72],text:"Gather up to 3 <dahan>.",[Pn.Now]:async()=>{await a.gatherUpTo(3,e.Dahan)}},{actionId:"FearAndPush",textArea:[.768,.863],text:"If target land has <dahan>, 1 <fear> and Push 1 <explorer> and 1 <town>.",[Pn.Now]:async()=>{a.has(e.Dahan)&&(await a.fear(1),await a.pushOne(e.Explorer),await a.pushOne(e.Town))}}]})}}]},Cs={name:"Call To Trade",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Air,ir.Water,ir.Earth,ir.Plant],set:gn.BranchAndClaw,target:or.Land,targetFilter:[dr.Dahan],range:2,hasPushOrGather:!0,effects:[{textArea:[.637,.677],text:"You may Gather 1 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.mayGather(e.Dahan)}},{text:"If the Terror Level is 2 or lower, Gather 1 <town> and the first Ravage in target land this turn becomes a Build there instead.",effects:[{textArea:[.72,.812],text:"Gather 1 <town>",[Pn.InTargetLand]:async({$:e,land:a})=>{e.terrorLevel<=2&&await a.gatherOne(e.Town)}},{textArea:[.768,.9],text:"The first Ravage in target land this turn becomes a Build there instead",[Pn.InTargetLand]:async({$:e,land:a})=>{e.terrorLevel<=2&&await a.skipInvaderAction({next:!0,filter:({invaderAction:e})=>e===qr.Ravage,afterSkip:async({card:e})=>{await a.doExtraBuild(e)}})}}]}]},Ds={name:"Confounding Mists",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Air,ir.Water],set:gn.BranchAndClaw,target:or.Land,range:1,hasPushOrGather:!0,effects:[{textArea:[.654,.878],text:"Defend 4.<or>Each Invader added to target land this turn may be immediately Pushed to any adjacent land.",[Pn.InTargetLand]:async({$:e,you:a,land:t,power:n})=>{await e.chooseBetween({effects:[{actionId:"Defend",textArea:[.66,.7],text:"Defend 4.",[Pn.Now]:async()=>{await t.defend(4)}},{actionId:"AddTrigger",textArea:[.745,.877],text:"Each Invader added to target land this turn may be immediately Pushed to any adjacent land.",[Pn.Now]:async({effect:r})=>{await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===t?r.text:void 0,[Pn.AfterAddingPiece]:async r=>{if(r.land===t)for(const i of r.additions)i.location===t&&i.piece.isInvader&&await e.doPowerAction(a,(async()=>{await i.piece.push({quantifier:ur.May})}),n)}})}}]})}}]},Bs={name:"Cycles Of Time And Tide",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Moon,ir.Water],set:gn.BranchAndClaw,target:or.Land,targetFilter:[dr.Coastal],range:1,blightWhiteListedPower:!0,effects:[{textArea:[.69,.73],text:"If there are <dahan>, add 1 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.has(e.Dahan)&&await a.add(1,e.Dahan)}},{textArea:[.779,.819],text:"If there are no <dahan>, remove 1 <blight>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.has(e.Dahan)||await a.removeBlight()}}]},Ls={name:"Disorienting Landscape",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Moon,ir.Air,ir.Plant],set:gn.BranchAndClaw,target:or.Land,sourceFilter:[dr.SacredSite],range:2,hasPushOrGather:!0,effects:[{textArea:[.673,.713],text:"Push 1 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushOne(e.Explorer)}},{textArea:[.755,.857],text:"If target land is <mountains-jungles>, add 1 <wilds>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.isMountainsOrJungles&&await a.add(1,e.Wilds)}}]},Fs={name:"Elusive Ambushes",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Fire,ir.Water],set:gn.BranchAndClaw,target:or.Land,targetFilter:[dr.Dahan],range:1,hasDamageInstructions:!0,effects:[{textArea:[.696,.827],text:"1 Damage.<or>Defend 4.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"Damage",textArea:[.696,.736],text:"1 Damage.",[Pn.Now]:async()=>{await a.damage(1)}},{actionId:"Defend",textArea:[.784,.824],text:"Defend 4.",[Pn.Now]:async()=>{await a.defend(4)}}]})}}]},Rs={name:"Fire In The Sky",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Fire,ir.Air],set:gn.BranchAndClaw,target:or.Land,sourceFilter:[dr.SacredSite],range:1,generatesFear:!0,effects:[{textArea:[.722,.762],text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.773,.813],text:"Add 1 <strife>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Strife)}}]},Ms={name:"Fleshrot Fever",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Fire,ir.Air,ir.Water,ir.Animal],set:gn.BranchAndClaw,target:or.Land,targetFilter:[dr.Jungle,dr.Sands],range:1,generatesFear:!0,effects:[{textArea:[.722,.762],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.766,.806],text:"Add 1 <disease>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Disease)}}]},Ns={name:"Gold's Allure",type:kn.Minor,speed:sr.Slow,energy:0,elements:[ir.Fire,ir.Earth,ir.Animal],set:gn.BranchAndClaw,target:or.Land,targetFilter:[dr.Mountain],range:1,hasPushOrGather:!0,effects:[{textArea:[.722,.762],text:"Gather 1 <explorer> and 1 <town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherOne(e.Explorer),await a.gatherOne(e.Town)}},{textArea:[.773,.813],text:"Add 1 <strife>.",[Pn.InTargetLand]:async({land:e})=>{await e.addStrife(1)}}]},Ws={name:"Growth Through Sacrifice",type:kn.Minor,speed:sr.Fast,energy:0,elements:[ir.Moon,ir.Fire,ir.Water,ir.Plant],set:gn.BranchAndClaw,target:or.Spirit,banned:!0,hasDestroyInstructions:!0,effects:[{textArea:[.59,.63],text:"Destroy 1 of your <presence>.",[Pn.TargetSpirit]:async({you:e})=>{await e.destroyPresence(1)}},{textArea:[.66,.799],text:"Target Spirit chooses to either:<br><br>Remove 1 <blight> from one of their lands.<or>Add 1 <presence> to one of their lands.<br><br>If you have 2 <sun>: They may do both, in the same land.",[Pn.TargetSpirit]:async({$:e,you:a,spirit:t})=>{await e.chooseBetween({effects:[{actionId:"RemoveBlight",textArea:[.69,.73],text:"Remove 1 <blight> from one of their lands.",label:"Remove <blight>.",[Pn.Now]:async()=>{await t.inLands().pickOne((async e=>{await e.removeBlight()}))}},{actionId:"AddPresence",textArea:[.758,.798],text:"Add 1 <presence> to one of their lands.",label:"Add <presence>.",[Pn.Now]:async()=>{await t.addPresence()}},{actionId:"DoBoth",textArea:[.693,.799],text:"Do both, in the same land.",label:"Do both.",[Pn.Now]:async()=>{await a.convertElements({[ir.Sun]:2}),await t.inLands().pickOne((async a=>{await e.addSubEffect({textArea:[.69,.73],text:"Remove 1 <blight>.",[Pn.Now]:async()=>{await a.removeBlight()}}),await e.addSubEffect({textArea:[.758,.798],text:"Add <presence>.",[Pn.Now]:async()=>{await a.addPresence(t)}})}))},condition:()=>a.hasElementsWithConvert({[ir.Sun]:2})&&!e.treatingAllOrsAsAnds}]})}}]},$s={name:"Guardian Serpents",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Moon,ir.Earth,ir.Animal],set:gn.BranchAndClaw,target:or.Spirit,effects:[{textArea:[.64,.867],text:"Add 1 <beasts> in one of target Spirit's lands.<br><br>If target Spirit has a <sacred> in that land, Defend 4 there.",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{await a.inLands().pickOne((async t=>{await t.add(1,e.Beasts),t.hasSacredSiteOf(a)&&await t.defend(4)}))}}]},Gs={name:"Here There Be Monsters",type:kn.Minor,speed:sr.Slow,energy:0,elements:[ir.Moon,ir.Air,ir.Animal],set:gn.BranchAndClaw,target:or.Land,targetFilter:[dr.Inland],range:0,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.664,.704],text:"You may Push 1 <explorer>/<town>/<dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.mayPush(e.ExplorerTownOrDahan)}},{textArea:[.706,.746],text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.795,.883],text:"If target land has any <beasts>, 1 <fear>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.has(e.Beasts)&&await a.fear(1)}}]},Us={name:"Infested Aquifers",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Moon,ir.Water,ir.Earth,ir.Animal],set:gn.BranchAndClaw,target:or.Land,range:0,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.654,.89],text:"If target land has any <disease>, 1 Damage to each Invader.<or>If target land is <mountains-wetlands>, 1 <fear> and add 1 <disease>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"DamageToEach",textArea:[.66,.749],text:"If target land has any <disease>, 1 Damage to each Invader.",[Pn.Now]:async()=>{a.has(e.Disease)&&await a.damageEach(1)}},{actionId:"FearAndAddDisease",textArea:[.785,.888],text:"If target land is <mountains-wetlands>, 1 <fear> and add 1 <disease>.",[Pn.Now]:async()=>{a.isMountainsOrWetlands&&(await a.fear(1),await a.add(1,e.Disease))}}]})}}]},Hs={name:"Inflame The Fires Of Life",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Moon,ir.Fire,ir.Plant,ir.Animal],set:gn.BranchAndClaw,target:or.Land,sourceFilter:[dr.SacredSite],range:1,generatesFear:!0,effects:[{textArea:[.605,.934],text:"Add 1 <disease>.<or>1 <fear>. Add 1 <strife>.<br><br>If you have 3 <animal>: You may do both.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await e.chooseBetween({effects:[{actionId:"AddDisease",textArea:[.62,.66],text:"Add 1 <disease>.",[Pn.Now]:async()=>{await t.add(1,e.Disease)}},{actionId:"FearAndStrife",textArea:[.706,.746],text:"1 <fear>. Add 1 <strife>.",[Pn.Now]:async()=>{await t.fear(1),await t.addStrife(1)}},{actionId:"DoBoth",textArea:[.605,.756],text:"Do both.",[Pn.Now]:async()=>{await a.convertElements({[ir.Animal]:3}),await e.addSubEffect({textArea:[.62,.66],text:"Add 1 <disease>.",[Pn.Now]:async()=>{await t.add(1,e.Disease)}}),await e.addSubEffect({textArea:[.706,.746],text:"1 <fear>. Add 1 <strife>.",[Pn.Now]:async()=>{await t.fear(1),await t.addStrife(1)}})},condition:()=>!e.treatingAllOrsAsAnds&&a.hasElementsWithConvert({[ir.Animal]:3})}]})}}]},qs={name:"Pact Of The Joined Hunt",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Sun,ir.Plant,ir.Animal],set:gn.BranchAndClaw,target:or.Spirit,hasPushOrGather:!0,hasDamageInstructions:!0,effects:[{textArea:[.67,.855],text:"Target Spirit Gathers 1 <dahan> into one of their lands. 1 Damage in that land per <dahan> present.",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{await a.inLands().pickOne((async a=>{await a.gatherOne(e.Dahan),await a.damage(a.numberOf(e.Dahan))}))}}]},js={name:"Poisoned Dew",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Fire,ir.Water,ir.Plant],set:gn.BranchAndClaw,target:or.Land,range:1,hasDestroyInstructions:!0,effects:[{textArea:[.657,.848],text:"Destroy 1 <explorer>.<br><br>If target land is <jungles-wetlands>, destroy all <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.destroyOne(e.Explorer),a.isJungleOrWetlands&&await a.destroyAll(e.Explorer)}}]},_s={name:"Portents Of Disaster",type:kn.Minor,speed:sr.Fast,energy:0,elements:[ir.Sun,ir.Moon,ir.Air],set:gn.BranchAndClaw,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Invaders],range:1,generatesFear:!0,effects:[{textArea:[.661,.701],text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.75,.881],text:"The next time an Invader is destroyed in target land this turn, 1 <fear>.",[Pn.InTargetLand]:async({$:e,land:a,...t})=>{const n={triggerId:e.nextTriggerId(),[Pn.Now]:async()=>{await e.sendEvent({type:Tn.GenericMain,text:"<p>PortentsOfDisaster</p> triggered from destroying an Invader."}),await a.fear(1)}};await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===a?t.effect.text:void 0,[Pn.AfterRemovePiece]:async({piece:r,location:i,removement:s})=>{r.isInvader&&i===a&&wr[s].isDestroyLike&&(await e.addTrigger(n,t.effect,t.action),e.removeThisEffect())}})}}]},Vs={name:"Promises Of Protection",type:kn.Minor,speed:sr.Fast,energy:0,elements:[ir.Sun,ir.Earth,ir.Animal],set:gn.BranchAndClaw,target:or.Land,sourceFilter:[dr.SacredSite],range:2,hasPushOrGather:!0,effects:[{textArea:[.703,.743],text:"Gather up to 2 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(2,e.Dahan)}},{textArea:[.746,.834],text:"<dahan> have +2 Health while in target land.",[Pn.InTargetLand]:async({$:e,land:a,effect:t})=>{await e.addSubEffectUntilEndOfTurn({[Pn.AdjustHealth]:({piece:t})=>t.isA(e.Dahan)&&t.location===a?2:0,[Pn.Reminder]:e=>e===a?t.text:void 0})}}]},Js={name:"Prowling Panthers",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Moon,ir.Fire,ir.Animal],set:gn.BranchAndClaw,target:or.Land,targetFilter:[dr.Mountain,dr.Jungle],range:1,generatesFear:!0,hasDestroyInstructions:!0,effects:[{textArea:[.67,.864],text:"1 <fear>. Add 1 <beasts>.<or>If target land has <beasts>, destroy 1 <explorer>/<town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"FearAndBeasts",textArea:[.684,.724],text:"1 <fear>. Add 1 <beasts>.",[Pn.Now]:async()=>{await a.fear(1),await a.add(1,e.Beasts)}},{actionId:"Destroy",textArea:[.766,.86],text:"If target land has <beasts>, destroy 1 <explorer>/<town>.",[Pn.Now]:async()=>{a.has(e.Beasts)&&await a.destroyOne(e.ExplorerOrTown)}}]})}}]},zs={name:"Razorsharp Undergrowth",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Moon,ir.Plant],set:gn.BranchAndClaw,target:or.Land,targetFilter:[dr.NonBlight],range:0,hasDestroyInstructions:!0,effects:[{textArea:[.699,.739],text:"Destroy 1 <explorer> and 1 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.destroyOne(e.Explorer),await a.destroyOne(e.Dahan)}},{textArea:[.739,.779],text:"Add 1 <wilds>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Wilds)}},{textArea:[.785,.825],text:"Defend 2.",[Pn.InTargetLand]:async({land:e})=>{await e.defend(2)}}]},Ys={name:"Renewing Rain",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Water,ir.Earth,ir.Plant],set:gn.BranchAndClaw,target:or.Land,sourceFilter:[dr.SacredSite],range:1,effects:[{textArea:[.625,.732],text:"If target land is <jungles-sands>, remove 1 <blight>.",[Pn.InTargetLand]:async({land:e})=>{e.isJungleOrSands&&await e.removeBlight()}},{textArea:[.884,.924],text:"If you ave 3 <plant>: Add 1 <wilds>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Plant]:3})&&await t.add(1,e.Wilds)}}]},Ks={name:"Rites Of The Lands Rejection",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Moon,ir.Fire,ir.Earth],set:gn.BranchAndClaw,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Dahan],range:2,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.638,.867],text:"Invaders do not Build in target land this turn. 1 <fear> per <town>/<city> or 1 <fear> per <dahan>, whichever is less.<or>Push up to 3 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"NoBuild",textArea:[.638,.784],text:"Invaders do not Build in target land this turn. 1 <fear> per <town>/<city> or 1 <fear> per <dahan>, whichever is less.",label:"Invaders do not Build...",[Pn.Now]:async()=>{await a.skipInvaderAction({all:!0,filter:({invaderAction:e})=>e===qr.Build}),await a.fear(Math.min(a.numberOf(e.TownOrCity),a.numberOf(e.Dahan)))}},{actionId:"Push",textArea:[.822,.862],text:"Push up to 3 <dahan>.",[Pn.Now]:async()=>{await a.pushUpTo(3,e.Dahan)}}]})}}]},Qs={name:"Scour The Land",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Air,ir.Earth],set:gn.BranchAndClaw,target:or.Land,sourceFilter:[dr.SacredSite],range:2,hasDestroyInstructions:!0,mayBeSpeed:{effect:{textArea:[.817,.927],text:"If you have 3 <air>: This power may be <fast>.",[Pn.Now]:async({action:e})=>{await e.spirit.convertElements({[ir.Air]:3}),await e.power.makeFast()}},condition:({spirit:e,speed:a})=>a===sr.Fast&&e.hasElementsWithConvert({[ir.Air]:3})},blightWhiteListedPower:!0,fullText:["Destroy 3 <town> and all <explorer>.","Add 1 <blight>.","If you have 3 <air>: This power may be <fast>."],effects:[{textArea:[.631,.671],text:"Destroy 3 <town> and all <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.destroy({amount:3,pieces:e.Town}),await a.destroyAll(e.Explorer)}},{textArea:[.676,.716],text:"Add 1 <blight>.",[Pn.InTargetLand]:async({land:e})=>{await e.addBlight(1)}}]},Xs={name:"Sky Stretches To Shore",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Air,ir.Water,ir.Earth],set:gn.BranchAndClaw,target:or.Spirit,effects:[{textArea:[.656,.792],text:"This turn, Target Spirit may use 1 <slow> Power as if it were <fast>, or vice versa.",[Pn.TargetSpirit]:async({spirit:e})=>{await e.gainMakeFastBuff({alsoMakeSlow:!0})}},{textArea:[.786,.886],text:"Target Spirit gains <range+3> for measuring Range to Coastal lands.",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({icon:"Coastal<br><range+3>",players:[a]}),[Pn.ExtraRangeToLand]:e=>({extraRangeToLand:e.spirit===a?3:0,landFilter:e=>e.isCoastal})})}}]},Zs={name:"Spur On With Words Of Fire",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Fire,ir.Air],set:gn.BranchAndClaw,target:or.Spirit,effects:[{textArea:[.617,.706],text:"If you target a Spirit other than yourself, they gain +1 Energy.",[Pn.TargetSpirit]:async({you:e,spirit:a})=>{a!==e&&await a.gainEnergy(1)}},{textArea:[.705,.927],text:"Target Spirit may immediately play another Power Card by paying its cost. (If it is <slow>, it does not resolve until later.)",[Pn.TargetSpirit]:async({spirit:e})=>{await e.playAPowerCardByPayingItsCost()}}]},eo={name:"Swarming Wasps",type:kn.Minor,speed:sr.Fast,energy:0,elements:[ir.Fire,ir.Air,ir.Animal],set:gn.BranchAndClaw,target:or.Land,targetFilter:[dr.NonBlight],range:1,hasPushOrGather:!0,effects:[{textArea:[.663,.851],text:"Add 1 <beasts>.<or>If target land has <beasts>, Push up to 2 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"AddBeasts",textArea:[.67,.71],text:"Add 1 <beasts>.",[Pn.Now]:async()=>{await a.add(1,e.Beasts)}},{actionId:"PushExplorer",textArea:[.804,.844],text:"Push up to 2 <explorer>.",[Pn.Now]:async()=>{await a.pushUpTo(2,e.Explorer)},condition:()=>a.has(e.Beasts)&&a.has(e.Explorer)}]})}}]},ao={name:"Teeming Rivers",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Sun,ir.Water,ir.Plant,ir.Animal],set:gn.BranchAndClaw,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Mountain,dr.Wetlands],range:2,blightWhiteListedPower:!0,effects:[{textArea:[.654,.749],text:"If target land has no <blight>, add 1 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.isLand&&!a.has(e.Blight)&&await a.add(1,e.Beasts)}},{textArea:[.788,.877],text:"If target land has exactly 1 <blight>, remove it.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.hasExactly(1,e.Blight)&&await a.removeBlight()}}]},to={name:"Tormenting Rotflies",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Air,ir.Plant,ir.Animal],set:gn.BranchAndClaw,target:or.Land,targetFilter:[dr.Sands,dr.Wetlands],range:2,generatesFear:!0,effects:[{textArea:[.647,.883],text:"Add 1 <disease>.<or>If target land has Invaders, 2 <fear>.<br>If <disease> is present, +1 <fear>.<br>If <blight> is present, +1 <fear>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"Disease",textArea:[.657,.697],text:"Add 1 <disease>.",[Pn.Now]:async()=>{await a.add(1,e.Disease)}},{actionId:"Fear",label:"Gain <fear>.",effects:[{textArea:[.746,.786],text:"If target land has Invaders, 2 <fear>.",[Pn.Now]:async()=>{a.hasInvaders&&await a.fear(2)}},{textArea:[.789,.829],text:"If <disease> is present, +1 <fear>.",[Pn.Now]:async()=>{a.has(e.Disease)&&await a.fear(1)}},{textArea:[.831,.871],text:"If <blight> is present, +1 <fear>.",[Pn.Now]:async()=>{a.has(e.Blight)&&await a.fear(1)}}]}]})}}]},no={name:"Twilight Fog Brings Madness",type:kn.Minor,speed:sr.Slow,energy:0,elements:[ir.Sun,ir.Moon,ir.Air,ir.Water],set:gn.BranchAndClaw,target:or.Land,range:1,hasPushOrGather:!0,hasDamageInstructions:!0,effects:[{textArea:[.71,.75],text:"Add 1 <strife>. Push 1 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.addStrife(1),await a.pushOne(e.Dahan)}},{textArea:[.752,.841],text:"Each remaining <dahan> takes 1 Damage.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damageEach(1,e.Dahan)}}]},ro={name:"Bats Scout For Raids By Darkness",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Moon,ir.Air,ir.Animal],set:gn.JaggedEarth,target:or.Land,range:2,hasPushOrGather:!0,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.641,.88],text:"For each <dahan>, 1 Damage to <town>/<city>.<or>1 <fear>. Gather up to 2 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"Damage",textArea:[.641,.749],text:"For each <dahan>, 1 Damage to <town>/<city>.",[Pn.Now]:async()=>{await a.damage(a.numberOf(e.Dahan),e.TownOrCity)}},{actionId:"Fear",textArea:[.83,.87],text:"1 <fear>. Gather up to 2 <dahan>.",[Pn.Now]:async()=>{await a.fear(1),await a.gatherUpTo(2,e.Dahan)}}]})}}]},io={name:"Birds Cry Warning",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Air,ir.Animal],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Dahan],range:3,hasPushOrGather:!0,effects:[{textArea:[.634,.903],text:"The next time <dahan> would be Destroyed in target land, Destroy 2 fewer <dahan>.<or>Push up to 3 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{let t=0;await e.chooseBetween({effects:[{actionId:"ProtectDahan",textArea:[.634,.768],text:"The next time <dahan> would be Destroyed in target land, Destroy 2 fewer <dahan>.",[Pn.Now]:async n=>{await e.addSubEffectUntilEndOfTurn({[Pn.OrderOfRemoveAllMightMatter]:()=>!0,[Pn.Reminder]:e=>e===a?n.effect.text:void 0,[Pn.PreventRemovePiece]:async({piece:n,removement:r})=>!!(n.isA(e.Dahan)&&n.location===a&&wr[r].isDestroyLike&&t<2)&&(t+=1,await e.sendEvent({type:Tn.GenericSub,text:"The <dahan> is saved from destruction by <p>BirdsCryWarning</p>."}),2===t&&e.removeThisEffect(),!0)})}},{actionId:"PushDahan",textArea:[.855,.895],text:"Push up to 3 <dahan>.",[Pn.Now]:async()=>{await a.pushUpTo(3,e.Dahan)}}]})}}]},so={name:"Blood Draws Predators",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Fire,ir.Water,ir.Animal],set:gn.JaggedEarth,target:or.Land,range:1,hasDamageInstructions:!0,effects:[{textArea:[.676,.854],text:"After the next time Invaders are Destroyed in target land: Add 1 <beasts>, then 1 Damage per <beasts> (max. 3 Damage).",[Pn.InTargetLand]:async({$:e,land:a,...t})=>{const n={triggerId:e.nextTriggerId(),[Pn.Now]:async()=>{await a.add(1,e.Beasts),await a.damage(Math.min(a.numberOf(e.Beasts),3))}};await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===a?t.effect.text:void 0,[Pn.AfterRemovePiece]:async({piece:r,location:i,removement:s})=>{r.isInvader&&i===a&&wr[s].isDestroyLike&&(await e.addTrigger(n,t.effect,t.action),e.removeThisEffect())}})}}]},oo={name:"Call To Guard",type:kn.Minor,speed:sr.Fast,energy:0,elements:[ir.Sun,ir.Air,ir.Earth],set:gn.JaggedEarth,target:or.Land,range:1,hasPushOrGather:!0,effects:[{textArea:[.6,.64],text:"Gather up to 1 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(1,e.Dahan)}},{textArea:[.636,.939],text:"Then, if <dahan> are present, either:<br>Defend 1 per <dahan>.<or>After Invaders are added or moved to target land, 1 Damage to each added or moved Invader.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.has(e.Dahan)&&await e.chooseBetween({effects:[{actionId:"DefendPerDahan",textArea:[.71,.75],text:"Defend 1 per <dahan>",[Pn.Now]:async()=>{await a.defend(a.numberOf(e.Dahan))}},{actionId:"AddTrigger",textArea:[.807,.939],text:"After Invaders are added or moved to target land, 1 Damage to each added or moved Invader.",[Pn.Now]:async t=>{await a.afterPiecesAreAddedOrMovedAddTrigger({pieces:e.Invader,trigger:{triggerId:e.nextTriggerId(),[Pn.Now]:async({action:e})=>{for(const t of e.parentData.piecesAddedOrMoved)t.location===a&&await t.takeDamage(1)}},effect:t.effect,action:t.action})}}]})}}]},lo={name:"Carapaced Land",type:kn.Minor,speed:sr.Fast,energy:0,elements:[ir.Earth,ir.Plant,ir.Animal],set:gn.JaggedEarth,target:or.Land,range:0,modifiesRangePerLand:{range:1,condition:({$:e,land:a})=>a.has(e.Beasts)},fullText:["If targeting a land with <beasts>, this Power has <range+1>.","Defend 3.","If you have 2 <earth>:<br>Defend +3."],effects:[{textArea:[.713,.753],text:"Defend 3.",[Pn.InTargetLand]:async({land:e})=>{await e.defend(3)}},{textArea:[.878,.918],text:"If you have 2 <earth>:<br>Defend +3.",[Pn.InTargetLand]:async({you:e,land:a})=>{await e.askToConvertElements({[ir.Earth]:2})&&await a.defend(3)}}]},co={name:"Desiccating Winds",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Fire,ir.Air,ir.Earth],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Mountain,dr.Sands],range:1,hasDamageInstructions:!0,effects:[{textArea:[.679,.772],text:"If target land has <badlands>, 1 Damage.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.has(e.Badlands)&&await a.damage(1)}},{textArea:[.785,.825],text:"Add 1 <badlands>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Badlands)}}]},ho={name:"Dire Metamorphosis",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Moon,ir.Air,ir.Earth,ir.Animal],set:gn.JaggedEarth,target:or.Land,range:1,blightWhiteListedPower:!0,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.653,.693],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.653,.693],text:"1 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(1)}},{textArea:[.707,.747],text:"1 Damage to <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(1,e.Dahan)}},{textArea:[.756,.871],text:"Add 1 <badlands>, 1 <beasts>, 1 <disease>, 1 <strife>, 1 <wilds>, and 1 <blight>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.isLand&&(await a.add(1,e.Badlands),await a.add(1,e.Beasts),await a.add(1,e.Disease),await a.add(1,e.Strife),await a.add(1,e.Wilds)),await a.addBlight(1)}}]},uo={name:"Domesticated Animals Go Berserk",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Moon,ir.Fire,ir.Animal],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Town,dr.City],range:0,generatesFear:!0,effects:[{textArea:[.659,.699],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.659,.699],text:"Defend 5.",[Pn.InTargetLand]:async({land:e})=>{await e.defend(5)}},{textArea:[.87,.91],text:"If you have 3 <moon>:<br>Add 1 <beasts>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Moon]:3})&&await t.add(1,e.Beasts)}}]},go={name:"Dry Wood Explodes In Smoldering Splinters",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Fire,ir.Air,ir.Plant],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.NotWetlands],range:0,generatesFear:!0,hasDamageInstructions:!0,mayBeSpeed:{effect:{text:"You may spend 1 Energy to make this Power <fast>.",[Pn.Now]:async({action:e})=>{await e.spirit.payEnergy(1),await e.power.makeFast()}},condition:({speed:e,spirit:a})=>e===sr.Fast&&a.energy>=1},effects:[{textArea:[.768,.808],text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.824,.864],text:"1 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(1)}}]},fo={name:"Entrap The Forces Of Corruption",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Earth,ir.Plant,ir.Air],set:gn.JaggedEarth,target:or.Land,range:1,hasPushOrGather:!0,blightWhiteListedPower:!0,effects:[{textArea:[.659,.699],text:"Gather up to 1 <blight>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(1,e.Blight)}},{textArea:[.715,.755],text:"Isolate target land.",[Pn.InTargetLand]:async({land:e})=>{e.isLand&&await e.isolate()}},{textArea:[.766,.86],text:"When <blight> is added to target land, it doesn't cascade.",[Pn.InTargetLand]:async({$:e,land:a,effect:t})=>{await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===a?t.text:void 0,[Pn.PreventCascade]:({location:e})=>Promise.resolve(e===a)})}}]},yo={name:"Favor Of The Sun And Star-lit Dark",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Moon,ir.Plant],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],range:1,hasPushOrGather:!0,blightWhiteListedPower:!0,generatesFear:!0,effects:[{textArea:[.624,.664],text:"Defend 4",[Pn.InTargetLand]:async({land:e})=>{e.isLand&&await e.defend(4)}},{textArea:[.682,.722],text:"Push up to 1 <blight>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(1,e.Blight)}},{textArea:[.871,.911],text:"If you have 2 <sun>:<br>1 <fear>.",[Pn.InTargetLand]:async({you:e,land:a})=>{await e.askToConvertElements({[ir.Sun]:2})&&await a.fear(1)}}]},po={name:"Flow Downriver Blow Downwind",type:kn.Minor,speed:sr.Slow,energy:0,elements:[ir.Air,ir.Water,ir.Plant],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],range:2,hasPushOrGather:!0,blightWhiteListedPower:!0,effects:[{textArea:[.746,.786],text:"Push up to 1 <blight>/<explorer>/<town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(1,e.BlightExplorerOrTown)}}]},wo={name:"Gift Of Natures Connection",type:kn.Minor,speed:sr.Fast,energy:0,elements:[],set:gn.JaggedEarth,target:or.Spirit,effects:[{textArea:[.636,.772],text:"Target Spirit gains either 2 Energy or 2 of a single Element (their choice).",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{await e.chooseBetween({players:[a],effects:[{actionId:"GainEnergy",text:"Gain 2 Energy.",players:[a],[Pn.Now]:async()=>{await a.gainEnergy(2)}},{actionId:"GainElement",text:"Gain 2 of a single Element.",players:[a],[Pn.Now]:async()=>{await a.gainElements({amount:2,same:!0})}}]})}},{textArea:[.779,.877],text:"If you target another Spirit, you gain an Element of your choice.",[Pn.TargetSpirit]:async({you:e,spirit:a})=>{a!==e&&await e.gainElements()}}]},mo={name:"Gift Of Twinned Days",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Moon],set:gn.JaggedEarth,target:or.Spirit,targetFilter:[fr.Another],effects:[{textArea:[.644,.88],text:"Once this turn, target Spirit may Repeat the lowest-cost Power Card they have in play by paying its cost again. You may do likewise.",[Pn.TargetSpirit]:async({$:e,spirit:a,you:t,...n})=>{n.isRepeat||await a.andAnotherSpirit(t,{now:async(a,t)=>{await e.addSubEffectUntilEndOfTurn({textArea:t?[.647,.822]:[.838,.878],text:(t?"Target Spirit":"You")+" may Repeat the lowest-cost Power Card you have in play by paying its cost again.",[Pn.GlobalReminder]:()=>({power:n.power.power,players:[a]}),[Pn.MayRepeatPowercard]:({power:e,speed:t})=>e.owner===a&&e.costToPlay<=a.energy&&e.data.type!==kn.Innate&&e.isLowestCostOfPlayedCards&&e.possibleToRepeatAtSpeed(t),[Pn.RepeatPowerCard]:async({power:t,speed:n})=>{t.owner===a&&e.removeThisEffect(),await t.payForPlay(),await t.replay(n)}})}})}}]},vo={name:"Haunted By Primal Memories",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Moon,ir.Air,ir.Earth],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Invaders],range:2,generatesFear:!0,effects:[{textArea:[.71,.75],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.71,.75],text:"Defend 3.",[Pn.InTargetLand]:async({land:e})=>{await e.defend(3)}},{textArea:[.768,.808],text:"If <beasts> are present, +2 <fear>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.has(e.Beasts)&&await a.fear(2)}}]},xo={name:"Hazards Spread Across The Island",type:kn.Minor,speed:sr.Fast,energy:0,elements:[ir.Fire,ir.Air,ir.Earth,ir.Plant],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],range:2,effects:[{textArea:[.624,.9],text:"Choose a type of token from <badlands>/<beasts>/<disease>/<strife>/<wilds> that exists in an adjacent land; choosing <disease> costs 1 Energy.<br>Add 1 of that type of token to target land.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await e.chooseBetween({effects:[e.Badlands,e.Beasts,e.Disease,e.Strife,e.Wilds].map((n=>({actionId:n,text:Zn[n].text,[Pn.Now]:async()=>{n===e.Disease&&await a.payEnergy(1),await t.add(1,n)},condition:()=>t.hasAdjacentLandWithPiece(n)&&a.energy>=(n===e.Disease?1:0)})))},{orChoice:!1})}}]},bo={name:"Like Calls To Like",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Sun,ir.Water,ir.Plant],set:gn.JaggedEarth,target:or.Land,range:1,hasPushOrGather:!0,blightWhiteListedPower:!0,fullText:["If target land has <explorer>, Gather up to 1 <explorer>.","Do likewise for <town>, <dahan>, <blight>, and <beasts>."],effects:[Xn.Explorer,Xn.Town,Xn.Dahan,Xn.Blight,Xn.Beasts].map((e=>({textArea:[.661,.863],text:`If target land has ${Zn[e].text}, Gather up to 1 ${Zn[e].text}.`,[Pn.InTargetLand]:async({land:a})=>{a.has(e)&&await a.gatherUpTo(1,e)}})))},To={name:"Mesmerized Tranquility",type:kn.Minor,speed:sr.Fast,energy:0,elements:[ir.Water,ir.Earth,ir.Animal],set:gn.JaggedEarth,target:or.Land,range:0,effects:[{textArea:[.713,.753],text:"Isolate target land.",[Pn.InTargetLand]:async({land:e})=>{await e.isolate()}},{textArea:[.769,.809],text:"Each Invader does -1 Damage.",[Pn.InTargetLand]:async({$:e,land:a,effect:t})=>{await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===a?t.text:void 0,[Pn.AdjustDamage]:({piece:e})=>e.isInvader&&e.location===a?-1:0})}}]},Ao={name:"Renewing Boon",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Sun,ir.Earth,ir.Plant],set:gn.JaggedEarth,target:or.Spirit,targetFilter:[fr.Another],effects:[{textArea:[.648,.883],text:"Choose a land where you and target Spirit both have <presence>.<br>In that land: Remove 1 <blight>, and target Spirit may add 1 of their Destroyed <presence>.",[Pn.TargetSpirit]:({you:e,spirit:a})=>e.inLandsWhere((e=>e.hasPresenceOf(a))).pickOne((async e=>{await e.removeBlight(),await e.addPresence(a,{destroyed:!0})}))}]};var Io;!function(e){e.Jungles="Jungles",e.Mountains="Mountains",e.Sands="Sands",e.Wetlands="Wetlands"}(Io||(Io={}));const Po={name:"A",set:gn.Base,thematic:!1,terrain:[Io.Mountains,Io.Wetlands,Io.Jungles,Io.Sands,Io.Wetlands,Io.Mountains,Io.Sands,Io.Jungles],setupSymbols:[[],[Ln.City,Ln.Dahan],[Ln.Dahan,Ln.Dahan],[Ln.Blight],[],[Ln.Dahan],[Ln.Dahan,Ln.Dahan],[Ln.Town]],adjacency:[[5,4,3,1,8],[8,0,3,2],[8,1,3],[2,1,0,4],[3,0,5,7,6],[7,4,0],[4,7],[6,4,5],[0,1,2]],outerBorders:[[0,0,5,5,7,7,7],[7,7,7,6,6,6,6],[6,4,3,3,2,2,2]]},So={name:"B",set:gn.Base,thematic:!1,terrain:[Io.Wetlands,Io.Mountains,Io.Sands,Io.Jungles,Io.Sands,Io.Wetlands,Io.Mountains,Io.Jungles],setupSymbols:[[Ln.Dahan],[Ln.City],[Ln.Dahan,Ln.Dahan],[Ln.Blight],[],[Ln.Town],[Ln.Dahan],[Ln.Dahan,Ln.Dahan]],adjacency:[[5,4,3,1,8],[8,0,3,2],[8,1,3],[2,1,0,4,6],[0,5,6,3],[7,6,4,0],[3,4,5,7],[6,5],[0,1,2]],outerBorders:[[0,5,5,5,7,7,7],[7,7,7,6,6,6,6],[6,3,3,2,2,2,2]]},Eo={name:"C",set:gn.Base,thematic:!1,terrain:[Io.Jungles,Io.Sands,Io.Mountains,Io.Jungles,Io.Wetlands,Io.Sands,Io.Mountains,Io.Wetlands],setupSymbols:[[Ln.Dahan],[Ln.City],[Ln.Dahan,Ln.Dahan],[],[Ln.Blight,Ln.Dahan,Ln.Dahan],[Ln.Dahan],[Ln.Town],[]],adjacency:[[5,4,1,8],[8,0,4,3,2],[8,1,3],[2,1,4,6],[0,5,6,3,1],[7,6,4,0],[3,4,5,7],[6,5],[0,1,2]],outerBorders:[[0,0,5,5,7,7,7],[7,7,7,7,6,6,3],[3,3,3,3,2,2,2]]},Oo={name:"D",set:gn.Base,thematic:!1,terrain:[Io.Wetlands,Io.Jungles,Io.Wetlands,Io.Sands,Io.Mountains,Io.Jungles,Io.Sands,Io.Mountains],setupSymbols:[[Ln.Dahan,Ln.Dahan],[Ln.City,Ln.Dahan],[],[],[Ln.Blight,Ln.Dahan],[],[Ln.Town,Ln.Dahan,Ln.Dahan],[]],adjacency:[[7,6,4,1,8],[8,0,4,3,2],[8,1,3],[2,1,4,5],[0,6,5,3,1],[3,4,6],[5,4,0,7],[6,0],[0,1,2]],outerBorders:[[0,0,0,0,0,0,7],[7,7,7,6,6,6,5],[5,5,3,3,3,2,2]]},ko={name:"E",set:gn.JaggedEarth,thematic:!1,terrain:[Io.Sands,Io.Mountains,Io.Jungles,Io.Wetlands,Io.Mountains,Io.Sands,Io.Jungles,Io.Wetlands],setupSymbols:[[Ln.Dahan],[Ln.City],[Ln.Dahan,Ln.Dahan],[Ln.Blight],[Ln.Dahan],[],[Ln.Town],[Ln.Dahan,Ln.Dahan]],adjacency:[[6,4,1,8],[8,0,4,2],[8,1,4,3],[2,4,6,5],[0,6,3,2,1],[3,6,7],[7,5,3,4,0],[5,6],[0,1,2]],outerBorders:[[0,0,0,6,6,7,7],[7,7,7,7,7,5,5],[5,3,3,3,2,2,2]]},Co={name:"F",set:gn.JaggedEarth,thematic:!1,terrain:[Io.Sands,Io.Jungles,Io.Wetlands,Io.Mountains,Io.Jungles,Io.Mountains,Io.Wetlands,Io.Sands],setupSymbols:[[Ln.Dahan,Ln.Dahan],[Ln.City],[Ln.Dahan],[Ln.Blight],[Ln.Dahan],[Ln.Dahan,Ln.Dahan],[],[Ln.Town]],adjacency:[[5,4,1,8],[8,0,4,3,2],[8,1,3],[2,1,4,7,6],[0,5,7,3,1],[7,4,0],[3,7],[6,3,4,5],[0,1,2]],outerBorders:[[0,0,0,5,5,5,7],[7,7,7,7,6,6,6],[6,6,3,3,3,2,2]]},Do={name:"G",set:gn.HorizonsOfSpiritIsland,thematic:!1,terrain:[Io.Mountains,Io.Wetlands,Io.Sands,Io.Wetlands,Io.Sands,Io.Jungles,Io.Jungles,Io.Mountains],setupSymbols:[[Ln.Dahan,Ln.Dahan],[Ln.City],[Ln.Dahan],[Ln.Dahan],[Ln.Blight],[],[Ln.Dahan,Ln.Dahan],[Ln.Town]],adjacency:[[5,1,8],[8,0,5,4,3,2],[8,1,3],[2,1,4,6],[5,7,6,3,1],[7,4,1,0],[3,4,7],[6,4,5],[0,1,2]],outerBorders:[[0,0,0,5,5,7,7],[7,7,7,7,6,6,6],[6,3,3,2,2,2,2]]},Bo={name:"H",set:gn.HorizonsOfSpiritIsland,thematic:!1,terrain:[Io.Jungles,Io.Sands,Io.Mountains,Io.Mountains,Io.Jungles,Io.Wetlands,Io.Wetlands,Io.Sands],setupSymbols:[[Ln.Dahan],[Ln.City],[Ln.Dahan],[],[Ln.Blight],[Ln.Dahan,Ln.Dahan],[Ln.Town],[Ln.Dahan,Ln.Dahan]],adjacency:[[7,5,1,8],[8,0,5,4,2],[8,1,4,3],[2,4,6],[1,5,6,3,2],[0,7,6,4,1],[3,4,5,7],[6,5,0],[0,1,2]],outerBorders:[[0,0,0,0,7,7,7],[7,7,6,6,6,6,3],[3,3,3,3,2,2,2]]},Lo={name:"EA",set:gn.Base,thematic:!0,terrain:[Io.Jungles,Io.Wetlands,Io.Wetlands,Io.Wetlands,Io.Sands,Io.Mountains,Io.Mountains,Io.Mountains,Io.Wetlands,Io.Wetlands],setupSymbols:[[Ln.Explorer],[Ln.Disease,Ln.Disease,Ln.Town,Ln.Strife],[Ln.Dahan,Ln.Dahan,Ln.Blight,Ln.Disease,Ln.City,Ln.Town,Ln.Strife],[Ln.Explorer,Ln.Dahan,Ln.Dahan,Ln.Dahan],[],[Ln.Badlands],[Ln.Vitality],[Ln.Explorer],[Ln.Dahan,Ln.Dahan],[Ln.Dahan,Ln.Dahan]],adjacency:[[10,1,4,5],[10,2,3,4,0],[6,3,1,10],[2,6,7,8,4,1],[1,3,8,5,0],[0,4,8,9],[7,3,2],[8,3,6],[9,5,4,3,7],[5,8],[2,1,0]],outerBorders:[[0,0,5,5,5,5,9],[9,9,9,8,7,7,6],[6,6,6,2,2,2,2]]},Fo={name:"NE",set:gn.Base,thematic:!0,terrain:[Io.Sands,Io.Jungles,Io.Jungles,Io.Wetlands,Io.Jungles,Io.Mountains,Io.Mountains,Io.Sands,Io.Wetlands],setupSymbols:[[Ln.City],[Ln.Wilds],[Ln.Dahan],[Ln.Dahan],[Ln.Town],[Ln.Dahan,Ln.Dahan],[Ln.Explorer,Ln.Explorer,Ln.Explorer,Ln.Dahan,Ln.Dahan,Ln.Dahan],[],[Ln.Beasts,Ln.Disease]],adjacency:[[9,1,4],[9,2,4,0],[9,3,6,4,1],[6,2,9],[0,1,2,6,7,8],[6],[5,7,4,2,3],[8,4,6],[4,7],[3,2,1,0]],outerBorders:[[0,0,4,4,8,8,8],[8,8,7,7,6,6,5],[5,5,6,3,3,3,3]]},Ro={name:"NW",set:gn.Base,thematic:!0,terrain:[Io.Sands,Io.Sands,Io.Wetlands,Io.Jungles,Io.Mountains,Io.Sands,Io.Wetlands,Io.Mountains,Io.Mountains],setupSymbols:[[Ln.Explorer,Ln.Explorer,Ln.Dahan,Ln.Vitality],[Ln.City],[Ln.Town,Ln.Disease],[],[Ln.Vitality],[Ln.Dahan,Ln.Dahan,Ln.Vitality],[Ln.Dahan,Ln.Badlands],[Ln.Explorer,Ln.Dahan],[Ln.Dahan]],adjacency:[[9,1,4,5],[9,2,3,4,0],[3,1,9],[6,4,1,2],[1,3,6,7,5,0],[0,4,7,8],[7,4,3],[8,5,4,6],[5,7],[2,1,0]],outerBorders:[[0,5,5,8,8,8,8],[8,8,7,6,6,6,6],[6,3,3,2,2,2,2]]},Mo={name:"SE",set:gn.JaggedEarth,thematic:!0,terrain:[Io.Jungles,Io.Jungles,Io.Wetlands,Io.Mountains,Io.Jungles,Io.Wetlands,Io.Sands,Io.Mountains,Io.Mountains],setupSymbols:[[Ln.Town,Ln.Dahan,Ln.Dahan],[Ln.Dahan,Ln.Dahan],[Ln.Dahan],[],[Ln.Beasts],[Ln.Town,Ln.Town,Ln.Dahan,Ln.Disease],[Ln.Explorer],[Ln.Blight,Ln.Wilds],[]],adjacency:[[9,1,4,5],[9,2,3,4,0],[3,1,9],[6,4,1,2],[1,3,6,7,5,0],[0,4,7,8],[7,4,3],[8,5,4,6],[5,7],[2,1,0]],outerBorders:[[0,0,5,5,8,8,8],[8,8,7,7,6,6,6],[6,3,3,3,2,2,2]]},No={name:"SW",set:gn.JaggedEarth,thematic:!0,terrain:[Io.Sands,Io.Wetlands,Io.Sands,Io.Jungles,Io.Jungles,Io.Jungles,Io.Mountains,Io.Mountains,Io.Sands,Io.Jungles],setupSymbols:[[Ln.Beasts],[Ln.Town,Ln.Dahan],[Ln.Dahan,Ln.Blight,Ln.Town,Ln.Strife],[Ln.Explorer,Ln.Town,Ln.Beasts],[Ln.Wilds,Ln.Beasts],[Ln.Explorer,Ln.Badlands],[Ln.Explorer],[Ln.Blight,Ln.Wilds],[],[]],adjacency:[[10,1,3,4],[10,2,3,0],[6,3,1,10],[1,2,6,5,4,0],[0,3,5,9],[3,6,8,9,4],[7,8,5,3,2],[8,6],[9,5,6,7],[4,5,8],[2,1,0]],outerBorders:[[0,0,4,4,4,4,9],[9,9,8,8,7,7,7],[7,7,6,6,2,2,2]]},Wo={name:"WE",set:gn.Base,thematic:!0,terrain:[Io.Jungles,Io.Sands,Io.Sands,Io.Sands,Io.Jungles,Io.Mountains,Io.Wetlands,Io.Jungles,Io.Sands,Io.Mountains],setupSymbols:[[Ln.Town,Ln.Town,Ln.Dahan,Ln.Dahan],[Ln.Town],[Ln.Wilds],[Ln.Beasts],[Ln.Explorer],[Ln.Explorer,Ln.Dahan],[Ln.Dahan,Ln.Dahan],[Ln.Dahan,Ln.Dahan],[Ln.Badlands,Ln.Badlands],[Ln.Beasts]],adjacency:[[10,1,4,6,7,8],[10,2,3,4,0],[3,1,10],[5,4,1,2],[1,3,5,6,0],[6,4,3],[7,0,4,5],[9,8,0,6],[0,7,9],[8,7],[2,1,0]],outerBorders:[[0,0,8,8,9,9,9],[9,9,9,7,6,6,5],[5,5,5,3,3,2,2]]},$o={[un.BalancedA]:Po,[un.BalancedB]:So,[un.BalancedC]:Eo,[un.BalancedD]:Oo,[un.BalancedE]:ko,[un.BalancedF]:Co,[un.BalancedG]:Do,[un.BalancedH]:Bo,[un.ThematicEA]:Lo,[un.ThematicNE]:Fo,[un.ThematicNW]:Ro,[un.ThematicSE]:Mo,[un.ThematicSW]:No,[un.ThematicWE]:Wo};var Go;!function(e){e.CoastalLands="CoastalLands",e.Jungles="Jungles",e.JunglesAndSands="JunglesAndSands",e.JunglesAndWetlands="JunglesAndWetlands",e.JunglesEscalation="JunglesEscalation",e.Mountains="Mountains",e.MountainsAndJungles="MountainsAndJungles",e.MountainsAndWetlands="MountainsAndWetlands",e.MountainsEscalation="MountainsEscalation",e.Sands="Sands",e.SandsAndMountains="SandsAndMountains",e.SandsAndWetlands="SandsAndWetlands",e.SandsEscalation="SandsEscalation",e.SaltDeposits="SaltDeposits",e.WaveOfImmigration="WaveOfImmigration",e.Wetlands="Wetlands",e.WetlandsEscalation="WetlandsEscalation"}(Go||(Go={}));const Uo={[Go.CoastalLands]:{name:"Coastal Lands",text:"Coastal Lands",stage:2,terrains:[],saltDeposits:!1,coastal:!0,escalation:!1,set:gn.Base},[Go.Jungles]:{name:"Jungles",text:"<jungles>",stage:1,terrains:[Io.Jungles],saltDeposits:!1,coastal:!1,escalation:!1,set:gn.Base},[Go.JunglesAndSands]:{name:"Jungles and Sands",text:"<jungles-sands>",stage:3,terrains:[Io.Jungles,Io.Sands],saltDeposits:!1,coastal:!1,escalation:!1,set:gn.Base},[Go.JunglesAndWetlands]:{name:"Jungles and Wetlands",text:"<jungles-wetlands>",stage:3,terrains:[Io.Jungles,Io.Wetlands],saltDeposits:!1,coastal:!1,escalation:!1,set:gn.Base},[Go.JunglesEscalation]:{name:"Jungles Escalation",text:"<jungles><escalation>",stage:2,terrains:[Io.Jungles],saltDeposits:!1,coastal:!1,escalation:!0,set:gn.Base},[Go.Mountains]:{name:"Mountains",text:"<mountains>",stage:1,terrains:[Io.Mountains],saltDeposits:!1,coastal:!1,escalation:!1,set:gn.Base},[Go.MountainsAndJungles]:{name:"Mountains and Jungles",text:"<mountains-jungles>",stage:3,terrains:[Io.Mountains,Io.Jungles],saltDeposits:!1,coastal:!1,escalation:!1,set:gn.Base},[Go.MountainsAndWetlands]:{name:"Mountains and Wetlands",text:"<mountains-wetlands>",stage:3,terrains:[Io.Mountains,Io.Wetlands],saltDeposits:!1,coastal:!1,escalation:!1,set:gn.Base},[Go.MountainsEscalation]:{name:"Mountains Escalation",text:"<mountains><escalation>",stage:2,terrains:[Io.Mountains],saltDeposits:!1,coastal:!1,escalation:!0,set:gn.Base},[Go.Sands]:{name:"Sands",text:"<sands>",stage:1,terrains:[Io.Sands],saltDeposits:!1,coastal:!1,escalation:!1,set:gn.Base},[Go.SandsAndMountains]:{name:"Sands and Mountains",text:"<mountains-sands>",stage:3,terrains:[Io.Sands,Io.Mountains],saltDeposits:!1,coastal:!1,escalation:!1,set:gn.Base},[Go.SandsAndWetlands]:{name:"Sands and Wetlands",text:"<sands-wetlands>",stage:3,terrains:[Io.Sands,Io.Wetlands],saltDeposits:!1,coastal:!1,escalation:!1,set:gn.Base},[Go.SandsEscalation]:{name:"Sands Escalation",text:"<sands><escalation>",stage:2,terrains:[Io.Sands],saltDeposits:!1,coastal:!1,escalation:!0,set:gn.Base},[Go.SaltDeposits]:{name:"Salt Deposits",text:"Salt Deposits",stage:2,terrains:[],saltDeposits:!0,coastal:!1,escalation:!1,set:gn.NatureIncarnate},[Go.WaveOfImmigration]:{name:"Wave of Immigration",text:"Wave of Immigration",stage:0,terrains:[],saltDeposits:!1,coastal:!1,escalation:!1,set:gn.JaggedEarth},[Go.Wetlands]:{name:"Wetlands",text:"<wetlands>",stage:1,terrains:[Io.Wetlands],saltDeposits:!1,coastal:!1,escalation:!1,set:gn.Base},[Go.WetlandsEscalation]:{name:"Wetlands Escalation",text:"<wetlands><escalation>",stage:2,terrains:[Io.Wetlands],saltDeposits:!1,coastal:!1,escalation:!0,set:gn.Base}},Ho={[Mr.Bring]:{verb:"Bring"},[Mr.Gather]:{verb:"Gather"},[Mr.Move]:{verb:"Move"},[Mr.Push]:{verb:"Push"},[Mr.Relocate]:{verb:"Relocate"}};var qo,jo;!function(e){e.AdversaryAction="AdversaryAction",e.BlightCardAction="BlightCardAction",e.DahanEventAction="DahanEventAction",e.ExtraInvaderAction="ExtraInvaderAction",e.FearAction="FearAction",e.GameAction="GameAction",e.MainEventAction="MainEventAction",e.NormalInvaderAction="NormalInvaderAction",e.PowerAction="PowerAction",e.ScenarioAction="ScenarioAction",e.SpiritAction="SpiritAction",e.TokenEventAction="TokenEventAction"}(qo||(qo={})),function(e){e.Land="Land",e.Ocean="Ocean",e.EndlessDark="EndlessDark"}(jo||(jo={}));const _o=(e,a)=>{let t=0;for(let n=0,r=e.length;n<r;n+=1)t+=a(e[n],n);return t},Vo=(e,a)=>{let t=Number.MIN_SAFE_INTEGER;for(const n of e){const e=a(n);t=e>t?e:t}return t},Jo=(e,a)=>0===e.length?0:e.reduce(((e,t)=>Math.min(e,a(t))),1/0),zo=(e,a)=>{let t=0;for(const n of e)a(n)&&(t+=1);return t},Yo=(e,a)=>{let t="[";return e.forEach(((e,n)=>{n>0&&(t+=", "),t+=a?a(e):e})),t+="]",t};class Ko{items;$;query;order;constructor(e,a,t=[],n=!1){this.$=e,this.query=a,this.items=[...t],this.order=n}get anyOne(){return this.isEmpty?null:this.items[0]}get count(){return this.items.length}get isEmpty(){return 0===this.count}add(e){return this.items.push(e),this}addAll(e){return this.items.push(...e),this}autoPickOne(e,a){return this.pickOne(e,{...a,autoPlayOneOption:!0})}copy(){return new Ko(this.$,this.query,[...this.items],this.order)}filteredByAllInPriority(...e){for(const a of e){const e=this.items.filter(a);e.length>0&&(this.items=e)}return this}filteredByAnyInPriority(...e){for(const a of e){const e=this.items.filter(a);if(e.length>0)return this.items=e,this}return this}firstOneWhere(e){return this.items.find(e)??null}async forEach(e,a){let t=[...this.items];const n=this.order&&(void 0===a?.autoPlayOneOption||this.itemsInFirstPosition.length>1);if(t.length>0)for(;t.length>0;){const r=n?await this.$.query({query:this.query,items:t,actionIds:t.map((e=>e.serialized)),...a}):0;await e(t[r]),t.splice(r,1),this.query===An.SelectPiece&&(t=t.filter((e=>null!==e.location)))}else a?.noOptions&&await this.$.clickToContinue(a)}has(e){return this.items.includes(e)}hasAtLeast(e,a){let t=0;for(const n of this.items)if(a(n)&&(t+=1,t>=e))return!0;return t>=e}hasExactlyOneWhere(e,a){return this.numberOf(a)===e}hasNoneWhere(e){return!this.items.some(e)}hasOneWhere(e){return this.items.some(e)}async inDifferent(e,a){0===this.count&&a?.noOptions?await this.$.clickToContinue(a):await e(((e,a)=>this.pickOne((async a=>{await e(a),this.remove(a)}),a)))}maxNumberOf(e){return Vo(this.items,e)}minNumberOf(e){return Jo(this.items,e)}numberOf(e){return zo(this.items,e)}async optionallyPickOne(e,a){await this.pickOne(e,a,!0)}async pickMultiple(e){const{amount:a,forPickedItem:t,beforeNextItem:n,where:r,effect:i,optional:s=!1,repeatSame:o=!1,together:d=!1,autoplayIfPickingAll:l=!1}=e;if(r&&this.where(r),0===this.count)i?.noOptions&&await this.$.clickToContinue({...i});else if((void 0===a||a>=this.count)&&l&&!o&&!d)for(;this.count>0;)await t(this.items[0]),this.remove(this.items[0]);else for(let e=0;void 0===a||e<a;e+=1){let l=!1;if(await this.pickOne((async e=>{l=!0,await t(e),o||d||this.remove(e),d&&this.where((a=>a===e)),r&&this.where(r)}),{...i,noOptions:void 0,prompt:`${i?.prompt??this.$.defaultPromptForQueryType(this.query)}${void 0!==a&&a>1?` (${a-e} left.)`:""}`},s),!l||e===a)break;n?.()}}async pickOne(e,a,t=!1){const n=this.itemsInFirstPosition;if(n.length>0)if(t){const t=await this.$.queryOptional({query:this.query,items:n,actionIds:n.map((e=>e.serialized)),...a});null!=t&&await e(n[t])}else{const t=await this.$.query({query:this.query,items:n,actionIds:n.map((e=>e.serialized)),...a});await e(n[t])}else a?.noOptions&&await this.$.clickToContinue(a)}remove(e){return Vr(this.items,e),this}removeAllButFirst(){return this.items.length>1&&(this.items.length=1),this}selectOrder(e=!0){return this.order=e,this}sort(e){return this.items.sort(e),this}sum(e){return _o(this.items,e)}toString(){return Yo(this.items)}where(e){return this.items=this.items.filter(e),this}withLeast(e){const a=Jo(this.items,e);return this.where((t=>e(t)===a))}withMost(e){const a=Vo(this.items,e);return this.where((t=>e(t)===a))}get itemsInFirstPosition(){let e=this.items;return this.query===An.SelectPiece&&(e=this.items.filter((e=>e.isTopInStackOfPieces(this.items)))),e}}var Qo;!function(e){e.Amorphous="Amorphous",e.DarkFire="DarkFire",e.Deeps="Deeps",e.Encircle="Encircle",e.Enticing="Enticing",e.Foreboding="Foreboding",e.Haven="Haven",e.Immense="Immense",e.Intensify="Intensify",e.Lair="Lair",e.Locus="Locus",e.Madness="Madness",e.Mentor="Mentor",e.Might="Might",e.Nourishing="Nourishing",e.Pandemonium="Pandemonium",e.Reach="Reach",e.Regrowth="Regrowth",e.Resilience="Resilience",e.Sparking="Sparking",e.SpreadingHostility="SpreadingHostility",e.Stranded="Stranded",e.Sunshine="Sunshine",e.Tactician="Tactician",e.Tangles="Tangles",e.Transforming="Transforming",e.Travel="Travel",e.Unconstrained="Unconstrained",e.Violence="Violence",e.Warrior="Warrior",e.Wind="Wind"}(Qo||(Qo={}));const Xo=Symbol("annotationCache"),Zo=Object.prototype;class ed{static reactivity=!0;static makeObservable(e){this.reactivity&&yt(e)}static observableClass(e,a){if(this.reactivity){this.makeAutoObservable(e);const t=Object.getOwnPropertyDescriptor(e,"dataStore");if(void 0!==a&&t?.get){const t=`sid-${a}`,n=localStorage.getItem(t);if(n){const a=JSON.parse(n,((e,a)=>"undefined"===a?void 0:a));e.dataStore=a}setTimeout((()=>{Ga((()=>{localStorage.setItem(t,JSON.stringify(it(e.dataStore),((e,a)=>void 0===a?"undefined":a)))}))}),1)}}}static makeAutoObservable(e){if(this.reactivity){if(tt(e))throw new Error("Target must not be observable");let a=e[Xo];if(!a){a={};const t=Object.getPrototypeOf(e);let n=e;for(;n&&n!==Zo;)Reflect.ownKeys(n).forEach((e=>{e!==H&&"constructor"!==e&&"toString"!==e&&(a[e]=!0)})),n=Object.getPrototypeOf(n);t&&t!==Zo&&Object.defineProperty(t,Xo,{value:a})}yt(e,a,{autoBind:!0})}}}var ad=function(e,a,t,n){var r,i=arguments.length,s=i<3?a:null===n?n=Object.getOwnPropertyDescriptor(a,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,a,t,n);else for(var o=e.length-1;o>=0;o--)(r=e[o])&&(s=(i<3?r(s):i>3?r(a,t,s):r(a,t))||s);return i>3&&s&&Object.defineProperty(a,t,s),s};class td{baseHealth;baseStrife=0;damage=0;doesNotParticipateInRavage=!1;fightsBeforeInvaders=!1;id;isIncarna;location;marked;piece;positionIndex;scenarioNumber;shadowDamage=0;spiritNumber;$;constructor(e,a,t,n,r){ed.makeObservable(this),this.$=e,this.id=this.$.generatePieceId(),this.piece=a,this.location=t,this.spiritNumber=r,this.positionIndex=n,this.isIncarna=Zn[Xn.Incarna].pieces.includes(a),this.baseHealth=td.pieceBaseHealth(this.piece)}get adjustedIndividualInvaderRavageDamage(){return({normal:e,towardsLand:a})=>this.$.sumEffects(Pn.AdjustIndividualInvaderRavageDamage,{normal:e,piece:this,towardsLand:a})}get extraHealth(){if(!this.isInvader&&!this.isDahan)return 0;const e=this.$.sumEffects(Pn.AdjustHealth,{piece:this});return Math.max(e,1-this.baseHealth)}get fearFromDestruction(){switch(this.piece){case Ln.City:return 2;case Ln.Town:return 1;default:return 0}}get health(){return this.baseHealth+this.extraHealth}get healthSurplus(){return Math.max(this.health-this.totalDamage,0)}get index(){return null===this.location?0:this.location.pieces.filter((e=>e.piece===this.piece)).indexOf(this)}get isAlive(){return this.healthSurplus>0}get isAliveIgnoringHealthBonuses(){return this.totalDamage<this.baseHealth}get isBadlands(){return this.piece===Ln.Badlands||this.mustCountAsBadlands||this.mayCountAsBadlands}get isBeasts(){return this.piece===Ln.Beasts||this.mayCountAsBeast}get isBlight(){return this.piece===Ln.Blight}get isCity(){return this.piece===Ln.City}get isDahan(){return this.piece===Ln.Dahan}get isEmpowered(){return null!=this.owner&&this.owner.hasEmpoweredIncarna}get isExplorer(){return this.piece===Ln.Explorer||this.mayCountAsExplorer}get isInvader(){return this.piece===Ln.Explorer||this.piece===Ln.Town||this.piece===Ln.City||this.piece===Ln.Thief&&this.mayCountAsExplorer}get isPresence(){return this.piece===Ln.Presence||this.isIncarna&&!this.$.action.dontCountAs.has(Ln.Presence)}get isTopInStack(){if(null===this.location&&this.positionIndex>=0)return!1;const e=this.location.piecesByGroup[this.positionIndex];return e[e.length-1]===this}get isTown(){return this.piece===Ln.Town}get mayCountAsBadlands(){return!(this.piece!==Ln.Presence&&!this.isIncarna||!this.owner.presenceMayCountAsBadlandsOrBeasts)||(!(this.piece!==Ln.IncarnaLocus||!this.isEmpowered)||!(this.piece!==Ln.Presence||this.owner.aspect!==Qo.SpreadingHostility||!this.isTopInStack||!this.location.hasSacredSiteOf(this.owner)))}get mayCountAsBeast(){return this.piece===Ln.IncarnaDarkness||(!(this.piece!==Ln.Presence&&!this.isIncarna||!this.owner.presenceMayCountAsBadlandsOrBeasts)||!(this.piece!==Ln.Presence||this.owner.spirit!==fn.ManyMinds||!this.isTopInStack||!this.location.hasSacredSiteOf(this.owner)))}get mayCountAsExplorer(){return this.piece===Ln.Thief&&void 0!==this.$.action.spirit&&(this.$.action.type===qo.PowerAction||this.$.action.type===qo.SpiritAction)}get mustCountAsBadlands(){return!(this.piece!==Ln.Beasts||!this.$.beastsCountAsBadlands)||this.piece===Ln.Blight&&this.$.action.spirit?.spirit===fn.Vengeance&&(this.$.action.type===qo.PowerAction||this.$.action.type===qo.SpiritAction)}get owner(){return void 0===this.spiritNumber?null:this.$.spirits[this.spiritNumber]}get scenarioNumberVisible(){if(void 0!==this.location){if(this.piece===Ln.Thief)return this.location.numberOfDahan>=2||this.location.isOcean||!!this.$.config.controlledFate;if(this.piece===Ln.HiddenLocation)return void 0!==this.scenarioNumber}return!1}get serialized(){return`${this.piece}-${this.id}`}get strengthDuringRavage(){return this.strength(!0)}get strengthOutOfRavage(){return this.strength(!1)}get strife(){return Math.max(this.baseStrife+(this.$.ignoreOneStrife?-1:0),0)}get targetable(){return!this.$.someEffect(Pn.PreventTargetPiece,{piece:this})}get totalDamage(){return this.damage+this.shadowDamage}static createCollection(e,a){return new Ko(e,An.SelectPiece,a)}static pieceBaseHealth(e){switch(e){case Ln.City:return 3;case Ln.Town:case Ln.Dahan:return 2;case Ln.Explorer:case Ln.Thief:return 1;default:return 0}}async abduct(){await this.move({locations:{target:zn.ToThisLocation,location:this.$.theEndlessDark}})}async addStrife(e={}){const{amount:a=1,add:t=!0,pieceFilter:n=Xn.Invader}=e;await this.$.waitForAnimationsToFinish(),this.baseStrife+=a,this.placeInGroup(),await this.$.sendEvent({type:Tn.StrifeAdded,piece:this,location:this.location,amount:a}),t&&await this.$.doEffects(Pn.AfterAddingStrife,{piece:this,amount:a,pieceFilter:n})}areSameGroupAs(e){return e.piece===this.piece&&e.spiritNumber===this.spiritNumber&&e.damage===this.damage&&e.shadowDamage===this.shadowDamage&&e.doesNotParticipateInRavage===this.doesNotParticipateInRavage&&e.fightsBeforeInvaders===this.fightsBeforeInvaders&&e.baseStrife===this.baseStrife&&e.targetable===this.targetable&&e.scenarioNumber===this.scenarioNumber&&e.marked===this.marked&&!this.scenarioNumberVisible}damageOnlyThis(e,a){return this.location.damage(e,a??Xn[this.piece],{filter:void 0===a?e=>e===this:void 0,firstTarget:void 0===a?void 0:this,autoPlayOneOption:!0})}async dealDamageToOtherInvaders(){await this.$.addSubEffect({highlightPieces:[this],[Pn.Now]:async()=>{await this.location.damage(this.strengthOutOfRavage,this.$.Invader,{filter:e=>e!==this})}})}destroy(){return this.remove(Wn.DirectDestroy)}async downgrade(){return this.isCity?this.replace([Ln.Town]):this.isTown?this.replace([Ln.Explorer]):this.isExplorer?{removed:await this.remove(),added:[]}:{removed:[],added:[]}}drown(){return this.remove(Wn.Drown)}isA(e){if(Zn[e].pieces.includes(this.piece))return!0;if(!Zn[e].ignoreCountAs){const a=this.$.action.dontCountAs;return Zn[e].pieces.some((e=>{if(a.has(e))return!1;switch(e){case Ln.Presence:return this.isIncarna;case Ln.Beasts:return this.mayCountAsBeast;case Ln.Badlands:return this.mustCountAsBadlands||this.mayCountAsBadlands;case Ln.Explorer:return this.mayCountAsExplorer;default:return!1}}))}return!1}isAPresenceOf(e){return this.isPresence&&this.owner===e}isIgnoringCountAsA(e){return Zn[e].pieces.some((e=>e===this.piece))}isOneOf(...e){return e.some((e=>this.isA(e)))}isOneOfIgnoringCountAs(...e){return e.some((e=>this.isIgnoringCountAsA(e)))}isPieceWithOptionallyCountAs(e){if(Zn[e].pieces.includes(this.piece))return!0;if(!Zn[e].ignoreCountAs){const a=this.$.action.dontCountAs;return Zn[e].pieces.some((e=>{if(a.has(e))return!1;switch(e){case Ln.Presence:return this.isIncarna;case Ln.Beasts:return this.mayCountAsBeast;case Ln.Badlands:return this.mayCountAsBadlands;case Ln.Explorer:return this.mayCountAsExplorer;default:return!1}}))}return!1}isTopInStackOfPieces(e){if(null===this.location||-1===this.positionIndex)return!1;const a=e.filter((e=>e.positionIndex===this.positionIndex)),t=this.location.piecesByGroup[this.positionIndex],n=Math.max(...a.map((e=>t.indexOf(e))));return t.indexOf(this)===n}mark(){return this.marked=!0,Promise.resolve()}move(e={}){return this.location?this.location.move({pieces:Xn[this.piece],piece:this,...e}):Promise.resolve([])}async moveTo(e){const{location:a,movement:t=Mr.Move,pieceFilter:n,withoutWait:r=!1}=e;let i=r;const s=this.location;if(null===s)return;const o=null!=this.owner?s.numberOfPresenceOf(this.owner):0,d=null!=this.owner?a.numberOfPresenceOf(this.owner):0;a!==s&&(await this.$.doEffects(Pn.BeforeMoving,{piece:this,source:s,destination:a,pieceFilter:n,movement:t}),i=i||void 0!==this.$.someEffect(Pn.MoveWithoutWaiting,{piece:this,source:s,pieceFilter:n})),Wa((()=>{s.removePiece({piece:this,removement:Wn.Silent,pieceFilter:n}),a.pieces.push(this),this.location=a,this.placeInGroup()})),await this.$.sendEvent({type:Tn.PieceMoved,piece:this,pieceType:this.piece,fromLocation:s,toLocation:a,movement:t,withoutWait:i}),await s.healthCheck(),await a.healthCheck(),await this.$.doEffectsWithPriority(Pn.AfterMoving,{source:s,destination:a,piece:this,movement:t,pieceFilter:n});const l=null!=this.owner?s.numberOfPresenceOf(this.owner):0,c=null!=this.owner?a.numberOfPresenceOf(this.owner):0;o!==l&&this.owner&&await this.$.doEffects(Pn.AfterLandChangesAmountOfPresence,{amountBefore:o,amountAfter:l,land:s,spirit:this.owner}),d!==c&&this.owner&&await this.$.doEffects(Pn.AfterLandChangesAmountOfPresence,{amountBefore:d,amountAfter:c,land:a,spirit:this.owner})}placeInGroup(){if(this.location.pieces.includes(this)){const e=this.location.groupToBe(this.piece,this.damage,this.shadowDamage,this.baseStrife,this.doesNotParticipateInRavage,this.fightsBeforeInvaders,this.targetable,this.spiritNumber,this.positionIndex,this.scenarioNumber,this.marked);this.location.removePieceFromItsPosition(this),this.location.insertPieceIntoPosition(this,e),this.location.possiblyReorderPieces()}}async possiblyDontCountAs(e){if(this.piece!==e&&this.isPieceWithOptionallyCountAs(Xn[e])){const a=this.piece===Ln.Presence&&this.location.hasSacredSiteOf(this.owner)&&(e===Ln.Beasts&&this.owner.spirit===fn.ManyMinds||e===Ln.Badlands&&this.owner.aspect===Qo.SpreadingHostility);return await this.$.may({prompt:`Count ${a?"<sacred>":Zn[this.piece].text} as ${Zn[e].text}?`})||this.$.dontCountAs(e),!0}return!1}push(e){return this.move({movement:Mr.Push,...e})}remove(e=Wn.Remove){return this.location?this.location.removePiece({piece:this,removement:e,pieceFilter:Xn[this.piece]}):Promise.resolve([])}async removeStrife(e=1){this.baseStrife=Math.max(this.baseStrife-e,0),await this.$.sendEvent({type:Tn.StrifeRemoved,location:this.location,piece:this,amount:e}),this.placeInGroup()}async replace(e,a=Wn.Replace){const t=this.location,n={removed:[],added:[]},r=this.piece;if(await this.$.oneEffectActivates(Pn.PreventReplacePiece,{piece:this.piece,location:t,withPieces:e}))return n;if(await this.$.oneEffectActivates(Pn.PreventRemovePiece,{piece:this,location:t,removement:Wn.Replace}))return n;if(1===e.length)this.piece===Ln.Presence&&(this.owner.destroyedPresence+=1),this.piece===Ln.Blight&&await this.$.addBlightToBlightCard(1),this.location.removePieceFromItsPosition(this),this.piece=e[0],(r===Ln.Presence||this.isIncarna)&&(this.location.hasPresenceOf(this.owner)||this.owner.removeLand(this.location)),this.baseHealth=td.pieceBaseHealth(this.piece),n.removed.push({piece:this,location:t,removement:a}),n.added.push({piece:this,location:t}),this.placeInGroup(),this.isInvader||(this.baseStrife=0);else{const r=this.damage,i=this.strife;n.removed=await t.removePiece({piece:this,removement:a,pieceFilter:Xn[this.piece]});for(const a of e)n.added.push(...await t.add(1,Xn[a]));r>0&&await td.createCollection(this.$,n.added.map((e=>e.piece))).pickMultiple({where:e=>e.isAlive,amount:r,repeatSame:!0,effect:{text:"Reallocate damage to replaced pieces."},forPickedItem:async e=>{await e.takeDamage(1,{mayPrevent:!1})}}),i>0&&await td.createCollection(this.$,n.added.map((e=>e.piece)).filter((e=>e.isInvader))).pickMultiple({amount:i,repeatSame:!0,effect:{text:"Reallocate <strife> to replaced pieces."},forPickedItem:async e=>{await e.addStrife({add:!1})}})}return await this.$.sendEvent({type:Tn.PieceReplaced,piece:this,pieceTypeFrom:r,pieceTypesTo:e,location:t}),n}async setDoesNotParticipateInRavage(e){this.doesNotParticipateInRavage=e,this.placeInGroup(),e&&await this.$.sendEvent({type:Tn.DoNotParticipateInRavage,piece:this,location:this.location})}setFightsBeforeInvaders(e){return this.fightsBeforeInvaders=e,this.placeInGroup(),Promise.resolve()}async takeDamage(e,a={}){const{mayPrevent:t=!0,fromBadlands:n=!1}=a,r=[],i=Math.min(e,this.healthSurplus),s=i<=0||t&&await this.$.oneEffectActivates(Pn.PreventDamagingPiece,{piece:this,damage:i});return i>0&&this.isInvader&&this.$.setHasAttemptedDamagingInvaderThisInstruction(),s?[]:(await this.$.waitForAnimationsToFinish(),this.damage+=i,await this.$.sendEvent({type:Tn.PieceDamaged,amount:e,location:this.location??void 0,piece:this,pieceType:this.piece,fromBadlands:n}),!this.isAlive||!this.isAliveIgnoringHealthBonuses&&this.$.damageIgnoreHealthBonuses?r.push(...await(this.location?this.location.removePiece({piece:this,removement:Wn.DestroyByDamageOrBlight,byDamage:!0,pieceFilter:Xn[this.piece]}):Promise.resolve([]))):this.placeInGroup(),r)}async timePasses(){this.damage>0&&!this.$.someEffect(Pn.PreventClearDamage,{piece:this})&&(this.damage=0,await this.$.sendEvent({type:Tn.DamageCleared,location:this.location??void 0,piece:this}),this.placeInGroup())}toString(){return`${Ln[this.piece]}[${this.damage}]`}upgrade(){return this.isTown?this.replace([Ln.City]):this.isExplorer?this.replace([Ln.Town]):Promise.resolve({removed:[],added:[]})}get adjustedStrength(){return this.$.sumEffects(Pn.AdjustDamage,{piece:this})}get adjustedStrengthDuringRavage(){return this.$.sumEffects(Pn.AdjustDamageDuringRavage,{piece:this})}get strength(){return e=>(e=>{switch(this.piece){case Ln.City:return 3;case Ln.Town:case Ln.Dahan:return 2;case Ln.Explorer:return 1;default:return 0}})()+this.adjustedStrength+(e?this.adjustedStrengthDuringRavage:0)}}ad([De],td.prototype,"baseStrife",void 0),ad([De],td.prototype,"damage",void 0),ad([De],td.prototype,"doesNotParticipateInRavage",void 0),ad([De],td.prototype,"fightsBeforeInvaders",void 0),ad([De],td.prototype,"id",void 0),ad([De],td.prototype,"location",void 0),ad([De],td.prototype,"marked",void 0),ad([De],td.prototype,"piece",void 0),ad([De],td.prototype,"positionIndex",void 0),ad([De],td.prototype,"scenarioNumber",void 0),ad([De],td.prototype,"shadowDamage",void 0),ad([De],td.prototype,"spiritNumber",void 0),ad([Ma],td.prototype,"placeInGroup",null);class nd{board;boardIndex;locations;position;boardDistance=[];destroyed=!1;$;constructor(e,a,t,n,r,i){const s=$o[i];this.$=e,this.boardIndex=a,this.board=i,this.position={x:t,y:n,r},this.locations=s.adjacency.map(((t,n)=>new od({$:e,boardIndex:a,board:this,landIndex:n,type:n===s.adjacency.length-1?jo.Ocean:jo.Land})))}get corners(){return this.$.corners.filter((e=>e.board===this))}get data(){return $o[this.board]}get existingLocations(){return(this.$.someBoardsHasExtraLocations?this.locations.concat(this.extraLocations):this.locations).filter((e=>e.exists))}get extraLocations(){const e=[],a=this.$.effectsMappedWithFilter(Pn.BoardHasExtraLocation,{board:this});for(const t of a)e.includes(t)||e.push(t);return e}get ignoreInvaderAndBlightInSetup(){return this.$.boardCount>this.$.spiritCount&&(this.$.phase===Gi.Setup||this.$.phase===Gi.RoyalBacking||this.$.phase===Gi.InitialExplore)&&void 0===this.$.config.boards[this.boardIndex].spirit}get lands(){return this.existingLocations.filter((e=>e.isLand))}get landsExcludingExtraLocations(){return this.locations.filter((e=>e.exists&&e.isLand))}get landsOrderedByHighestNumber(){return this.lands.sort(((e,a)=>Math.max(...a.landNumbers)-Math.max(...e.landNumbers)))}get landsOrderedByLowestNumber(){return this.lands.sort(((e,a)=>Math.min(...e.landNumbers)-Math.min(...a.landNumbers)))}get name(){return this.data.name}get numberOfBlight(){return _o(this.existingLocations,(e=>zo(e.pieces,(e=>e.isBlight))))}get ocean(){return this.existingLocations.find((e=>e.isOcean))}get pieces(){const e=[];return this.existingLocations.forEach((a=>{e.push(...a.pieces)})),e.sort(((e,a)=>e.id-a.id)),e}get preventAdversaryActions(){return this.$.someEffect(Pn.PreventAdversaryActionOnBoard,{board:this})}get serialized(){return this.board}static createCollection(e,a){return new Ko(e,An.SelectBoard,a)}addPresence(e,a){return e.addPresence({locations:zn.AnyLands,filter:e=>(void 0===a?.filter||a.filter(e))&&e.board===this,...a})}async addRandomBoard(){const e=await this.$.randomFreePositionFromBoard(this);if(null===e)return null;const a=await this.$.addBoard(e);return this.$.invalidateBoardCache(),this.$.setupAdjacencies(),this.$.setupCorners(),a}async destroy(){const e={board:this,removement:Wn.DirectDestroy};if(await this.$.oneEffectActivates(Pn.PreventRemoveBoard,e))return[];this.destroyed=!0;for(const e of this.locations)e.exists=!1;return this.$.invalidateBoardCache(),this.$.migrateCornerCornersFromBoard(this),this.$.setupAdjacencies(),this.$.setupCorners(),await this.$.sendEvent({type:Tn.BoardRemoved,board:e.board,removement:e.removement}),[e]}async destroyPresence(e){await this.forPieces().where((e=>e.isPresence)).pickMultiple({amount:e,forPickedItem:async e=>{await e.destroy()},effect:{prompt:"Pick <presence> to destroy."}})}firstLandWhere(e){return this.lands.find(e)??null}forPieces(){return td.createCollection(this.$,this.pieces)}forPiecesThatIs(e,a){return this.forPieces().where((t=>t.isA(e)&&(void 0===a||a(t.location))))}forPiecesWhere(e){return this.forPieces().where(e)}hasOneLandWhere(e){return this.lands.some(e)}hasOneLandWith(e){return this.hasOneLandWhere((a=>a.has(e)))}hasOneLocationWhere(e){return this.existingLocations.some(e)}highestNumberedLand(e=(()=>!0)){return this.landsOrderedByHighestNumber.find(e)}highestNumberedLandMatching(e,a){return this.landsOrderedByHighestNumber.find((t=>t.matchesInvaderCard(e,a)))}highestNumberedTerrain(e){return this.highestNumberedLand((a=>a.hasTerrain(e)))}inCoastalLands(){return this.inLandsWhere((e=>e.isCoastal))}inCoastalLocations(){return this.inLocationsWhere((e=>e.isCoastal))}inCornerLands(){return this.inLocationsWhere((e=>e.isCornerLand))}inInlandLands(){return this.inLandsWhere((e=>e.isInland))}inJungles(){return this.inLandsWhere((e=>e.isJungle))}inLandNumber(e){return this.firstLandWhere((a=>a.hasNumber(e)))}inLands(){return od.createCollection(this.$,this.lands)}inLandsFilteredByAllInPriority(...e){return this.inLands().filteredByAllInPriority(...e)}inLandsFilteredByAnyInPriority(...e){return this.inLands().filteredByAnyInPriority(...e)}inLandsWhere(e){return this.inLands().where(e)}inLandsWith(e){return this.inLands().where((a=>a.has(e)))}inLandsWithAllOf(...e){return this.inLands().where((a=>a.hasAllOf(...e)))}inLandsWithLeast(e){return this.inLands().withLeast(e)}inLandsWithMost(e){return this.inLands().withMost(e)}inLandsWithMostMinimumOne(e){return this.inLandsWith(e).withMost((a=>a.numberOf(e)))}inLandsWithNoneOf(...e){return this.inLands().where((a=>!a.hasOneOf(...e)))}inLandsWithOneOf(...e){return this.inLands().where((a=>a.hasOneOf(...e)))}inLandsWithOrAdjacentTo(e){return this.inLandsWhere((a=>a.hasOrIsAdjacentToLandsWith(e)))}inLandsWithStrife(){return this.inLands().where((e=>e.hasStrife))}inLandsWithout(e){return this.inLands().where((a=>a.doesntHave(e)))}inLocations(){return od.createCollection(this.$,this.existingLocations)}inLocationsWhere(e){return this.inLocations().where(e)}inLocationsWith(e){return this.inLocations().where((a=>a.has(e)))}inLocationsWithOrAdjacentTo(e){return this.inLocationsWhere((a=>a.hasOrIsAdjacentToLocationsWith(e)))}inMountains(){return this.inLandsWhere((e=>e.isMountains))}inSands(){return this.inLandsWhere((e=>e.isSands))}inWetlands(){return this.inLandsWhere((e=>e.isWetlands))}lowestNumberedLand(e=(()=>!0)){return this.landsOrderedByLowestNumber.find(e)}lowestNumberedLandMatching(e,a){return this.landsOrderedByLowestNumber.find((t=>t.matchesInvaderCard(e,a)))}lowestNumberedTerrain(e){return this.lowestNumberedLand((a=>a.hasTerrain(e)))}numberOf(e){return _o(this.existingLocations,(a=>a.numberOf(e)))}presence(){return this.forPieces().where((e=>e.isPresence))}spiritsWithPresence(){return this.$.spiritsWhich((e=>this.hasOneLocationWhere((a=>a.hasPresenceOf(e)))))}toString(){return`${$o[this.board].name}: ${this.locations}`}}const rd=(e,a)=>{if(!e.length)return-1;if(!a)return e.length-1;for(let t=e.length-1;t>=0;t-=1)if(a(e[t],t))return t;return-1},id=(...e)=>{const a={Sun:0,Moon:0,Fire:0,Air:0,Water:0,Earth:0,Plant:0,Animal:0,Any:0,SunOrMoon:0,WaterOrAnimal:0,FireOrPlant:0,DarkFire:0};return e.forEach((e=>{Object.keys(e).forEach((t=>{a[t]+=e[t]}))})),a};var sd=function(e,a,t,n){var r,i=arguments.length,s=i<3?a:null===n?n=Object.getOwnPropertyDescriptor(a,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,a,t,n);else for(var o=e.length-1;o>=0;o--)(r=e[o])&&(s=(i<3?r(s):i>3?r(a,t,s):r(a,t))||s);return i>3&&s&&Object.defineProperty(a,t,s),s};class od{adjacentLocations;board;boardData;boardIndex;landIndex;locationsWithinBase=[];pieces;piecesByGroup=[];type;exists;$;constructor({$:e,boardIndex:a,board:t,landIndex:n,type:r}){ed.makeObservable(this),this.$=e,this.type=r,this.exists=this.type!==jo.EndlessDark||this.$.theEndlessDarkExists,this.pieces=[],this.adjacentLocations=[],this.boardIndex=a,this.landIndex=n,this.board=t,this.boardData=null!==this.board?$o[this.board.board]:null}get adjacentLands(){return this.adjacentLocations.filter((e=>e.isLand))}get blightAlwaysCascades(){return this.$.someEffect(Pn.BlightAlwaysCascadesInLand,{land:this})}get buildCardsAffectLandsWithoutInvaders(){return this.$.someEffect(Pn.BuildCardsAffectLandsWithoutInvaders,{land:this})}get buildPlans(){const e=this.$.resultFromFirstEffectOfType(Pn.AdjustBuildPlans,{land:this});return e||(zo(this.pieces,(e=>e.isTown))>zo(this.pieces,(e=>e.isCity))?Xn.City:Xn.Town)}get coordinate(){return null!==this.boardData?`${this.boardData.name}${this.landNumber}`:"TED"}get coordinateLink(){return this.isTheEndlessDark?"<endless-dark>":this.isOcean?"The Ocean":`${this.terrainIcon}<l>${this.boardData.name}${this.landNumber}</l>`}get corners(){return this.$.corners.filter((e=>e.inAdjacentLocations().has(this)))}get dahanFightSimultaneously(){return this.$.someEffect(Pn.DahanFightSimultaneously,{land:this})}get defense(){if(!this.isLand)return 0;return this.$.sumEffects(Pn.DefendFromSpirits,{land:this})+this.$.sumEffects(Pn.DefendFromGame,{land:this})}get defenseSource(){const e=this.$.firstEffectOfType(Pn.DefendFromSpirits,{land:this});return e?.spirit}get distanceToNearestOcean(){for(let e=0;e<this.locationsWithinBase.length;e+=1)if(this.locationsWithinBase[e].some((e=>e.isOcean)))return e;return 999}get distanceToThisBoardsOcean(){for(let e=0;e<this.locationsWithinBase.length;e+=1)if(this.locationsWithinBase[e].some((e=>e.isOcean&&e.board===this.board)))return e;return 999}get elements(){const e=[];return this.corners.forEach((a=>{a.element&&e.push({[a.element]:1})})),id(...e)}get explorersFightWithDahan(){return this.$.someEffect(Pn.ExplorersFightWithDahan,{land:this})}get hasBlight(){return this.pieces.some((e=>e.isBlight))}get hasCity(){return this.pieces.some((e=>e.isCity))}get hasDahan(){return this.pieces.some((e=>e.isDahan))}get hasExploringSource(){const e=this.$.exploreDistance;let a=this.inLocationsWithin(1,null).hasOneWhere((e=>e.isExploringSource));return a||2!==e||(a=this.hasAdjacentLocationWhere((e=>!e.isIsolated&&e.hasAdjacentLocationWhere((e=>e.isExploringSource))))),!(this.$.phase===Gi.InitialExplore&&this.$.boardCount>this.$.spiritCount&&void 0===this.$.config.boards[this.boardIndex].spirit&&1===this.$.spiritCount)&&a}get hasInvaders(){return this.pieces.some((e=>e.isInvader))}get hasPresenceFromTwoDifferentSpirits(){const e=this.pieces.map((e=>e.spiritNumber)).filter((e=>void 0!==e));return Dr(e).length>1}get hasSacredSite(){return this.$.spirits.some((e=>this.hasSacredSiteOf(e)))}get hasSetupSymbols(){return this.setupSymbols.length>0}get hasSomeTerrain(){return this.isSandsOrWetlands||this.isMountainsOrJungles}get hasStrife(){return this.pieces.some((e=>e.strife>0))}get hasTownsOrCities(){return this.pieces.some((e=>e.isTown||e.isCity))}get isCoastal(){return this.isOcean||this.adjacentLocations.some((e=>e.isOcean))}get isCornerLand(){return this.type!==jo.Ocean&&(this.isWestern&&this.isSouthern||this.isSouthern&&this.isEastern||this.isEastern&&this.isNorthern||this.isNorthern&&this.isWestern)&&"NE7"!==this.coordinate}get isCornerLandOrNumberOne(){return this.isCornerLand||1===this.landNumber}get isEastern(){return this.boardData?.outerBorders[1].includes(this.landIndex)??!1}get isEndlessDark(){return this.type===jo.EndlessDark}get isExploringSource(){return!this.isIsolated&&!this.$.someEffect(Pn.PreventExploreSourceInLand,{land:this})&&(this.isOcean||this.hasTownsOrCities||this.$.someEffect(Pn.LandIsExploringSource,{land:this}))}get isFlooded(){return this.$.someEffect(Pn.Flooded,{location:this})}get isInland(){return!this.isCoastal&&!this.isOcean}get isIsolated(){return this.$.someEffect(Pn.Isolated,{land:this})}get isJungle(){return this.hasTerrain(Io.Jungles)}get isJungleOrSands(){return this.isJungle||this.isSands}get isJungleOrWetlands(){return this.isJungle||this.isWetlands}get isLand(){return this.type===jo.Land||this.isOceanAndLand||this.isTheEndlessDarkAndLand}get isLandForBlight(){return this.isLand||this.isOcean&&this.oceanIsLandForBlightOnThisBoard}get isMiningLand(){return this.hasAtLeast(3,this.$.Invader)}get isMountains(){return this.hasTerrain(Io.Mountains)}get isMountainsOrJungles(){return this.isMountains||this.isJungle}get isMountainsOrSands(){return this.isMountains||this.isSands}get isMountainsOrWetlands(){return this.isMountains||this.isWetlands}get isNorthern(){return!this.$.config.thematic&&null!==this.boardData&&this.landIndex===this.boardData.adjacency.length-1||null!==this.boardData&&this.boardData.outerBorders[this.$.config.thematic?2:0].includes(this.landIndex)}get isOcean(){return this.type===jo.Ocean||this.$.someNonOceanIsOcean&&this.$.someEffect(Pn.LocationIsOcean,{location:this})}get isOceanAndLand(){return this.isOcean&&(this.$.oceanIsAllowedForBlight||this.$.someEffectMakesOceanALand&&this.$.someEffect(Pn.OceanIsLand,{location:this}))}get isSands(){return this.hasTerrain(Io.Sands)}get isSandsOrWetlands(){return this.isSands||this.isWetlands}get isSouthern(){return!(!this.$.config.thematic||null===this.boardData||this.landIndex!==this.boardData.adjacency.length-1)||null!==this.boardData&&this.boardData.outerBorders[this.$.config.thematic?0:2].includes(this.landIndex)}get isTheEndlessDark(){return this.type===jo.EndlessDark}get isTheEndlessDarkAndLand(){return this.isTheEndlessDark&&(this.$.action.type===qo.FearAction||this.$.action.type===qo.TokenEventAction)}get isWestern(){return null!==this.boardData&&this.landIndex===this.boardData.adjacency.length-1||null!==this.boardData&&this.boardData.outerBorders[2][this.boardData.outerBorders[2].length-1]===this.landIndex}get isWetlands(){return this.hasTerrain(Io.Wetlands)}get landNumber(){return this.landIndex+1}get landNumbers(){return[this.landNumber,...this.$.effectsMappedWithFilter(Pn.ExtraLandNumber,{location:this})]}get numberOfBlight(){return zo(this.pieces,(e=>e.isBlight))}get numberOfBuildings(){return zo(this.pieces,(e=>e.isTown||e.isCity))}get numberOfDahan(){return zo(this.pieces,(e=>e.isDahan))}get numberOfInvaders(){return zo(this.pieces,(e=>e.isInvader))}get numberOfParticipatingDahan(){return zo(this.pieces,(e=>e.isDahan&&!e.doesNotParticipateInRavage))}get numberOfSacredSites(){return zo(this.$.spirits,(e=>this.hasSacredSiteOf(e)))}get numberOfStrife(){return _o(this.pieces,(e=>e.strife))}get oceanIsLandForBlightOnThisBoard(){return this.$.oceanIsLandForBlight(this)}get reminderEffects(){return this.$.reminderEffects.map((e=>this.isLand&&void 0!==e[Pn.DefendFromGame]?e[Pn.DefendFromGame]({land:this})>0&&this.defense>0?[e.text,e.spirit]:void 0:this.isLand&&void 0!==e[Pn.DefendFromSpirits]?e[Pn.DefendFromSpirits]({land:this})>0&&this.defense>0?[e.text,e.spirit]:void 0:void 0!==e[Pn.Reminder]?[e[Pn.Reminder](this),e.spirit]:void 0)).filter((e=>void 0!==e&&void 0!==e[0]))}get reminderSpirit(){const e=this.reminderEffects.find((([,e])=>void 0!==e));return e?.[1]}get reminders(){return this.reminderEffects.map((([e])=>e))}get serialized(){return this.coordinate}get setupSymbols(){return this.landIndex>=0&&this.landIndex<this.boardData.setupSymbols.length?this.boardData.setupSymbols[this.landIndex]:[]}get sumAdjustedCollectiveDahanRavageDamage(){return this.$.sumEffects(Pn.AdjustCollectiveDahanRavageDamage,{land:this})}get targetingIsPrevented(){return this.$.someEffect(Pn.PreventTargetLand,{land:this})}get terrain(){return this.landIndex>=0&&this.landIndex<this.boardData.terrain.length?this.boardData.terrain[this.landIndex]:null}get terrainIcon(){switch(this.terrain){case Io.Jungles:return"<jungles>";case Io.Mountains:return"<mountains>";case Io.Sands:return"<sands>";case Io.Wetlands:return"<wetlands>";default:return""}}get the(){return e=>({outnumber:a=>this.numberOf(e)>this.numberOf(a),isAtLeastAsManyAs:a=>this.numberOf(e)>=this.numberOf(a)})}static createCollection(e,a){return new Ko(e,An.SelectLand,a)}abduct(e,a=Xn.Invader,t){return this.move({amount:e,pieces:a,locations:{target:zn.ToThisLocation,location:this.$.theEndlessDark},...t})}async add(e,a,t){const n=Zn[a],r=[];if(n.pieces.length>1)await Jr(e,(async()=>{await this.$.chooseBetween({autoPlayOneOption:!0,prompt:"Select piece to add",effects:n.pieces.map((e=>({actionId:e,label:Zn[e].text,[Pn.Now]:async()=>{e===Ln.Strife?await this.addStrife(1,t):r.push(...await this.createPiece(1,e))}})))})}));else{if(n.pieces[0]!==Ln.Strife)return this.createPiece(e,n.pieces[0]);await this.addStrife(e)}return r}async addBlight(e,a={}){const{mayCascade:t=!0,isCascade:n=!1,fromRavage:r=!1}=a,i=[];if(await this.$.oneEffectActivates(Pn.PreventAddBlight,{location:this}))return i;const s=Math.min(e,this.numberOf(this.$.Vitality)),o=e-s;if(await this.$.addSubEffect({text:`${s} <blight> in land ${this.coordinateLink} is prevented by ${s} <vitality>.`,[Pn.Now]:async()=>{await this.remove({amount:s,pieces:this.$.Vitality})}}),this.$.blightOnBlightCard>0&&o>0){await this.$.removeBlightFromBlightCard(o,this);const e=this.numberOfBlight;await this.add(o,this.$.Blight);for(let e=0;e<o;e+=1)i.push(this);if(!this.isTheEndlessDark)for(const e of this.$.spirits)this.blightIsPreventedFromDestroyingPresenceOf(e)||(await this.possiblyDontCountPiecesAs(Ln.Presence,e),await this.remove({pieces:Xn.Presence,owner:e,removement:Wn.DestroyByDamageOrBlight}));await this.$.doEffects(Pn.WhenAddingBlight,{land:this,blightedLands:i,isCascade:n,fromRavage:r}),(e>0||this.blightAlwaysCascades)&&this.hasAtLeast(e+1,this.$.Blight)&&t&&(await this.$.oneEffectActivates(Pn.PreventCascade,{location:this,fromRavage:r})||(await this.$.sendEvent({type:Tn.Cascade,location:this}),i.push(...await this.cascade({fromRavage:r}))))}return i}addIncarna(e,a){return this.createPiece(1,e,a.spiritNumber)}addPresence(e,a){return e.addPresence({locations:zn.AnyLands,filter:e=>e===this,autoPlayOneOption:!0,...a})}async addStrife(e,a=Xn.Invader,t=!1){const n=[];return await this.piecesThatAre(a).pickMultiple({amount:e,optional:t,forPickedItem:async e=>{n.push(e),await e.addStrife({pieceFilter:a})},repeatSame:!0,effect:{prompt:`Pick one ${Zn[a].text} to add <strife>.`,highlightLocations:[this]}}),n}adjacentLandsSortedByNorthernmost(){return this.inAdjacentLands().sort(((e,a)=>{if(this.board===e.board&&this.board===a.board)return this.boardData.adjacency[this.landIndex].indexOf(e.landIndex)<this.boardData.adjacency[this.landIndex].indexOf(a.landIndex)?-1:1;if(this.board===e.board&&this.board!==a.board)return this.isNorthern?1:-1;if(this.board===a.board&&this.board!==e.board)return this.isNorthern?-1:1;if(this.board!==e.board&&this.board!==a.board){if(this.isNorthern){const t=this.$.config.thematic?0:2,n=this.$.config.thematic?-1:1;return e.boardData.outerBorders[t].indexOf(e.landIndex)<a.boardData.outerBorders[t].indexOf(a.landIndex)?n:-n}if(this.isSouthern){const t=this.$.config.thematic?2:0,n=this.$.config.thematic?1:-1;return e.boardData.outerBorders[t].indexOf(e.landIndex)>a.boardData.outerBorders[t].indexOf(a.landIndex)?-n:n}}return 0}))}adjacentPiecesInLandsWhere(e){return this.piecesInAdjacentLands().where(e)}adjacentPiecesInLocations(){const e=[];return this.adjacentLocations.forEach((a=>e.push(...a.pieces))),td.createCollection(this.$,e)}adjacentPiecesInLocationsWhere(e){return this.adjacentPiecesInLocations().where(e)}afterPiecesAreAddedOrMovedAddTrigger(e){return this.$.afterPiecesAreAddedOrMovedAddTrigger({...e,reminder:!0,locationFilter:e=>e===this})}blightIsPreventedFromDestroyingPresenceOf(e){return this.$.someEffect(Pn.PreventBlightDestroyingPresence,{location:this,spirit:e})}boards(){const e=null!==this.board?[this.board]:[];return e.push(...this.$.effectsMappedWithFilter(Pn.ExtraBoard,{location:this})),nd.createCollection(this.$,e)}boardsHasPresenceOf(e){return this.boards().hasOneWhere((a=>a.hasOneLocationWhere((a=>a.hasPresenceOf(e)))))}async calculateDoNotParticipateInRavage(){await this.$.doEffects(Pn.DoesNotParticipateInRavage,{location:this})}async cascade(e={}){const a=[];return await this.inAdjacentLocations().where((e=>e.isLandForBlight)).pickOne((async t=>{a.push(...await t.addBlight(1,{fromRavage:e.fromRavage??!1,isCascade:!0}))}),{prompt:`Blight cascades in ${this.coordinate}!<br>Add a <blight> to one adjacent land.`,noOptions:"No adjacent land to cascade into.",highlightLocations:[this]}),a}async createPiece(e,a,t){const n=this.groupToBe(a,0,0,0,!1,!1,!0,t),r=[];return await Jr(e,(async()=>{await this.$.waitForAnimationsToFinish();const e=new td(this.$,a,this,n,t),i=void 0!==t?this.numberOfPresenceOf(this.$.spirits[t]):0;if(!await this.$.oneEffectActivates(Pn.PreventAddPiece,{piece:a,location:this})){this.pieces.push(e),this.insertPieceIntoPosition(e,n),r.push({piece:e,location:this}),await this.$.sendEvent({type:Tn.PieceAdded,piece:e,pieceType:e.piece,location:this}),this.$.phase!==Gi.Setup&&this.$.phase!==Gi.SetupPresence&&await this.$.doEffects(Pn.AfterAddingPiece,{land:this,additions:r});const a=void 0!==t?this.numberOfPresenceOf(this.$.spirits[t]):0;i!==a&&await this.$.doEffects(Pn.AfterLandChangesAmountOfPresence,{amountBefore:i,amountAfter:a,land:this,spirit:this.$.spirits[t]})}})),r}damage(e,a,t={}){return this.$.doInstruction((async()=>{if(e<=0)return[];const{efficiently:n=!1,maxTargets:r,autoPlayOneOption:i=!1}=t,s=e=>(!t.filter||t.filter(e))&&(a?e.isA(a):e.isInvader),o=a??Xn.Invader,d={mustBe:t.firstTarget},l=[];let c=e;const h=n||o===Xn.Dahan&&this.$.currentActionType!==qo.SpiritAction&&this.$.currentActionType!==qo.PowerAction,u=[];for(;c>=0;){let e=!1;const a=this.piecesWhere((e=>(void 0===d.mustBe||d.mustBe===e)&&s(e)&&e.targetable&&(void 0===r||u.includes(e)||u.length<r)));if(a.isEmpty)break;if(0===c&&u.some((e=>e.isDahan))){let e=0;for(;;){const a=this.piecesWhere((e=>e.isBadlands&&!this.$.action.data.usedBadlandsForDahan?.includes(e)));if(a.isEmpty)break;{e+=1,void 0===this.$.action.data.usedBadlandsForDahan&&(this.$.action.data.usedBadlandsForDahan=[]);const t=a.anyOne;t&&this.$.action.data.usedBadlandsForDahan.push(t)}}if(e>0)for(await this.$.sendEvent({type:Tn.GenericSub,text:`<badlands> increase damage done to <dahan> by ${e}.`});e>0;){const t=a.copy().where((e=>e.isDahan&&e.isAlive)).withLeast((e=>e.healthSurplus));await t.pickOne((async e=>{u.push(e),l.push(...await e.takeDamage(1))}),{autoPlayOneOption:i,text:`<badlands> increase damage done to <dahan> by ${e}.`,prompt:`Pick one <dahan> to damage. ${e} Damage left.`,highlightLocations:[this]}),e-=1}}if(0===c&&this.$.currentActionType===qo.PowerAction&&await this.$.doEffects(Pn.DamageBoost,{spirit:this.$.action.spirit,filter:o,onUse:async()=>{let e=!1;const t=this.$.currentStackEffect.name;return await a.optionallyPickOne((async a=>{e=!0,u.push(a),l.push(...await a.takeDamage(1))}),{prompt:`Do 1 additional damage to ${Zn[o].text} from ${t}?`,highlightLocations:[this]}),e}}),0===c&&u.some((e=>e.isInvader))){const t=this.piecesWhere((e=>e.isBadlands&&!this.$.action.data.usedBadlands?.includes(e)));if(!t.isEmpty){const n=a.copy().where((e=>e.isInvader));await n.optionallyPickOne((async a=>{e=!0,u.push(a),l.push(...await a.takeDamage(1,{fromBadlands:!0})),void 0===this.$.action.data.usedBadlands&&(this.$.action.data.usedBadlands=[]);const n=t.anyOne;n&&this.$.action.data.usedBadlands.push(n)}),{prompt:`Do 1 additional damage to ${Zn[o===Xn.InvaderOrDahan?Xn.Invader:o].text} from <badlands>?`,highlightLocations:[this]})}}if(!e){if(0===c)break;if(h){const e=a.copy().where((e=>e.isDahan)).withLeast((e=>e.healthSurplus)),t=a.copy().where((e=>e.isInvader)).withLeast((e=>e.healthSurplus));a.where((a=>e.has(a)||t.has(a)))}const e=a.hasOneWhere((e=>e.isInvader))?Zn[o].text:Zn[this.$.Dahan].text;await a.pickOne((async e=>{u.push(e),l.push(...await e.takeDamage(1)),d.mustBe=void 0}),{autoPlayOneOption:i,prompt:`Pick one ${e} to damage. ${c} Damage left.`,highlightLocations:[this]}),c-=1}}return l}))}async damageDifferent(e,a=Xn.Invader){const t=[];return await this.piecesThatAre(a).pickMultiple({amount:e,repeatSame:!1,forPickedItem:async e=>{t.push(...await e.damageOnlyThis(1))},effect:{prompt:`Pick a different ${Zn[a].text}.`}}),t}damageEach(e,a=Xn.Invader){return this.$.doInstruction((async()=>{const t=[],n=this.piecesWhere((e=>e.isA(a)));return this.$.orderOfRemoveAllMightMatter&&n.selectOrder(),await n.forEach((async a=>{a.isAlive&&t.push(...await a.damageOnlyThis(e))})),t}))}damageInAdjacentLands(e,a=this.$.Invader){return this.$.doInstruction((async()=>{await this.piecesInAdjacentLands().where((e=>e.isA(a))).pickMultiple({repeatSame:!0,amount:e,where:e=>null!==e.location&&e.location.isAdjacentTo(this),forPickedItem:async e=>{await e.damageOnlyThis(1,a)},effect:{prompt:"Pick Invader to damage."}})}))}damageInThisAndAdjacentLands(e,a=this.$.Invader){return this.$.doInstruction((async()=>{await this.piecesInThisAndAdjacentLands().where((e=>e.isA(a))).pickMultiple({repeatSame:!0,amount:e,forPickedItem:async e=>{await e.damageOnlyThis(1,a)},effect:{prompt:"Pick Invader to damage."}})}))}async damageLand(e){const a=Math.max(2+this.adjustedLandHealth,1);if(e>=a){const t=1+this.$.sumEffects(Pn.ExtraBlightFromDamage,{damageExceedingHealth:e-a}),n=await this.addBlight(t,{fromRavage:!0});await this.$.doEffects(Pn.AfterRavagingDamageLand,{land:this,blightedLands:n,damageToLand:e,damageExceedingHealth:e-a})}}async defend(e,a={}){const{reminder:t=!0,singleLand:n=!0}=a,r=this.$.action.type===qo.PowerAction||this.$.action.type===qo.SpiritAction?this.$.action.spirit:null;await this.$.waitForAnimationsToFinish();const i=t?this.$.currentStackEffect.text:void 0;null===r?(await this.$.addSubEffectUntilEndOfTurn({text:`Defend ${e}.`,[Pn.DefendFromGame]:({land:a})=>a===this?e:0,[Pn.Reminder]:e=>e===this?i:void 0}),await this.$.sendEvent({type:Tn.DefendAdded,location:this,amount:e})):(await this.$.oneEffectActivates(Pn.ExtraDefense,{location:this})&&(e+=2),await this.$.addSubEffectUntilEndOfTurn({text:`Defend ${e}.`,[Pn.DefendFromSpirits]:({land:a})=>a===this?e:0,[Pn.Reminder]:e=>e===this?i:void 0}),await this.$.sendEvent({type:Tn.DefendAdded,location:this,amount:e}),await this.$.doEffects(Pn.AfterPowerAddsDefense,{land:this,spirit:r,singleLand:n}))}destroy(e){return this.remove({...e,removement:Wn.DirectDestroy})}destroyAll(e,a={}){return this.remove({pieces:e,removement:Wn.DirectDestroy,quantifier:ur.All,...a})}destroyOne(e,a){return this.remove({pieces:e,removement:Wn.DirectDestroy,...a})}destroyUpTo(e,a){return this.remove({quantifier:ur.UpTo,amount:e,pieces:a,removement:Wn.DirectDestroy})}distanceToLocation(e){for(let a=0;a<this.locationsWithinBase.length;a+=1)if(this.locationsWithinBase[a].includes(e))return a;return 999}doExtraBuild(e){return this.build(!1,e)}doExtraExplore(e){return this.explore(!1,e)}doExtraRavage(e={}){const{calculateDoNotParticipateInRavage:a=!0}=e;return this.ravage({normal:!1,calculateDoNotParticipateInRavage:a})}doNormalBuild(e){return this.build(!0,e)}doNormalExplore(e){return this.explore(!0,e)}async doNotParticipateInRavage(e){const{pieceFilter:a=(()=>!0),amount:t=1,pieces:n=this.$.InvaderOrDahan,pickPiecesEffect:r}=e;let{quantifier:i=ur.All}=e;const s=[];i===ur.UpTo&&this.$.upToMustBeUsedAtMaximum&&(i=ur.Exactly),i===ur.May&&(i=ur.UpTo);const o=()=>this.piecesThatAre(n).where((e=>!e.doesNotParticipateInRavage&&a(e)));if(i===ur.AtLeast)await this.doNotParticipateInRavage({...e,quantifier:ur.Exactly}),await this.doNotParticipateInRavage({...e,quantifier:ur.Any});else if(i===ur.UpToMinimumOne)await this.doNotParticipateInRavage({...e,amount:1,quantifier:ur.Exactly}),await this.doNotParticipateInRavage({...e,amount:(e.amount??1)-1,quantifier:ur.UpTo});else if(i===ur.Any)await this.doNotParticipateInRavage({...e,quantifier:ur.May,amount:o().count});else if(i===ur.UpTo||i===ur.All||i===ur.Exactly)for(;i===ur.UpTo&&s.length<t||i===ur.All&&o().count>0||i===ur.Exactly&&s.length!==t;){const e=s.length,a=o();if(i===ur.All&&a.removeAllButFirst(),await a.pickOne((async e=>{s.push(e),await e.setDoesNotParticipateInRavage(!0)}),{autoPlayOneOption:!0,prompt:`Pick one ${Zn[n].text} to not participate in ravage. (${t-s.length} left.)`,...r},i===ur.UpTo),s.length===e)break}}doesntHave(e){return!this.pieces.some((a=>a.isA(e)))}doesntHaveIgnoringCountAs(e){return!this.hasIgnoringCountAs(e)}dontHaveAnyOf(...e){return!this.hasOneOf(...e)}downgrade(e={}){return this.upOrDowngrade({...e,downgrade:!0})}downgradeUpTo(e,a){return this.upOrDowngrade({quantifier:ur.UpTo,amount:e,pieces:a,downgrade:!0})}drown(e){return this.remove({...e,removement:Wn.Drown})}fear(e){return this.isLand||this.isEndlessDark?this.$.generateFear({amount:e,location:this,fromDestroyingBuildings:!1}):Promise.resolve(null)}forEvery(e,a){return Math.floor(this.numberOf(a)/e)}forPieces(){return td.createCollection(this.$,this.pieces)}forPiecesWithin(e,a,t={}){const n=[];return this.landsWithin(e,a,t).forEach((e=>n.push(...e.pieces))),td.createCollection(this.$,n)}gather(e){return this.$.doInstruction((async()=>{const{pieces:a,owner:t,filter:n=(()=>!0),pieceFilter:r=(()=>!0),oceanIsAllowed:i=!1,pickPiecesEffect:s,single:o=!1}=e;let{amount:d=1}=e;const l=[],c=a===Xn.Blight&&this.oceanIsLandForBlightOnThisBoard;if(!this.isLand&&!i&&!c)return Promise.resolve(l);c&&this.$.startAllowOceanForBlight(this);const h=a.includes(this.$.Beasts)&&this.$.extraBeastAdjacency?this.forPiecesWithin(2,null,{mayIncrease:!1}).where((e=>(e.isBeasts||e.isA(a)&&e.location.isAdjacentTo(this))&&e.location!==this)):this.piecesInAdjacentLands().where((e=>e.isA(a)));h.where((e=>r(e)&&null!==e.location&&n(e.location)&&!this.$.someEffect(Pn.PreventMovePiece,{source:e.location,destination:this,piece:e,movement:Mr.Gather})&&(void 0===t||e.owner===t)));const u=()=>{l.length>0&&(h.remove(l[l.length-1].piece),o&&h.where((e=>e.location===l[0].source)))};let{quantifier:g=ur.Exactly}=e;if(g===ur.Exactly&&Zn[a].includesInvaders&&this.isIsolated?g=ur.UpTo:g===ur.UpTo&&this.$.upToMustBeUsedAtMaximum&&(g=ur.Exactly),g===ur.May&&(g=ur.UpTo),g===ur.AtLeast)l.push(...await this.gather({...e,quantifier:ur.Exactly})),l.push(...await this.gather({...e,quantifier:ur.Any}));else if(g===ur.UpToMinimumOne)l.push(...await this.gather({...e,amount:1,quantifier:ur.Exactly})),l.push(...await this.gather({...e,amount:(e.amount??1)-1,quantifier:ur.UpTo}));else if(g===ur.Any)l.push(...await this.gather({...e,quantifier:ur.May,amount:h.count}));else if(g===ur.UpTo)for(d<h.count&&await this.$.oneEffectActivates(Pn.ExtraMove,{movement:Mr.Gather,pieces:a,location:this,possiblePieces:h.items})&&(d+=1);l.length<d;){const e=l.length;if(await h.optionallyPickOne((async e=>{const t={piece:e,source:e.location,destination:this,movement:Mr.Gather,pieceFilter:a};l.push(t),this.$.reportMovement(t),await e.moveTo({location:this,movement:Mr.Gather,pieceFilter:a})}),{prompt:`Pick one ${Zn[a].text} to Gather.${d>1?` (${d-l.length} left.)`:""}`,highlightLocations:[this],...s}),l.length===e)break;u()}else if(g===ur.Exactly||g===ur.All){let e=g===ur.All?h.count:d;e<h.count&&await this.$.oneEffectActivates(Pn.ExtraMove,{movement:Mr.Gather,pieces:a,location:this,possiblePieces:h.items})&&(e+=1),await h.pickMultiple({amount:e,forPickedItem:async e=>{const t={piece:e,source:e.location,destination:this,movement:Mr.Gather,pieceFilter:a};l.push(t),this.$.reportMovement(t),await e.moveTo({location:this,movement:Mr.Gather,pieceFilter:a})},beforeNextItem:()=>{u()},effect:{prompt:`Pick one ${Zn[a].text} to Gather.`,highlightLocations:[this],...s}})}return this.$.stopAllowOceanForBlight(),l}))}gatherAll(e){return this.gather({quantifier:ur.All,pieces:e})}gatherOne(e){return this.gather({amount:1,pieces:e})}gatherUpTo(e,a){return this.gather({quantifier:ur.UpTo,amount:e,pieces:a})}groupToBe(e,a,t,n,r,i,s,o,d,l,c){const h=this.piecesByGroup.findIndex((d=>d.length>0&&d[0].areSameGroupAs({piece:e,damage:a,shadowDamage:t,baseStrife:n,spiritNumber:o,doesNotParticipateInRavage:r,fightsBeforeInvaders:i,targetable:s,scenarioNumber:l,marked:c})));return void 0===(h>=0?this.piecesByGroup[h]:void 0)?void 0!==d&&d>=0&&(d>=this.piecesByGroup.length||0===this.piecesByGroup[d].length)?d:this.firstFreePosition:h}has(e){return this.pieces.some((a=>a.isA(e)))}hasAdjacentLandWhere(e){return this.adjacentLands.some(e)}hasAdjacentLandWithPiece(e){return this.hasAdjacentLandWhere((a=>a.has(e)))}hasAdjacentLocationWhere(e){return this.adjacentLocations.some(e)}hasAdjacentLocationWithPiece(e){return this.hasAdjacentLocationWhere((a=>a.has(e)))}hasAdjacentPresenceOf(e){return!this.adjacentPiecesInLandsWhere((a=>a.isPresence&&e.includes(a.owner))).isEmpty}hasAllOf(...e){return!e.some((e=>this.doesntHave(e)))}hasAtLeast(e,a){let t=0;for(const n of this.pieces)if(n.isA(a)&&(t+=1,t>=e))return!0;return t>=e}hasAtMost(e,a){return this.numberOf(a)<=e}hasExactly(e,a){return this.numberOf(a)===e}hasIgnoringCountAs(e){return this.pieces.some((a=>a.isIgnoringCountAsA(e)))}hasIncarnaOf(e){return this.pieces.some((a=>a.isIncarna&&a.owner===e))}hasNumber(e){return e===this.landNumber}hasOneOf(...e){return e.some((e=>this.has(e)))}hasOnePieceWhere(e){return this.pieces.some(e)}hasOrIsAdjacentToLandsWith(e){return this.has(e)||this.hasAdjacentLandWithPiece(e)}hasOrIsAdjacentToLocationsWith(e){return this.has(e)||this.hasAdjacentLocationWithPiece(e)}hasPresenceOf(e,a){return this.pieces.some((t=>t.isPresence&&(t.owner===e||a?.includes(t))))}hasSacredSiteOf(e,a=[]){return!this.isEndlessDark&&(this.numberOfPresenceOf(e,a)>=2||this.$.someEffect(Pn.HasSacredSiteOf,{land:this,spirit:e,helpers:a}))}hasSameTerrainAs(e){return this.isSands&&e.isSands||this.isMountains&&e.isMountains||this.isJungle&&e.isJungle||this.isWetlands&&e.isWetlands}hasTerrain(e,a=!1){return this.terrain===e||this.$.someLocationHasExtraTerrains&&this.$.someEffect(Pn.LocationIsTerrain,{location:this,terrain:e,isSpecialRule:a})}async healthCheck(){let e=!0;for(;e;){e=!1;for(const a of this.pieces)a.isAlive||!a.isInvader&&!a.isDahan||(await a.remove(Wn.DestroyByHealthChange),e=!0)}}inAdjacentLands(){return od.createCollection(this.$,this.adjacentLands)}inAdjacentLandsWhere(e){return this.inAdjacentLands().where(e)}inAdjacentLocations(){return od.createCollection(this.$,this.adjacentLocations)}inLands(e,a){if(e.target===zn.ToThisLocation)return od.createCollection(this.$,[e.location]);if(e.target===zn.WithinRange)return this.inLandsWithin(e.range,e.spirit);if(e.target===zn.Adjacent)return 1===a?this.inAdjacentLands():this.inLandsWithin(a,null,{mayIncrease:!1}).remove(this);if(e.target===zn.OnThisBoard)return null!==this.board?this.board.inLands():od.createCollection(this.$,[]);if(e.target===zn.ToClosestLegalLand){for(let a=0;a<this.locationsWithinBase.length;a+=1){const t=this.inLandsWithin(a,null,{mayIncrease:!1}).where((a=>a.exists&&a.board!==e.notOnBoard));if(t.count>0)return t}return od.createCollection(this.$,[])}return e.target===zn.AnyLocations?this.$.inLocations():this.$.inLands()}inLandsWithin(e,a=null,t={}){return od.createCollection(this.$,this.landsWithin(e,a,t))}inLocationsWithin(e,a){return od.createCollection(this.$,this.landsWithin(e,a,{allLocations:!0}))}inThisAndAdjacentLands(){return this.inAdjacentLands().add(this)}inThisAndAdjacentLocations(){return this.inAdjacentLocations().add(this)}insertPieceIntoPosition(e,a){for(;a>=this.piecesByGroup.length;)this.piecesByGroup.push([]);const t=this.piecesByGroup[a];for(let a=0;a<t.length+1;a+=1)if(a===t.length||e.id<t[a].id){t.splice(a,0,e);break}e.positionIndex=a,e.location=this,(e.piece===Ln.Presence||e.isIncarna)&&e.owner.addLand(this),this.$.pieceCount[e.piece]=(this.$.pieceCount[e.piece]??0)+1}invaders(){return this.piecesWhere((e=>e.isInvader))}isAdjacentTo(e){return this.adjacentLands.includes(e)}async isolate(){await this.$.sendEvent({type:Tn.LandIsolated,location:this}),await this.$.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===this?"Isolated Land.":void 0,[Pn.Isolated]:({land:e})=>e===this})}landsContiguouslyConnectedBy(e){if(!this.hasPresenceOf(e))return[];const a=[],t=[this];for(;t.length>0;){const n=t.pop();a.push(n);for(const r of n.adjacentLands)!r.hasPresenceOf(e)||t.includes(r)||a.includes(r)||t.push(r)}return a}landsWithin(e,a,t={}){const{allLocations:n=!1,mayIncrease:r=!0,filter:i=(()=>!0),targetingLands:s=!1}=t,o=null!==a&&r?a.extraRange(this):0,d=this.locationsWithinBase.length>0?this.locationsWithinBase[Math.min(e+o,this.locationsWithinBase.length-1)].filter((e=>(e.isLand||n)&&i(e))):[];if(r&&null!==a){const t=[];for(const e of this.$.effectsMappedWithFilter(Pn.ExtraRangeToLand,{spirit:a,targetingLands:s}))e&&e.extraRangeToLand>0&&t.push(e);if(t.length>0){const a=e+o+_o(t,(e=>e.extraRangeToLand));this.locationsWithinBase[Math.min(a,this.locationsWithinBase.length-1)].forEach((a=>{if(d.includes(a)||!a.isLand&&!n)return;let r=e+o;for(const e of t)e.landFilter(a)&&(r+=e.extraRangeToLand);r=Math.min(r,this.locationsWithinBase.length-1),this.locationsWithinBase[r].includes(a)&&d.push(a)}))}}return d}matchesInvaderCard(e,a){const t=Uo[e],n=this.$.resultFromFirstEffectOfType(Pn.OverrideMatchesInvaderCard,{land:this,card:e,invaderAction:a});return void 0!==n?n:this.terrainsMatchesInvaderCard(e)||t.coastal&&this.isCoastal||t.saltDeposits&&(a===qr.Explore||a===qr.Build)&&!this.isMiningLand||t.saltDeposits&&a===qr.Ravage&&this.isMiningLand}matchesInvaderCards(e,a){return e.some((e=>this.matchesInvaderCard(e,a)))}mayGather(e){return this.gather({quantifier:ur.May,pieces:e})}mayPush(e){return this.move({movement:Mr.Push,quantifier:ur.May,pieces:e})}move(e){return this.$.doInstruction((async()=>{const{piece:a,pieces:t=Xn.AllPieces,together:n=this.$.alwaysPushToSameDestination,pieceFilter:r=(()=>!0),destinationFilter:i=(()=>!0),owner:s,movement:o=Mr.Move,locations:d={target:zn.Adjacent},differentLands:l=!1,pickPiecesEffect:c,pickDestinationEffect:h,oceanIsAllowed:u=!1,withoutWait:g=!1,evenly:f=!1}=e;let{amount:y=1}=e;const p=t===Xn.Blight&&this.oceanIsLandForBlightOnThisBoard;if(o===Mr.Gather&&!this.isLand&&!u&&!p)return Promise.resolve([]);p&&this.$.startAllowOceanForBlight(this);let{quantifier:w=ur.Exactly}=e,m=!1;w===ur.Exactly&&Zn[t].includesInvaders&&this.isIsolated?(w=ur.UpTo,m=!0):w===ur.UpTo&&this.$.upToMustBeUsedAtMaximum&&(w=ur.Exactly),w===ur.May&&(w=ur.UpTo);const v=[],x=Ho[o].verb,b=()=>this.piecesWhere((e=>(void 0===a?e.isA(t)&&r(e)&&(void 0===s||e.owner===s):e===a)&&!v.some((a=>a.piece===e))));let T=b();const A=(e,a,t=!1)=>i(e)&&!this.$.someEffect(Pn.PreventMovePiece,{source:this,destination:e,piece:a,movement:o})&&(!n||0===v.length||v.some((a=>a.destination===e)))&&(!l&&!f||!v.some((a=>a.destination===e))||t)&&(!f&&!t||!v.some((a=>v.filter((e=>e.destination===a.destination)).length+1===v.filter((a=>a.destination===e)).length)));if(w===ur.AtLeast)v.push(...await this.move({...e,quantifier:ur.Exactly})),v.push(...await this.move({...e,quantifier:ur.Any}));else if(w===ur.UpToMinimumOne)v.push(...await this.move({...e,amount:1,quantifier:ur.Exactly})),v.push(...await this.move({...e,amount:(e.amount??1)-1,quantifier:ur.UpTo}));else{if(w===ur.Any)return this.move({...e,quantifier:ur.May,amount:T.count});if(w===ur.UpTo||w===ur.All||w===ur.Exactly)for(w!==ur.All&&y<T.count&&await this.$.oneEffectActivates(Pn.ExtraMove,{movement:o,pieces:t,location:this,possiblePieces:T.items})&&(y+=1);w===ur.UpTo&&v.length<y||w===ur.All&&T.count>0||w===ur.Exactly&&v.length!==y;){const e=v.length;if(T=b(),w===ur.All&&T.removeAllButFirst(),await T.pickOne((async a=>{const r=a.isBeasts&&o===Mr.Push&&this.$.extraBeastAdjacency;let i=this.inLands(d,r?2:1).where((e=>A(e,a)));0===i.count&&(i=this.inLands(d,r?2:1).where((e=>A(e,a,!0)))),await i.pickOne((async e=>{const n={piece:a,source:this,destination:e,movement:o,pieceFilter:t};v.push(n),this.$.reportMovement(n),await a.moveTo({location:e,movement:o,pieceFilter:t,withoutWait:g})}),{autoPlayOneOption:e>0&&n||d.target===zn.ToThisLocation,highlightPieces:[a],prompt:`Pick land to ${x} ${Zn[t].text}.${y>1?` (${y-v.length} left.)`:""}`,...h})}),{autoPlayOneOption:!0,prompt:`Pick one ${Zn[t].text} to ${x}.${y>1?` (${y-v.length} left.)`:""}${m?" <br>(This is optional because land is Isolated)":""}`,...c},w===ur.UpTo),v.length===e)break}}return this.$.stopAllowOceanForBlight(),v}))}moveBetween({upToAmount:e,pieces:a,destination:t}){return this.$.doInstruction((async()=>{const n=!this.$.upToMustBeUsedAtMaximum;await this.$.inLandsWhere(t).pickOne((async t=>{const r=this.$.forPiecesThatIs(a,(e=>e===this||e===t));let i=e;i<r.count&&await this.$.oneEffectActivates(Pn.ExtraMove,{movement:Mr.Move,pieces:a,location:this,possiblePieces:r.items})&&(i+=1),await this.$.forPiecesThatIs(a,(e=>e===this||e===t)).pickMultiple({amount:i,optional:n,effect:{highlightLocations:[this,t]},forPickedItem:async e=>{const n=e.location===this?t:this,r={piece:e,source:e.location,destination:n,movement:Mr.Move,pieceFilter:a};this.$.reportMovement(r),await e.moveTo({location:n,pieceFilter:a})}})}))}))}numberOf(e){return zo(this.pieces,(a=>a.isA(e)))}numberOfPiecesInAdjacentLands(e){return this.inAdjacentLands().sum((a=>a.numberOf(e)))}get adjacentNumberOfStrife(){return this.inAdjacentLands().sum((e=>e.numberOfStrife))}numberOfPiecesInThisOrAdjacentLands(e,a){let t=0;for(const n of[this,...this.adjacentLands])for(const r of n.pieces)(r.isA(e)&&void 0===a||r.owner===a)&&(t+=1);return t}numberOfPresenceOf(e,a=[]){return zo(this.pieces,(a=>a.isPresence&&a.owner===e))+a.filter((e=>e.location===this)).length}participatingDahan(){return this.piecesWhere((e=>!e.doesNotParticipateInRavage&&(e.isDahan||e.isExplorer&&this.explorersFightWithDahan)))}participatingInvaders(){return this.invaders().where((e=>!(e.doesNotParticipateInRavage||e.isExplorer&&this.explorersFightWithDahan)))}async pickOnePieceToNotParticipateInRavage(e){await this.doNotParticipateInRavage({quantifier:ur.Exactly,amount:1,pieces:e})}piecesInAdjacentLands(){const e=[];return this.adjacentLands.forEach((a=>e.push(...a.pieces))),td.createCollection(this.$,e)}piecesInThisAndAdjacentLands(){const e=[...this.pieces];return this.adjacentLands.forEach((a=>e.push(...a.pieces))),td.createCollection(this.$,e)}piecesInThisAndAdjacentLocations(){const e=[...this.pieces];return this.adjacentLocations.forEach((a=>e.push(...a.pieces))),td.createCollection(this.$,e)}piecesThatAre(e){return this.piecesWhere((a=>a.isA(e)))}piecesWhere(e){return this.forPieces().where(e)}piecesWithStrife(){return this.piecesWhere((e=>e.strife>0))}async piecesWithStrifeDealsDamageToOtherInvaders(){await this.piecesWithStrife().forEach((async e=>{await e.dealDamageToOtherInvaders()}),{noOptions:"No Invaders with <strife>."})}async possiblyDontCountPiecesAs(e,a){const t=void 0===a?this.pieces:this.pieces.filter((e=>e.owner===a));for(const a of t)if(await a.possiblyDontCountAs(e))return}possiblyReorderPieces(){for(;;){const e=this.firstOccupiedPositionInNextPage;if(!e)break;const a=this.firstFreePosition;if(a>=7)break;for(;this.piecesByGroup[e].length>0;){const t=this.piecesByGroup[e][0];this.removePieceFromItsPosition(t),this.insertPieceIntoPosition(t,a)}}}presenceOf(e){return this.piecesWhere((a=>a.owner===e&&a.isPresence))}push(e){return this.move({...e,movement:Mr.Push})}pushAll(e){return this.move({movement:Mr.Push,quantifier:ur.All,pieces:e})}pushOne(e){return this.move({movement:Mr.Push,amount:1,pieces:e})}pushUpTo(e,a){return this.move({movement:Mr.Push,quantifier:ur.UpTo,amount:e,pieces:a})}async putIncarna(e,a){const[t]=await this.createPiece(1,e,a.spiritNumber);return a.destroyedIncarna=null,t}putPresence(e,a){return this.createPiece(e,Ln.Presence,a.spiritNumber)}async ravage(e={}){if(this.isTheEndlessDark)return;const{normal:a=!0,card:t,calculateDoNotParticipateInRavage:n=!0}=e;await this.$.doInvaderAction(a?qo.NormalInvaderAction:qo.ExtraInvaderAction,(async()=>{await this.$.addEffect({name:"Ravage",text:`Ravage in land ${this.coordinate}.`,highlightLocations:[this],[Pn.Now]:async()=>{const e={land:this,normal:a,card:t,invaderAction:qr.Ravage};let r=await this.$.oneEffectActivates(Pn.PreventInvaderActionInLand,e);if(r||(n&&await this.calculateDoNotParticipateInRavage(),r=await this.$.oneEffectActivates(Pn.AlterInvaderActionInLand,e)),r)return void await this.resetDoNotParticipateInRavage();await this.$.sendEvent({type:Tn.InvadersRavageInLand,location:this});let i=this.participatingInvaders();const s=this.participatingDahan();await this.$.doEffects(Pn.DahanFightBeforeInvaders,{land:this});const o=this.participatingDahan().where((e=>e.fightsBeforeInvaders)),d=s.sum((e=>e.fightsBeforeInvaders?0:e.strengthDuringRavage));if(this.$.beastsCountAsBadlands&&await this.possiblyDontCountPiecesAs(Ln.Beasts),await this.possiblyDontCountPiecesAs(Ln.Badlands),o.count>0){const e=o.sum((e=>e.strengthDuringRavage));if(e>0){const a=e+this.sumAdjustedCollectiveDahanRavageDamage;await this.damage(a,Xn.Invader,{filter:e=>i.has(e)}),i=this.participatingInvaders()}}let l=i.sum((a=>a.strife>0?0:a.strengthDuringRavage+a.adjustedIndividualInvaderRavageDamage({towardsLand:!1,normal:e.normal}))),c=i.sum((a=>a.strife>0?0:a.strengthDuringRavage+a.adjustedIndividualInvaderRavageDamage({towardsLand:!0,normal:e.normal})));const h=this.sumAdjustedCollectiveInvaderRavageDamage({normal:e.normal,towardsLand:!1}),u=this.sumAdjustedCollectiveInvaderRavageDamage({normal:e.normal,towardsLand:!0});await i.forEach((async e=>{e.strife>0&&await e.removeStrife()}));let g=0;if(l>0&&(l+=h,l-=this.defense,g=l),c>0&&(c+=u,c-=this.defense),g>0){const e=await this.damage(g,Xn.InvaderOrDahan,{filter:e=>s.has(e),efficiently:!0});e.length>0&&await this.$.doEffects(Pn.AfterDahanDestroyedInRavage,{land:this,amount:e.length})}c>0&&await this.damageLand(c);const f=s.where((e=>!e.fightsBeforeInvaders));if(f.count>0){const e=f.where((e=>e.isAlive)),a=this.dahanFightSimultaneously?d:e.sum((e=>e.strengthDuringRavage));if(a>0){const e=a+this.sumAdjustedCollectiveDahanRavageDamage;await this.damage(e,Xn.Invader,{filter:e=>i.has(e)})}}await this.resetDoNotParticipateInRavage(),await this.resetDahanFightBefore()}})}),{land:this}),await this.$.doEffects(Pn.AfterRavaging,{land:this})}remove(e){return this.$.doInstruction((async()=>{const{amount:a=1,pieces:t=Xn.AllPieces,owner:n,filter:r=(()=>!0),removement:i=Wn.Remove}=e,s=e.autoPlay??(e.quantifier===ur.All&&!this.$.orderOfRemoveAllMightMatter),o=()=>this.piecesWhere((e=>e.isA(t)&&r(e)&&e.targetable&&(void 0===n||e.owner===n))),d=wr[i].verb,l=[];let{quantifier:c=ur.Exactly}=e;if(c===ur.UpTo&&this.$.upToMustBeUsedAtMaximum&&(c=ur.Exactly),c===ur.May&&(c=ur.UpTo),c===ur.UpToMinimumOne)l.push(...await this.remove({...e,amount:1,quantifier:ur.Exactly})),l.push(...await this.remove({...e,amount:(e.amount??1)-1,quantifier:ur.UpTo}));else if(c===ur.AtLeast)l.push(...await this.remove({...e,quantifier:ur.Exactly})),l.push(...await this.remove({...e,quantifier:ur.Any}));else{if(c===ur.Any)return this.remove({...e,amount:o().count,quantifier:ur.May});{const e=o();let n=c===ur.All?e.count:a;n<e.count&&await this.$.oneEffectActivates(Pn.ExtraRemove,{removement:i,pieces:t,location:this,possiblePieces:e.items})&&(n+=1),await e.pickMultiple({amount:n,optional:c===ur.UpTo,forPickedItem:async e=>{l.push(...await this.removePiece({piece:e,removement:i,removeAll:c===ur.All,pieceFilter:t}))},autoplayIfPickingAll:s,effect:{autoPlayOneOption:s,prompt:`Pick one ${Zn[t].text} to ${d}.`}})}}return l}))}async removeAllStrife(){await this.piecesWithStrife().forEach((async e=>{await e.removeStrife(e.baseStrife)}))}async removeBlight(e={}){const{amount:a=1,quantifier:t=ur.Exactly,toTheBox:n=!1}=e,r=Math.min(this.numberOf(this.$.Blight),a),i=await this.remove({amount:r,pieces:this.$.Blight,quantifier:t,autoPlay:!0});return i.length>0&&!n&&!await this.$.oneEffectActivates(Pn.PreventAddRemovedBlightToBlightCard)&&await this.$.addBlightToBlightCard(i.length),i}removeInvadersWorthOfHealthUpTo(e,a={}){return this.$.doInstruction((async()=>{const{extraRemoveAllowed:t=!0,singleInvader:n=!1}=a,r=[],i=()=>this.invaders().where((a=>a.health<=e&&a.targetable));return await i().optionallyPickOne((async a=>{r.push(...await a.remove()),n||r.push(...await this.removeInvadersWorthOfHealthUpTo(e-a.health,{extraRemoveAllowed:!1}))}),{prompt:n?`Remove an Invader with ${e} health or less.`:`${e} health left to remove.`}),t&&await this.$.oneEffectActivates(Pn.ExtraRemove,{removement:Wn.Remove,pieces:this.$.Invader,location:this,possiblePieces:i().items})&&r.push(...await this.removeInvadersWorthOfHealthUpTo(e,{extraRemoveAllowed:!1,singleInvader:!0})),r}))}removeOne(e){return this.remove({pieces:e})}async removePiece(e){const{piece:a,removement:t,pieceFilter:n,byDamage:r=!1,removeAll:i=!1}=e;if(t!==Wn.Silent){const e={piece:a,location:this,removement:t,byDamage:r,removeAll:i};if(await this.$.oneEffectActivates(Pn.AdjustRemovePiece,e))return[];const n=await this.$.oneEffectActivates(Pn.PreventRemovePiece,e);if(wr[t].isDestroyLike&&a.isInvader&&this.$.setHasAttemptedDestroyingInvaderThisInstruction(),n)return r&&(a.damage=0),await this.$.addEffectUntilEndOfAction({[Pn.PreventTargetPiece]:e=>a===e.piece,[Pn.PreventDamagingPiece]:e=>Promise.resolve(a===e.piece),[Pn.AdjustRemovePiece]:e=>Promise.resolve(a===e.piece),[Pn.ActionEnds]:()=>(a.placeInGroup(),Promise.resolve())}),a.placeInGroup(),[]}t!==Wn.Silent&&await this.$.waitForAnimationsToFinish();const s=Vr(this.pieces,(e=>e.id===a.id));if(s){const e=s.positionIndex;this.removePieceFromItsPosition(s),0===this.piecesByGroup[e].length&&this.possiblyReorderPieces()}if(t!==Wn.Silent){if(s){if(!0!==wr[t].skipEvent&&await this.$.sendEvent({type:Tn.PieceRemoved,piece:a,pieceType:a.piece,location:this,removement:t}),wr[t].isDestroyLike&&await this.$.generateFear({amount:a.fearFromDestruction,location:this,fromDestroyingBuildings:!0}),a.piece===Ln.Presence){[Wn.DirectDestroy,Wn.DestroyByDamageOrBlight,Wn.Replace,Wn.Remove].includes(t)&&(a.owner.destroyedPresence+=1);const e=this.numberOfPresenceOf(a.owner);await this.$.doEffects(Pn.AfterLandChangesAmountOfPresence,{amountBefore:e+1,amountAfter:e,land:this,spirit:a.owner})}a.isIncarna&&![Wn.Relocate,Wn.Silent].includes(t)&&(a.owner.destroyedIncarna=a.piece)}await this.$.doEffects(Pn.AfterRemovePiece,{piece:a,location:this,removement:t,pieceFilter:n})}return s?[{piece:s,location:this,removement:t}]:[]}removePieceFromItsPosition(e){e.positionIndex>=0&&(e.positionIndex<this.piecesByGroup.length&&(Vr(this.piecesByGroup[e.positionIndex],e),0!==this.piecesByGroup[e.positionIndex].length||e.piece!==Ln.Presence&&!e.isIncarna||this.hasPresenceOf(e.owner)||e.owner.removeLand(this),this.$.pieceCount[e.piece]=(this.$.pieceCount[e.piece]??0)-1),e.positionIndex=-1)}async removeStrife(e){await this.piecesWithStrife().pickMultiple({amount:e,where:e=>e.strife>0,forPickedItem:async e=>{await e.removeStrife()},repeatSame:!0,effect:{noOptions:"No <strife> to remove."}})}replaceIndividually(e){return this.$.doInstruction((async()=>{const{pieces:a,withPiece:t,owner:n,removement:r=Wn.Replace}=e;let{amount:i}=e;const s=this.piecesWhere((e=>e.isA(a)&&(void 0===n||e.owner===n))),o={removed:[],added:[]};return i<s.count&&await this.$.oneEffectActivates(Pn.ExtraRemove,{removement:r,pieces:a,location:this,possiblePieces:s.items})&&(i+=1),await s.pickMultiple({amount:i,forPickedItem:async e=>{const a=await e.replace([t],r);o.removed.push(...a.removed),o.added.push(...a.added)},effect:{autoPlayOneOption:!0}}),await this.$.doEffects(Pn.AfterReplacePieces,o),o}))}replaceOne(e){return this.$.doInstruction((async()=>{const{pieces:a,withAmount:t=1,withPiece:n,owner:r}=e,i={removed:[],added:[]};let s=1;const o=this.piecesWhere((e=>e.isA(a)&&(void 0===r||e.owner===r)));return s<o.count&&await this.$.oneEffectActivates(Pn.ExtraRemove,{removement:Wn.Replace,pieces:a,location:this,possiblePieces:o.items})&&(s+=1),await o.pickMultiple({amount:s,forPickedItem:async e=>{const a=await e.replace([...Array(t).keys()].map((()=>n)));i.removed.push(...a.removed),i.added.push(...a.added)}}),await this.$.doEffects(Pn.AfterReplacePieces,i),i}))}async resetDahanFightBefore(){for(const e of this.pieces)await e.setFightsBeforeInvaders(!1)}async resetDoNotParticipateInRavage(){for(const e of this.pieces)await e.setDoesNotParticipateInRavage(!1)}async restoreToSetupSymbols(e={}){const{exceptPieces:a=[],removeFirst:t=!0}=e,{setupSymbols:n}=this;n.length>0&&await this.$.sendEvent({type:Tn.RestoringLandToSetupSymbols,location:this}),t&&await this.remove({quantifier:ur.All,autoPlay:!0,pieces:Xn.AllPieces});let r=[...n];if(null!==this.board&&this.board.ignoreInvaderAndBlightInSetup){if(this.$.spiritCount<=4&&(r=r.filter((e=>![Ln.City,Ln.Town,Ln.Explorer].includes(e)))),3===this.$.spiritCount){let e=this.board.data.setupSymbols.findIndex((e=>e.includes(Ln.City)));e>=0?e===this.landIndex&&r.push(Ln.City):(e=this.board.data.setupSymbols.findIndex((e=>e.includes(Ln.Town))),e===this.landIndex&&r.push(Ln.Town))}if(4===this.$.spiritCount){rd(this.board.data.setupSymbols,(e=>e.includes(Ln.Town)))===this.landIndex&&r.push(Ln.Town)}}for(const e of r)if(!a.some((a=>Zn[a].pieces.includes(e))))if(e!==Ln.Strife)(e!==Ln.Dahan||this.numberOfDahan<r.filter((e=>e===Ln.Dahan)).length)&&await this.createPiece(1,e);else{const e=n.indexOf(Ln.Strife)-1;if(e>=0){const a=n[e],t=this.pieces.find((e=>e.piece===a));void 0!==t&&await t.addStrife()}}}sharesCornerWith(e){return!!(this.isCornerLandOrNumberOne&&e.isCornerLandOrNumberOne&&e.boardIndex!==this.boardIndex&&e.isAdjacentTo(this))&&(2!==this.adjacentLocations.filter((a=>a.boardIndex===e.boardIndex&&a.isCornerLandOrNumberOne)).length||2!==e.adjacentLocations.filter((e=>e.boardIndex===this.boardIndex&&e.isCornerLandOrNumberOne)).length)}async skipInvaderAction(e={}){const{all:a=!1,next:t=!1,amount:n=1,textArea:r,text:i=this.$.currentStackEffect?.text,afterSkip:s,filter:o=(()=>!0)}=e,d=De.box(0);await this.$.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===this?`${i}${a?"":`<br><br>(${n-d.get()} left.)`}`:void 0,[Pn.PreventInvaderActionInLand]:async e=>!(e.land!==this||!o(e)||!(a||t||await this.$.may({textArea:r,highlightLocations:[this],prompt:`Skip ${e.invaderAction} Action?`})))&&(d.set(d.get()+1),a||d.get()!==n||this.$.removeThisEffect(),void 0!==s&&await s(e),!0)})}spiritsWithPresence(){return this.$.spiritsWhich((e=>this.hasPresenceOf(e)))}sumAdjustedCollectiveInvaderRavageDamage({normal:e,towardsLand:a}){return this.$.sumEffects(Pn.AdjustCollectiveInvaderRavageDamage,{land:this,normal:e,towardsLand:a})}terrainsMatchesInvaderCard(e){return Uo[e].terrains.some((e=>this.hasTerrain(e)))}terrainsMatchesInvaderCards(e){return e.some((e=>this.terrainsMatchesInvaderCard(e)))}async timePasses(){for(const e of this.pieces)await e.timePasses()}toString(){return`${Yo(this.pieces.map((e=>e.piece)))}`}upOrDowngrade(e){return this.$.doInstruction((async()=>{const{downgrade:a=!0,amount:t=1,pieces:n=this.$.Invader,filter:r=(()=>!0),pickPiecesEffect:i,different:s=!1}=e;let{quantifier:o=ur.Exactly}=e;o===ur.UpTo&&this.$.upToMustBeUsedAtMaximum&&(o=ur.Exactly),o===ur.May&&(o=ur.UpTo);const d=[],l=()=>this.piecesWhere((e=>e.isA(n)&&r(e)&&(!s||0===d.length||!d.includes(e))));if(o===ur.AtLeast)await this.upOrDowngrade({...e,quantifier:ur.Exactly}),await this.upOrDowngrade({...e,quantifier:ur.Any});else if(o===ur.UpToMinimumOne)await this.upOrDowngrade({...e,amount:1,quantifier:ur.Exactly}),await this.upOrDowngrade({...e,amount:(e.amount??1)-1,quantifier:ur.UpTo});else if(o===ur.Any)await this.upOrDowngrade({...e,quantifier:ur.May,amount:l().count});else if(o===ur.UpTo||o===ur.All||o===ur.Exactly)for(;o===ur.UpTo&&d.length<t||o===ur.All&&l().count>0||o===ur.Exactly&&d.length!==t;){const e=d.length,r=l();if(o===ur.All&&r.removeAllButFirst(),await r.pickOne((async e=>{d.push(e),a?await e.downgrade():await e.upgrade()}),{autoPlayOneOption:o===ur.All,prompt:`Pick one ${Zn[n].text} to ${a?"downgrade":"upgrade"}. (${t-d.length} left.)`,...i},o===ur.UpTo),d.length===e)break}}))}upgrade(e){return this.upOrDowngrade({...e,downgrade:!1})}upgradeUpTo(e,a){return this.upOrDowngrade({quantifier:ur.UpTo,amount:e,pieces:a,downgrade:!1})}get adjustedLandHealth(){return this.$.sumEffects(Pn.AdjustLandHealth,{land:this})}get firstFreePosition(){let e=0;for(;e<this.piecesByGroup.length&&this.piecesByGroup[e].length>0;)e+=1;return e}get firstOccupiedPositionInNextPage(){let e=7;for(;;){if(e>=this.piecesByGroup.length)return;if(this.piecesByGroup[e].length>0)break;e+=1}return e}async build(e,a){this.isTheEndlessDark||await this.$.doInvaderAction(e?qo.NormalInvaderAction:qo.ExtraInvaderAction,(async()=>{await this.$.addEffect({name:"Build",text:`Build in land ${this.coordinateLink}.`,highlightLocations:[this],[Pn.Now]:async()=>{const t={land:this,normal:e,card:a,invaderAction:qr.Build};let n=await this.$.oneEffectActivates(Pn.PreventInvaderActionInLand,t);if(!n&&this.has(Xn.Disease)&&(await this.$.oneEffectActivates(Pn.PreventDiseasePreventingBuilds,{location:this})||(n=!0,await this.$.addSubEffect({text:`The Build in land ${this.coordinateLink} is prevented by <disease>.`,[Pn.Now]:async()=>{await this.removeOne(this.$.Disease)}}))),!n&&(await this.$.doEffects(Pn.BeforeSuccessfulBuild,{land:this}),n=await this.$.oneEffectActivates(Pn.AlterInvaderActionInLand,t),!n)){const e=await this.add(1,this.buildPlans);await this.$.doEffects(Pn.AfterSuccessfulBuild,{land:this,additions:e})}}})}),{land:this})}async explore(e,a){this.isTheEndlessDark||await this.$.doInvaderAction(e?qo.NormalInvaderAction:qo.ExtraInvaderAction,(async()=>{await this.$.addEffect({name:"Explore",text:`Explore in land ${this.coordinate}.`,highlightLocations:[this],[Pn.Now]:async()=>{const t={land:this,normal:e,card:a,invaderAction:qr.Explore};this.isIsolated||await this.$.oneEffectActivates(Pn.PreventInvaderActionInLand,t)||(await this.$.doEffects(Pn.BeforeSuccessfulExplore,{land:this}),this.has(Xn.Wilds)&&!this.$.ignoreWildsDuringExplore?await this.removeOne(this.$.Wilds):await this.$.oneEffectActivates(Pn.AlterInvaderActionInLand,t)||await this.add(1,Xn.Explorer),await this.$.doEffects(Pn.AfterSuccessfulExplore,t),a&&await this.$.escalate(a,{afterExploringLand:this}))}})}),{land:this})}}sd([De],od.prototype,"pieces",void 0),sd([De],od.prototype,"piecesByGroup",void 0),sd([Re],od.prototype,"elements",null);const dd={name:"Scream Disease Into The Wind",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Air,ir.Water,ir.Animal],set:gn.JaggedEarth,target:or.Spirit,targetFilter:[fr.Another],effects:[{textArea:[.607,.696],text:"Target Spirit gets <range+1> with all their Powers.",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({icon:"<range+1>",players:[a]}),[Pn.ExtraRange]:e=>e.spirit===a?1:0})}},{textArea:[.703,.929],text:"Once this turn, after target Spirit uses a Power targeting a land, they may add 1 <disease> to that land. (Hand them a <disease> token as a reminder.)",[Pn.TargetSpirit]:async({$:e,power:a,spirit:t,...n})=>{const r=De.box(!1),i={triggerId:e.nextTriggerId(),[Pn.Now]:async({action:a})=>{a.parentData.targetLands.some((e=>e.exists))&&await e.may({prompt:"Add 1 <disease> to target land?"})&&(r.set(!0),await od.createCollection(e,a.parentData.targetLands).pickOne((async a=>{await a.add(1,e.Disease)}),{autoPlayOneOption:!0}))}};await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({icon:`<disease><br>${r.get()?"1":"0"} / 1`,players:[t]}),[Pn.AfterTargetingLands]:async a=>{a.power.owner!==t||r.get()||(e.action.data.targetLands=a.lands,await e.addTrigger(i,n.effect,n.action))}})}}]},ld={name:"Sear Anger Into The Wild Lands",type:kn.Minor,speed:sr.Slow,energy:0,elements:[ir.Sun,ir.Fire,ir.Plant],set:gn.JaggedEarth,target:or.Land,range:1,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.644,.877],text:"Add 1 <badlands>.<or>If <wilds> and Invaders are present, 1 <fear> and 1 Damage.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"Badlands",textArea:[.651,.691],text:"Add 1 <badlands>.",[Pn.Now]:async()=>{await a.add(1,e.Badlands)}},{actionId:"Wilds",textArea:[.778,.874],text:"If <wilds> and Invaders are present, 1 <fear> and 1 Damage.",[Pn.Now]:async()=>{a.hasAllOf(e.Wilds,e.Invader)&&(await a.fear(1),await a.damage(1))}}]})}}]},cd={name:"Set Them On An Ever-Twisting Trail",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Air,ir.Plant,ir.Animal],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],range:1,hasPushOrGather:!0,effects:[{textArea:[.712,.752],text:"Gather or Push 1 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"Gather",text:"Gather 1 <explorer>.",[Pn.Now]:async()=>{await a.gatherOne(e.Explorer)}},{actionId:"Push",text:"Push 1 <explorer>",[Pn.Now]:async()=>{await a.pushOne(e.Explorer)}}]},{orChoice:!1})}},{textArea:[.768,.808],text:"Isolate target land.",[Pn.InTargetLand]:async({land:e})=>{await e.isolate()}}]},hd={name:"Skies Herald The Season Of Return",type:kn.Minor,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Moon,ir.Plant,ir.Animal],set:gn.JaggedEarth,target:or.Land,range:1,hasPushOrGather:!0,blightWhiteListedPower:!0,effects:[{textArea:[.657,.745],text:"A Spirit with <presence> on target board may add 1 of their Destroyed <presence>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.spiritsWhich((e=>a.boards().hasOneWhere((a=>a.spiritsWithPresence().has(e))))).pickOne((async e=>{await a.addPresence(e,{destroyed:!0})}),{noOptions:"No Spirits with <presence> on target board."})}},{textArea:[.756,.796],text:"Gather up to 2 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(2,e.Dahan)}},{textArea:[.814,.854],text:"Push 1 <blight>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushOne(e.Blight)}}]},ud={name:"Strong And Constant Currents",type:kn.Minor,speed:sr.Fast,energy:0,elements:[ir.Sun,ir.Water,ir.Earth],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Coastal],range:0,hasPushOrGather:!0,effects:[{textArea:[.59,.94],text:"Push 1 <explorer>/<town> to an adjacent Coastal land.<or>Move up to 2 <dahan> between target land and one other Coastal land.<br><br>If you have 2 <water>:<br>You may do both.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await e.chooseBetween({effects:[{actionId:"Push",textArea:[.59,.671],text:"Push 1 <explorer>/<town> to an adjacent Coastal land.",[Pn.Now]:async()=>{await t.push({amount:1,pieces:e.ExplorerOrTown,destinationFilter:e=>e.isCoastal})}},{actionId:"Move",textArea:[.719,.808],text:"Move up to 2 <dahan> between target land and one other Coastal land.",[Pn.Now]:async()=>{await t.moveBetween({upToAmount:2,pieces:e.Dahan,destination:e=>e.isCoastal&&e!==t})}},{actionId:"DoBoth",text:"Do both.",condition:()=>!e.treatingAllOrsAsAnds&&a.hasElementsWithConvert({[ir.Water]:2}),[Pn.Now]:async()=>{await a.convertElements({[ir.Water]:2}),await e.addSubEffect({textArea:[.59,.671],text:"Push 1 <explorer>/<town> to an adjacent Coastal land.",[Pn.Now]:async()=>{await t.push({amount:1,pieces:e.ExplorerOrTown,destinationFilter:e=>e.isCoastal})}}),await e.addSubEffect({textArea:[.719,.808],text:"Move up to 2 <dahan> between target land and one other Coastal land.",[Pn.Now]:async()=>{await t.moveBetween({upToAmount:2,pieces:e.Dahan,destination:e=>e.isCoastal&&e!==t})}})}}]})}}]},gd={name:"Sucking Ooze",type:kn.Minor,speed:sr.Fast,energy:0,elements:[ir.Moon,ir.Water,ir.Earth],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Sands,dr.Wetlands],range:1,generatesFear:!0,effects:[{textArea:[.719,.759],text:"2 <fear> if Invaders are present.",[Pn.InTargetLand]:async({land:e})=>{e.hasInvaders&&await e.fear(2)}},{textArea:[.773,.813],text:"Isolate target land.",[Pn.InTargetLand]:async({land:e})=>{await e.isolate()}}]},fd={name:"Sunsets Fire Flows Across The Land",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Sun,ir.Moon,ir.Fire,ir.Water],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],range:1,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.699,.739],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.699,.739],text:"1 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(1)}},{textArea:[.756,.841],text:"You may pay 1 Energy to deal 1 Damage in an adjacent land.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{a.energy>=1&&await e.may({prompt:"Pay 1 Energy to deal 1 Damage in an adjacent land?"})&&await t.inAdjacentLands().pickOne((async e=>{await e.damage(1)}))}}]},yd={name:"Territorial Strife",type:kn.Minor,speed:sr.Slow,energy:0,elements:[ir.Sun,ir.Fire,ir.Animal],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.City],range:1,hasDamageInstructions:!0,effects:[{textArea:[.676,.858],text:"3 Damage to <explorer>/<town><or>Add 1 <strife>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"Damage",textArea:[.683,.723],text:"3 Damage to <explorer>/<town>.",[Pn.Now]:async()=>{await a.damage(3,e.ExplorerOrTown)}},{actionId:"Strife",textArea:[.814,.854],text:"Add 1 <strife>.",[Pn.Now]:async()=>{await a.addStrife(1)}}]})}}]},pd={name:"Terror Turns To Madness",type:kn.Minor,speed:sr.Slow,energy:0,elements:[ir.Moon,ir.Air,ir.Water],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Invaders],range:2,generatesFear:!0,effects:[{textArea:[.617,.906],text:"If the Terror Level is I: 3 <fear><br>II: 2 <fear> or add 1 <strife>.<br>III: Add 1 <strife>.",[Pn.InTargetLand]:async({$:e,land:a})=>{1===e.terrorLevel?await e.addSubEffect({textArea:[.703,.743],text:"3 <fear>.",[Pn.Now]:async()=>{await a.fear(3)}}):2===e.terrorLevel?await e.chooseBetween({effects:[{actionId:"Fear",textArea:[.779,.819],text:"2 <fear>.",[Pn.Now]:async()=>{await a.fear(2)}},{actionId:"AddStrife",textArea:[.779,.819],text:"Add 1 <strife>.",[Pn.Now]:async()=>{await a.addStrife(1)}}]},{orChoice:!1}):3===e.terrorLevel&&await e.addSubEffect({textArea:[.85,.89],text:"Add 1 <strife>.",[Pn.Now]:async()=>{await a.addStrife(1)}})}}]},wd={name:"The Shore Seethes With Hatred",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Fire,ir.Water,ir.Earth,ir.Plant],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Coastal],range:1,generatesFear:!0,effects:[{textArea:[.716,.756],text:"1 <fear>",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.778,.818],text:"Add 1 <badlands> and 1 <wilds>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Badlands),await a.add(1,e.Wilds)}}]},md={name:"Thriving Chokefungus",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Moon,ir.Water,ir.Plant],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Jungle,dr.Wetlands],range:1,effects:[{textArea:[.746,.786],text:"Add 1 <disease> and 1 <badlands>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Disease),await a.add(1,e.Badlands)}}]},vd={name:"Treacherous Waterways",type:kn.Minor,speed:sr.Fast,energy:0,elements:[ir.Fire,ir.Water,ir.Earth],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Mountain,dr.Wetlands],range:1,hasPushOrGather:!0,effects:[{textArea:[.676,.865],text:"Add 1 <wilds>.<or>Push 1 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"Wilds",textArea:[.683,.723],text:"Add 1 <wilds>.",[Pn.Now]:async()=>{await a.add(1,e.Wilds)}},{actionId:"Push",textArea:[.814,.854],text:"Push 1 <explorer>.",[Pn.Now]:async()=>{await a.pushOne(e.Explorer)}}]})}}]},xd={name:"Unquenchable Flames",type:kn.Minor,speed:sr.Slow,energy:1,elements:[ir.Moon,ir.Fire,ir.Earth],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],range:2,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.607,.647],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.607,.647],text:"1 Damage to <town>/<city>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(1,e.TownOrCity)}},{textArea:[.661,.755],text:"Invaders do not heal Damage at end of turn.",[Pn.InTargetLand]:async({$:e,land:a,effect:t})=>{await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===a?t.text:void 0,[Pn.PreventClearDamage]:({piece:e})=>e.isInvader&&e.location===a})}},{textArea:[.878,.918],text:"If you have 2 <fire>:<br>Add 1 <badlands>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElements({[ir.Fire]:2})&&await t.add(1,e.Badlands)}}]},bd={name:"Weep For What Is Lost",type:kn.Minor,speed:sr.Slow,energy:0,elements:[ir.Fire,ir.Water,ir.Animal],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Blight],range:1,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.71,.75],text:"1 <fear> per type of Invader present.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.fear((a.has(e.Explorer)?1:0)+(a.has(e.Town)?1:0)+(a.has(e.City)?1:0))}},{textArea:[.771,.811],text:"Push up to 1 <explorer>/<town> per <blight>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(a.numberOf(e.Blight),e.ExplorerOrTown)}}]},Td={name:"Roiling Bog And Snagging Thorn",type:kn.Minor,speed:sr.Fast,energy:0,elements:[ir.Moon,ir.Fire,ir.Water,ir.Plant],set:gn.NatureIncarnate,target:or.Land,sourceFilter:[dr.SacredSite],range:1,generatesFear:!0,effects:[{textArea:[.652,.693],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.652,.693],text:"Isolate.",[Pn.InTargetLand]:async({land:e})=>{await e.isolate()}},{textArea:[.652,.693],text:"Defend 2.",[Pn.InTargetLand]:async({land:e})=>{await e.defend(2)}},{textArea:[.727,.9],text:"1 <dahan> does not participate in Ravage. (Check when Ravaging; it does not take Damage and does not counterattack.).",[Pn.InTargetLand]:async({$:e,land:a,effect:t})=>{await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===a?t.text:void 0,[Pn.DoesNotParticipateInRavage]:async({location:t})=>{t===a&&await t.pickOnePieceToNotParticipateInRavage(e.Dahan)}})}}]},Ad={name:"Ward The Shores",type:kn.Scenario,speed:sr.Slow,energy:0,elements:[],set:gn.BranchAndClaw,target:or.Land,range:0,sourceFilter:[dr.SacredSite],targetFilter:[dr.WardTheShores],effects:[{text:"Pay 2 Energy per <blight> and 2 Energy per <town>/<city> to add a Warding Pattern.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{const n=2*t.numberOf(e.Blight)+2*t.numberOf(e.TownOrCity);await a.payEnergy(n),await t.add(1,e.WardingPattern)}}]},Id={name:"Call On Midnight's Dream",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Moon,ir.Animal],set:gn.Base,target:or.Land,range:0,generatesFear:!0,effects:[{textArea:[.628,.91],text:"If target land has <dahan>, gain a Major Power. If you Forget this Power, gain Energy equal to <dahan> and you may play the Major Power immediately, paying its cost.<or>If Invaders are present, 2 <fear>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await e.chooseBetween({effects:[{actionId:"GainMajor",textArea:[.633,.83],label:"Gain a Major Power.",text:"Gain a Major Power. If you Forget this Power, gain Energy equal to <dahan> and you may play the Major Power immediately, paying its cost.",[Pn.Now]:async()=>{const n=await a.gainPowerCard({powerType:kn.Major});if(n.chosen.length>0){const r=n.chosen[0];if(!a.hasPower(Ui.CallOnMidnightsDream)&&(await a.gainEnergy(t.numberOf(e.Dahan)),null!==n)){const t=dg[r.power].energy??0;a.energy>=t&&await e.may({prompt:`Play the Major Power immediately, paying ${t} energy?`})&&await r.play({withoutUsingCardPlays:!0})}}},condition:()=>t.has(e.Dahan)},{actionId:"Fear",textArea:[.864,.904],text:"If Invaders are present, 2 <fear>.",[Pn.Now]:async()=>{await t.fear(2)},condition:()=>t.hasInvaders}]})}}]},Pd={name:"Dread Apparitions",type:kn.Unique,speed:sr.Fast,energy:2,elements:[ir.Moon,ir.Air],set:gn.Base,target:or.Land,targetFilter:[dr.Invaders],range:1,generatesFear:!0,effects:[{textArea:[.624,.709],text:"When Powers generate <fear> in target land, Defend 1 per <fear>.",[Pn.InTargetLand]:async({$:e,land:a})=>{const t=De.box(0);await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:void 0,[Pn.DefendFromSpirits]:e=>e.land===a?t.get():0}),await e.addSubEffectUntilEndOfTurn({[Pn.AfterPowerGenerateFearInLand]:({fromDestroyingBuildings:n,location:r,amount:i})=>(r!==a||n||e.currentActionType!==qo.PowerAction||t.set(t.get()+i),Promise.resolve()),[Pn.Reminder]:e=>e===a?`${t.get()} <fear> = ${t.get()} Defense.`:void 0})}},{textArea:[.71,.75],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}}]},Sd={name:"Dreams Of The Dahan",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Moon,ir.Air],set:gn.Base,target:or.Land,range:2,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.673,.855],text:"Gather up to 2 <dahan>.<or>If target land has <town>/<city>, 1 <fear> for each <dahan>, to a maximum of 3 <fear>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"Gather",textArea:[.679,.719],text:"Gather up to 2 <dahan>.",[Pn.Now]:async()=>{await a.gatherUpTo(2,e.Dahan)}},{actionId:"Fear",textArea:[.758,.854],text:"1 <fear> for each <dahan>, to a maximum of 3 <fear>.",[Pn.Now]:async()=>{await a.fear(Math.min(a.numberOf(e.Dahan),3))},condition:()=>a.has(e.TownOrCity)}]})}}]},Ed={name:"Night Terrors",type:kn.Innate,speed:sr.Fast,set:gn.Base,target:or.Land,targetFilter:[dr.Invaders],range:0,generatesFear:!0,effects:[{text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)},threshold:{[ir.Moon]:1,[ir.Air]:1}},{text:"+1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)},threshold:{[ir.Moon]:2,[ir.Air]:1,[ir.Animal]:1}},{text:"+1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)},threshold:{[ir.Moon]:3,[ir.Air]:2,[ir.Animal]:1}}]},Od={name:"Predatory Nightmares",type:kn.Unique,speed:sr.Slow,energy:2,elements:[ir.Moon,ir.Fire,ir.Earth,ir.Animal],set:gn.Base,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Invaders],range:1,hasPushOrGather:!0,hasDamageInstructions:!0,effects:[{textArea:[.637,.677],text:"2 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(2)}},{textArea:[.679,.719],text:"Push up to 2 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(2,e.Dahan)}}]},kd=[ir.Sun,ir.Moon,ir.Fire,ir.Air,ir.Water,ir.Earth,ir.Plant,ir.Animal],Cd={name:"Spirits May Yet Dream",type:kn.Innate,speed:sr.Fast,set:gn.Base,target:or.Spirit,effects:[{text:"Turn any face-down Fear Card face-up. (It's earned/resolved normally, but players can see what's coming.)",[Pn.TargetSpirit]:async({$:e})=>{const a=await e.pickAFaceDownFearCard();if(null!=a){const t=await e.revealFearCardInDeck(a);null!==t&&await e.query({query:An.ClickToContinueCard,items:[t],actionIds:[t]})}},threshold:{[ir.Moon]:2,[ir.Air]:2}},{text:"Target Spirit gains an Element they have at least 1 of.",[Pn.TargetSpirit]:async({spirit:e})=>{const a=await e.gainElements({possiblyWithConvert:!0,elements:[...kd].filter((a=>e.hasElementsWithConvert({[a]:1})))});await e.convertElements(a);const t=Object.keys(a).find((e=>1===a[e]));void 0!==t&&1===e.elements[t]&&await e.convertElements({[t]:1})},threshold:{[ir.Moon]:3}}]},Dd={name:"A Year Of Perfect Stillness",type:kn.Unique,speed:sr.Fast,energy:3,elements:[ir.Sun,ir.Earth],set:gn.Base,target:or.Land,range:1,effects:[{textArea:[.719,.814],text:"Invaders skip all Actions in target land this turn.",[Pn.InTargetLand]:async({land:e})=>{await e.skipInvaderAction({all:!0})}}]},Bd={name:"Draw Of The Fruitful Earth",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Earth,ir.Plant,ir.Animal],set:gn.Base,target:or.Land,range:1,hasPushOrGather:!0,effects:[{textArea:[.722,.762],text:"Gather up to 2 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(2,e.Explorer)}},{textArea:[.766,.806],text:"Gather up to 2 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(2,e.Dahan)}}]},Ld={[dr.Beasts]:({$:e,land:a})=>a.has(e.Beasts),[dr.Blight]:({$:e,land:a})=>a.has(e.Blight),[dr.BlightAndInvaders]:({$:e,land:a})=>a.hasAllOf(e.Blight,e.Invader),[dr.City]:({$:e,land:a})=>a.has(e.City),[dr.Coastal]:({land:e})=>e.isCoastal,[dr.CoastalCity]:({$:e,land:a})=>a.isCoastal&&a.has(e.City),[dr.Dahan]:({$:e,land:a})=>a.has(e.Dahan),[dr.Deeps]:({$:e,land:a})=>a.has(e.Deeps),[dr.Disease]:({$:e,land:a})=>a.has(e.Disease),[dr.Incarna]:({$:e,land:a})=>a.has(e.Incarna),[dr.IncarnaAndDahan]:({$:e,land:a})=>a.hasAllOf(e.Incarna,e.Dahan),[dr.IncarnaBehemoth]:({$:e,land:a})=>a.has(e.IncarnaBehemoth),[dr.IncarnaLair]:({$:e,land:a})=>a.has(e.IncarnaLair),[dr.IncarnaRoots]:({$:e,land:a})=>a.has(e.IncarnaRoots),[dr.IncarnaVoice]:({$:e,land:a})=>a.has(e.IncarnaVoice),[dr.Inland]:({land:e})=>e.isInland,[dr.Invaders]:({land:e})=>e.hasInvaders,[dr.InvadersAndIncarnaRoots]:({$:e,land:a})=>a.hasAllOf(e.Invader,e.IncarnaRoots),[dr.Jungle]:({land:e})=>e.isJungle,[dr.JunglesOrWetlands]:({land:e})=>e.isJungleOrWetlands,[dr.Mountain]:({land:e})=>e.isMountains,[dr.MountainOrJungles]:({land:e})=>e.isMountainsOrJungles,[dr.NoInvaders]:({$:e,land:a})=>a.doesntHave(e.Invader),[dr.NonBlight]:({$:e,land:a})=>a.doesntHave(e.Blight),[dr.NonOceanLand]:({land:e})=>!e.isOcean,[dr.NotWetlands]:({land:e})=>!e.isWetlands,[dr.Quake]:({$:e,land:a})=>a.has(e.Quake),[dr.SacredSite]:({land:e,owner:a,helpers:t})=>e.hasSacredSiteOf(a,t),[dr.SacredSiteAndDahan]:({$:e,land:a,owner:t,helpers:n})=>a.hasSacredSiteOf(t,n)&&a.has(e.Dahan),[dr.Sands]:({land:e})=>e.isSands,[dr.Strife]:({land:e})=>e.hasStrife,[dr.TheEndlessDark]:({land:e})=>e.isTheEndlessDark,[dr.Town]:({$:e,land:a})=>a.has(e.Town),[dr.TownOrCity]:({$:e,land:a})=>a.has(e.TownOrCity),[dr.TwoBeasts]:({$:e,land:a})=>a.hasAtLeast(2,e.Beasts),[dr.TwoBeastsAndInvaders]:({$:e,land:a})=>a.hasAtLeast(2,e.Beasts)&&a.hasInvaders,[dr.TwoDahan]:({$:e,land:a})=>a.hasAtLeast(2,e.Dahan),[dr.WardTheShores]:({$:e,land:a,owner:t})=>2*(a.numberOf(e.Blight)+a.numberOf(e.TownOrCity))<=t.energy,[dr.Wetlands]:({land:e})=>e.isWetlands},Fd={[En.Minor]:{name:"Minor",text:"Minor Power",cardTypes:[kn.Minor]},[En.Major]:{name:"Major",text:"Major Power",cardTypes:[kn.Major]},[En.Unique]:{name:"Unique",text:"Unique Power",cardTypes:[kn.Unique]},[En.Innate]:{name:"Innate",text:"Innate Power",cardTypes:[kn.Innate]},[En.NonMinorCard]:{name:"Non-Minor",text:"non-Minor Power",cardTypes:[kn.Major,kn.Unique]},[En.NonMajorCard]:{name:"Non-Major",text:"non-Major Power",cardTypes:[kn.Minor,kn.Unique]},[En.NonUniqueCard]:{name:"Non-Unique",text:"non-Unique Power",cardTypes:[kn.Minor,kn.Major]},[En.AnyCard]:{name:"Any Card",text:"any Power Card",cardTypes:[kn.Minor,kn.Major,kn.Unique,kn.Scenario]},[En.Any]:{name:"Any",text:"any Power",cardTypes:[kn.Minor,kn.Major,kn.Unique,kn.Innate]}},Rd={[fr.Another]:({$:e,spirit:a,owner:t})=>a!==t||1===e.spiritCount,[fr.Yourself]:({spirit:e,owner:a})=>e===a};var Md,Nd;!function(e){e.InHand="InHand",e.PlayedFast="PlayedFast",e.PlayedSlow="PlayedSlow",e.ResolvedFast="ResolvedFast",e.ResolvedSlow="ResolvedSlow",e.Discarded="Discarded",e.Impending="Impending"}(Md||(Md={})),function(e){e.ADiversityOfSpirits="ADiversityOfSpirits",e.Blitz="Blitz",e.DahanInsurrection="DahanInsurrection",e.DespicableTheft="DespicableTheft",e.DestinyUnfold="DestinyUnfold",e.ElementalInvocation="ElementalInvocation",e.GuardTheIslesHeart="GuardTheIslesHeart",e.LargerSurges="LargerSurges",e.PowersLongForgotten="PowersLongForgotten",e.RitualsOfTerror="RitualsOfTerror",e.RitualsOfTheDestroyingFlame="RitualsOfTheDestroyingFlame",e.SecondWave="SecondWave",e.SurgesOfColonization="SurgesOfColonization",e.TheGreatRiver="TheGreatRiver",e.VariedTerrain="VariedTerrain",e.WardTheShores="WardTheShores"}(Nd||(Nd={}));var Wd=function(e,a,t,n){var r,i=arguments.length,s=i<3?a:null===n?n=Object.getOwnPropertyDescriptor(a,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,a,t,n);else for(var o=e.length-1;o>=0;o--)(r=e[o])&&(s=(i<3?r(s):i>3?r(a,t,s):r(a,t))||s);return i>3&&s&&Object.defineProperty(a,t,s),s};class $d{data;power;assisted=!1;impendingEnergy=0;status;$;blessed=!1;constructor(e,a,t){ed.makeObservable(this),this.$=e,this.power=a,this.data=dg[this.power],this.status=t}get availablePresenceForTargeting(){return this.owner.availablePresenceForTargeting}get costTime(){return this.$.sumEffects(Pn.PowerCostExtraTime,{power:this})}get costToPlay(){if(this.assisted)return 0;let e=this.data.energy||0;return e+=this.$.scenario===Nd.Blitz&&this.data.speed===sr.Fast?-1:0,e}get estimatedValueOfPower(){const e=[];for(const a of this.data.effects)if(a.threshold&&this.owner.hasElementsWithConvert(a.threshold)){if(a.instead){const t=this.data.effects.indexOf(a)-1,n=this.data.effects[t];e.includes(n)&&Vr(e,n)}e.push(a)}return e.map((e=>Math.max(...Object.values(e.threshold))))}get hasThresholds(){return this.data.effects.some((e=>void 0!==e.threshold))}get helpers(){return this.owner.extraPresenceAvailableForTargeting}get isBlessed(){return this.blessed}get isCardWithDamageAndDestroy(){return this.isA(En.AnyCard)&&(!!this.data.hasDamageInstructions||!!this.data.hasDestroyInstructions)}get isFast(){return this.status===Md.PlayedFast||this.status===Md.ResolvedFast}get isImpending(){return this.status===Md.Impending}get isInDiscard(){return this.status===Md.Discarded}get isInHand(){return this.status===Md.InHand}get isInPlay(){return[Md.PlayedFast,Md.PlayedSlow,Md.ResolvedFast,Md.ResolvedSlow].includes(this.status)}get isLowestCostOfPlayedCards(){return!this.owner.powers.filter((e=>e.isInPlay&&e.isA(En.AnyCard)&&!e.assisted)).some((e=>e.costToPlay<this.costToPlay))}get isPlayable(){return this.isInHand&&(this.costToPlay<=this.owner.energy||this.owner.canPlayCardsWithoutCost)&&this.data.type!==kn.Innate}get isResolved(){return this.status===Md.ResolvedFast||this.status===Md.ResolvedSlow}get isSlow(){return this.status===Md.PlayedSlow||this.status===Md.ResolvedSlow}get mayChangeSpeed(){return!this.$.someEffect(Pn.PreventChangeSpeedOfPower,{power:this})&&this.$.someEffect(Pn.MayChangeSpeedOfPower,{power:this})||void 0!==dg[this.power].mayBeSpeed&&dg[this.power].mayBeSpeed.condition({speed:this.isFast?sr.Slow:sr.Fast,spirit:this.owner})}get mayIgnoreRangeWhenTargetingLand(){return(e,a)=>this.$.someEffect(Pn.MayIgnoreRangeWhenTargetingLand,{power:this,land:e,afterTargeting:a})}get owner(){const e=this.$.spirits.find((e=>e.powers.includes(this)));return void 0!==e?e:this.$.spirits.find((e=>e.hasPower(this.power)))}get ownerHasEnoughElementsToCastPower(){if(!this.hasThresholds)return!0;let e;for(const a of this.data.effects)if(a.threshold&&!a.dontResolveAlone&&(void 0===e&&(e=this.$.landElements),this.owner.hasElementsWithConvert(a.threshold,this.data.target===or.Land?e:void 0)))return!0;return!1}get powerLink(){return this.data.type===kn.Innate?this.data.name:`<p>${this.power}</p>`}get serialized(){return this.power}get sourceFilter(){return this.targetingLandFilter(this.data.sourceFilter??[],this.owner,this.helpers)}get targetingLandFilter(){return(e,a,t)=>n=>0===e.length||e.some((e=>Ld[e]({land:n,$:this.$,owner:a,helpers:t})))}get validOriginSites(){return this.assisted?this.$.inLands():od.createCollection(this.$,this.availablePresenceForTargeting.map((e=>e.location)).filter((e=>this.sourceFilter(e))))}get validTargetSites(){return this.$.inTargetableLandsWhere((e=>this.targetingLandFilter(this.data.targetFilter??[],this.owner,this.helpers)(e)||this.$.someEffect(Pn.MayIgnoreTargetFilterWhenTargetingLand,{power:this})))}static createCollection(e,a){return new Ko(e,An.SelectPower,a)}async bless(){this.blessed=!0,await this.setStatus(this.data.speed===sr.Fast?Md.PlayedFast:Md.PlayedSlow)}async changeSpeedIfNeeded(e){if((this.status===Md.PlayedSlow||this.status===Md.ResolvedSlow)&&e===sr.Fast||(this.status===Md.PlayedFast||this.status===Md.ResolvedFast)&&e===sr.Slow){const a=this.owner,t=[];dg[this.power].mayBeSpeed?.condition({speed:e,spirit:this.owner})&&t.push({...dg[this.power].mayBeSpeed.effect,actionId:`ChangeSpeed${t.length}`,name:dg[this.power].name,card:this.power,highlightPowers:[this],players:[a],spirit:a});for(const a of this.$.effectsOfType(Pn.MayChangeSpeedOfPower).filter((e=>e[Pn.MayChangeSpeedOfPower]?.({power:this}))))t.push({actionId:`ChangeSpeed${t.length}`,text:a.text,[Pn.Now]:async()=>{await this.$.doEffect(a,Pn.ChangeSpeedOfPower,{power:this}),await this.$.doEffects(Pn.AfterChangingSpeed,{effect:a,power:this,speed:e})}});await this.$.doPowerAction(this.owner,(async()=>{await this.$.chooseBetween({name:`Change speed of ${dg[this.power].name}`,text:"There are multiple ways to change speed of this power.",autoPlayOneOption:!0,effects:t})}),this)}}async discard(){this.assisted?await this.owner.forgetPowerState(this,{canRegain:!1,silent:!0}):(await this.setStatus(Md.Discarded),await this.$.sendEvent({type:Tn.PowerCardDiscarded,powerType:this.power}),await this.didLeavePlay())}async forget(e={}){const a=await(this.owner?.forgetPowerState(this,e))??null;return a&&await a.didLeavePlay(),a}async fulfillsThreshold(e,a,t){return!(t===or.Land&&void 0!==e.targetLandThresholdCondition&&!e.targetLandThresholdCondition(a))&&(!(void 0!==e.powerOwnerThresholdCondition&&!e.powerOwnerThresholdCondition(this.owner))&&(void 0===e.threshold||!e.noConvertToThreshold&&!this.owner.didNotWantToReachThreshold.some((a=>{return t=a,n=e.threshold,!Object.keys(t).some((e=>void 0===n[e]||t[e]>n[e]));var t,n}))&&!!await this.owner.askToConvertElements(e.threshold,{optionalThreshold:!1})))}isA(e){return Fd[e].cardTypes.includes(this.data.type)}landsWhichCanBeShiftedIntoToEnableTarget(e){const{targetLocation:a,range:t}=e;let n=t;return null!==n&&void 0!==this.data.modifiesRangePerLand&&(n+=this.data.modifiesRangePerLand.condition({$:this.$,spirit:this.owner,land:a})?this.data.range:0),a.inThisAndAdjacentLands().where((e=>!this.validOriginSites.has(e)&&(e.hasOnePieceWhere((e=>this.availablePresenceForTargeting.includes(e)))&&(null===n||e.landsWithin(n,this.owner,{targetingLands:!0}).includes(a))&&this.validTargetSites.has(a)&&(this.data.sourceFilter?.includes(dr.SacredSite)&&e.hasPresenceOf(this.owner,this.helpers)||!this.data.sourceFilter?.includes(dr.SacredSite)&&!e.hasPresenceOf(this.owner,this.helpers)&&this.sourceFilter(e)))))}async makeFast(){this.status===Md.PlayedSlow?await this.setStatus(Md.PlayedFast):this.status===Md.ResolvedSlow&&await this.setStatus(Md.ResolvedFast)}async makeSlow(){this.status===Md.PlayedFast?await this.setStatus(Md.PlayedSlow):this.status===Md.ResolvedFast&&await this.setStatus(Md.ResolvedSlow)}async maximizedThresholdsForPower(e,a){const t=[];this.owner&&(this.owner.didNotWantToReachThreshold=[]);for(const n of this.data.effects)if(await this.fulfillsThreshold(n,a,e)){if(n.instead){const e=this.data.effects.indexOf(n)-1,a=this.data.effects[e];t.includes(a)&&Vr(t,a)}t.push(n)}else n.instead||t.push(n);return t}async payForPlay(e={}){const{payHalfRoundUp:a}=e;this.costToPlay>0?await this.owner.payEnergy(a?Math.ceil(this.costToPlay/2):this.costToPlay):this.costToPlay<0&&await this.owner.gainEnergy(-this.costToPlay)}async pickValidOriginTarget(){const e=this.validOriginSites;!this.assisted&&this.owner.mayShift&&void 0!==this.data.sourceFilter&&this.data.sourceFilter.includes(dr.SacredSite)&&e.addAll(this.$.inLandsWhere((a=>!e.has(a)&&a.inThisAndAdjacentLands().sum((e=>e.numberOfPresenceOf(this.owner,this.helpers)))>=2)).items);let a=null;return await e.autoPickOne((async e=>{a=e,await this.$.doEffects(Pn.AfterTargetingSource,{power:this,land:e})}),{text:"Pick origin.",noOptions:"No valid source lands."}),a}async play(e={}){if(this.isInPlay)return;const{payHalfRoundUp:a=!1,withoutPaying:t=!1,withoutUsingCardPlays:n=!1,withoutImpending:r=!1}=e;this.data.type===kn.Innate||this.blessed||this.assisted||n||(this.owner.cardsPlayedThisTurn.push(this),this.isCardWithDamageAndDestroy||(this.owner.usedCardPlaysForNonDamageAndDestroy+=this.owner.cardPlaysCostToPlayPowerCard));const{data:i,owner:s}=this;r||!await this.$.oneEffectActivates(Pn.AdjustPlayPower,{power:this})?(this.data.type!==kn.Innate&&await this.$.sendEvent({type:Tn.PowerCardPlayed,spirit:s,power:this}),await this.setPlayed(),i.type===kn.Innate||this.blessed||t||0===this.costToPlay||await this.payForPlay({payHalfRoundUp:a})):this.owner.cardsMadeImpendingThisTurn.push(this.power)}possibleToRepeatAtSpeed(e){return this.status===Md.ResolvedFast&&e===sr.Fast||this.status===Md.ResolvedSlow&&e===sr.Slow||this.status===Md.ResolvedFast&&e===sr.Slow&&this.mayChangeSpeed}range(e,a){const t=this.data.ranges,n=this.data.range;if(!t&&void 0===n)return null;const r=this.data.modifiesRange?.({spirit:this.owner,withConvert:!a})??0;return t?t[e]+r:n+r}async reclaim(){await this.setStatus(Md.InHand),await this.$.sendEvent({type:Tn.PowerCardReclaimed,spirit:this.owner,power:this}),await this.didLeavePlay(),this.$.spiritPhase&&(this.owner.hasReclaimedACardDuringSpiritPhase=!0)}async repeat(){await this.$.addEffectUntilEndOfActionTree({[Pn.ActionEnds]:async()=>{void 0!==this.owner&&await this.owner.targetAndResolvePower(this,!0)}})}async repeatInLocations(e,a=!0){const t=this.owner;void 0!==t&&(a?await this.$.addEffectUntilEndOfActionTree({[Pn.ActionEnds]:async()=>{await t.doPowerAction((async()=>{this.data.type===kn.Innate&&await t.possiblyDowngradeElements(this),await t.resolvePowerInLocations(this,e,!0)}),this)}}):await t.doPowerAction((async()=>{this.data.type===kn.Innate&&await t.possiblyDowngradeElements(this),await t.resolvePowerInLocations(this,e,!0)}),this))}async replay(e){await this.changeSpeedIfNeeded(e),await this.setStatus(this.status===Md.ResolvedFast?Md.PlayedFast:Md.PlayedSlow)}async setImpending(e){this.impendingEnergy=e,await this.setStatus(Md.Impending)}async setPlayed(){await this.$.oneEffectActivates(Pn.AdjustPowerSpeedOnPlay,{power:this})||await this.setStatus(this.data.speed===sr.Fast?Md.PlayedFast:Md.PlayedSlow)}async setResolved(){await this.setStatus(this.data.speed===sr.Fast?Md.ResolvedFast:Md.ResolvedSlow)}setStatus(e){return this.status=e,this.owner?.invalidatePowerElementCache(),Promise.resolve()}async timePasses(){this.blessed?await this.setPlayed():this.isInPlay&&(this.data.type===kn.Innate?await this.setStatus(Md.InHand):await this.discard())}toString(){return`${Ui[this.power]} [${Md[this.status]}]`}validLandTargets(e={}){const{ignorePowerModifiesRange:a=!1,origin:t,targetIndex:n=0,mustTargetAdjacent:r=!1}=e,i=this.validLandTargetsWithoutShift({ignorePowerModifiesRange:a,source:t,targetIndex:n,mustTargetAdjacent:r});if(this.owner.mayShift&&void 0===t){const e=this.$.inLandsWhere((e=>{if(i.has(e))return!1;return!this.landsWhichCanBeShiftedIntoToEnableTarget({targetLocation:e,range:this.range(n,a)}).isEmpty}));i.addAll(e.items)}return i}validLandTargetsWithoutShift(e={}){const{ignorePowerModifiesRange:a=!1,source:t,targetIndex:n=0,mustTargetAdjacent:r=!1}=e,i=new Set;if(this.assisted)return this.$.inLandsWhere((e=>!e.targetingIsPrevented));const s=this.validTargetSites,o=this.range(n,a),d=this.validOriginSites;for(const e of d.items)if(void 0===t||t===e){let a;if(a=r?e.adjacentLands:null===o?this.$.lands:e.landsWithin(o,this.owner,{targetingLands:!0}),a.forEach((e=>{i.add(e)})),void 0!==this.data.modifiesRangePerLand&&null!==o){const a=this.data.modifiesRangePerLand.range;e.landsWithin(o+a,this.owner,{targetingLands:!0}).filter((e=>this.data.modifiesRangePerLand.condition({$:this.$,spirit:this.owner,land:e}))).forEach((e=>{i.add(e)}))}}return this.$.inTargetableLandsWhere((e=>this.mayIgnoreRangeWhenTargetingLand(e,!1))).items.forEach((e=>{i.add(e)})),s.copy().where((e=>i.has(e)&&!e.targetingIsPrevented))}validOriginsGivenTargetLand(e){const a=new Set,t=this.owner,n=t.extraPresenceAvailableForTargeting,r=this.mayIgnoreRangeWhenTargetingLand(e,!0),i=this.data.modifiesRange?.({spirit:t,withConvert:!0})??0;return Dr([...t.lands,...n.map((e=>e.location))]).filter(this.targetingLandFilter(this.data.sourceFilter??[],t,n)).filter((a=>r||a.landsWithin(this.data.range+i,t,{targetingLands:!0}).some((a=>a===e)))).forEach((e=>{a.add(e)})),od.createCollection(this.$,Array.from(a))}validSpiritTargets(){return this.$.spiritsWhich(this.targetingSpiritFilter(this.data.targetFilter??[],this.owner))}get targetingSpiritFilter(){return(e,a)=>t=>{if(e.length>0&&!e.some((e=>Rd[e]({$:this.$,spirit:t,owner:a}))))return!1;if(this.$.config.archipelagos){const e=a.boardDistanceToSpirit(t);if(null===e||a.energy<e)return!1}return!0}}didLeavePlay(){return this.$.doEffects(Pn.AfterPowerLeavesPlay,{power:this})}}Wd([De],$d.prototype,"assisted",void 0),Wd([De],$d.prototype,"impendingEnergy",void 0),Wd([De],$d.prototype,"status",void 0),Wd([De],$d.prototype,"blessed",void 0);const Gd={name:"Earth Moves With Vigor And Might",type:kn.Innate,speed:sr.Fast,set:gn.FeatherAndFlame,target:or.Spirit,targetFilter:[fr.Yourself],effects:[{text:"You may play an additional Power Card by paying 1 Energy plus its cost. (It's elements apply for the rest of this Innate Power's thresholds.)",[Pn.TargetSpirit]:async({$:e,you:a})=>{const t=$d.createCollection(e,a.powers.filter((e=>e.isInHand&&e.costToPlay+1<=e.owner.energy&&e.data.type!==kn.Innate)));t.count>0&&await e.may({prompt:"Play an additional Power Card by paying 1 Energy plus its cost?"})&&await t.pickOne((async e=>{await e.play({withoutUsingCardPlays:!0}),await a.payEnergy(1)}))},threshold:{[ir.Plant]:1}},{text:"You do +1 Damage with each Damage-dealing Power you use this turn.",[Pn.TargetSpirit]:async({spirit:e,you:a})=>{await e.gainDamageBoost({amount:1,source:a})},threshold:{[ir.Sun]:1,[ir.Earth]:2}},{text:"You do +1 Damage with each Damage-dealing Power you use this turn.",[Pn.TargetSpirit]:async({spirit:e,you:a})=>{await e.gainDamageBoost({amount:1,source:a})},threshold:{[ir.Plant]:2,[ir.Earth]:3}},{text:"Gain a Power Card.",[Pn.TargetSpirit]:async({you:e})=>{await e.gainPowerCard()},threshold:{[ir.Sun]:1,[ir.Plant]:3}}]},Ud=async({$:e,maxCost:a,you:t,spirit:n})=>{let r=1;await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({icon:"Gift Of<br>Strength",spirit:t,players:[n]}),[Pn.MayRepeatPowercard]:({power:e,speed:t})=>r>0&&e.owner===n&&(e.costToPlay||0)<=a&&e.data.type!==kn.Innate&&e.possibleToRepeatAtSpeed(t),[Pn.RepeatPowerCard]:async({power:e,speed:a})=>{r-=1,await e.replay(a)}})},Hd={name:"Gift Of Strength",type:kn.Innate,speed:sr.Fast,set:gn.Base,target:or.Spirit,effects:[{text:"Once this turn, Target Spirit may Repeat 1 Power Card with Energy cost of 1 or less.",[Pn.TargetSpirit]:async({$:e,spirit:a,you:t})=>{await Ud({$:e,you:t,spirit:a,maxCost:1})},threshold:{[ir.Sun]:1,[ir.Earth]:2,[ir.Plant]:2}},{instead:!0,text:"Instead, the Energy cost limit is 3 or less.",[Pn.TargetSpirit]:async({$:e,spirit:a,you:t})=>{await Ud({$:e,you:t,spirit:a,maxCost:3})},threshold:{[ir.Sun]:2,[ir.Earth]:3,[ir.Plant]:2}},{instead:!0,text:"Instead, the Energy cost limit is 6 or less.",[Pn.TargetSpirit]:async({$:e,spirit:a,you:t})=>(await Ud({$:e,you:t,spirit:a,maxCost:6}),Promise.resolve()),threshold:{[ir.Sun]:2,[ir.Earth]:4,[ir.Plant]:3}}]},qd={name:"Guard The Healing Land",type:kn.Unique,speed:sr.Fast,energy:3,elements:[ir.Water,ir.Earth,ir.Plant],set:gn.Base,target:or.Land,sourceFilter:[dr.SacredSite],range:1,blightWhiteListedPower:!0,effects:[{textArea:[.722,.762],text:"Remove 1 <blight>.",[Pn.InTargetLand]:async({land:e})=>{await e.removeBlight()}},{textArea:[.768,.808],text:"Defend 4.",[Pn.InTargetLand]:async({land:e})=>{e.isLand&&await e.defend(4)}}]},jd={name:"Imbue With Nourishing Vitality",type:kn.Innate,speed:sr.Fast,set:gn.NatureIncarnate,target:or.Land,hasPushOrGather:!0,range:1,sourceFilter:[dr.SacredSite],targetFilter:[dr.NonBlight],effects:[{textArea:[.568,.645],text:"Gather up to 1 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(1,e.Dahan)},threshold:{[ir.Water]:1,[ir.Plant]:1}},{textArea:[.668,.745],text:"Add 1 <vitality>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Vitality)},threshold:{[ir.Water]:1,[ir.Plant]:2}},{textArea:[.747,.889],text:"Each <dahan> has +2 Health while in target land. If target land has at least 2 <dahan>, Add 1 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===a?"Each <dahan> has +2 Health while in target land.":void 0,[Pn.AdjustHealth]:({piece:t})=>t.location===a&&t.isA(e.Dahan)?2:0}),a.hasAtLeast(2,e.Dahan)&&await a.add(1,e.Dahan)},threshold:{[ir.Water]:1,[ir.Earth]:1,[ir.Plant]:2}}]},_d={name:"Rituals Of Destruction",type:kn.Unique,speed:sr.Slow,energy:3,elements:[ir.Sun,ir.Moon,ir.Fire,ir.Earth,ir.Plant],set:gn.Base,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Dahan],range:1,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.68,.72],text:"2 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(2)}},{textArea:[.761,.855],text:"If target land has at least 3 <dahan>, +3 Damage and 2 <fear>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.hasAtLeast(3,e.Dahan)&&(await a.damage(3),await a.fear(2))}}]},Vd={name:"All-Enveloping Green",type:kn.Innate,speed:sr.Fast,set:gn.Base,target:or.Land,sourceFilter:[dr.SacredSite],range:1,blightWhiteListedPower:!0,effects:[{text:"Defend 2.",[Pn.InTargetLand]:async({land:e})=>{e.isLand&&await e.defend(2)},threshold:{[ir.Water]:1,[ir.Plant]:3}},{instead:!0,text:"Instead, Defend 4.",[Pn.InTargetLand]:async({land:e})=>{e.isLand&&await e.defend(4)},threshold:{[ir.Water]:2,[ir.Plant]:4}},{text:"Also, remove 1 <blight>.",[Pn.InTargetLand]:async({land:e})=>{await e.removeBlight()},threshold:{[ir.Water]:3,[ir.Earth]:1,[ir.Plant]:5}}]},Jd={name:"Belligerent And Aggressive Crops",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Sun,ir.Fire,ir.Plant],set:gn.NatureIncarnate,target:or.Land,range:2,sourceFilter:[dr.SacredSite],targetFilter:[dr.TownOrCity],generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.694,.735],text:"Add 1 <wilds>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Wilds)}},{textArea:[.758,.799],text:"1 Damage, to <town>/<city> only.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(1,e.TownOrCity)}},{textArea:[.817,.913],text:"If there are any adjacent <wilds>:<br>1 <fear>. 1 Damage, to <town>/<city> only.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.hasAdjacentLandWithPiece(e.Wilds)&&(await a.fear(1),await a.damage(1,e.TownOrCity))}}]},zd={name:"Creepers Tear Into Mortar",type:kn.Innate,speed:sr.Slow,set:gn.Base,target:or.Land,range:0,hasDamageInstructions:!0,effects:[{text:"1 Damage to 1 <town>/<city>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(1,e.TownOrCity,{maxTargets:1})},threshold:{[ir.Moon]:1,[ir.Plant]:2}},{text:"Repeat this Power.",[Pn.InTargetLand]:async({power:e,isRepeat:a})=>{a||await e.repeat()},threshold:{[ir.Moon]:2,[ir.Plant]:3}},{text:"Repeat this Power again.",[Pn.InTargetLand]:async({power:e,isRepeat:a})=>{a||await e.repeat()},threshold:{[ir.Moon]:3,[ir.Plant]:4}}]},Yd={name:"Fields Choked With Growth",type:kn.Unique,speed:sr.Slow,energy:0,elements:[ir.Sun,ir.Water,ir.Plant],set:gn.Base,target:or.Land,range:1,hasPushOrGather:!0,effects:[{textArea:[.696,.837],text:"Push 1 <town>.<or>Push 3 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"PushTown",textArea:[.703,.743],text:"Push 1 <town>.",[Pn.Now]:async()=>{await a.pushOne(e.Town)}},{actionId:"PushDahan",textArea:[.789,.829],text:"Push 3 <dahan>.",[Pn.Now]:async()=>{await a.push({amount:3,pieces:e.Dahan})}}]})}}]},Kd={name:"Gift Of Proliferation",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Moon,ir.Plant],set:gn.Base,target:or.Spirit,targetFilter:[fr.Another],effects:[{textArea:[.72,.817],text:"Target Spirit adds 1 <presence> up to <range-1> from their <presence>.",[Pn.TargetSpirit]:async({spirit:e})=>{await e.addPresenceInRange(1)}}]},Qd={name:"Impenetrable Tangles Of Greenery",type:kn.Innate,speed:sr.Fast,set:gn.NatureIncarnate,target:or.Land,hasPushOrGather:!0,range:0,effects:[{textArea:[.51,.563],text:"Add 1 <wilds>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Wilds)},threshold:{[ir.Sun]:1,[ir.Plant]:2}},{textArea:[.626,.679],text:"Push 1 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushOne(e.Explorer)},threshold:{[ir.Sun]:2,[ir.Plant]:3}},{textArea:[.739,.792],text:"Isolate target land.",[Pn.InTargetLand]:async({land:e})=>{await e.isolate()},threshold:{[ir.Sun]:2,[ir.Plant]:4}},{textArea:[.859,.912],text:"Downgrade 1 <city>. Add 1 <wilds>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.downgrade({pieces:e.City}),await a.add(1,e.Wilds)},threshold:{[ir.Sun]:3,[ir.Plant]:5}}]},Xd={name:"Overgrow In ANight",type:kn.Unique,speed:sr.Fast,energy:2,elements:[ir.Moon,ir.Plant],set:gn.Base,target:or.Land,range:1,effects:[{textArea:[.676,.857],text:"Add 1 <presence>.<or>If target land has your <presence> and Invaders, 3 <fear>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await e.chooseBetween({effects:[{actionId:"AddPresence",textArea:[.679,.719],text:"Add 1 <presence>.",[Pn.Now]:async()=>{await t.addPresence(a)}},{actionId:"Fear",textArea:[.762,.854],text:"If target land has your <presence> and Invaders, 3 <fear>.",[Pn.Now]:async()=>{await t.fear(3)},condition:()=>t.hasPresenceOf(a)&&t.hasInvaders}]})}}]},Zd={name:"Stem The Flow Of Fresh Water",type:kn.Unique,speed:sr.Slow,energy:0,elements:[ir.Water,ir.Plant],set:gn.Base,target:or.Land,sourceFilter:[dr.SacredSite],range:1,hasDamageInstructions:!0,effects:[{textArea:[.65,.851],text:"1 Damage to 1 <town>/<city>.<br><br>If target land is <mountains-sands>, instead, 1 Damage to each <town>/<city>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.isMountainsOrSands?await e.addSubEffect({textArea:[.739,.855],text:"1 Damage to each <town>/<city>.",[Pn.Now]:async()=>{await a.damageEach(1,e.TownOrCity)}}):await e.addSubEffect({textArea:[.661,.701],text:"1 Damage to 1 <town>/<city>.",[Pn.Now]:async()=>{await a.damage(1,e.TownOrCity,{maxTargets:1})}})}}]},el={name:"Unbelievable Regrowth",type:kn.Innate,speed:sr.Slow,set:gn.NatureIncarnate,target:or.Land,range:1,targetFilter:[dr.JunglesOrWetlands],effects:[{textArea:[.514,.567],text:"This Power may target any terrain.",[Pn.InTargetLand]:async({you:e,land:a})=>{a.isJungleOrWetlands||await e.convertElements({[ir.Water]:2,[ir.Plant]:3})}},{text:"This Power may target any terrain.",[Pn.InTargetLand]:()=>Promise.resolve(),threshold:{[ir.Water]:2,[ir.Plant]:3},noConvertToThreshold:!0,dontResolveAlone:!0},{textArea:[.626,.679],text:"Add 1 <broken>.",[Pn.InTargetLand]:async({you:e,land:a})=>{await a.addPresence(e,{destroyed:!0})},threshold:{[ir.Water]:1,[ir.Plant]:3}},{textArea:[.739,.792],text:"Add 1 <broken>.",[Pn.InTargetLand]:async({you:e,land:a})=>{await a.addPresence(e,{destroyed:!0})},threshold:{[ir.Water]:2,[ir.Plant]:4}},{textArea:[.863,.916],text:"Add 1 <broken> to an adjacent land.",[Pn.InTargetLand]:async({you:e,land:a})=>{await a.inAdjacentLands().pickOne((async a=>{await a.addPresence(e,{destroyed:!0})}))},threshold:{[ir.Water]:3,[ir.Plant]:5}}]},al={name:"Exaltation Of The Storm-Wind",type:kn.Innate,speed:sr.Fast,set:gn.JaggedEarth,target:or.Spirit,targetFilter:[fr.Another],hasPushOrGather:!0,effects:[{textArea:[.389,.513],text:"You and target Spirit may each make one of your non-Major <slow> Powers <fast>.",[Pn.TargetSpirit]:async({$:e,...a})=>{await e.clickToContinue();for(const e of[a.spirit,a.you])await e.gainMakeFastBuff({filter:e=>e.data.type!==kn.Major})},threshold:{[ir.Air]:1}},{textArea:[.526,.651],text:"You and target Spirit each gain <range+1> with all your Powers this turn.",[Pn.TargetSpirit]:async({$:e,you:a,spirit:t})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({icon:"<range+1>",spirit:a,players:[t,a]}),[Pn.ExtraRange]:e=>(e.spirit===t?1:0)+(e.spirit===a?1:0)})},threshold:{[ir.Air]:3}},{textArea:[.661,.796],text:"You and target Spirit may each Push up to 2 <explorer> from one of your lands.",[Pn.TargetSpirit]:async({$:e,you:a,spirit:t})=>{for(const n of[a,t])await n.inLandsWith(e.Explorer).optionallyPickOne((async a=>{await a.pushUpTo(2,e.Explorer)}),{players:[n],noOptions:`No <explorer> in lands of ${n.nameLink}.`})},threshold:{[ir.Air]:4,[ir.Water]:1}},{textArea:[.81,.887],text:"Repeat this Power.",[Pn.TargetSpirit]:async({power:e,isRepeat:a})=>{a||await e.repeat()},threshold:{[ir.Air]:5,[ir.Water]:2}}]},tl={name:"Gift Of The Sparking Sky",type:kn.Innate,speed:sr.Fast,set:gn.NatureIncarnate,target:or.Spirit,hasDamageInstructions:!0,effects:[{text:"Once this turn, after target Spirit uses a Power that targets a land, they may do 1 Damage to each Invader in that land. (This is their Action and get all benefits and penalties that apply to their Powers.).",textArea:[.259,.505],[Pn.TargetSpirit]:async({$:e,spirit:a,...t})=>{const n=De.box(!1),r={triggerId:e.nextTriggerId(),[Pn.Now]:async({action:r})=>{const i=r.parentData.targetLands.filter((e=>e.exists));i.length>0&&await e.may({highlightLocations:i,prompt:`Do 1 Damage to each Invader in ${1===i.length?"this land":"in one of these lands"}?`})&&(n.set(!0),await od.createCollection(e,r.parentData.targetLands).pickOne((async e=>{await a.doPowerAction((async()=>{await e.damageEach(1)}),t.power)}),{autoPlayOneOption:!0}))}};await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({icon:`+1<damage><br>${n.get()?"1":"0"} / 1`,players:[a]}),[Pn.AfterTargetingLands]:async i=>{i.power.owner!==a||n.get()||(e.action.data.targetLands=i.lands,await e.addTrigger(r,t.effect,t.action))}})},threshold:{[ir.Sun]:2,[ir.Fire]:5,[ir.Air]:3}},{textArea:[.545,.599],text:"Target Spirit gains a Minor Power.",[Pn.TargetSpirit]:async({spirit:e})=>{await e.gainPowerCard({powerType:kn.Minor})},threshold:{[ir.Fire]:2,[ir.Air]:2}},{textArea:[.63,.835],text:"Target Spirit may play a Power Card by paying its cost. (If you target yourself, its Elements arrive too late to apply to prior thresholds of this Power.).",[Pn.TargetSpirit]:async({spirit:e})=>{await e.playAPowerCardByPayingItsCost()},threshold:{[ir.Sun]:1,[ir.Fire]:3,[ir.Air]:2}}]},nl={name:"Harbingers of the Lightning",type:kn.Unique,speed:sr.Slow,energy:0,elements:[ir.Fire,ir.Air],set:gn.Base,target:or.Land,range:1,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.669,.86],text:"Push up to 2 <dahan>.<br><br>1 <fear> if you pushed any <dahan> into a land with <town>/<city>.",[Pn.InTargetLand]:async({$:e,land:a})=>{(await a.pushUpTo(2,e.Dahan)).some((({destination:a})=>a.has(e.TownOrCity)))&&await a.fear(1)}}]},rl={name:"Lightnings Boon",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Fire,ir.Air],set:gn.Base,target:or.Spirit,effects:[{textArea:[.709,.847],text:"Target Spirit may use up to 2 <slow> Powers as if they were <fast> Powers this turn.",[Pn.TargetSpirit]:async({spirit:e})=>{await e.gainMakeFastBuff({amount:2})}}]},il={name:"Lightning-Torn Skies Incite Pandemonium",type:kn.Innate,speed:sr.Slow,set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Invaders],range:1,generatesFear:!0,effects:[{textArea:[.413,.49],effects:[{text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{text:"Add 1 <strife>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Strife)}}],threshold:{[ir.Fire]:3,[ir.Air]:2}},{textArea:[.496,.573],effects:[{text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{text:"Add 1 <strife>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Strife)}}],threshold:{[ir.Fire]:4,[ir.Air]:3}},{textArea:[.6,.677],effects:[{text:"3 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(3)}},{text:"Add 1 <strife>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Strife)}}],threshold:{[ir.Fire]:5,[ir.Air]:4,[ir.Moon]:1}},{textArea:[.699,.776],effects:[{text:"4 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(4)}},{text:"Add 1 <strife>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Strife)}}],threshold:{[ir.Fire]:5,[ir.Air]:5,[ir.Moon]:2}}]},sl={name:"Raging Storm",type:kn.Unique,speed:sr.Slow,energy:3,elements:[ir.Fire,ir.Air,ir.Water],set:gn.Base,target:or.Land,range:1,hasDamageInstructions:!0,effects:[{textArea:[.755,.795],text:"1 Damage to each Invader.",[Pn.InTargetLand]:async({land:e})=>{await e.damageEach(1)}}]},ol={name:"Shatter Homesteads",type:kn.Unique,speed:sr.Slow,energy:2,elements:[ir.Fire,ir.Air],set:gn.Base,sourceFilter:[dr.SacredSite],target:or.Land,range:2,generatesFear:!0,hasDestroyInstructions:!0,effects:[{textArea:[.722,.762],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.766,.806],text:"Destroy 1 <town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.destroyOne(e.Town)}}]},dl={name:"Smite The Land With Fulmination",type:kn.Unique,speed:sr.Slow,energy:2,elements:[ir.Sun,ir.Fire,ir.Air],set:gn.NatureIncarnate,target:or.Land,range:1,hasDamageInstructions:!0,effects:[{textArea:[.739,.78],text:"1 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(1)}},{textArea:[.803,.844],text:"Add 1 <badlands>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Badlands)}}]},ll={name:"Thundering Destruction",type:kn.Innate,speed:sr.Slow,set:gn.Base,target:or.Land,sourceFilter:[dr.SacredSite],range:1,hasDestroyInstructions:!0,effects:[{text:"Destroy 1 <town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.destroyOne(e.Town)},threshold:{[ir.Fire]:3,[ir.Air]:2}},{instead:!0,text:"Destroy 1 <town>/<city>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{let n=1;a.hasElements({[ir.Fire]:5,[ir.Air]:5,[ir.Water]:2})?n=3:a.hasElements({[ir.Fire]:5,[ir.Air]:4,[ir.Water]:1})&&(n=2),await e.addSubEffect({text:`Destroy ${n} <town>/<city>.`,[Pn.Now]:async()=>{await t.destroyUpTo(n,e.TownOrCity)}})},threshold:{[ir.Fire]:4,[ir.Air]:3}},{text:"Also, destroy 1 <town>/<city>.",threshold:{[ir.Fire]:5,[ir.Air]:4,[ir.Water]:1}},{text:"Also, destroy 1 <town>/<city>.",threshold:{[ir.Fire]:5,[ir.Air]:5,[ir.Water]:2}}]},cl={name:"Call Of The Deeps",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Moon,ir.Air,ir.Water],set:gn.Base,target:or.Land,targetFilter:[dr.Coastal],range:0,hasPushOrGather:!0,effects:[{textArea:[.679,.719],text:"Gather 1 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherOne(e.Explorer)}},{textArea:[.766,.857],text:"If target land is the Ocean, you may Gather another <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.isOcean&&await a.mayGather(e.Explorer)}}]},hl={name:"Grasping Tide",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Moon,ir.Water],set:gn.Base,target:or.Land,targetFilter:[dr.Coastal],range:1,generatesFear:!0,effects:[{textArea:[.722,.762],text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.768,.808],text:"Defend 4.",[Pn.InTargetLand]:async({land:e})=>{await e.defend(4)}}]},ul={name:"Ocean Breaks The Shore",type:kn.Innate,speed:sr.Slow,set:gn.Base,target:or.Land,targetFilter:[dr.Coastal],range:0,effects:[{text:"Drown 1 <town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.drown({amount:1,pieces:e.Town})},threshold:{[ir.Water]:2,[ir.Earth]:1}},{instead:!0,text:"You may instead Drown 1 <city>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{const n=a.hasElements({[ir.Water]:4,[ir.Earth]:3})?2:1;await e.addSubEffect({text:`Drown ${n} <city>.`,[Pn.Now]:async()=>{await t.drown({amount:n,pieces:e.TownOrCity})}})},threshold:{[ir.Water]:3,[ir.Earth]:2}},{text:"Also, Drown 1 <town>/<city>",threshold:{[ir.Water]:4,[ir.Earth]:3}}]},gl={name:"Pound Ships To Splinters",type:kn.Innate,speed:sr.Fast,set:gn.Base,target:or.Land,targetFilter:[dr.Coastal],range:0,generatesFear:!0,effects:[{text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)},threshold:{[ir.Moon]:1,[ir.Air]:1,[ir.Water]:2}},{text:"+1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)},threshold:{[ir.Moon]:2,[ir.Air]:1,[ir.Water]:3}},{text:"+2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)},threshold:{[ir.Moon]:3,[ir.Air]:2,[ir.Water]:4}}]},fl={name:"Reclaimed By The Deeps",type:kn.Innate,speed:sr.Slow,set:gn.NatureIncarnate,target:or.Land,range:1,targetFilter:[dr.Deeps],hasPushOrGather:!0,hasDamageInstructions:!0,effects:[{textArea:[.279,.341],text:"1 Damage per <deeps>, to <town>/<city> only.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(a.numberOf(e.Deeps),e.TownOrCity)},threshold:{[ir.Water]:2}},{text:"If at least 3 <deeps> and no <town>/<city> are present:<br>Drown all <explorer>/<dahan>.<br>Push all but 2 <deeps>.<br>Target land permanently becomes part of the Ocean on its board. Flip all remaining <deeps>; they are reminder markers for the expanded Ocean.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.hasAtLeast(3,e.Deeps)&&a.doesntHave(e.TownOrCity)&&await e.addSubEffect({effects:[{textArea:[.381,.568],text:"If at least 3 <deeps> and no <town>/<city> are present:<br>Drown all <explorer>/<dahan>.",[Pn.Now]:async()=>{await a.drown({quantifier:ur.All,pieces:e.ExplorerOrDahan})}},{textArea:[.5,.562],text:"Push all but 2 <deeps>.",[Pn.Now]:async()=>{await a.push({amount:a.numberOf(e.Deeps)-2,pieces:e.Deeps}),await a.remove({quantifier:ur.All,pieces:e.Deeps,removement:Wn.Silent})}},{textArea:[.555,.797],text:"Target land permanently becomes part of the Ocean on its board. Flip all remaining <deeps>; they are reminder markers for the expanded Ocean.",[Pn.Now]:async()=>{if(!a.isOcean){const t=a.board.ocean,n=a.adjacentLocations.filter((e=>!t.isAdjacentTo(e)&&t!==e)).map((e=>({land1:t,land2:e})));await a.move({quantifier:ur.All,pieces:e.AllPieces,movement:Mr.Relocate,locations:{target:zn.ToThisLocation,location:t}}),a.exists=!1,await e.addSubEffect({[Pn.Flooded]:e=>e.location===a,[Pn.ExtraAdjacency]:()=>n}),e.setupAdjacencies()}}}]})},threshold:{[ir.Water]:4,[ir.Earth]:2}},{textArea:[.802,.929],text:"Repeat this Power in target land or in a land with your <presence>.",[Pn.InTargetLand]:async({land:e,you:a,isRepeat:t,power:n})=>{if(!t){const t=a.inLands();t.has(e)||t.add(e),await t.pickOne((async e=>{await n.repeatInLocations([e])}))}},threshold:{[ir.Moon]:2,[ir.Water]:3}}]},yl={name:"Swallow The Land-Dwellers",type:kn.Unique,speed:sr.Slow,energy:0,elements:[ir.Water,ir.Earth],set:gn.Base,target:or.Land,targetFilter:[dr.Coastal],range:0,effects:[{textArea:[.756,.796],text:"Drown 1 <explorer>, 1 <town> and 1 <dahan>",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.drown({pieces:e.Explorer}),await a.drown({pieces:e.Town}),await a.drown({pieces:e.Dahan})}}]},pl={name:"Tidal Boon",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Moon,ir.Water,ir.Earth],set:gn.Base,target:or.Spirit,targetFilter:[fr.Another],hasPushOrGather:!0,effects:[{textArea:[.615,.927],text:"Target Spirit gains 2 Energy and may Push 1 <town> and up to 2 <dahan> from one of their lands.<br><br>If <dahan> are pushed to your Ocean, you may move them to any Coastal land instead of Drowning them.",[Pn.TargetSpirit]:async({$:e,spirit:a,you:t})=>{await a.gainEnergy(2),await a.inLands().pickOne((async a=>{await a.mayPush(e.Town);const n=(await a.pushUpTo(2,e.Dahan)).filter((({destination:e})=>e.isOcean&&e.hasPresenceOf(t)));n.length>0&&await e.may({textArea:[.781,.926],text:"If <dahan> are pushed to your Ocean, you may move them to any Coastal land instead of Drowning them.",prompt:"Move the <dahan>?"})&&await e.inLandsWhere((e=>e.isCoastal)).pickOne((async e=>{for(const{piece:a}of n)await a.move({locations:{target:zn.ToThisLocation,location:e}})}))}))}}]},wl={name:"Water Eats Away The Deep Roots Of Earth",type:kn.Innate,speed:sr.Slow,set:gn.NatureIncarnate,target:or.Land,range:1,targetFilter:[dr.Coastal],effects:[{textArea:[.296,.358],text:"Add 1 <deeps>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Deeps)},threshold:{[ir.Water]:2}},{textArea:[.398,.529],text:"Add 1 <deeps> to a different Coastal land (on any board).",[Pn.InTargetLand]:async({$:e,land:a,action:t})=>{await e.inCoastalLands().where((e=>e!==a)).pickOne((async a=>{t.data.secondLand=a,await a.add(1,e.Deeps)}))},threshold:{[ir.Water]:3}},{textArea:[.551,.755],text:"Add 1 <deeps> to a third Coastal land (on any board).",[Pn.InTargetLand]:async({$:e,land:a,action:t})=>{await e.inCoastalLands().where((e=>e!==a&&e!==t.data.secondLand)).pickOne((async a=>{t.data.secondLand=a,await a.add(1,e.Deeps)}))},threshold:{[ir.Moon]:3,[ir.Water]:4,[ir.Earth]:3}}]},ml={name:"Boon Of Sunshines Promise",type:kn.Innate,speed:sr.Fast,set:gn.Base,target:or.Spirit,targetFilter:[fr.Another],effects:[{text:"Target Spirit gains Energy equal to 1 less than the highest uncovered number on your Energy track.",[Pn.TargetSpirit]:async({you:e,spirit:a})=>{await a.gainEnergy(Math.max(e.trackEnergy-1,0))},threshold:{[ir.Sun]:2}},{text:"You also gain that much Energy.",[Pn.TargetSpirit]:async({you:e})=>{await e.gainEnergy(Math.max(e.trackEnergy-1,0))},threshold:{[ir.Sun]:3,[ir.Water]:3}},{text:"Target Spirit may remove 1 <blight> from any one of their lands with <dahan>.",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{await a.inLandsWithAllOf(e.Dahan,e.Blight).optionallyPickOne((async e=>{await e.removeBlight()}),{noOptions:`${a.nameLink} has no lands with <blight> and <dahan>.`})},threshold:{[ir.Sun]:4,[ir.Water]:2}}]},vl={name:"Boon Of Vigor",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Sun,ir.Water,ir.Plant],set:gn.Base,target:or.Spirit,effects:[{textArea:[.631,.904],text:"If you target yourself, gain 1 Energy.<br><br>If you target another Spirit, they gain 1 Energy per Power Card they played this turn.",[Pn.TargetSpirit]:async({you:e,spirit:a})=>{a===e?await e.gainEnergy(1):await a.gainEnergy(a.powerCardsInPlayNotBlessed.length)}}]},xl={name:"Call To A Sunlit Haven",type:kn.Innate,speed:sr.Fast,set:gn.NatureIncarnate,target:or.Land,hasPushOrGather:!0,range:0,sourceFilter:[dr.SacredSite],effects:[{textArea:[.228,.356],text:"E is the highest uncovered number on your Energy track.",[Pn.InTargetLand]:({you:e,action:a})=>(a.data.energy=e.trackEnergy,Promise.resolve())},{textArea:[.378,.432],text:"Defend E.",[Pn.InTargetLand]:async({land:e,action:a})=>{await e.defend(a.data.energy)},threshold:{[ir.Sun]:1,[ir.Water]:1}},{textArea:[.458,.572],text:"In an adjacent land with your <presence>, Defend E.",[Pn.InTargetLand]:async({you:e,land:a,action:t})=>{await a.inAdjacentLandsWhere((a=>a.hasPresenceOf(e))).pickOne((async e=>{await e.defend(t.data.energy)}))},threshold:{[ir.Sun]:1,[ir.Water]:2,[ir.Earth]:1}},{textArea:[.594,.766],text:"In target land or an adjacent land with your <presence>, Gather up to E <dahan>.",[Pn.InTargetLand]:async({$:e,land:a,you:t,action:n})=>{await a.inThisAndAdjacentLands().where((e=>e===a||e.hasPresenceOf(t))).pickOne((async a=>{await a.gatherUpTo(n.data.energy,e.Dahan)}))},threshold:{[ir.Sun]:1,[ir.Animal]:1}},{textArea:[.781,.898],text:"Remove up to E Health worth of Invaders.",[Pn.InTargetLand]:async({land:e,action:a})=>{await e.removeInvadersWorthOfHealthUpTo(a.data.energy)},threshold:{[ir.Sun]:1,[ir.Water]:1,[ir.Plant]:2}}]},bl={name:"Flash Floods",type:kn.Unique,speed:sr.Fast,energy:2,elements:[ir.Sun,ir.Water],set:gn.Base,target:or.Land,range:1,hasDamageInstructions:!0,effects:[{textArea:[.679,.719],text:"1 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(1)}},{textArea:[.762,.854],text:"If target land is Coastal, +1 Damage.",[Pn.InTargetLand]:async({land:e})=>{e.isCoastal&&await e.damage(1)}}]},Tl={name:"Massive Flooding",type:kn.Innate,speed:sr.Slow,set:gn.Base,target:or.Land,sourceFilter:[dr.SacredSite],range:1,hasPushOrGather:!0,hasDamageInstructions:!0,effects:[{text:"Push 1 <explorer>/<town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushOne(e.ExplorerOrTown)},threshold:{[ir.Sun]:1,[ir.Water]:2}},{instead:!0,text:"Instead, 2 Damage. Push up to 3 <explorer>/<town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(2),await a.pushUpTo(3,e.ExplorerOrTown)},threshold:{[ir.Sun]:2,[ir.Water]:3}},{instead:!0,text:"Instead, 2 Damage to each Invader.",[Pn.InTargetLand]:async({land:e})=>{await e.damageEach(2)},threshold:{[ir.Sun]:3,[ir.Water]:4,[ir.Earth]:1}}]},Al={name:"River's Bounty",type:kn.Unique,speed:sr.Slow,energy:0,elements:[ir.Sun,ir.Water,ir.Animal],set:gn.Base,target:or.Land,range:0,hasPushOrGather:!0,effects:[{textArea:[.679,.719],text:"Gather up to 2 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(2,e.Dahan)}},{textArea:[.756,.854],text:"If there are now at least 2 <dahan>, add 1 <dahan> and gain 1 Energy.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{t.hasAtLeast(2,e.Dahan)&&(await t.add(1,e.Dahan),await a.gainEnergy(1))}}]},Il={name:"Wash Away",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Water,ir.Earth],set:gn.Base,target:or.Land,range:1,hasPushOrGather:!0,effects:[{textArea:[.75,.79],text:"Push up to 3 <explorer>/<town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(3,e.ExplorerOrTown)}}]},Pl={name:"Concealing Shadows",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Moon,ir.Air],set:gn.Base,target:or.Land,range:0,effects:[{textArea:[.71,.75],text:"1 fear.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.748,.84],text:"<dahan> take no Damage from Ravaging Invaders this turn.",[Pn.InTargetLand]:async({$:e,land:a,effect:t})=>{await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===a?t.text:void 0,[Pn.PreventDamagingPiece]:({piece:t})=>Promise.resolve(t.isA(e.Dahan)&&t.location===a&&e.action.type===qo.NormalInvaderAction)})}}]},Sl={name:"Crops Wither And Fade",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Moon,ir.Fire,ir.Plant],set:gn.Base,target:or.Land,range:0,effects:[{textArea:[.667,.707],text:"2 fear.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.745,.894],text:"Replace 1 <town> with 1 <explorer>.<or>Replace 1 <city> with 1 <town>.",[Pn.InTargetLand]:({$:e,land:a})=>e.chooseBetween({effects:[{actionId:"ReplaceTown",textArea:[.755,.795],text:"Replace 1 <town> with 1 <explorer>.",[Pn.Now]:async()=>{await a.replaceOne({pieces:e.Town,withPiece:Ln.Explorer})}},{actionId:"ReplaceCity",textArea:[.842,.882],text:"Replace 1 <city> with 1 <town>.",[Pn.Now]:async()=>{await a.replaceOne({pieces:e.City,withPiece:Ln.Town})}}]})}]},El={name:"Darkness Swallows The Unwary",type:kn.Innate,speed:sr.Fast,set:gn.Base,target:or.Land,sourceFilter:[dr.SacredSite],range:1,hasPushOrGather:!0,generatesFear:!0,hasDestroyInstructions:!0,hasDamageInstructions:!0,effects:[{text:"Gather 1 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherOne(e.Explorer)},threshold:{[ir.Moon]:2,[ir.Fire]:1}},{text:"Destroy up to 2 <explorer>. 1 <fear> per <explorer> destroyed.",[Pn.InTargetLand]:async({$:e,land:a})=>{if(a.has(e.Explorer)){const t=await a.destroyUpTo(2,e.Explorer);await a.fear(t.length)}},threshold:{[ir.Moon]:3,[ir.Fire]:2}},{text:"3 Damage. 1 <fear> per Invader destroyed by this Damage.",[Pn.InTargetLand]:async({$:e,land:a})=>{const t=await a.damage(3,e.Invader);await a.fear(t.length)},threshold:{[ir.Moon]:4,[ir.Fire]:3,[ir.Air]:2}}]},Ol={name:"Enticing And Lulling Dreams",type:kn.Innate,speed:sr.Fast,set:gn.NatureIncarnate,target:or.Land,range:1,hasPushOrGather:!0,effects:[{textArea:[.401,.517],text:"Each Invader/<dahan> does -1 Damage while in target land.",[Pn.InTargetLand]:async({$:e,land:a,effect:t})=>{await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===a?t.text:void 0,[Pn.AdjustIndividualInvaderRavageDamage]:e=>e.piece.location===a&&e.piece.isInvader?-1:0})},threshold:{[ir.Moon]:2,[ir.Air]:1}},{textArea:[.551,.606],text:"Gather up to 1 <explorer>/<town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(1,e.ExplorerOrTown)},threshold:{[ir.Moon]:2,[ir.Animal]:2}},{textArea:[.633,.808],text:"Each Invader/<dahan> does -1 Damage while in target land.",[Pn.InTargetLand]:async({$:e,land:a,effect:t})=>{await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===a?t.text:void 0,[Pn.AdjustIndividualInvaderRavageDamage]:e=>e.piece.location===a&&e.piece.isInvader?-1:0})},threshold:{[ir.Moon]:3,[ir.Air]:2,[ir.Animal]:1}},{textArea:[.845,.9],text:"Gather up to 4 <explorer>/<town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(4,e.ExplorerOrTown)},threshold:{[ir.Moon]:4,[ir.Air]:3,[ir.Animal]:2}}]},kl={name:"Favors Called Due",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Moon,ir.Air,ir.Animal],set:gn.Base,target:or.Land,range:1,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.68,.72],text:"Gather up to 4 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(4,e.Dahan)}},{textArea:[.756,.86],text:"If Invaders are present and <dahan> now outnumber them, 3 <fear>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.hasInvaders&&a.the(e.Dahan).outnumber(e.Invader)&&await a.fear(3)}}]},Cl={name:"Mantle Of Dread",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Moon,ir.Fire,ir.Air],set:gn.Base,target:or.Spirit,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.71,.75],text:"2 <fear>.",[Pn.TargetSpirit]:async({$:e})=>{await e.fear(2)}},{textArea:[.745,.848],text:"Target Spirit may Push 1 <explorer> and <town> from a land where it has <presence>.",[Pn.TargetSpirit]:({$:e,spirit:a})=>a.inLands().optionallyPickOne((async a=>{await a.pushOne(e.Explorer),await a.pushOne(e.Town)}))}]},Dl={name:"Stretch Out Coils of Foreboding Dread",type:kn.Innate,speed:sr.Fast,set:gn.FeatherAndFlame,target:or.Land,range:2,hasPushOrGather:!0,generatesFear:!0,effects:[{text:"Your other Powers may ignore Range when targeting the target land.",[Pn.InTargetLand]:async({$:e,you:a,land:t,effect:n})=>{await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===t?n.text:void 0,[Pn.MayIgnoreRangeWhenTargetingLand]:e=>e.land===t&&e.power.owner===a})},threshold:{[ir.Air]:2}},{text:"After an action generates <fear> in target land, including from destroying <town>/<city>: Push up to 1 <explorer> per <fear> / 1 <town> per 2 <fear>. (You may mix-and-match.)",[Pn.InTargetLand]:async({$:e,land:a,...t})=>{const n=e.nextTriggerId(),r={triggerId:n,[Pn.Now]:async({action:t})=>{let r=t.parentData.generatedFear[n];for(;r>=1;){const t=r>1?Xn.ExplorerOrTown:Xn.Explorer,n=await a.push({quantifier:ur.UpTo,pieces:t,pickPiecesEffect:{prompt:`Pick one ${Zn[t].text} to Push. (${r} <fear> left.)`,noOptions:"No more valid Invaders to Push."}});if(0===n.length)break;n[0].piece.isA(e.Explorer)?r-=1:r-=2}}};await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===a?t.effect.text:void 0,[Pn.AfterPowerGenerateFearInLand]:async({location:i,amount:s})=>{i===a&&(void 0===e.action.data.generatedFear&&(e.action.data.generatedFear={}),e.action.data.generatedFear[n]=(e.action.data.generatedFear[n]??0)+s,await e.addTrigger(r,t.effect,t.action))}})},threshold:{[ir.Moon]:1}},{text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)},threshold:{[ir.Fire]:2}},{text:"+2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)},threshold:{[ir.Moon]:2,[ir.Air]:4}}]},Bl={name:"Gather The Warriors",type:kn.Innate,speed:sr.Slow,set:gn.Base,target:or.Land,range:1,hasPushOrGather:!0,mayBeSpeed:{effect:{text:"If you have 4 <air>: This power may be <fast>.",[Pn.Now]:async({action:e})=>{await e.spirit.convertElements({[ir.Air]:4}),await e.power.makeFast()}},condition:({spirit:e,speed:a})=>a===sr.Fast&&e.hasElementsWithConvert({[ir.Air]:4}),noDowngrade:({element:e,spirit:a,speed:t})=>t===sr.Fast&&e===ir.Air&&!a.hasElementsWithConvert({[ir.Air]:5})},effects:[{text:"This Power may be <fast>.",[Pn.InTargetLand]:()=>Promise.resolve(),threshold:{[ir.Air]:4},noConvertToThreshold:!0,dontResolveAlone:!0},{effects:[{text:"Gather up to 1 <dahan> per <air> you have.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElementsToCombo({[ir.Air]:1}),await t.gatherUpTo(a.elements[ir.Air],e.Dahan)}},{text:"Push up to 1 <dahan> per <sun> you have.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElementsToCombo({[ir.Sun]:1}),await t.pushUpTo(a.elements[ir.Sun],e.Dahan)}}],threshold:{[ir.Animal]:1}}]},Ll={name:"Lead The Furious Assault",type:kn.Innate,speed:sr.Slow,set:gn.Base,target:or.Land,range:0,mayBeSpeed:{effect:{text:"If you have 4 <air>: This power may be <fast>.",[Pn.Now]:async({action:e})=>{await e.spirit.convertElements({[ir.Air]:4}),await e.power.makeFast()}},condition:({spirit:e,speed:a})=>a===sr.Fast&&e.hasElementsWithConvert({[ir.Air]:4}),noDowngrade:({element:e,spirit:a,speed:t})=>t===sr.Fast&&e===ir.Air&&!a.hasElementsWithConvert({[ir.Air]:5})},hasDestroyInstructions:!0,effects:[{text:"This Power may be <fast>.",[Pn.InTargetLand]:()=>Promise.resolve(),threshold:{[ir.Air]:4},noConvertToThreshold:!0,dontResolveAlone:!0},{text:"Destroy 1 <town> for every 2 <dahan> in target land.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.destroy({amount:a.forEvery(2,e.Dahan),pieces:e.Town})},threshold:{[ir.Sun]:2,[ir.Fire]:1}},{text:"Destroy 1 <city> for every 3 <dahan> in target land.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.destroy({amount:a.forEvery(3,e.Dahan),pieces:e.City})},threshold:{[ir.Sun]:4,[ir.Fire]:3}}]},Fl={name:"Lead The Warriors To Battle",type:kn.Innate,speed:sr.Slow,set:gn.NatureIncarnate,target:or.Land,targetFilter:[dr.IncarnaAndDahan],generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.736,.855],text:"1 <fear> if <town>/<city> are present. 1 Damage.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.has(e.TownOrCity)&&await a.fear(1),await a.damage(1)},threshold:{[ir.Sun]:1,[ir.Fire]:2}},{textArea:[.875,.925],text:"1 Damage per <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(a.numberOf(e.Dahan))},threshold:{[ir.Sun]:3,[ir.Fire]:3}}]},Rl={name:"Manifestation Of Power And Glory",type:kn.Unique,speed:sr.Slow,energy:3,elements:[ir.Sun,ir.Fire,ir.Air],set:gn.Base,target:or.Land,targetFilter:[dr.Dahan],range:0,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.679,.719],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.716,.853],text:"Each <dahan> deals Damage equal to the number of your <presence> in target land.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await t.damage(t.numberOf(e.Dahan)*t.numberOfPresenceOf(a))}}]},Ml={name:"Sudden Ambush",type:kn.Unique,speed:sr.Fast,energy:2,elements:[ir.Fire,ir.Air,ir.Animal],set:gn.Base,target:or.Land,range:1,hasPushOrGather:!0,hasDestroyInstructions:!0,effects:[{textArea:[.722,.762],text:"You may Gather 1 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.mayGather(e.Dahan)}},{textArea:[.768,.808],text:"Each <dahan> destroys 1 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.destroy({amount:a.numberOf(e.Dahan),pieces:e.Explorer})}}]},Nl={name:"Voice Of Thunder",type:kn.Unique,speed:sr.Slow,energy:0,elements:[ir.Sun,ir.Air],set:gn.Base,target:or.Land,range:1,hasPushOrGather:!0,effects:[{textArea:[.7,.848],text:"Push up to 4 <dahan>.<or>If Invaders are present, 2 <fear>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"PushDahan",textArea:[.71,.75],text:"Push up to 4 <dahan>.",[Pn.Now]:async()=>{await a.pushUpTo(4,e.Dahan)}},{actionId:"Fear",textArea:[.798,.838],text:"If Invaders are present, 2 <fear>.",[Pn.Now]:async()=>{a.hasInvaders&&await a.fear(2)}}]})}}]},Wl={name:"Words Of Warning",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Air,ir.Animal],set:gn.Base,target:or.Land,targetFilter:[dr.Dahan],range:1,effects:[{textArea:[.68,.72],text:"Defend 3.",[Pn.InTargetLand]:async({land:e})=>{await e.defend(3)}},{textArea:[.716,.854],text:"During Ravage, <dahan> in target land deal Damage simultaneously with Invaders.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.addSubEffectUntilEndOfTurn({[Pn.DahanFightSimultaneously]:e=>e.land===a})}}]},$l={name:"Encircle The Unsuspecting Prey",type:kn.Innate,speed:sr.Slow,set:gn.NatureIncarnate,target:or.Land,range:1,hasPushOrGather:!0,hasDamageInstructions:!0,effects:[{textArea:[.266,.478],text:"You may Gather 1 <beasts> into target or an adjacent land. If you do, 1 Damage in that land.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.inThisAndAdjacentLands().where((a=>a.numberOfPiecesInAdjacentLands(e.Beasts)>0)).pickOne((async a=>{(await a.gatherOne(e.Beasts)).length>0&&await a.damage(1)}))},threshold:{[ir.Plant]:1,[ir.Animal]:2}},{textArea:[.5,.712],text:"If at least 2 <beasts> are within <range-1> (of target land), 1 Damage.",[Pn.InTargetLand]:async({$:e,land:a,you:t})=>{a.forPiecesWithin(1,t).where((a=>a.isA(e.Beasts))).count>=2&&await a.damage(1)},threshold:{[ir.Moon]:1,[ir.Animal]:3}},{textArea:[.738,.878],text:"For each adjacent land with <beasts>, 1 Damage.",[Pn.InTargetLand]:async({$:e,land:a})=>{const t=a.inAdjacentLands().where((a=>a.has(e.Beasts))).count;await a.damage(t)},threshold:{[ir.Moon]:1,[ir.Plant]:2,[ir.Animal]:4}}]},Gl={name:"Frenzied Assault",type:kn.Innate,speed:sr.Slow,set:gn.BranchAndClaw,target:or.Land,targetFilter:[dr.Beasts],range:1,generatesFear:!0,hasDamageInstructions:!0,effects:[{effects:[{text:"1 <fear> and 2 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1),await e.damage(2)}},{text:"Remove 1 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{e.dontCountAs(Ln.Beasts),await a.remove({amount:1,pieces:e.Beasts})}}],threshold:{[ir.Moon]:1,[ir.Fire]:1,[ir.Animal]:4}},{text:"+1 <fear> and +1 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1),await e.damage(1)},threshold:{[ir.Moon]:1,[ir.Fire]:2,[ir.Animal]:5}}]},Ul={name:"Prey On The Builders",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Moon,ir.Fire,ir.Animal],set:gn.BranchAndClaw,target:or.Land,range:0,hasPushOrGather:!0,effects:[{textArea:[.664,.704],text:"You may Gather 1 <beasts>",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.mayGather(e.Beasts)}},{textArea:[.742,.88],text:"If target land has <beasts>, Invaders do not Build there this turn.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.has(e.Beasts)&&await a.skipInvaderAction({all:!0,filter:({invaderAction:e})=>e===qr.Build})}}]},Hl={name:"Ranging Hunt",type:kn.Innate,speed:sr.Fast,set:gn.BranchAndClaw,target:or.Land,targetFilter:[dr.NonBlight],range:1,hasPushOrGather:!0,hasDamageInstructions:!0,effects:[{text:"You may Gather 1 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.mayGather(e.Beasts)},threshold:{[ir.Animal]:2}},{text:"1 Damage per <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(a.numberOf(e.Beasts))},threshold:{[ir.Plant]:2,[ir.Animal]:3}},{text:"You may Push up to 2 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(2,e.Beasts)},threshold:{[ir.Animal]:2}}]},ql={name:"Teeth Gleam From Darkness",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Moon,ir.Plant,ir.Animal],set:gn.BranchAndClaw,target:or.Land,sourceFilter:[dr.Jungle],targetFilter:[dr.NonBlight],range:1,generatesFear:!0,effects:[{textArea:[.669,.863],text:"1 <fear>. Add 1 <beasts><or>If target land has both <beasts> and Invaders: 3 <fear>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"Beasts",textArea:[.679,.719],text:"1 <fear>. Add 1 <beasts>",[Pn.Now]:async()=>{await a.fear(1),await a.add(1,e.Beasts)}},{actionId:"Fear",textArea:[.762,.854],text:"If target land has both <beasts> and Invaders: 3 <fear>.",[Pn.Now]:async()=>{a.hasAllOf(e.Beasts,e.Invader)&&await a.fear(3)}}]})}}]},jl={name:"Terrifying Chase",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Sun,ir.Animal],set:gn.BranchAndClaw,target:or.Land,range:0,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.641,.681],text:"Push 2 <explorer>/<town>/<dahan>",[Pn.InTargetLand]:async({action:e,$:a,land:t})=>{e.data.movement=await t.push({amount:2,pieces:a.ExplorerTownOrDahan})}},{textArea:[.684,.779],text:"Push another 2 <explorer>/<town>/<dahan> per <beasts> in target land.",[Pn.InTargetLand]:async({action:e,$:a,land:t})=>{e.data.movement.push(...await t.push({amount:2*t.numberOf(a.Beasts),pieces:a.ExplorerTownOrDahan}))}},{textArea:[.814,.906],text:"If you Pushed any Invaders, 2 <fear>.",[Pn.InTargetLand]:async({action:e,land:a})=>{e.data.movement.some((({piece:e})=>e.isInvader))&&await a.fear(2)}}]},_l={name:"Too Near The Jungle",type:kn.Unique,speed:sr.Slow,energy:0,elements:[ir.Plant,ir.Animal],set:gn.BranchAndClaw,target:or.Land,sourceFilter:[dr.Jungle],range:1,generatesFear:!0,hasDestroyInstructions:!0,effects:[{textArea:[.705,.745],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.75,.79],text:"Destroy 1 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.destroyOne(e.Explorer)}}]},Vl={name:"Boon Of Growing Power",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Sun,ir.Moon,ir.Plant],set:gn.BranchAndClaw,target:or.Spirit,effects:[{textArea:[.68,.72],text:"Target Spirit gains a Power Card.",[Pn.TargetSpirit]:async({spirit:e})=>{await e.gainPowerCard()}},{textArea:[.765,.854],text:"If you target another Spirit, they also gain 1 Energy.",[Pn.TargetSpirit]:async({spirit:e,you:a})=>{e!==a&&await e.gainEnergy(1)}}]},Jl={name:"Punish Those Who Trespass",type:kn.Innate,speed:sr.Slow,set:gn.BranchAndClaw,target:or.Land,range:0,hasDestroyInstructions:!0,fullText:["Threshold 2 <sun> 1 <fire> 2 <plant>","2 Damage","Destroy 1 <dahan>.","Threshold 2 <sun> 2 <fire> 3 <plant>","+1 Damage per <sun> and <plant> you have.","Threshold 4 <plant>","You may split this Power's Damage however desired between target land and one of your lands."],effects:[{text:"You may split this Power's Damage however desired between target land and one of your lands.",[Pn.InTargetLand]:async({you:e,action:a})=>{e.hasElements({[ir.Plant]:4})&&await e.inLands().optionallyPickOne((e=>(a.data.otherLand=e,Promise.resolve())))}},{effects:[{text:"2 Damage",[Pn.InTargetLand]:async({$:e,land:a,action:t})=>{await e.splittedDamage({amount:2,lands:[a,...[t.data.otherLand]??0]})}},{text:"Destroy 1 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.destroyOne(e.Dahan)}}],threshold:{[ir.Sun]:2,[ir.Fire]:1,[ir.Plant]:2}},{text:"+1 Damage per <sun><plant> you have.",[Pn.InTargetLand]:async({$:e,action:a,you:t,land:n})=>{await t.askToConvertElementsToCombo({[ir.Sun]:1,[ir.Plant]:1}),await e.splittedDamage({amount:t.numberOfElementCombos({[ir.Sun]:1,[ir.Plant]:1}),lands:[n,...[a.data.otherLand]??0]})},threshold:{[ir.Sun]:2,[ir.Fire]:2,[ir.Plant]:3}},{threshold:{[ir.Plant]:4}}]},zl={name:"Regrow From Roots",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Water,ir.Earth,ir.Plant],set:gn.BranchAndClaw,target:or.Land,targetFilter:[dr.Jungle,dr.Wetlands],range:1,blightWhiteListedPower:!0,effects:[{textArea:[.71,.817],text:"If there are 2 <blight> or fewer in target land, remove 1 <blight>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.hasAtMost(2,e.Blight)&&await a.removeBlight()}}]},Yl={name:"Sacrosanct Wilderness",type:kn.Unique,speed:sr.Fast,energy:2,elements:[ir.Sun,ir.Earth,ir.Plant],set:gn.BranchAndClaw,target:or.Land,targetFilter:[dr.NonBlight],range:1,hasPushOrGather:!0,hasDamageInstructions:!0,effects:[{textArea:[.636,.676],text:"Push 2 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.push({amount:2,pieces:e.Dahan})}},{textArea:[.719,.897],text:"2 Damage per <wilds> in target land.<or>Add 1 <wilds>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"Damage",textArea:[.716,.808],text:"2 Damage per <wilds> in target land.",[Pn.Now]:async()=>{await a.damage(2*a.numberOf(e.Wilds))}},{actionId:"AddWilds",textArea:[.851,.891],text:"Add 1 <wilds>.",[Pn.Now]:async()=>{await a.add(1,e.Wilds)}}]})}}]},Kl={name:"Spreading Wilds",type:kn.Innate,speed:sr.Slow,set:gn.BranchAndClaw,target:or.Land,targetFilter:[dr.NonBlight],range:1,modifiesRange:({spirit:e,withConvert:a})=>e.hasElements({[ir.Plant]:3,[ir.Air]:1},a)?2:e.hasElements({[ir.Plant]:3},a)||e.hasElements({[ir.Air]:1},a)?1:0,payForRange:async({$:e,spirit:a})=>{await e.chooseBetween({text:"To cast Spreading Wilds in this land, you need to convert elements.",effects:[{actionId:"ConvertPlant",text:"Convert to 3 <plant>",[Pn.Now]:async()=>{await a.convertElements({[ir.Plant]:3})},condition:()=>!a.hasElements({[ir.Plant]:3})&&a.hasElementsWithConvert({[ir.Plant]:3})},{actionId:"ConvertAir",text:"Convert to 1 <air>",[Pn.Now]:async()=>{await a.convertElements({[ir.Air]:1})},condition:()=>!a.hasElements({[ir.Air]:1})&&a.hasElementsWithConvert({[ir.Air]:1})}]})},hasPushOrGather:!0,effects:[{text:"Push 1 <explorer> from target land per 2 <sun> you have.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElementsToCombo({[ir.Sun]:2}),await t.push({amount:Math.floor(a.elements[ir.Sun]/2),pieces:e.Explorer})},threshold:{[ir.Sun]:2}},{text:"If target land has no <explorer>, add 1 <wilds>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.doesntHave(e.Explorer)&&await a.add(1,e.Wilds)},threshold:{[ir.Plant]:1}},{text:"This Power has <range+1>.",threshold:{[ir.Plant]:3},noConvertToThreshold:!0,dontResolveAlone:!0},{text:"This Power has <range+1>.",threshold:{[ir.Air]:1},noConvertToThreshold:!0,dontResolveAlone:!0}]},Ql={name:"Towering Wrath",type:kn.Unique,speed:sr.Slow,energy:3,elements:[ir.Sun,ir.Fire,ir.Plant],set:gn.BranchAndClaw,target:or.Land,sourceFilter:[dr.SacredSite],range:1,generatesFear:!0,hasDestroyInstructions:!0,hasDamageInstructions:!0,effects:[{textArea:[.661,.701],text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.7,.835],text:"For each of your <sacred> in/adjacent to target land, 2 Damage.",[Pn.InTargetLand]:async({you:e,land:a})=>{const t=a.inThisAndAdjacentLands().where((a=>a.hasSacredSiteOf(e))).count;await a.damage(2*t)}},{textArea:[.838,.878],text:"Destroy all <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.destroyAll(e.Dahan)}}]},Xl={name:"Dark Skies Loose A Stinging Rain",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Moon,ir.Air,ir.Water],set:gn.FeatherAndFlame,target:or.Land,sourceFilter:[dr.Wetlands],range:1,hasPushOrGather:!0,effects:[{textArea:[.699,.739],text:"Isolate target land.",[Pn.InTargetLand]:async({land:e})=>{await e.isolate()}},{textArea:[.762,.802],text:"Push up to 1 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(1,e.Explorer)}},{textArea:[.762,.802],text:"Push up to 2 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(2,e.Dahan)}}]},Zl={name:"Foundations Sink Into Mud",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Water,ir.Earth],set:gn.FeatherAndFlame,target:or.Land,range:0,hasDamageInstructions:!0,effects:[{textArea:[.654,.878],text:"2 Damage to <town>.<br><br>If target land is <wetlands>, you may instead deal 1 Damage to each <town>/<city>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"DamageToTown",textArea:[.666,.706],text:"2 Damage to <town>.",[Pn.Now]:async()=>{await a.damage(2,e.Town)}},{actionId:"DamageToEach",textArea:[.779,.876],text:"1 Damage to each <town>/<city>.",condition:()=>a.isWetlands,[Pn.Now]:async()=>{await a.damageEach(1,e.TownOrCity)}}]},{orChoice:!1})}}]},ec={name:"Gift Of Abundance",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Air,ir.Water,ir.Plant],set:gn.FeatherAndFlame,target:or.Spirit,targetFilter:[fr.Another],effects:[{textArea:[.64,.758],text:"Target Spirit either gains 2 Energy, or may Repeat one Power Card this turn by paying its cost.",[Pn.TargetSpirit]:async({$:e,spirit:a,isRepeat:t,...n})=>{await e.chooseBetween({effects:[{actionId:"GainEnergy",textArea:[.64,.68],text:"Gain 2 Energy",[Pn.Now]:async()=>{await a.gainEnergy(2)}},{actionId:"Repeat",textArea:[.68,.763],text:"Repeat one Power Card this turn by paying its cost.",[Pn.Now]:async()=>{t||await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({power:n.power.power,players:[a]}),[Pn.MayRepeatPowercard]:({power:e,speed:t})=>e.owner===a&&e.costToPlay<=a.energy&&e.data.type!==kn.Innate&&e.possibleToRepeatAtSpeed(t),[Pn.RepeatPowerCard]:async({power:a,speed:t})=>{e.removeThisEffect(),await a.payForPlay(),await a.replay(t)}})}}]},{orChoice:!1})}},{textArea:[.772,.901],text:"Either you or target Spirit may add 1 Destroyed <presence> to a <wetlands> where you have <presence>.",[Pn.TargetSpirit]:async({$:e,you:a,spirit:t})=>{await e.chooseBetween({autoPlayOneOption:!0,effects:[{actionId:"YouAddPresence",textArea:[.814,.854],text:"You may add 1 Destroyed <presence>.",[Pn.Now]:async()=>{await a.addPresence({locations:zn.AnyLands,destroyed:!0,filter:e=>e.isWetlands&&e.hasPresenceOf(a)})}},{actionId:"TargetAddPresence",textArea:[.814,.854],text:`${t.nameLink} adds 1 Destroyed <presence>.`,condition:()=>a!==t,[Pn.Now]:async()=>{await t.addPresence({locations:zn.AnyLands,destroyed:!0,filter:e=>e.isWetlands&&e.hasPresenceOf(a)})}}]})}}]},ac={name:"Rain And Mud Suppress Conflict",type:kn.Innate,speed:sr.Fast,set:gn.FeatherAndFlame,target:or.Spirit,targetFilter:[fr.Yourself],generatesFear:!0,effects:[{text:"Each of your <presence> grants Defend 1 and lowers <dahan> counterattack Damage by 1. (Total, in its land.)",[Pn.TargetSpirit]:async({$:e,you:a})=>{await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({icon:"<presence><br>Defend",spirit:a,players:[a]}),[Pn.DefendFromSpirits]:({land:e})=>e.numberOfPresenceOf(a),[Pn.AdjustCollectiveDahanRavageDamage]:({land:e})=>-e.numberOfPresenceOf(a)})},threshold:{[ir.Air]:1,[ir.Water]:3}},{text:"Each of your <presence> grants Defend 1 and lowers <dahan> counterattack Damage by 1. (Total, in its land.)",[Pn.TargetSpirit]:async({$:e,you:a})=>{await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({icon:"<presence><br>Defend",spirit:a,players:[a]}),[Pn.DefendFromSpirits]:({land:e})=>e.numberOfPresenceOf(a),[Pn.AdjustCollectiveDahanRavageDamage]:({land:e})=>-e.numberOfPresenceOf(a)})},threshold:{[ir.Water]:5,[ir.Earth]:1}},{effects:[{text:"2 <fear>. In your lands, Invaders and <dahan> have -1 Health (min 1).",[Pn.TargetSpirit]:async({$:e,you:a})=>{await e.fear(2),await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({text:"In your lands, Invaders and <dahan> have -1 Health (min 1).",icon:"<dahan><br>-1 HP",spirit:a,players:[a]}),[Pn.AdjustHealth]:({piece:t})=>null!=t.location&&t.location.hasPresenceOf(a)&&t.isA(e.InvaderOrDahan)?-1:0,[Pn.AfterAddingPiece]:async({land:e})=>{await e.healthCheck()}}),await a.inLands().forEach((async e=>{await e.healthCheck()}))}}],threshold:{[ir.Air]:3,[ir.Water]:9,[ir.Earth]:2}}]},tc={name:"Unbearable Deluge",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Air,ir.Water,ir.Earth],set:gn.FeatherAndFlame,target:or.Land,range:0,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.703,.743],text:"1 <fear>",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.703,.743],text:"Push 2 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.push({amount:2,pieces:e.Dahan})}},{textArea:[.703,.743],text:"Defend 3.",[Pn.InTargetLand]:async({land:e})=>{await e.defend(3)}},{textArea:[.785,.825],text:"If target land is <wetlands>, Isolate it.",[Pn.InTargetLand]:async({land:e})=>{e.isWetlands&&await e.isolate()}}]},nc={name:"Water Nourishes Lifes Growth",type:kn.Innate,speed:sr.Fast,set:gn.FeatherAndFlame,target:or.Land,range:0,hasPushOrGather:!0,blightWhiteListedPower:!0,effects:[{effects:[{text:"Gain 1 Energy.",[Pn.InTargetLand]:async({you:e})=>{await e.gainEnergy(1)}},{text:"You may Remove 1 <blight> by Removing 1 of your <presence> (from target land).",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{t.has(e.Blight)&&t.hasPresenceOf(a)&&(await t.remove({quantifier:ur.UpTo,amount:1,pieces:e.Presence,owner:a})).length>0&&await t.removeBlight()}}],threshold:{[ir.Water]:3,[ir.Plant]:2}},{effects:[{text:"Gain +1 Energy.",[Pn.InTargetLand]:async({you:e})=>{await e.gainEnergy(1)}},{text:"Gather up to 1 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(1,e.Dahan)}}],threshold:{[ir.Water]:5,[ir.Earth]:1,[ir.Plant]:2}},{text:"When <blight> would be added to target land instead leave it on the card.",[Pn.InTargetLand]:async({$:e,land:a,effect:t})=>{await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===a?t.text:void 0,[Pn.PreventAddBlight]:({location:e})=>Promise.resolve(e===a)})},threshold:{[ir.Water]:7,[ir.Earth]:2,[ir.Plant]:3}}]},rc={name:"A Circuitous And Wending Journey",type:kn.Unique,speed:sr.Slow,energy:0,elements:[ir.Moon,ir.Air],set:gn.FeatherAndFlame,target:or.Land,range:0,hasPushOrGather:!0,fullText:["Push up to half (round up) of Invaders from target land.","Do likewise (separately) for <dahan>, <presence>, and <beasts>."],effects:[{textArea:[.67,.765],text:"Push up to half (round up) of Invaders from target land.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(Math.ceil(a.numberOf(e.Invader)/2),e.Invader)}},{textArea:[.775,.87],text:"Push up to half (round up) of <dahan> from target land.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(Math.ceil(a.numberOf(e.Dahan)/2),e.Dahan)}},{textArea:[.775,.87],text:"Push up to half (round up) of <presence> from target land.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(Math.ceil(a.numberOf(e.Presence)/2),e.Presence)}},{textArea:[.775,.87],text:"Push up to half (round up) of <beasts> from target land.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(Math.ceil(a.numberOf(e.Beasts)/2),e.Beasts)}}]},ic={name:"Aid From The Spirit-Speakers",type:kn.Unique,speed:sr.Fast,energy:2,elements:[ir.Sun,ir.Fire,ir.Air,ir.Animal],set:gn.FeatherAndFlame,target:or.Land,range:1,effects:[{textArea:[.682,.825],text:"For each <dahan>, you may move 1 Invader/<dahan>/<presence>/<beasts> to a land within <range-2> that has <dahan>.",[Pn.InTargetLand]:async({$:e,land:a,you:t})=>{await a.move({quantifier:ur.May,amount:a.numberOf(e.Dahan),pieces:e.InvaderDahanPresenceOrBeast,locations:{target:zn.WithinRange,range:2,spirit:t},destinationFilter:a=>a.has(e.Dahan),together:!0})}}]},sc={name:"Close The Ways",type:kn.Innate,speed:sr.Fast,set:gn.FeatherAndFlame,target:or.Land,range:1,fullText:["Target each level of this as a separate Power.","1 <air> 2 <water>: Isolate target land.","2 <air> 2 <earth>: Isolate target land.","3 <air> 2 <plant>: Isolate target land."],effects:[{text:"Target each level of this as a separate Power. Isolate target land.",[Pn.InTargetLand]:async({you:e,power:a,land:t})=>{const n=[{[ir.Air]:1,[ir.Water]:2},{[ir.Air]:2,[ir.Earth]:2},{[ir.Air]:3,[ir.Plant]:2}].filter((a=>e.hasElements(a))).length;for(let e=0;e<n;e+=1)0===e?await t.isolate():await a.validLandTargets().pickOne((async e=>{await e.isolate()}))}},{threshold:{[ir.Air]:1,[ir.Water]:2}},{threshold:{[ir.Air]:2,[ir.Earth]:2}},{threshold:{[ir.Air]:3,[ir.Plant]:2}}]},oc={name:"Lay Paths They Cannot Help But Walk",type:kn.Innate,speed:sr.Fast,set:gn.FeatherAndFlame,target:or.Land,range:0,hasPushOrGather:!0,blightWhiteListedPower:!0,effects:[{text:"Push up to half (round down) of Invaders from target land. Do likewise for <dahan>, <presence>, and <beasts> (each separately).",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.addSubEffect({effects:[e.Invader,e.Dahan,e.Presence,e.Beasts].map((e=>({text:`Push up to half (round down) of ${Zn[e].text} from target land.`,[Pn.Now]:async()=>{await a.pushUpTo(Math.floor(a.numberOf(e)/2),e)}})))})},threshold:{[ir.Moon]:2,[ir.Air]:2}},{text:"Push up to 1 Invader/<dahan>/<presence>/<beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(1,e.InvaderDahanPresenceOrBeast)},threshold:{[ir.Sun]:2,[ir.Air]:2}},{text:"Repeat this Power.",[Pn.InTargetLand]:async({power:e,isRepeat:a})=>{a||await e.repeat()},threshold:{[ir.Moon]:2,[ir.Air]:4,[ir.Water]:3}}]},dc={name:"Offer Passage Between Worlds",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Moon,ir.Air],set:gn.FeatherAndFlame,target:or.Land,range:1,effects:[{textArea:[.614,.929],text:"Move up to 4 <dahan> between target land and one of your lands<or>The next time <dahan> would be Destroyed in target land, Destroy 2 fewer <dahan>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await e.chooseBetween({effects:[{actionId:"MoveDahan",textArea:[.613,.716],text:"Move up to 4 <dahan> between target land and one of your lands",[Pn.Now]:async()=>{await t.moveBetween({upToAmount:4,pieces:e.Dahan,destination:e=>e.hasPresenceOf(a)})}},{actionId:"ProtectDahan",textArea:[.782,.923],text:"The next time <dahan> would be Destroyed in target land, Destroy 2 fewer <dahan>.",[Pn.Now]:async a=>{let n=0;await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===t?a.effect.text:void 0,[Pn.OrderOfRemoveAllMightMatter]:()=>!0,[Pn.PreventRemovePiece]:async({piece:a,removement:r})=>!!(a.isA(e.Dahan)&&a.location===t&&n<2&&wr[r].isDestroyLike)&&(n+=1,await e.sendEvent({type:Tn.GenericSub,text:"The <dahan> is saved from destruction by <p>OfferPassageBetweenWorlds</p>."}),2===n&&e.removeThisEffect(),!0)})}}]})}}]},lc={name:"Paths Tied By Nature",type:kn.Unique,speed:sr.Slow,energy:0,elements:[ir.Sun,ir.Air,ir.Earth,ir.Plant],set:gn.FeatherAndFlame,target:or.Land,range:1,effects:[{textArea:[.692,.842],text:"Move up to 2 Invaders/<dahan><presence><beasts> to a land within <range-2> that has the same terrain.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await t.move({quantifier:ur.UpTo,amount:2,locations:{target:zn.WithinRange,range:2,spirit:a},destinationFilter:e=>e.hasSameTerrainAs(t),pieces:e.InvaderDahanPresenceOrBeast,together:!0})}}]},cc={name:"Travelers Boon",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Moon,ir.Air,ir.Water],set:gn.FeatherAndFlame,target:or.Spirit,targetFilter:[fr.Another],effects:[{textArea:[.648,.89],text:"Target Spirit moves up to 3 of their <presence> to one of your lands.<br><br>They may move up to 1 Invader, 1 <dahan>, and 1 <beasts> along with their <presence>. (Total, not for each <presence>.).",[Pn.TargetSpirit]:async({$:e,you:a,spirit:t})=>{const n=[e.Invader,e.Dahan,e.Beasts];await a.inLands().pickOne((async e=>{await t.presence().pickMultiple({amount:3,optional:!0,forPickedItem:async a=>{const t=a.location;await a.move({locations:{target:zn.ToThisLocation,location:e}}),await t.forPieces().pickMultiple({amount:n.length,optional:!0,where:e=>n.some((a=>e.isA(a))),forPickedItem:async a=>{Vr(n,(e=>a.isA(e))),await a.move({locations:{target:zn.ToThisLocation,location:e}})},effect:{textArea:[.756,.89],text:"They may move up to 1 Invader, 1 <dahan>, and 1 <beasts> along with their <presence>. (Total, not for each <presence>.)."}})},repeatSame:!0})}),{prompt:"Select destination land."})}}]},hc={name:"Ways Of Shore And Heartland",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Air,ir.Water,ir.Earth],set:gn.FeatherAndFlame,target:or.Land,range:2,hasPushOrGather:!0,effects:[{textArea:[.696,.842],text:"Push up to 2 Invaders/<dahan>/<presence>/<beasts> to a land that is also Coastal/Inland (whichever the target land is).",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.push({quantifier:ur.UpTo,amount:2,destinationFilter:e=>e.isCoastal===a.isCoastal,pieces:e.InvaderDahanPresenceOrBeast,together:!0})}}]},uc={name:"Absorb Essence",type:kn.Unique,speed:sr.Fast,energy:2,elements:[ir.Moon,ir.Fire,ir.Water,ir.Earth],set:gn.FeatherAndFlame,target:or.Spirit,targetFilter:[fr.Another],effects:[{textArea:[.634,.674],text:"Gain 3 Energy",[Pn.TargetSpirit]:async({you:e})=>{await e.gainEnergy(3)}},{textArea:[.676,.853],text:'Move 1 of target Spirit\'s <presence> from the board to your "Deep Slumber" Track. Absorbed <presence> cannot be returned to play.',[Pn.TargetSpirit]:async({you:e,spirit:a})=>{e.spirit===fn.Serpent&&await a.presence().pickOne((async a=>{const t=await a.remove(Wn.RemoveFromGame);t.length>0&&t[0].piece.piece===Ln.Presence&&await e.absorb(t[0].piece.owner)}))}},{textArea:[.809,.9],text:"Target Spirit gains 1 <any> and 1 Energy.",[Pn.TargetSpirit]:async({spirit:e})=>{await e.gainElements(),await e.gainEnergy(1)}}]},gc={name:"Elemental Aegis",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Fire,ir.Water,ir.Earth],set:gn.FeatherAndFlame,target:or.Land,range:0,effects:[{textArea:[.653,.881],text:'Defend 2 in target land and all adjacent lands. For every <presence> on your "Deep Slumber" Track, Defend 1 in target land and all adjacent lands.',[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await e.addSubEffectUntilEndOfTurn({[Pn.DefendFromSpirits]:e=>e.land===t||e.land.isAdjacentTo(t)?2+a.absorbedPresence.length:0})}}]},fc={name:"Gift Of Flowing Power",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Fire,ir.Water],set:gn.FeatherAndFlame,target:or.Spirit,targetFilter:[fr.Another],effects:[{textArea:[.618,.658],text:"Target Spirit gains 1 Energy.",[Pn.TargetSpirit]:async({spirit:e})=>{await e.gainEnergy(1)}},{textArea:[.7,.932],text:"Target Spirit chooses to either:<br>Play another Power Card by paying its cost.<or>Gain 1 <fire> and 1 <water>.",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{await e.chooseBetween({effects:[{actionId:"PlayPowerCard",textArea:[.745,.837],text:"Play another Power Card by paying its cost.",[Pn.Now]:async()=>{await a.playAPowerCardByPayingItsCost()}},{actionId:"GainElements",textArea:[.881,.921],text:"Gain 1 <fire> and 1 <water>.",[Pn.Now]:async()=>{await a.gainElementsUntilEndOfTurn({[ir.Fire]:1,[ir.Water]:1})}}]})}}]},yc={name:"Gift Of The Primordial Deeps",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Moon,ir.Earth],set:gn.FeatherAndFlame,target:or.Spirit,targetFilter:[fr.Another],effects:[{textArea:[.615,.655],text:"Target Spirit gains a Minor Power.",[Pn.TargetSpirit]:async({spirit:e,action:a})=>{a.data.powerGain=await e.gainPowerCard({powerType:kn.Minor})}},{textArea:[.7,.926],text:"Target Spirit chooses to either: Play it immediately by paying its cost.<or>Gain 1 <moon> and 1 <earth>.",[Pn.TargetSpirit]:async({$:e,spirit:a,action:t})=>{const n=t.data.powerGain.chosen;await e.chooseBetween({effects:[{actionId:"Play",textArea:[.746,.834],text:"Play it immediately by paying its cost.",condition:()=>n.length>0&&n[0].isPlayable,[Pn.Now]:async()=>{await n[0].play({withoutUsingCardPlays:!0})}},{actionId:"GainElements",textArea:[.88,.92],text:"Gain 1 <moon> and 1 <earth>.",[Pn.Now]:async()=>{await a.gainElementsUntilEndOfTurn({[ir.Moon]:1,[ir.Earth]:1})}}]})}}]},pc={name:"Serpent Rouses In Anger",type:kn.Innate,speed:sr.Slow,set:gn.FeatherAndFlame,target:or.Land,range:0,hasPushOrGather:!0,generatesFear:!0,hasDamageInstructions:!0,effects:[{text:"For each <fire><earth> you have, 1 Damage to 1 <town>/<city>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElementsToCombo({[ir.Fire]:1,[ir.Earth]:1});const n=a.numberOfElementCombos({[ir.Fire]:1,[ir.Earth]:1});await t.damage(n,e.TownOrCity,{maxTargets:n})},threshold:{[ir.Fire]:1,[ir.Earth]:1}},{text:"For each 2 <moon><earth> you have, 2 <fear> and you may Push 1 <town> from target land.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElementsToCombo({[ir.Moon]:2,[ir.Earth]:2});const n=a.numberOfElementCombos({[ir.Moon]:2,[ir.Earth]:2});await t.fear(2*n),await t.pushUpTo(n,e.Town)},threshold:{[ir.Moon]:2,[ir.Earth]:2}},{text:"Cost 7 Energy: In every land in the game: X Damage, where X is the number of <presence> you have in and adjacent to that land.",[Pn.InTargetLand]:async({$:e,you:a})=>{a.energy>=7&&await e.may({prompt:"Pay 7 Energy to do this effect?"})&&(await a.payEnergy(7),await e.inLands().forEach((async t=>{await t.damage(t.numberOfPiecesInThisOrAdjacentLands(e.Presence,a))})))},threshold:{[ir.Moon]:5,[ir.Fire]:6,[ir.Earth]:6}}]},wc={name:"Serpent Wakes In Power",type:kn.Innate,speed:sr.Slow,set:gn.FeatherAndFlame,target:or.Spirit,targetFilter:[fr.Yourself],effects:[{effects:[{text:"Gain 1 Energy.",[Pn.TargetSpirit]:async({you:e})=>{await e.gainEnergy(1)}},{text:"Other spirits with any Absorbed Presence also gain 1 Energy.",[Pn.TargetSpirit]:async({$:e,you:a})=>{await e.spiritsWhich((e=>e!==a&&a.absorbedPresence.includes(e.spiritNumber))).forEach((async e=>{await e.gainEnergy(1)}))}}],threshold:{[ir.Fire]:2,[ir.Water]:1,[ir.Plant]:1}},{effects:[{text:"Add 1 <presence> at <range-1>.",[Pn.TargetSpirit]:async({you:e})=>{await e.addPresenceInRange(1)}},{text:"Other spirits with 2 or more Absorbed Presence may do likewise.",[Pn.TargetSpirit]:async({$:e,you:a})=>{await e.spiritsWhich((e=>e!==a&&a.numberOfAbsorbedPresenceOf(e)>=2)).forEach((async e=>{await e.addPresenceInRange(1)}))}}],threshold:{[ir.Water]:2,[ir.Earth]:3,[ir.Plant]:2}},{effects:[{text:"Gain a Major Power without Forgetting.",[Pn.TargetSpirit]:async({you:e})=>{await e.gainPowerCard({powerType:kn.Major,withoutForgetting:!0})}},{text:"Other Spirits with 3 or more Absorbed Presence may do likewise.",[Pn.TargetSpirit]:async({$:e,you:a})=>{await e.spiritsWhich((e=>e!==a&&a.numberOfAbsorbedPresenceOf(e)>=3)).forEach((async e=>{await e.gainPowerCard({powerType:kn.Major,withoutForgetting:!0})}))}}],threshold:{[ir.Fire]:3,[ir.Water]:3,[ir.Earth]:3,[ir.Plant]:3}}]},mc={name:"Strength Of The Waking Island",type:kn.Innate,speed:sr.Fast,set:gn.NatureIncarnate,target:or.Spirit,targetFilter:[fr.Yourself],effects:[{textArea:[.396,.7],text:"After a Spirit uses a land-targeting Power Card, they may Repeat it at <incarna-locus> by paying its cost. (Max. 1 Power Card per turn for each of their absorbed <presence>.) You may help pay some or all of this cost. (These Repeats ignore Range and target requirements.)",[Pn.TargetSpirit]:async({$:e,you:a,...t})=>{let n=0;const r={triggerId:e.nextTriggerId(),[Pn.Now]:async({action:t})=>{const r=t.parentData.wakingIslandPower,i=r.owner===a,s=i?a.energy:r.owner.energy+a.energy;if(null!=a.incarna&&s>=r.costToPlay&&n<a.numberOfAbsorbedPresenceOf(r.owner)&&await e.may({prompt:`Repeat ${r.powerLink} at <incarna-locus>?`})){if(n+=1,i)await a.payEnergy(r.costToPlay);else{const t=Math.max(r.costToPlay-r.owner.energy,0),n=0===a.energy||0===r.costToPlay?0:await e.selectX(t,Math.min(a.energy,r.costToPlay),{players:[a],text:"You may help pay some or all of this cost.",prompt:"How much of the cost would you like to pay?"});await a.payEnergy(n),await r.owner.payEnergy(r.costToPlay-n)}await r.owner.resolvePowerInLocations(r,[a.incarna.location],!0,!0)}}};await e.addEffectUntilEndOfTurn({[Pn.AfterResolvingLandTargetingPower]:async({power:a,isRepeat:n})=>{!n&&a.isA(En.AnyCard)&&(e.action.data.wakingIslandPower=a,await e.addTrigger(r,t.effect,t.action))}})},threshold:{[ir.Water]:2,[ir.Earth]:1}},{textArea:[.718,.938],text:"Add 1 <vitality> at <incarna-locus>. If a Spirit has 2 or more absorbed <presence>, you may instead Add 1 <vitality> in one of their lands without <blight>.",[Pn.TargetSpirit]:async({$:e,you:a,spirit:t})=>{const n=Dr(a.absorbedPresence.filter((e=>a.absorbedPresence.filter((a=>a===e)).length>=2)));await e.inLandsWhere((a=>a===t.incarna?.location||a.doesntHave(e.Blight)&&a.hasOnePieceWhere((e=>e.isPresence&&n.includes(e.spiritNumber))))).pickOne((async a=>{await a.add(1,e.Vitality)}))},threshold:{[ir.Moon]:2,[ir.Earth]:2,[ir.Plant]:1}}]},vc={name:"Asphyxiating Smoke",type:kn.Unique,speed:sr.Slow,energy:2,elements:[ir.Fire,ir.Air,ir.Plant],set:gn.FeatherAndFlame,target:or.Land,sourceFilter:[dr.SacredSite],range:2,hasPushOrGather:!0,generatesFear:!0,hasDestroyInstructions:!0,effects:[{textArea:[.716,.756],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.756,.796],text:"Destroy 1 <town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.destroyOne(e.Town)}},{textArea:[.799,.839],text:"Push 1 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushOne(e.Dahan)}}]},xc={name:"Exaltation Of The Transforming Flame",type:kn.Innate,speed:sr.Fast,set:gn.NatureIncarnate,target:or.Spirit,targetFilter:[fr.Another],blightWhiteListedPower:!0,effects:[{textArea:[.259,.413],text:"Target Spirit may Forget a Power Card to gain a Power Card and 1 <any>. You may do likewise.",[Pn.TargetSpirit]:async({you:e,spirit:a})=>{await a.andAnotherSpirit(e,{text:e=>(e?"Target Spirit":"You")+" may Forget a Power Card to gain a Power Card and 1 <any>.",now:async e=>{if(e.numberOfPowerCards>0){(await e.forgetPowers({optional:!0})).length>0&&(await e.gainPowerCard(),await e.gainElements())}}})},threshold:{[ir.Fire]:4,[ir.Plant]:1}},{textArea:[.413,.567],text:"Target Spirit may pay 1 Energy to Replace 1 <blight> with 1 <badlands> in one of their lands. You may do likewise.",[Pn.TargetSpirit]:async({$:e,you:a,spirit:t})=>{await t.andAnotherSpirit(a,{text:e=>(e?"Target Spirit":"You")+" may pay 1 Energy to Replace 1 <blight> with 1 <badlands> in one of their lands.",now:async a=>{a.energy>0&&await a.forPiecesThatIs(e.Blight).optionallyPickOne((async e=>{await a.payEnergy(1),await e.replace([Ln.Badlands])}))}})},threshold:{[ir.Fire]:3,[ir.Earth]:1,[ir.Plant]:2}},{textArea:[.571,.733],text:"Target Spirit may Replace 1 <explorer> with 1 <beasts> in one of their lands. You may do likewise.",[Pn.TargetSpirit]:async({$:e,spirit:a,you:t})=>{await a.andAnotherSpirit(t,{text:e=>(e?"Target Spirit":"You")+" may Replace 1 <explorer> with 1 <beasts> in one of their lands.",now:async a=>{await a.forPiecesThatIs(e.Explorer).optionallyPickOne((async e=>{await e.replace([Ln.Beasts])}))}})},threshold:{[ir.Sun]:1,[ir.Fire]:3,[ir.Animal]:1}}]},bc={name:"Firestorm",type:kn.Innate,speed:sr.Fast,set:gn.FeatherAndFlame,target:or.Land,targetFilter:[dr.Blight],range:0,hasPushOrGather:!0,mayAlwaysDowngrade:!0,hasDestroyInstructions:!0,hasDamageInstructions:!0,effects:[{text:"1 Damage per 2 <fire> you have.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElementsToCombo({[ir.Fire]:2});const n=Math.floor(a.elements[ir.Fire]/2);a.hasElements({[ir.Fire]:4,[ir.Air]:2})?await e.splittedDamage({amount:n,lands:a.inLandsWhere((a=>a.has(e.Blight)||a===t)).items,effect:{text:"Split this Power's Damage however desired between target land and any number of your lands with <blight>."}}):await t.damage(n)},threshold:{[ir.Plant]:1,[ir.Fire]:2}},{instead:!0,text:"Instead, 1 Damage per <fire> you have.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElementsToCombo({[ir.Fire]:1});const n=a.elements[ir.Fire];a.hasElements({[ir.Fire]:4,[ir.Air]:2})?await e.splittedDamage({amount:n,lands:a.inLandsWhere((a=>a.has(e.Blight)||a===t)).items,effect:{text:"Split this Power's Damage however desired between target land and any number of your lands with <blight>."}}):await t.damage(n)},threshold:{[ir.Plant]:3,[ir.Fire]:1}},{text:"Split this Power's Damage however desired between target land and any number of your lands with <blight>.",[Pn.InTargetLand]:async()=>{},threshold:{[ir.Fire]:4,[ir.Air]:2}},{text:"In a land with <blight> where you have <presence>, Push all <dahan>. Destroy all Invaders and <beasts>. Add 1 <blight>.",[Pn.InTargetLand]:async({$:e,you:a})=>{await a.inLandsWith(e.Blight).pickOne((async a=>{e.dontCountAs(Ln.Beasts),await a.pushAll(e.Dahan),await a.destroyAll(e.Invader),await a.destroyAll(e.Beasts),await a.addBlight(1)}))},threshold:{[ir.Fire]:7}}]},Tc={name:"Flames Fury",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Sun,ir.Fire,ir.Plant],set:gn.FeatherAndFlame,target:or.Spirit,effects:[{textArea:[.627,.667],text:"Target Spirit gains 1 Energy.",[Pn.TargetSpirit]:async({spirit:e})=>{await e.gainEnergy(1)}},{textArea:[.627,.906],text:"Target Spirit does +1 Damage with each Damage dealing Power they use this turn.<br><br>(Powers which Damage multiple lands or each Invader only get 1 extra Damage total. Repeated Powers keep the +1 boost. Destroy effects don't get any bonus.)",[Pn.TargetSpirit]:async({spirit:e,you:a})=>{await e.gainDamageBoost({amount:1,source:a})}}]},Ac={name:"Flash-Fires",type:kn.Unique,speed:sr.Slow,energy:2,elements:[ir.Fire,ir.Air],set:gn.FeatherAndFlame,target:or.Land,range:1,generatesFear:!0,hasDamageInstructions:!0,mayBeSpeed:{effect:{textArea:[.826,.936],text:"If you have 2 <air>:<br>This Power is <fast>.",[Pn.Now]:async({action:e})=>{await e.spirit.convertElements({[ir.Air]:2})}},condition:({speed:e,spirit:a})=>e===sr.Fast&&a.hasElementsWithConvert({[ir.Air]:2})},fullText:["1 <fear>.","1 Damage.","If you have 2 <air>:<br>This Power is <fast>."],effects:[{textArea:[.65,.69],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.696,.736],text:"1 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(1)}}]},Ic={name:"The Burned Land Regrows",type:kn.Innate,speed:sr.Slow,set:gn.FeatherAndFlame,target:or.Land,range:0,blightWhiteListedPower:!0,effects:[{text:"If target land has 2 <blight> or more, remove 1 <blight>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.hasAtLeast(2,e.Blight)&&await a.removeBlight()},threshold:{[ir.Fire]:4,[ir.Plant]:1}},{instead:!0,text:"Instead, remove 1 <blight>.",[Pn.InTargetLand]:async({land:e})=>{await e.removeBlight()},threshold:{[ir.Fire]:4,[ir.Plant]:2}},{text:"Remove another <blight>.",[Pn.InTargetLand]:async({land:e})=>{await e.removeBlight()},threshold:{[ir.Fire]:5,[ir.Plant]:2,[ir.Earth]:2}}]},Pc={name:"Threatening Flames",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Fire,ir.Plant],set:gn.FeatherAndFlame,target:or.Land,targetFilter:[dr.BlightAndInvaders],range:0,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.607,.647],text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{text:"Push 1 <explorer>/<town> per Terror Level from target land to adjacent lands without your <presence>.<br><br>If there are no such adjacent lands, +2 <fear>.",[Pn.InTargetLand]:async({$:e,land:a,you:t})=>{a.inAdjacentLandsWhere((e=>!e.hasPresenceOf(t))).count>0?await e.addSubEffect({textArea:[.647,.798],text:"Push 1 <explorer>/<town> per Terror Level from target land to adjacent lands without your <presence>.",[Pn.Now]:async()=>{await a.push({amount:e.terrorLevel,pieces:e.ExplorerOrTown,destinationFilter:e=>!e.hasPresenceOf(t)})}}):await e.addSubEffect({textArea:[.832,.923],text:"If there are no such adjacent lands, +2 <fear>.",[Pn.Now]:async()=>{await a.fear(2)}})}}]},Sc={name:"Boon Of Watchful Guarding",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Earth,ir.Plant,ir.Animal],set:gn.HorizonsOfSpiritIsland,target:or.Spirit,effects:[{textArea:[.601,.794],text:"In one of Target Spirit's lands, Defend 4.<br><br>Target Spirit may pay 1 Energy to instead Defend 8.",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{await e.chooseBetween({effects:[{actionId:"Defend",textArea:[.601,.692],text:"In one of Target Spirit's lands, Defend 4.",[Pn.Now]:async()=>{await a.inLands().pickOne((async e=>{await e.defend(4)}))}},{actionId:"PayEnergy",textArea:[.703,.791],text:"Target Spirit may pay 1 Energy to instead Defend 8.",condition:()=>a.energy>=1,[Pn.Now]:async()=>{await a.payEnergy(1),await a.inLands().pickOne((async e=>{await e.defend(8)}))}}]})}}]},Ec={name:"Eerie Noises And Moving Trees",type:kn.Unique,speed:sr.Slow,energy:2,elements:[ir.Moon,ir.Air,ir.Plant],set:gn.HorizonsOfSpiritIsland,target:or.Land,range:1,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.71,.75],text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.798,.838],text:"Push up to 2 <explorer>/<town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(2,e.ExplorerOrTown)}}]},Oc={name:"Mischief And Sabotage",type:kn.Innate,speed:sr.Fast,set:gn.HorizonsOfSpiritIsland,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Invaders],range:1,generatesFear:!0,effects:[{text:"1 <fear> and Defend 2.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1),await e.defend(2)},threshold:{[ir.Moon]:1,[ir.Plant]:2}},{instead:!0,text:"Instead, 1 <fear> and Defend 4.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1),await e.defend(4)},threshold:{[ir.Moon]:2,[ir.Plant]:3}},{instead:!0,text:"Instead, 3 <fear> and Defend 6.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(3),await e.defend(6)},threshold:{[ir.Moon]:2,[ir.Air]:2,[ir.Plant]:4}},{instead:!0,text:"Instead, 5 <fear> and Defend 12.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(5),await e.defend(12)},threshold:{[ir.Moon]:3,[ir.Air]:3,[ir.Plant]:5}}]},kc={name:"Mysterious Abductions",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Moon,ir.Fire,ir.Plant],set:gn.HorizonsOfSpiritIsland,target:or.Land,range:0,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.705,.745],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.794,.834],text:"1 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(1)}}]},Cc={name:"Whispered Guidance Through The Night",type:kn.Unique,speed:sr.Slow,energy:0,elements:[ir.Moon,ir.Air,ir.Plant],set:gn.HorizonsOfSpiritIsland,target:or.Land,sourceFilter:[dr.Jungle],range:1,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.682,.722],text:"Gather up to 3 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(3,e.Dahan)}},{textArea:[.762,.855],text:"If Invaders and <dahan> are present, 1 <fear>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.hasAllOf(e.Invader,e.Dahan)&&await a.fear(1)}}]},Dc={name:"Call On Herders For Aid",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Sun,ir.Fire,ir.Earth,ir.Animal],set:gn.HorizonsOfSpiritIsland,target:or.Land,range:2,hasPushOrGather:!0,effects:[{textArea:[.684,.724],text:"Gather up to 2 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(2,e.Dahan)}},{textArea:[.762,.861],text:"For each <dahan> present, Push up to 1 <explorer>/<town>/<dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(a.numberOf(e.Dahan),e.ExplorerTownOrDahan)}}]},Bc={name:"Gift Of Searing Heat",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Sun,ir.Fire,ir.Air],set:gn.HorizonsOfSpiritIsland,target:or.Spirit,targetFilter:[fr.Another],hasDamageInstructions:!0,effects:[{textArea:[.679,.86],text:"Target Spirit gains 2 Energy.<or>Target Spirit may pay 1 Energy to do 1 Damage in one of their lands.",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{await e.chooseBetween({effects:[{actionId:"GainEnergy",textArea:[.682,.722],text:"Target Spirit gains 2 Energy.",[Pn.Now]:async()=>{await a.gainEnergy(2)}},{actionId:"Damage",textArea:[.768,.86],text:"Target Spirit may pay 1 Energy to do 1 Damage in one of their lands.",players:[a],condition:()=>a.energy>=1,[Pn.Now]:async()=>{await a.payEnergy(1),await a.inLands().pickOne((async e=>{await e.damage(1)}))}}]})}}]},Lc={name:"Scorch With Waves Of Heat",type:kn.Innate,speed:sr.Slow,set:gn.HorizonsOfSpiritIsland,target:or.Land,sourceFilter:[dr.SacredSite],range:1,hasDamageInstructions:!0,effects:[{text:"2 Damage, to <explorer> only.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(2,e.Explorer)},threshold:{[ir.Fire]:2,[ir.Air]:2}},{text:"2 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(2)},threshold:{[ir.Fire]:3,[ir.Earth]:2}},{text:"2 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(2)},threshold:{[ir.Fire]:4,[ir.Air]:1,[ir.Earth]:3}},{text:"1 Damage to each Invader.",[Pn.InTargetLand]:async({land:e})=>{await e.damageEach(1)},threshold:{[ir.Fire]:5,[ir.Air]:2,[ir.Earth]:3}}]},Fc={name:"Stinging Sandstorm",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Fire,ir.Air,ir.Earth],set:gn.HorizonsOfSpiritIsland,target:or.Land,range:1,hasPushOrGather:!0,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.605,.645],text:"Gather up to 1 of your <presence>.",[Pn.InTargetLand]:async({$:e,owner:a,land:t})=>{await t.gather({quantifier:ur.UpTo,amount:1,pieces:e.Presence,owner:a})}},{textArea:[.662,.702],text:"1 <fear> and 1 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1),await e.damage(1)}}]},Rc={name:"Sweltering Exhaustion",type:kn.Unique,speed:sr.Fast,energy:2,elements:[ir.Fire,ir.Air],set:gn.HorizonsOfSpiritIsland,target:or.Land,sourceFilter:[dr.SacredSite],range:2,generatesFear:!0,effects:[{textArea:[.709,.749],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.798,.838],text:"Skip up to 1 Ravage/Build Action.",[Pn.InTargetLand]:async({land:e})=>{await e.skipInvaderAction({filter:({invaderAction:e})=>e===qr.Build||e===qr.Ravage})}}]},Mc={name:"Exaltation Of Tangled Growth",type:kn.Unique,speed:sr.Slow,energy:0,elements:[ir.Water,ir.Earth,ir.Plant],set:gn.HorizonsOfSpiritIsland,target:or.Spirit,targetFilter:[fr.Another],effects:[{textArea:[.67,.762],text:"Target Spirit may pay 1 Energy to Gain a Power Card.",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{a.energy>=1&&await e.may({prompt:"Pay 1 Energy to Gain a Power Card?"})&&(await a.payEnergy(1),await a.gainPowerCard())}},{textArea:[.798,.887],text:"You may pay 2 Energy to Gain a Power Card.",[Pn.TargetSpirit]:async({$:e,you:a})=>{a.energy>=2&&await e.may({prompt:"Pay 2 Energy to Gain a Power Card?"})&&(await a.payEnergy(2),await a.gainPowerCard())}}]},Nc={name:"Foul Vapors And Fetid Muck",type:kn.Unique,speed:sr.Slow,energy:0,elements:[ir.Fire,ir.Air,ir.Water,ir.Earth],set:gn.HorizonsOfSpiritIsland,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Invaders],range:2,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.712,.752],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.799,.839],text:"Push up to 2 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(2,e.Explorer)}}]},Wc={name:"Intractable Thickets And Thorns",type:kn.Unique,speed:sr.Fast,energy:2,elements:[ir.Moon,ir.Water,ir.Earth,ir.Plant],set:gn.HorizonsOfSpiritIsland,target:or.Land,range:1,generatesFear:!0,effects:[{textArea:[.71,.75],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.801,.841],text:"Defend 5.",[Pn.InTargetLand]:async({land:e})=>{await e.defend(5)}}]},$c={name:"Open Shifting Waterways",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Moon,ir.Water,ir.Animal],set:gn.HorizonsOfSpiritIsland,target:or.Land,range:1,hasPushOrGather:!0,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.679,.719],text:"Gather up to 2 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(2,e.Dahan)}},{textArea:[.758,.854],text:"If <dahan> and Invaders are present, 1 <fear> and 1 Damage.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.hasAllOf(e.Dahan,e.Invader)&&(await a.fear(1),await a.damage(1))}}]},Gc={name:"Spreading And Dreadful Mire",type:kn.Innate,speed:sr.Slow,set:gn.HorizonsOfSpiritIsland,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Invaders],range:1,hasPushOrGather:!0,generatesFear:!0,hasDamageInstructions:!0,effects:[{text:"Move 1 <presence> from the origin <sacred> to the target land. (This is required.)",[Pn.InTargetLand]:async({$:e,owner:a,land:t,power:n})=>{await n.validOriginsGivenTargetLand(t).pickOne((async n=>{await n.move({amount:1,pieces:e.Presence,owner:a,locations:{target:zn.ToThisLocation,location:t}})}),{prompt:"Select origin land."})},threshold:{[ir.Water]:1}},{text:"1 <fear>. 1 Damage. Push 1 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.addSubEffectUntilEndOfTurn({effects:[{text:"1 <fear>",[Pn.Now]:async()=>{await a.fear(1)}},{text:"1 Damage.",[Pn.Now]:async()=>{await a.damage(1)}},{text:"Push 1 <dahan>.",[Pn.Now]:async()=>{await a.pushOne(e.Dahan)}}]})},threshold:{[ir.Moon]:1,[ir.Water]:2,[ir.Earth]:1}},{text:"1 <fear>. 1 Damage. Push 1 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.addSubEffectUntilEndOfTurn({effects:[{text:"1 <fear>",[Pn.Now]:async()=>{await a.fear(1)}},{text:"1 Damage.",[Pn.Now]:async()=>{await a.damage(1)}},{text:"Push 1 <dahan>.",[Pn.Now]:async()=>{await a.pushOne(e.Dahan)}}]})},threshold:{[ir.Moon]:2,[ir.Water]:3,[ir.Earth]:2}},{text:"2 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(2)},threshold:{[ir.Moon]:3,[ir.Water]:4,[ir.Earth]:3,[ir.Plant]:2}}]},Uc={name:"Death Approaches From Beneath The Surface",type:kn.Innate,speed:sr.Slow,set:gn.HorizonsOfSpiritIsland,target:or.Land,targetFilter:[dr.Invaders],range:1,hasPushOrGather:!0,generatesFear:!0,hasDamageInstructions:!0,effects:[{text:"If you don't have <presence> in target land, Gather 1 of your <presence>. (This is required.)",[Pn.InTargetLand]:async({$:e,owner:a,land:t})=>{t.hasPresenceOf(a)||await t.gather({amount:1,pieces:e.Presence,owner:a})},threshold:{[ir.Fire]:1,[ir.Animal]:1}},{text:'1 Damage. (+1 for your "Territorial Aggression" Special Rule)',[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(1,e.Invader)},threshold:{[ir.Fire]:2,[ir.Earth]:1,[ir.Animal]:2}},{text:"2 Damage.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(2,e.Invader)},threshold:{[ir.Fire]:3,[ir.Earth]:1,[ir.Animal]:3}},{effects:[{text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{text:"4 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(4)}}],threshold:{[ir.Fire]:4,[ir.Earth]:2,[ir.Animal]:5}}]},Hc={name:"Ferocious Rampage",type:kn.Unique,speed:sr.Slow,energy:2,elements:[ir.Fire,ir.Animal],set:gn.HorizonsOfSpiritIsland,target:or.Land,range:0,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.637,.677],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.726,.766],text:"3 Damage to <explorer>/<town> only.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(3,e.ExplorerOrTown)}}]},qc={name:"Gift Of Furious Might",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Moon,ir.Fire,ir.Animal],set:gn.HorizonsOfSpiritIsland,target:or.Spirit,targetFilter:[fr.Another],effects:[{textArea:[.621,.756],text:"Once this turn, Target Spirit may deal +3 Damage when using a Damage-dealing Power.",[Pn.TargetSpirit]:async({spirit:e,you:a})=>{await e.gainDamageBoost({amount:3,source:a,once:!0})}}]},jc={name:"Herd Towards The Lurking Maw",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Water,ir.Earth,ir.Animal],set:gn.HorizonsOfSpiritIsland,target:or.Land,range:0,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.71,.75],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.796,.836],text:"Gather up to 1 <explorer>/<town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(1,e.ExplorerOrTown)}}]},_c={name:"Mark Territory With Scars And Teeth",type:kn.Unique,speed:sr.Fast,energy:2,elements:[ir.Sun,ir.Earth,ir.Animal],set:gn.HorizonsOfSpiritIsland,target:or.Land,range:0,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.664,.704],text:"Defend 9.",[Pn.InTargetLand]:async({land:e})=>{await e.defend(9)}},{textArea:[.753,.793],text:"2 <fear> if Invaders are present.",[Pn.InTargetLand]:async({land:e})=>{e.hasInvaders&&await e.fear(2)}},{textArea:[.837,.877],text:"Push 2 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.push({amount:2,pieces:e.Dahan})}}]},Vc={name:"Gift Of The Sunlit Air",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Sun,ir.Fire,ir.Air],set:gn.HorizonsOfSpiritIsland,target:or.Spirit,effects:[{textArea:[.638,.745],text:"Target Spirit gets <range+1> with all their Powers.",[Pn.TargetSpirit]:async({$:e,you:a,spirit:t})=>{await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({icon:"<range+1>",spirit:a,players:[t]}),[Pn.ExtraRange]:e=>e.spirit===t?1:0})}},{textArea:[.779,.877],text:"If you target another Spirit they gain 1 Energy.",[Pn.TargetSpirit]:async({you:e,spirit:a})=>{a!==e&&await a.gainEnergy(1)}}]},Jc={name:"Gift Of Wind-Sped Steps",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Air,ir.Animal],set:gn.HorizonsOfSpiritIsland,target:or.Spirit,hasPushOrGather:!0,effects:[{textArea:[.64,.778],text:'Once this turn, Target Spirit may choose 1 of their <slow> Powers with a "Push" or "Gather" instruction and make that Power <fast> (for this turn).',[Pn.TargetSpirit]:async({spirit:e})=>{await e.gainMakeFastBuff({filter:e=>!0===e.data.hasPushOrGather})}},{textArea:[.815,.91],text:"If you target another Spirit, they gain 1 Energy.",[Pn.TargetSpirit]:async({you:e,spirit:a})=>{a!==e&&await a.gainEnergy(1)}}]},zc={name:"Scatter To The Winds",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Fire,ir.Air,ir.Water],set:gn.HorizonsOfSpiritIsland,target:or.Land,range:2,hasPushOrGather:!0,effects:[{textArea:[.693,.842],text:"Choose up to 5 <explorer>/<town>/<dahan>.<br>Push them to as many different lands as possible.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.push({amount:5,pieces:e.ExplorerTownOrDahan,quantifier:ur.UpTo,differentLands:!0})}}]},Yc={name:"Tempest Of Leaves And Branches",type:kn.Unique,speed:sr.Fast,energy:2,elements:[ir.Sun,ir.Air,ir.Plant],set:gn.HorizonsOfSpiritIsland,target:or.Land,sourceFilter:[dr.SacredSite],range:1,hasDamageInstructions:!0,effects:[{textArea:[.679,.863],text:"Choose up to 5 different Invaders (in target land).<br><br>1 Damage to each of them.",[Pn.InTargetLand]:async({land:e})=>{await e.damageDifferent(5)}}]},Kc={name:"Violent Windstorms",type:kn.Innate,speed:sr.Slow,set:gn.HorizonsOfSpiritIsland,target:or.Land,range:1,hasPushOrGather:!0,generatesFear:!0,hasDamageInstructions:!0,effects:[{text:"Push up to 1 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a,action:t})=>{t.data.moved=await a.pushUpTo(1,e.Explorer)},threshold:{[ir.Sun]:1,[ir.Air]:2}},{effects:[{text:"1 <fear>. Push up to 2 <explorer>/<town>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{text:"Push up to 2 <explorer>/<town>.",[Pn.InTargetLand]:async({$:e,land:a,action:t})=>{t.data.moved.push(...await a.pushUpTo(2,e.ExplorerOrTown))}}],threshold:{[ir.Sun]:2,[ir.Air]:3}},{text:"For each Invader Pushed by this Power, 1 Damage in the land it was Pushed to.",[Pn.InTargetLand]:async({action:e})=>{if(e.data.moved.length>0){const a=Dr(e.data.moved.map((e=>e.destination)));for(const t of a){const a=e.data.moved.filter((e=>e.destination===t&&e.piece.isInvader&&e.movement===Mr.Push)).length;await t.damage(a)}}},threshold:{[ir.Sun]:2,[ir.Air]:4}},{text:"4 Damage (in target land).",[Pn.InTargetLand]:async({land:e})=>{await e.damage(4)},threshold:{[ir.Sun]:3,[ir.Air]:5}}]},Qc={name:"Absolute Stasis",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Air,ir.Earth],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.NonOceanLand],range:2,mayUse:({spirit:e})=>e.time>=1,effects:[{textArea:[.601,.641],text:"Cost to use: 1 Time.",[Pn.InTargetLand]:async({you:e})=>{await e.spendTime(1)}},{textArea:[.644,.921],text:"Until the end of the <slow> phase, target land and everything in it cease to exist for all purposes except checking victory/defeat.<br><br>(You cannot target into, out of, or through where the land was.) This cannot target an Ocean even if Oceans are in play.",[Pn.InTargetLand]:async({$:e,...a})=>{a.land.exists=!1,await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===a.land?a.effect.text:void 0,[Pn.AfterSlowPhase]:()=>(e.removeThisEffect(),a.land.exists=!0,e.setupAdjacencies(),Promise.resolve())}),e.setupAdjacencies()}}]},Xc={name:"Blur The Arc Of Years",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Moon,ir.Air],set:gn.JaggedEarth,target:or.Land,range:1,hasPushOrGather:!0,blightWhiteListedPower:!0,effects:[{textArea:[.59,.676],text:"If no <dahan>/Invaders are present: Remove 1 <blight>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.dontHaveAnyOf(e.Dahan,e.Invader)&&await a.removeBlight()}},{textArea:[.684,.761],text:"If Invaders are present: they Build, then Ravage.",[Pn.InTargetLand]:async({land:e})=>{e.hasInvaders&&(await e.doExtraBuild(),await e.doExtraRavage())}},{textArea:[.768,.854],text:"If <dahan> are present: Add 1 <dahan>. Push up to 2 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.has(e.Dahan)&&(await a.add(1,e.Dahan),await a.pushUpTo(2,e.Dahan))}},{textArea:[.863,.939],text:"You may Repeat this Power (once) on the same land by spending 1 Time.",[Pn.InTargetLand]:async({$:e,power:a,land:t,you:n,isRepeat:r})=>{!r&&n.time>=1&&await e.may({prompt:"Spend 1 Time to Repeat this Power?"})&&(await n.spendTime(1),await a.repeatInLocations([t]))}}]},Zc={name:"Pour Time Sideways",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Moon,ir.Air,ir.Water],set:gn.JaggedEarth,target:or.Spirit,targetFilter:[fr.Yourself],mayUse:({spirit:e})=>e.time>=3,effects:[{textArea:[.602,.642],text:"Cost to Use: 3 Time.",[Pn.TargetSpirit]:async({you:e})=>{await e.spendTime(3)}},{textArea:[.643,.94],text:'Move 1 of your <presence> to a different land with your <presence>.<br><br>On the board moved from: During the Invader Phase, Resolve Invader and "Each board / Each land..." Actions one fewer time.<br><br>On the board moved to: During the Invader Phase, Resolve Invader and "Each board / Each land..." Actions one more time.',[Pn.TargetSpirit]:async({$:e,power:a,spirit:t})=>{await t.presence().pickOne((async n=>{const r=n.location;await t.inLandsWhere((e=>e!==r)).pickOne((async n=>{await r.move({pieces:e.Presence,owner:t,locations:{target:zn.ToThisLocation,location:n}}),await r.boards().pickOne((async t=>{await n.boards().pickOne((async n=>{t!==n&&await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({textArea:[.722,.937],text:`On board ${t.name}: During the Invader Phase, Resolve Invader and "Each board / Each land..." Actions one fewer time.<br><br>On board ${n.name}: During the Invader Phase, Resolve Invader and "Each board / Each land..." Actions one more time.`,power:a.power}),[Pn.AdjustNumberOfActions]:({land:a,board:r})=>{let i=0;return![Gi.BlightedIsland,Gi.Event,Gi.Fear,Gi.HighImmigration,Gi.Ravage,Gi.Build,Gi.Explore].includes(e.phase)||void 0===a&&void 0===r||((void 0!==a&&a.boards().has(t)||r===t)&&(i-=1),(void 0!==a&&a.boards().has(n)||r===n)&&(i+=1)),i}})}))}))}))}))}}]},eh={name:"Slip The Flow Of Time",type:kn.Innate,speed:sr.Fast,set:gn.JaggedEarth,target:or.Spirit,mayUse:({power:e,spirit:a})=>a.time>=e.costTime,effects:[{text:"You may use this Power any number of times. Cost to use: 1 Time per previous use this turn.",[Pn.TargetSpirit]:async({power:e,you:a})=>{await a.spendTime(e.costTime)}},{text:"Target Spirit may Resolve 1 <slow> Power now.",[Pn.TargetSpirit]:async({spirit:e})=>{await e.powersWhere((e=>e.isA(En.Any)&&e.status===Md.PlayedSlow)).optionallyPickOne((async a=>{await e.targetAndResolvePower(a)}))},threshold:{[ir.Moon]:3,[ir.Air]:1}},{text:"Target Spirit may Reclaim 1 Power Card from their discarded or played cards. (If they Reclaim a card from play, they lose its Elements.)",[Pn.TargetSpirit]:async({spirit:e})=>{await e.powersWhere((e=>e.isA(En.AnyCard)&&!e.isInHand)).optionallyPickOne((async e=>{await e.reclaim()}))},threshold:{[ir.Sun]:2,[ir.Moon]:2}},{text:"Target Spirit may play a Power Card by paying its cost.",[Pn.TargetSpirit]:async({spirit:e})=>{await e.playAPowerCardByPayingItsCost()},threshold:{[ir.Sun]:3,[ir.Air]:2}},{[Pn.TargetSpirit]:async({$:e,power:a})=>{await e.addEffectUntilEndOfAction({[Pn.ActionEnds]:async()=>{await a.setStatus(Md.PlayedFast),await e.addEffectUntilEndOfTurn({[Pn.PowerCostExtraTime]:e=>e.power===a?1:0})}})}}]};var ah;!function(e){e.Discard="Discard",e.HighImmigration="HighImmigration",e.Ravage="Ravage",e.Build="Build",e.Explore="Explore",e.Deck="Deck"}(ah||(ah={}));const th={name:"The Past Returns Again",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Sun,ir.Moon],set:gn.JaggedEarth,target:or.Spirit,targetFilter:[fr.Yourself],mayUse:({$:e,spirit:a})=>e.playersCanJointlyPayEnergyAidedBy({energy:e.spiritCount})&&a.time>=e.spiritCount,effects:[{textArea:[.608,.684],text:"Cost to Use: N Time, and Spirits jointly pay N Energy (where N = # of players).",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{await a.spendTime(e.spiritCount),await e.payEnergyJointlyAidedBy({energy:e.spiritCount})}},{textArea:[.692,.913],text:"Swap the top card of the Invader Deck with a card in the Invader discard that is within 1 Invader Stage of it.<br>(The discarded card stays face-down. The card going onto the deck turns face-down. You can't swap cards that don't exist.)",[Pn.TargetSpirit]:async({$:e})=>{const a=e.invaderDeckInSlot(ah.Discard),t=e.stageNumbersInSlot(ah.Discard),n=[1,2,3].filter((a=>Math.abs(e.stage-a)<=1));e.invaderCardsInExploreDeck.length>0&&await e.chooseBetween({text:"Choose card from discard to swap.",effects:a.cards.map(((r,i)=>({actionId:null!==r?r:`Stage${t[i]}Card`,label:null!==r?`${Uo[r].text}`:`Stage ${t[i]} Card`,[Pn.Now]:async()=>{const t=e.invaderDeckInSlot(ah.Discard).possibleCardsAt(i);a.removeCard(i);const n=e.actualExploreCardIndex(0),r=e.exploreDeck.possibleCardsAt(n);await e.removeInvaderCard(0,{swapping:!0}),e.invaderDeckInSlot(ah.Discard).insertAtBottomOneOf(r),await e.addExploreCardToTop(t,n)},condition:()=>n.includes(t[i])})))})}}]},nh={name:"Visions Of A Shifting Future",type:kn.Innate,speed:sr.Slow,set:gn.JaggedEarth,target:or.Spirit,targetFilter:[fr.Yourself],fullText:["Threshold 1 <sun> 2 <moon> 2 <air>","Look at the top card of either the Invader Deck or (if relevant) the Event Deck.","Return it, then shuffle that deck's top 2 cards. (For the Invader Deck, differing Invader Stages may give away which card is next.)","Threshold 2 <sun> 3 <moon> 2 <air>","Instead of returning-and-shuffling, you may put the card you looked at on the bottom of its deck. You may not do this for cards specially placed during Setup."],effects:[{effects:[{text:"Look at the top card of either the Invader Deck or (if relevant) the Event Deck.",[Pn.TargetSpirit]:async({$:e,you:a})=>{const t={[ir.Sun]:2,[ir.Moon]:3,[ir.Air]:2},n=a.hasElementsWithConvert(t);await e.chooseBetween({effects:[{actionId:"Invader",text:"Look at the top card of the Invader Deck.",[Pn.Now]:async()=>{null!==await e.revealTopInvaderCard()&&await e.chooseBetween({text:"Return it, then shuffle that deck's top 2 cards. (For the Invader Deck, differing Invader Stages may give away which card is next.)<br><br>If you have 2 <sun>, 3 <moon>, and 2 <air>: Instead of returning-and-shuffling, you may put the card you looked at on the bottom of its deck. You may not do this for cards specially placed during Setup.",effects:[{actionId:"ReturnAndShuffle",text:"Return it, then shuffle that deck's top 2 cards.",[Pn.Now]:async()=>{await e.shuffleTopTwoInvaderCards()}},{actionId:"PutOnBottom",label:"Put the card on the bottom of its deck",text:"Instead of returning-and-shuffling, you may put the card you looked at on the bottom of its deck. You may not do this for cards specially placed during Setup.",condition:()=>n&&!e.invaderCardAtIndexIsSpecial(0),[Pn.Now]:async()=>{await a.convertElements(t),await e.putTopInvaderCardToBottom()}}]})},condition:()=>e.invaderCardsInExploreDeck.length>0},{actionId:"Event",text:"Look at the top card of the Event Deck.",condition:()=>!!e.config.events&&!e.eventCardsInDeck.isEmpty,[Pn.Now]:async()=>{await e.revealTopEventCard(),await e.chooseBetween({effects:[{actionId:"ReturnAndShuffle",text:"Return it, then shuffle that deck's top 2 cards.",[Pn.Now]:async()=>{await e.shuffleTopTwoEventCards()}},{actionId:"PutOnBottom",label:"Put the card on the bottom of its deck",text:"Instead of returning-and-shuffling, you may put the card you looked at on the bottom of its deck. You may not do this for cards specially placed during Setup.",condition:()=>n&&!e.eventCardAtIndexIsSpecial(0),[Pn.Now]:async()=>{await a.convertElements(t),e.putTopEventCardToBottom()}}]})}}]})}}],threshold:{[ir.Sun]:1,[ir.Moon]:2,[ir.Air]:2}},{threshold:{[ir.Sun]:2,[ir.Moon]:3,[ir.Air]:2},[Pn.TargetSpirit]:async()=>{}}]},rh={name:"Forsake Society To Chase After Dreams",type:kn.Innate,speed:sr.Slow,set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Invaders],range:1,hasPushOrGather:!0,generatesFear:!0,effects:[{text:"After this Power Replaces pieces with <explorer>: Gather any number of those <explorer> into your lands. If target land has any <town>/<city> remaining, 1 <fear>.",[Pn.InTargetLand]:async({$:e,you:a,land:t,power:n,...r})=>{const i={triggerId:e.nextTriggerId(),[Pn.Now]:async({action:n})=>{await t.piecesWhere((e=>n.parentData.replacedExplorer.includes(e))).pickMultiple({optional:!0,repeatSame:!1,amount:n.parentData.replacedExplorer.length,forPickedItem:async e=>{await e.move({destinationFilter:e=>e.hasPresenceOf(a),movement:Mr.Gather})}}),t.has(e.TownOrCity)&&(await e.sendEvent({type:Tn.GenericSub,text:"Target land had <town>/<city> remaining."}),await t.fear(1))}};await e.addSubEffectUntilEndOfAction({[Pn.AfterReplacePieces]:async({added:a})=>{if(e.action.power===n)for(const{piece:n,location:s}of a)s===t&&n.isA(e.Explorer)&&(void 0===e.action.data.replacedExplorer&&(e.action.data.replacedExplorer=[]),e.action.data.replacedExplorer.push(n),await e.addTrigger(i,r.effect,r.action))}})}},{text:"Replace 1 <explorer> with 1 <explorer>",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.replaceOne({pieces:e.Explorer,withPiece:Ln.Explorer})},threshold:{[ir.Moon]:2}},{instead:!0,text:"Instead, Replace 1 <town> with 2 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.replaceOne({pieces:e.Town,withAmount:2,withPiece:Ln.Explorer})},threshold:{[ir.Moon]:2,[ir.Air]:1}},{instead:!0,text:"Instead, Replace 1 <city> with 3 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.replaceOne({pieces:e.City,withAmount:3,withPiece:Ln.Explorer})},threshold:{[ir.Moon]:3,[ir.Air]:2,[ir.Animal]:1}},{text:"Repeat this Power.",[Pn.InTargetLand]:async({power:e,isRepeat:a})=>{a||await e.repeat()},threshold:{[ir.Air]:4},dontResolveAlone:!0}]},ih={name:"Gift Of The Untamed Wild",type:kn.Unique,speed:sr.Slow,energy:0,elements:[ir.Moon,ir.Fire,ir.Air,ir.Plant],set:gn.JaggedEarth,target:or.Spirit,effects:[{textArea:[.647,.855],text:"Target Spirit chooses to either:<br><br>Add 1 <wilds> to one of their lands.<or>Replace 1 of their <presence> with 1 <disease>.",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{await e.chooseBetween({effects:[{actionId:"AddWilds",textArea:[.715,.755],text:"Add 1 <wilds> to one of their lands.",[Pn.Now]:async()=>{await a.inLands().pickOne((async a=>{await a.add(1,e.Wilds)}))}},{actionId:"Replace",textArea:[.802,.842],text:"Replace 1 of their <presence> with 1 <disease>.",[Pn.Now]:async()=>{await a.presence().pickOne((async e=>{await e.replace([Ln.Disease])}))}}]})}}]},sh={name:"Never Heard From Again",type:kn.Innate,speed:sr.Slow,set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Inland],range:0,generatesFear:!0,hasDestroyInstructions:!0,hasDamageInstructions:!0,fullText:["If this Power Destroys any <explorer>, 1 <fear>.","If this Power Destroys 5 or more <explorer>, +1 <fear>.","Threshold 1 <fire> 3 <plant>","Add 1 <badlands>.","Threshold 2 <plant>","Destroy up to 2 <explorer> per <badlands>/<beasts>/<disease>/<wilds>","Threshold 4 <plant> 1 <animal>","2 Damage.","Threshold 6 <plant>","Repeat this Power."],effects:[{text:"Add 1 <badlands>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Badlands)},threshold:{[ir.Fire]:1,[ir.Plant]:3}},{text:"Destroy up to 2 <explorer> per <badlands>/<beasts>/<disease>/<wilds>",[Pn.InTargetLand]:async({$:e,land:a,action:t})=>{t.data.removed=await a.destroyUpTo(2*(a.numberOf(e.Badlands)+a.numberOf(e.Beasts)+a.numberOf(e.Disease)+a.numberOf(e.Wilds)),e.Explorer)},threshold:{[ir.Plant]:2}},{text:"2 Damage.",[Pn.InTargetLand]:async({land:e,action:a})=>{a.data.removed.push(...await e.damage(2))},threshold:{[ir.Plant]:4,[ir.Animal]:1}},{text:"If this Power Destroys any <explorer>, 1 <fear>.<br>If this Power Destroys 5 or more <explorer>, +1 <fear>.",[Pn.InTargetLand]:async({$:e,action:a,land:t})=>{const n=a.data.removed.filter((a=>a.piece.isA(e.Explorer)&&wr[a.removement].isDestroyLike)).length;n>0&&n<5?(await e.sendEvent({type:Tn.GenericSub,text:"Never Heard From Again Destroyed at least one <explorer>."}),await t.fear(1)):n>=5&&(await e.sendEvent({type:Tn.GenericSub,text:"Never Heard From Again Destroyed at least 5 <explorer>."}),await t.fear(2))}},{text:"Repeat this Power.",[Pn.InTargetLand]:async({power:e,isRepeat:a})=>{a||await e.repeat()},threshold:{[ir.Plant]:6}}]},oh={name:"Perils Of The Deepest Island",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Moon,ir.Plant,ir.Animal],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Inland],range:0,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.679,.719],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.679,.719],text:"Add 1 <badlands>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Badlands)}},{textArea:[.722,.762],text:"Add 1 <beasts> within <range-1>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await t.inLandsWithin(1,a).pickOne((async a=>{await a.add(1,e.Beasts)}))}},{textArea:[.802,.842],text:"Push up to 2 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(2,e.Dahan)}}]},dh={name:"Society Dissolves At The Beckoning Heart",type:kn.Innate,speed:sr.Fast,set:gn.NatureIncarnate,target:or.Land,targetFilter:[dr.IncarnaLair],hasPushOrGather:!0,effects:[{textArea:[.271,.401],text:"For every 3 <explorer>/<dahan>, Downgrade a different <town>/<city>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.downgrade({amount:a.forEvery(3,e.ExplorerOrDahan),pieces:e.TownOrCity,different:!0})},threshold:{[ir.Moon]:1}},{textArea:[.436,.492],text:"Gather 1 <explorer>/<town> and 1 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherOne(e.ExplorerOrTown),await a.gatherOne(e.Dahan)},threshold:{[ir.Moon]:3,[ir.Air]:1}},{textArea:[.543,.712],text:"Once for every 6 <explorer>/<dahan> present (at <incarna-lair>): Gather any Invader within <range-air> one land towards <incarna-lair>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElementsToCombo({[ir.Air]:1}),await t.forPiecesWithin(a.elements[ir.Air],a).where((e=>e.location!==t&&e.isInvader)).pickMultiple({amount:t.forEvery(6,e.ExplorerOrDahan),forPickedItem:async e=>{await e.location.inAdjacentLands().withLeast((e=>e.distanceToLocation(t))).where((a=>a.distanceToLocation(t)<e.location.distanceToLocation(t))).pickOne((async a=>{await e.move({locations:{target:zn.ToThisLocation,location:a},movement:Mr.Gather})}),{prompt:`Pick land to Gather ${Zn[e.piece].text}`,highlightPieces:[e]})}})},threshold:{[ir.Moon]:4,[ir.Air]:1}}]},lh={name:"Softly Beckon Ever Inward",type:kn.Unique,speed:sr.Slow,energy:2,elements:[ir.Moon,ir.Air],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Inland],range:0,hasPushOrGather:!0,effects:[{textArea:[.657,.697],text:"Gather up to 2 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(2,e.Explorer)}},{textArea:[.716,.756],text:"Gather up to 2 <town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(2,e.Town)}},{textArea:[.779,.819],text:"Gather up to 2 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(2,e.Beasts)}},{textArea:[.84,.88],text:"Gather up to 2 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(2,e.Dahan)}}]},ch={name:"Swallowed By The Wilderness",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Fire,ir.Air,ir.Plant,ir.Animal],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Inland],range:0,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.687,.727],text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.742,.837],text:"1 Damage per <beasts>/<disease>/<wilds>/<badlands>. (Count max. 5 tokens.)",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(Math.min(a.numberOf(e.Badlands)+a.numberOf(e.Beasts)+a.numberOf(e.Disease)+a.numberOf(e.Wilds),5))}}]},hh={name:"A Dreadful Tide Of Scurrying Flesh",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Moon,ir.Air,ir.Water,ir.Animal],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.TwoBeasts],range:1,generatesFear:!0,effects:[{textArea:[.664,.867],text:"Remove up to half (round down) of <beasts> in target land.<br><br>For each <beasts> Removed, 2 <fear> and skip one Invader Action.",[Pn.InTargetLand]:async({$:e,land:a})=>{const t=(await a.remove({quantifier:ur.UpTo,amount:Math.floor(a.numberOf(e.Beasts)/2),pieces:e.Beasts})).length;await a.fear(2*t),await a.skipInvaderAction({textArea:[.819,.859],amount:t})}}]},uh={name:"Beset And Confound The Invaders",type:kn.Innate,speed:sr.Fast,set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.TwoBeastsAndInvaders],range:2,generatesFear:!0,fullText:["<beasts> (below) checks the number of <beasts> in target land.","Threshold 1 <air> 2 <animal> 2 <beasts>","2 <fear> and Defend 2","Threshold 2 <air> 3 <animal> 3 <beasts>","Instead, 3 <fear> and Defend 4.","Threshold 3 <air> 4 <animal> 4 <beasts>","Instead, 4 <fear> and Defend 7.","Threshold 4 <air> 1 <earth> 5 <animal> 5 <beasts>","Instead, 6 <fear> and Defend 10."],effects:[{text:"<beasts> (below) checks the number of <beasts> in target land.<br><br>2 <beasts>: 2 <fear> and Defend 2",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2),await e.defend(2)},threshold:{[ir.Air]:1,[ir.Animal]:2},targetLandThresholdCondition:e=>e.numberOf(Xn.Beasts)>=2},{instead:!0,text:"3 <beasts>: Instead, 3 <fear> and Defend 4.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(3),await e.defend(4)},threshold:{[ir.Air]:2,[ir.Animal]:3},targetLandThresholdCondition:e=>e.numberOf(Xn.Beasts)>=3},{instead:!0,text:"4 <beasts>: Instead, 4 <fear> and Defend 7.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(4),await e.defend(7)},threshold:{[ir.Air]:3,[ir.Animal]:4},targetLandThresholdCondition:e=>e.numberOf(Xn.Beasts)>=4},{instead:!0,text:"6 <beasts>: Instead, 6 <fear> and Defend 10.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(6),await e.defend(10)},threshold:{[ir.Air]:4,[ir.Earth]:1,[ir.Animal]:5},targetLandThresholdCondition:e=>e.numberOf(Xn.Beasts)>=5}]},gh={name:"Boon Of Swarming Bedevilment",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Air,ir.Water,ir.Animal],set:gn.JaggedEarth,target:or.Spirit,targetFilter:[fr.Another],hasPushOrGather:!0,effects:[{textArea:[.653,.785],text:"For the rest of this turn, each of target Spirit's <presence> grants Defend 1 in its land.",[Pn.TargetSpirit]:async({$:e,power:a,spirit:t})=>{await e.addEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({icon:"Defend<br><presence",power:a.power,players:[t]}),[Pn.DefendFromSpirits]:({land:e})=>e.numberOfPresenceOf(t)})}},{textArea:[.802,.888],text:"Target Spirit may Push up to 1 of their <presence>.",[Pn.TargetSpirit]:({spirit:e})=>e.presence().optionallyPickOne((async e=>{await e.push()}))}]},fh={name:"Ever-Multiplying Swarm",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Fire,ir.Earth,ir.Animal],set:gn.JaggedEarth,target:or.Land,range:0,effects:[{textArea:[.743,.783],text:"Add 2 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(2,e.Beasts)}}]},yh={name:"Guide The Way On Feathered Wings",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Sun,ir.Air,ir.Animal],set:gn.JaggedEarth,target:or.Land,range:1,effects:[{textArea:[.646,.886],text:"Move 1 <beasts> up to two lands. As it moves, up to 2 <dahan> may move with it, for part or all of the way.<br><br>The <beasts>/<dahan> may move to an adjacent land and then back.)",[Pn.InTargetLand]:async({$:e,land:a})=>{const t=await a.move({pieces:e.Beasts});if(t.length>0){const n=t[0].destination;await a.move({quantifier:ur.UpTo,amount:2,pieces:e.Dahan,locations:{target:zn.ToThisLocation,location:n}});const r=await n.move({pieces:e.Beasts});if(r.length>0){const a=r[0].destination;await n.move({quantifier:ur.UpTo,amount:2,pieces:e.Dahan,locations:{target:zn.ToThisLocation,location:a}})}}}}]},ph={name:"Pursue With Scratches Pecks And Stings",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Sun,ir.Fire,ir.Air,ir.Animal],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Beasts],range:2,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.677,.717],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.732,.831],text:"For each <beasts> past the first, Push 1 <explorer>/<town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.has(e.Beasts)&&(await a.possiblyDontCountPiecesAs(Ln.Beasts),await a.push({amount:Math.max(a.numberOf(e.Beasts)-1,0),pieces:e.ExplorerOrTown}))}}]},wh={name:"The Teeming Host Arrives",type:kn.Innate,speed:sr.Fast,set:gn.JaggedEarth,target:or.Land,range:2,hasPushOrGather:!0,effects:[{text:"Gather up to 1 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(1,e.Beasts)},threshold:{[ir.Air]:2,[ir.Animal]:1}},{instead:!0,text:"Instead, Gather up to 1 <beasts> per <air> you have.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await a.askToConvertElementsToCombo({[ir.Air]:1}),await t.gatherUpTo(a.elements[ir.Air],e.Beasts)},threshold:{[ir.Air]:3,[ir.Water]:1,[ir.Animal]:2}},{text:"Push up to 3 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(3,e.Beasts)},threshold:{[ir.Fire]:1,[ir.Air]:4,[ir.Animal]:2}}]},mh={name:"Boon Of Ancient Memories",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Moon,ir.Water,ir.Earth,ir.Plant],set:gn.JaggedEarth,target:or.Spirit,effects:[{textArea:[.618,.907],text:"If you target yourself, gain a Minor Power. Otherwise: Target Spirit gains a Power Card. If it's a Major Power, they may pay 2 Energy instead of Forgetting a Power Card.",[Pn.TargetSpirit]:async({$:e,you:a,spirit:t})=>{t===a?await t.gainPowerCard({powerType:kn.Minor}):await e.chooseBetween({effects:[{actionId:"MinorPower",textArea:[.723,.817],text:"Gain a Minor Power",[Pn.Now]:async()=>{await t.gainPowerCard({powerType:kn.Minor})}},{actionId:"MajorPower",textArea:[.723,.817],text:"Gain a Major Power",[Pn.Now]:async()=>{await t.gainPowerCard({powerType:kn.Major})}},{actionId:"PayEnergy",textArea:[.814,.906],text:"Pay 2 Energy to Gain a Major Power without Forgetting a Power Card.",[Pn.Now]:async()=>{await t.payEnergy(2),await t.gainPowerCard({powerType:kn.Major,withoutForgetting:!0})},condition:()=>t.energy>=2}]})}}]},vh={name:"Elemental Teachings",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Moon,ir.Air,ir.Earth],set:gn.JaggedEarth,target:or.Spirit,effects:[{textArea:[.64,.68],text:"Prepare 1 Element Marker.",[Pn.TargetSpirit]:async({you:e})=>{await e.prepareElement()}},{textArea:[.699,.897],text:"Discard up to 3 Element Markers. Target Spirit gains those Elements. (They can be any combination of Elements - the same or different.)",[Pn.TargetSpirit]:async({you:e,spirit:a})=>{const t=await e.discardElements(3,{optional:!0});await a.gainElementsUntilEndOfTurn(t)}}]},xh={name:"Learn The Invaders Tactics",type:kn.Innate,speed:sr.Fast,set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Invaders],range:1,effects:[{text:"Defend 2",[Pn.InTargetLand]:async({land:e})=>{await e.defend(2)},threshold:{[ir.Earth]:2}},{instead:!0,text:"Instead, Defend 3",[Pn.InTargetLand]:async({land:e})=>{await e.defend(3)},threshold:{[ir.Air]:1,[ir.Earth]:2}},{instead:!0,text:"Instead, Defend 2 per card in the Invader discard pile.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.defend(Math.max(e.invaderCardsInSlot(ah.Discard).length))},threshold:{[ir.Moon]:2,[ir.Air]:3,[ir.Earth]:4}}]},bh={name:"Observe The Ever Changing World",type:kn.Innate,speed:sr.Fast,set:gn.JaggedEarth,target:or.Land,range:1,effects:[{text:"Prepare 1 Element Marker.",[Pn.InTargetLand]:async({you:e})=>{await e.prepareElement()},threshold:{[ir.Moon]:1}},{instead:!0,text:"After each of the next three Actions that change which pieces are in target land, Prepare 1 Element Marker.",[Pn.InTargetLand]:async({$:e,you:a,land:t,...n})=>{let r=0;const i={triggerId:e.nextTriggerId(),[Pn.Now]:async()=>{r<3&&(await a.prepareElement(),r+=1)}};await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===t?`${n.effect.text}<br><br>(${3-r} left.)`:void 0,[Pn.AfterAddingPiece]:async a=>{a.land===t&&a.additions.length>0&&await e.addTrigger(i,n.effect,n.action)},[Pn.AfterRemovePiece]:async a=>{a.location===t&&await e.addTrigger(i,n.effect,n.action)},[Pn.AfterAddingStrife]:async({piece:a})=>{a.location===t&&await e.addTrigger(i,n.effect,n.action)},[Pn.AfterMoving]:async a=>{a.source!==t&&a.destination!==t||a.movement===Mr.Relocate||await e.addTrigger(i,n.effect,n.action)}})},threshold:{[ir.Moon]:2,[ir.Air]:1}}]},Th={name:"Share Mentorship And Expertise",type:kn.Innate,speed:sr.Fast,set:gn.NatureIncarnate,target:or.Spirit,targetFilter:[fr.Another],effects:[{textArea:[.252,.358],text:"Put a Power Card from your hand or discard into target Spirit's hand.",[Pn.TargetSpirit]:async({you:e,spirit:a,action:t})=>{await e.powersWhere((e=>e.isInHand||e.isInDiscard)).pickOne((async n=>{a!==e&&await a.givePower(n),t.data.givenPower=n}))},threshold:{[ir.Air]:1}},{textArea:[.365,.479],text:"Target Spirit may play that Power Card now by paying its cost.",[Pn.TargetSpirit]:async({spirit:e,action:a})=>{const t=a.data.givenPower;void 0!==t&&await e.playAPowerCardByPayingItsCost((e=>e===t))},threshold:{[ir.Air]:3,[ir.Earth]:2}},{textArea:[.483,.645],text:"Target Spirit may Repeat that Power Card once this turn by paying its cost.",[Pn.TargetSpirit]:async({$:e,spirit:a,action:t})=>{const n=t.data.givenPower;await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({power:n.power,players:[a]}),[Pn.MayRepeatPowercard]:({power:e,speed:t})=>e===n&&e.costToPlay<=a.energy&&e.possibleToRepeatAtSpeed(t),[Pn.RepeatPowerCard]:async({power:a,speed:t})=>{a===n&&e.removeThisEffect(),await a.payForPlay(),await a.replay(t)}})},threshold:{[ir.Sun]:1,[ir.Air]:4,[ir.Earth]:3}},{textArea:[.652,.813],text:"Prepare 1 Element Marker matching an Element on that Power Card. Prepare 1 Element Marker of your choice.",[Pn.TargetSpirit]:async({you:e,action:a})=>{const t=a.data.givenPower,n=t.power===Ui.ElementalBoon?kd:t.data.elements;void 0!==n&&n.length>0&&await e.prepareElement(n),await e.prepareElement()},threshold:{[ir.Air]:1}}]},Ah={name:"Share Secrets Of Survival",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Sun,ir.Air,ir.Earth],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],range:1,hasPushOrGather:!0,effects:[{textArea:[.592,.939],text:"Each time <dahan> would be Destroyed in target land, Destroy 2 fewer <dahan>.<or>Gather up to 2 <dahan>.<br><br>If you have 3 <air>:<br>You may do both.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{const n={actionId:"DestroyFewer",textArea:[.588,.692],text:"Each time <dahan> would be Destroyed in target land, Destroy 2 fewer <dahan>",[Pn.Now]:async({effect:a})=>{await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===t?a.text:void 0,[Pn.OrderOfRemoveAllMightMatter]:()=>!0,[Pn.PreventRemovePiece]:async a=>{const n=e.action.data.savedDahanThisAction??0;return!!(a.location===t&&a.piece.isA(e.Dahan)&&wr[a.removement].isDestroyLike&&n<2)&&(e.action.data.savedDahanThisAction=(n??0)+1,await e.sendEvent({type:Tn.GenericSub,text:"<p>ShareSecretsOfSurvival</p> saved the <dahan> from Destruction."}),!0)}})}},r={actionId:"GatherDahan",textArea:[.739,.779],text:"Gather up to 2 <dahan>.",[Pn.Now]:async()=>{await t.gatherUpTo(2,e.Dahan)}};await e.chooseBetween({effects:[n,r,{actionId:"DoBoth",textArea:[.893,.933],text:"Do both.",condition:()=>!e.treatingAllOrsAsAnds&&a.hasElementsWithConvert({[ir.Air]:3}),[Pn.Now]:async()=>{await a.convertElements({[ir.Air]:3}),await e.addSubEffectUntilEndOfTurn({effects:[n,r]})}}]})}}]},Ih={name:"Study The Invader's Fears",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Moon,ir.Air,ir.Animal],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Town,dr.City],range:0,generatesFear:!0,effects:[{textArea:[.692,.732],text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.748,.841],text:"Turn the top card of the Fear Deck face-up.",[Pn.InTargetLand]:async({$:e})=>{const a=await e.revealTopFearCard();null!==a&&await e.query({query:An.ClickToContinueCard,items:[a],actionIds:[a]})}}]},Ph={name:"Dissolving Vapors",type:kn.Unique,speed:sr.Slow,energy:2,elements:[ir.Air,ir.Water],set:gn.JaggedEarth,target:or.Land,range:0,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.68,.72],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.745,.785],text:"1 Damage to each Invader.",[Pn.InTargetLand]:async({land:e})=>{await e.damageEach(1)}},{textArea:[.807,.847],text:"1 Damage to each <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damageEach(1,e.Dahan)}}]},Sh={name:"Flowing And Silent Forms Dart By",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Moon,ir.Air,ir.Water],set:gn.JaggedEarth,target:or.Land,range:0,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.598,.638],text:"2 <fear> if Invaders are present.",[Pn.InTargetLand]:async({land:e})=>{e.hasInvaders&&await e.fear(2)}},{textArea:[.657,.789],text:"When <presence> in target land would be Destroyed, its owner may if possible, instead Push that <presence>.",[Pn.InTargetLand]:async({$:e,land:a,effect:t})=>{await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===a?t.text:void 0,[Pn.PreventRemovePiece]:async({piece:e,location:t,removement:n})=>{if(t===a&&wr[n].isDestroyLike&&e.isPresence){return(await a.push({piece:e,quantifier:ur.May})).length>0}return!1}})}},{textArea:[.805,.939],text:"You may Gather 1 <presence>/<sacred> of another Spirit (with their permission).",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{const n=await t.gather({quantifier:ur.May,amount:1,pieces:e.Presence,pieceFilter:e=>e.owner!==a,pickPiecesEffect:{prompt:"Pick 1 <presence>/<sacred> to Gather. 2 <presence> left"}});n.length>0&&await t.gather({quantifier:ur.May,amount:1,pieces:e.Presence,pieceFilter:e=>e.location===n[0].source&&e.owner===n[0].piece.owner})}}]},Eh={name:"Lost In The Swirling Haze",type:kn.Innate,speed:sr.Slow,set:gn.JaggedEarth,target:or.Land,range:0,hasPushOrGather:!0,effects:[{text:"Push up to 1 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(1,e.Dahan)},threshold:{[ir.Air]:1,[ir.Water]:2}},{text:"Push up to 2 <explorer>/<dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(2,e.ExplorerOrDahan)},threshold:{[ir.Air]:2,[ir.Water]:3}},{text:"Push up to 2 <explorer>/<dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(2,e.ExplorerOrDahan)},threshold:{[ir.Air]:3,[ir.Water]:4}}]},Oh={name:"Suffocating Shroud",type:kn.Innate,speed:sr.Slow,set:gn.JaggedEarth,target:or.Land,range:0,hasDamageInstructions:!0,effects:[{text:"1 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(1)},threshold:{[ir.Moon]:1,[ir.Air]:2,[ir.Water]:1}},{text:"For each adjacent land with your <presence>, 1 Damage to a different Invader.",[Pn.InTargetLand]:async({you:e,land:a})=>{const t=a.inAdjacentLandsWhere((a=>a.hasPresenceOf(e))).count;await a.damageDifferent(t)},threshold:{[ir.Moon]:2,[ir.Air]:3,[ir.Water]:2}},{text:"1 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(1)},threshold:{[ir.Moon]:4,[ir.Air]:4,[ir.Water]:3}},{text:"1 Damage to each Invader.",[Pn.InTargetLand]:async({land:e})=>{await e.damageEach(1)},threshold:{[ir.Moon]:5,[ir.Air]:6,[ir.Water]:4}}]},kh={name:"The Fog Closes In",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Moon,ir.Air,ir.Water],set:gn.JaggedEarth,target:or.Land,range:0,hasPushOrGather:!0,hasDamageInstructions:!0,effects:[{textArea:[.674,.807],text:"For each adjacent land with your <presence>, 1 Damage to a different Invader.",[Pn.InTargetLand]:async({you:e,land:a})=>{const t=a.inAdjacentLandsWhere((a=>a.hasPresenceOf(e))).count;await a.damageDifferent(t)}},{textArea:[.824,.864],text:"Push 2 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.push({amount:2,pieces:e.Dahan})}}]},Ch={name:"Unnerving Pall",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Moon,ir.Air,ir.Animal],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Invaders],range:0,generatesFear:!0,effects:[{textArea:[.607,.921],text:"1 <fear>. Up to 3 damaged Invaders do not participate in Ravage.<or>1 <fear>. Defend 1 per <presence> you have in target land (when this Power is used).",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"DoNotParticipate",textArea:[.613,.706],text:"1 <fear>. Up to 3 damaged Invaders do not participate in Ravage.",effects:[{text:"1 <fear>.",[Pn.Now]:async()=>{await a.fear(1)}},{text:"Up to 3 damaged Invaders do not participate in Ravage.",[Pn.Now]:async({effect:t})=>{await a.fear(1),await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===a?t.text:void 0,[Pn.DoesNotParticipateInRavage]:async({location:t})=>{t===a&&await t.doNotParticipateInRavage({quantifier:ur.UpTo,pieceFilter:e=>e.damage>0,amount:3,pieces:e.Dahan})}})}}]},{actionId:"Defend",textArea:[.776,.917],text:"1 <fear>. Defend 1 per <presence> you have in target land (when this Power is used).",[Pn.Now]:async({you:e})=>{await a.fear(1),await a.defend(a.numberOfPresenceOf(e))}}]})}}]},Dh={name:"Air Moves Earth Endures",type:kn.Innate,speed:sr.Fast,set:gn.JaggedEarth,target:or.Land,range:1,hasPushOrGather:!0,effects:[{text:"Push up to 2 <explorer> or 1 <town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"PushExplorer",text:"Push up to 2 <explorer>",[Pn.Now]:async()=>{await a.pushUpTo(2,e.Explorer)}},{actionId:"PushTown",text:"Push 1 <town>",[Pn.Now]:async()=>{await a.pushOne(e.Town)}}]})},threshold:{[ir.Air]:3}},{text:"Defend 5.",[Pn.InTargetLand]:async({land:e})=>{await e.defend(5)},threshold:{[ir.Earth]:3}}]},Bh={name:"Boon Of Reimagining",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Moon],set:gn.JaggedEarth,target:or.Spirit,effects:[{textArea:[.631,.805],text:"Target Spirit may Forget a Power Card from hand or discard to draw 6 Minor Power Cards and gain 2 of them.",[Pn.TargetSpirit]:async({spirit:e})=>{(await e.forgetPowers({filter:e=>!e.isInPlay,optional:!0})).length>0&&await e.gainPowerCard({powerType:kn.Minor,drawAmount:6,keepAmount:2})}},{textArea:[.821,.911],text:"If you target another Spirit, they gain 1 Energy.",[Pn.TargetSpirit]:async({you:e,spirit:a})=>{a!==e&&await a.gainEnergy(1)}}]},Lh={name:"Fire Burns Water Soothes",type:kn.Innate,speed:sr.Slow,set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],range:1,blightWhiteListedPower:!0,generatesFear:!0,hasDamageInstructions:!0,effects:[{effects:[{text:"1 <fear>",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{text:"2 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(2)}}],threshold:{[ir.Fire]:3}},{text:"Remove 1 <blight>.",[Pn.InTargetLand]:async({land:e})=>{await e.removeBlight()},threshold:{[ir.Water]:3}}]},Fh={name:"Gather The Scattered Light Of Stars",type:kn.Unique,speed:sr.Slow,energy:0,elements:[ir.Moon],set:gn.JaggedEarth,target:or.Spirit,targetFilter:[fr.Yourself],fullText:["At the end of turn after discarding: Reclaim up to 2 cards to your hand.","You may then Forget a Unique Power Card to Reclaim up to 3 additional cards."],effects:[{textArea:[.653,.743],text:"At the end of turn after discarding: Reclaim up to 2 cards to your hand.",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{await e.addSubEffectUntilEndOfTimePasses({[Pn.AtTimePassesEnds]:async()=>{await a.reclaim(2),a.powersWhere((e=>e.isA(En.Unique))).count>0&&await e.addSubEffect({textArea:[.756,.888],[Pn.Now]:async()=>{await e.may({textArea:[.756,.888],prompt:"Forget a Unique Power Card to Reclaim up to 3 additional cards?"})&&(await a.forgetPowers({powerFilter:En.Unique}),await a.reclaimCards({amount:3,optional:!0}))}})}})}}]},Rh={name:"Peace Of The Nighttime Sky",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Moon],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],range:1,effects:[{textArea:[.621,.755],text:"If the Terror Level is I, Invaders do not Ravage in target land this turn.",[Pn.InTargetLand]:async({$:e,land:a})=>{1===e.terrorLevel&&await a.skipInvaderAction({text:"Invaders do not Ravage here this turn.",all:!0,filter:({invaderAction:e})=>e===qr.Ravage})}},{textArea:[.769,.906],text:"You may Repeat this Power. If you choose to do so, Forget this Power Card and gain <moon>.",[Pn.InTargetLand]:async({$:e,isRepeat:a,you:t,power:n})=>{!a&&await e.may({prompt:"Repeat this Power, Forget this Power Card and gain <moon>?"})&&(await t.targetAndResolvePower(n,!0),await n.forget(),await t.gainElementsUntilEndOfTurn({[ir.Moon]:1}))}}]},Mh={name:"Shape The Self Anew",type:kn.Unique,speed:sr.Slow,energy:0,elements:[ir.Moon],set:gn.JaggedEarth,target:or.Spirit,targetFilter:[fr.Yourself],fullText:["Gain a Minor Power.","You may Forget this Power Card to gain 3 Energy.","If you have 4 <moon>:<br>You may gain a Major Power instead of a Minor Power."],effects:[{textArea:[.595,.934],text:"Gain a Minor Power. If you have 4 <moon>:<br>You may gain a Major Power instead of a Minor Power.",[Pn.TargetSpirit]:async({spirit:e})=>{e.hasElementsWithConvert({[ir.Moon]:4})?await e.gainPowerCard():await e.gainPowerCard({powerType:kn.Minor})}},{textArea:[.659,.752],text:"You may Forget this Power Card to gain 3 Energy.",[Pn.TargetSpirit]:async({$:e,spirit:a,power:t})=>{t.owner===a&&await e.may({prompt:"Forget this Power Card to gain 3 Energy?"})&&(await t.forget(),await a.gainEnergy(3))}}]},Nh={name:"Sidereal Guidance",type:kn.Innate,speed:sr.Slow,set:gn.JaggedEarth,target:or.Land,range:1,hasPushOrGather:!0,effects:[{text:"Gather up to 1 <explorer>/<dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(1,e.ExplorerOrDahan)},threshold:{[ir.Moon]:2}},{instead:!0,text:"Instead, Gather up to 3 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(3,e.Explorer)},threshold:{[ir.Moon]:3}}]},Wh={name:"Stars Blaze In The Daytime Sky",type:kn.Innate,speed:sr.Slow,set:gn.JaggedEarth,target:or.Spirit,targetFilter:[fr.Yourself],generatesFear:!0,effects:[{effects:[{text:"3 <fear>.",[Pn.TargetSpirit]:async({$:e})=>{await e.fear(3)}},{text:"Gain 1 Energy.",[Pn.TargetSpirit]:async({spirit:e})=>{await e.gainEnergy(1)}},{text:"Reclaim up to 1 Power Card from play or your discard pile.",[Pn.TargetSpirit]:async({spirit:e})=>{await e.reclaimCards({amount:1,filter:e=>e.isInDiscard||e.isInPlay})}}],threshold:{[ir.Sun]:4}}]},$h={name:"Wood Seeks Growth, Humans Seek Freedom",type:kn.Innate,speed:sr.Slow,set:gn.JaggedEarth,target:or.Land,range:2,hasPushOrGather:!0,hasDamageInstructions:!0,effects:[{text:"Choose a Spirit with <presence> in target land. They gain a Power Card.",[Pn.InTargetLand]:async({land:e})=>{await e.spiritsWithPresence().pickOne((async e=>{await e.gainPowerCard()}),{autoPlayOneOption:!0,noOptions:"No Spirits with <presence> in target Land."})},threshold:{[ir.Plant]:3}},{text:"1 Damage per <dahan><or>Push up to 3 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"Damage",text:"1 Damage per <dahan>",[Pn.Now]:async()=>{await a.damage(a.numberOf(e.Dahan))}},{actionId:"Dahan",text:"Push up to 3 <dahan>.",[Pn.Now]:async()=>{await a.pushUpTo(3,e.Dahan)}}]})},threshold:{[ir.Animal]:3}}]},Gh={name:"Hold The Island Fast With A Bulwark Of Will",type:kn.Innate,speed:sr.Fast,set:gn.JaggedEarth,target:or.Spirit,targetFilter:[fr.Yourself],effects:[{text:"When <blight> is added to one of your lands, you may pay 2 Energy per <blight> to take it from the box instead of from the Blight Card. (Handle any cascade separately.)",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{const t=a.hasElements({[ir.Earth]:4})?1:2;await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({icon:`<blight><br>Pay ${t}`,spirit:a,players:[a]}),text:`When <blight> is added to one of your lands, you may pay ${t} Energy per <blight> to take it from the box instead of from the Blight Card. (Handle any cascade separately.)`,[Pn.PreventRemoveBlightFromBlightCard]:async({location:n})=>!!(void 0!==n&&n.hasPresenceOf(a)&&a.energy>=t&&await e.may({prompt:`Pay ${t} Energy to take <blight> from the box instead of from the Blight Card?`}))&&(await a.payEnergy(t),!0)})},threshold:{[ir.Earth]:2}},{[Pn.TargetSpirit]:async()=>{},text:"The cost is 1 Energy instead of 2.",threshold:{[ir.Earth]:4}},{text:'When an Event or Blight Card directly Destroys <presence> (yours or others), you may prevent any number of <presence> from being Destroyed by paying 1 Energy each. ("Directly" means "not by adding <blight>".)',[Pn.TargetSpirit]:async({$:e,spirit:a})=>{await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({icon:"<blight><br><broken>",spirit:a,players:[a]}),[Pn.PreventRemovePiece]:async({piece:t,removement:n})=>!!([qo.MainEventAction,qo.DahanEventAction,qo.TokenEventAction,qo.BlightCardAction].includes(e.action.type)&&t.isPresence&&n===Wn.DirectDestroy&&a.energy>=1&&await e.may({prompt:"Pay 1 Energy to prevent <presence> from being Destroyed?"}))&&(await a.payEnergy(1),!0)})},threshold:{[ir.Earth]:6,[ir.Plant]:1}}]},Uh={name:"Jagged Shards Push From The Earth",type:kn.Unique,speed:sr.Slow,energy:0,elements:[ir.Fire,ir.Earth],set:gn.JaggedEarth,target:or.Land,range:1,hasPushOrGather:!0,effects:[{textArea:[.706,.746],text:"Add 1 <badlands>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Badlands)}},{textArea:[.768,.808],text:"Push up to 2 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(2,e.Dahan)}}]},Hh={name:"Let Them Break Themselves Against The Stone",type:kn.Innate,speed:sr.Fast,set:gn.JaggedEarth,target:or.Land,range:0,hasDamageInstructions:!0,effects:[{text:"After Invaders deal 1 or more Damage to target land, 2 Damage.",[Pn.InTargetLand]:async({$:e,you:a,land:t,...n})=>{const r={triggerId:e.nextTriggerId(),[Pn.Now]:async({action:n})=>{await t.damage(2),await e.addSubEffect({text:"Also deal half of the Damage Invaders did to the land (rounding down).",[Pn.Now]:async()=>{a.hasElements({[ir.Earth]:5})&&await t.damage(Math.floor(n.parentData.damageToLand/2))}})}};await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===t?n.effect.text:void 0,[Pn.AfterRavagingDamageLand]:async a=>{a.land===t&&a.damageToLand>=1&&(e.action.data.damageToLand=a.damageToLand,await e.addTrigger(r,n.effect,n.action))}})},threshold:{[ir.Earth]:3}},{text:"Also deal half of the Damage Invaders did to the land (rounding down).",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===a?"Also deal half of the Damage Invaders did to the land (rounding down).":void 0})},threshold:{[ir.Earth]:5}},{text:"Repeat this Power.",[Pn.InTargetLand]:async({power:e,isRepeat:a})=>{a||await e.repeat()},threshold:{[ir.Earth]:7,[ir.Sun]:2}}]},qh={name:"Plows Shatter On Rocky Ground",type:kn.Unique,speed:sr.Slow,energy:2,elements:[ir.Earth],set:gn.JaggedEarth,target:or.Land,range:1,hasPushOrGather:!0,hasDestroyInstructions:!0,hasDamageInstructions:!0,effects:[{textArea:[.644,.876],text:"1 Damage to each <town>/<city>.<br>Push up to 1 <town>.<or>Destroy 1 <town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"DamageEach",textArea:[.647,.748],text:"1 Damage to each <town>/<city>.<br>Push up to 1 <town>.",[Pn.Now]:async()=>{await e.addSubEffect({effects:[{textArea:[.66,.7],text:"1 Damage to each <town>/<city>.",[Pn.Now]:async()=>{await a.damageEach(1,e.TownOrCity)}},{textArea:[.703,.743],text:"Push up to 1 <town>.",[Pn.Now]:async()=>{await a.pushUpTo(1,e.Town)}}]})}},{actionId:"DestroyTown",textArea:[.828,.868],text:"Destroy 1 <town>.",[Pn.Now]:async()=>{await a.destroyOne(e.Town)}}]})}}]},jh={name:"Scarred And Stony Land",type:kn.Unique,speed:sr.Slow,energy:2,elements:[ir.Moon,ir.Earth],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Blight],range:1,blightWhiteListedPower:!0,hasDamageInstructions:!0,effects:[{textArea:[.641,.681],text:"2 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(2)}},{textArea:[.7,.74],text:"Add 1 <badlands>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.isLand&&await a.add(1,e.Badlands)}},{text:"Remove 1 <blight> in target land from the game. (It goes to the box, not the Blight Card.)",textArea:[.755,.894],[Pn.InTargetLand]:async({land:e})=>{await e.removeBlight({toTheBox:!0})}}]},_h={name:"Stubborn Solidity",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Earth,ir.Animal],set:gn.JaggedEarth,target:or.Land,range:1,effects:[{textArea:[.624,.664],text:"Defend 1 per <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.defend(a.numberOf(e.Dahan))}},{textArea:[.676,.92],text:"<dahan> in target land cannot be changed.<br><br>(When they would be Damaged, Destroyed, Removed, Replaced, or moved, instead don't.)",[Pn.InTargetLand]:async({$:e,land:a,effect:t})=>{await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===a?t.text:void 0,[Pn.PreventDamagingPiece]:({piece:t})=>Promise.resolve(t.location===a&&t.isA(e.Dahan)),[Pn.PreventRemovePiece]:({piece:t})=>Promise.resolve(t.location===a&&t.isA(e.Dahan)),[Pn.PreventMovePiece]:({piece:t,source:n})=>n===a&&t.isA(e.Dahan)})}}]},Vh={name:"Impersonate Authority",type:kn.Unique,speed:sr.Slow,energy:0,elements:[ir.Sun,ir.Air,ir.Animal],set:gn.JaggedEarth,target:or.Land,range:1,effects:[{textArea:[.745,.785],text:"Add 1 <strife>.",[Pn.InTargetLand]:async({land:e})=>{await e.addStrife(1)}}]},Jh={name:"Incite The Mob",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Moon,ir.Fire,ir.Air],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Invaders],range:1,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.644,.89],text:"1 Invader with <strife> deals Damage to other Invaders (not to each Invader). 1 <fear> per Invader this Power Destroyed.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.piecesWithStrife().pickOne((async t=>{await e.addSubEffect({highlightPieces:[t],[Pn.Now]:async()=>{const n=(await a.damage(t.strengthOutOfRavage,e.Invader,{filter:e=>e!==t})).filter((({piece:e,removement:a})=>wr[a].isDestroyLike&&e.isInvader)).length;await a.fear(n)}})}),{autoPlayOneOption:!0,prompt:"Pick 1 Invader with <strife>.",noOptions:"No Invaders with <strife>."})}}]},zh={name:"Lets See What Happens",type:kn.Innate,speed:sr.Fast,set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Invaders],range:1,effects:[{text:'Discard Minor Powers from the deck until you get one that targets a land. Use its text effects on target land immediately, ignoring normal Range and targeting restrictions. All "up to" instructions must be used at max. value. Treat all "OR"s as "AND"s.<br>It is not considered a card of yours or a card in play. Its effects are treated as performed by this Power, as if its text were copied here.)',[Pn.InTargetLand]:async({$:e,you:a,land:t,power:n,action:r})=>{let i;for(;i=await e.drawAndDiscardPower(kn.Minor),void 0===i||dg[i].target!==or.Land;);void 0!==i&&(r.data.letsSeeCard=i,await e.addSubEffect({textArea:void 0,card:i,[Pn.Now]:async()=>{await e.clickToContinue(),await e.addEffectUntilEndOfAction({[Pn.UpToMustBeUsedAtMaximum]:()=>e.action===r,[Pn.TreatAllORsAsANDs]:()=>e.action===r});for(const r of dg[i].effects)await e.addEffect({name:dg[i].name,effects:[r],card:i,highlightLocations:[t],players:[a],spirit:a}),await e.doEffectsWithContext(Pn.InTargetLand,{power:n,land:t,owner:a,isRepeat:!1},(e=>e.card===i))}}))},threshold:{[ir.Moon]:1,[ir.Fire]:1,[ir.Air]:2}},{text:"You may Forget a Power Card to gain the just-used Power Card (to hand) and 1 Energy.",[Pn.InTargetLand]:async({$:e,you:a,action:t})=>{const n=t.data.letsSeeCard;n&&await e.may({card:n,prompt:`Forget a Power Card to gain <p>${n}</p> (to hand) and 1 Energy?`})&&(await a.forgetPowers(),await a.gainPower(n),await a.gainEnergy(1))},threshold:{[ir.Moon]:2,[ir.Fire]:1,[ir.Air]:2}}]},Yh={name:"Overenthusiastic Arson",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Fire,ir.Air],set:gn.JaggedEarth,target:or.Land,range:1,generatesFear:!0,hasDestroyInstructions:!0,hasDamageInstructions:!0,effects:[{textArea:[.677,.717],text:"Destroy 1 <town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.destroyOne(e.Town)}},{textArea:[.733,.871],text:"Discard the top card of the Minor Power Deck. If it provides <fire>: 1 <fear>, 2 Damage, and add 1 <blight>.",[Pn.InTargetLand]:async({$:e,land:a})=>{const t=await e.drawAndDiscardPower(kn.Minor);await e.addSubEffect({[Pn.Now]:async()=>{await e.clickToContinue({card:t,textArea:void 0}),void 0!==t&&dg[t].elements.includes(ir.Fire)?(await e.sendEvent({type:Tn.GenericSub,text:"The top card of the Minor Power Deck provided <fire>."}),await a.fear(1),await a.damage(2),await a.addBlight(1)):await e.sendEvent({type:Tn.GenericSub,text:"The top card of the Minor Power Deck did not provide <fire>."})}})}}]},Kh={name:"Unexpected Tigers",type:kn.Unique,speed:sr.Slow,energy:0,elements:[ir.Moon,ir.Fire,ir.Animal],set:gn.JaggedEarth,target:or.Land,range:1,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.653,.693],text:"1 <fear> if Invaders are present.",[Pn.InTargetLand]:async({land:e})=>{e.hasInvaders&&await e.fear(1)}},{textArea:[.713,.871],text:"If you can Gather 1 <beasts>, do so, then Push 1 <explorer>. Otherwise, add 1 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.countPieceOptionally(Ln.Beasts,(()=>a.inAdjacentLandsWhere((a=>a.has(e.Beasts)))));(await a.gatherOne(e.Beasts)).length>0?await e.addSubEffect({textArea:[.712,.804],text:"If you can Gather 1 <beasts>, do so, then Push 1 <explorer>.",[Pn.Now]:async()=>{await a.pushOne(e.Explorer)}}):await e.addSubEffect({textArea:[.824,.864],text:"Otherwise, add 1 <beasts>.",[Pn.Now]:async()=>{await a.add(1,e.Beasts)}})}}]},Qh={text:"1 Invader and 1 <dahan> deal Damage to each other.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.hasAllOf(e.Dahan,e.Invader)&&await a.invaders().pickOne((async t=>{await a.piecesThatAre(e.Dahan).pickOne((async n=>{await e.addSubEffect({highlightPieces:[t,n],[Pn.Now]:async()=>{const e=t.strengthOutOfRavage-a.defense,r=n.strengthOutOfRavage;t.strife>0?await t.removeStrife():await n.damageOnlyThis(e),await t.damageOnlyThis(r)}})}))}))}},Xh={name:"Why Dont You And Them Fight",type:kn.Innate,speed:sr.Fast,set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Invaders],range:0,hasDamageInstructions:!0,mayBeSpeed:{effect:{text:"If you have 3 <moon>:<br>This Power may be <slow>.",[Pn.Now]:async({action:e})=>{await e.spirit.convertElements({[ir.Moon]:3})}},condition:({speed:e,spirit:a})=>e===sr.Slow&&a.hasElementsWithConvert({[ir.Moon]:3}),noDowngrade:({element:e,spirit:a,speed:t})=>t===sr.Slow&&e===ir.Moon&&!a.hasElementsWithConvert({[ir.Moon]:4})},fullText:["Threshold 3 <moon>","This Power may be <slow>.","Threshold 3 <air>","Add 1 <strife>.","Threshold 3 <sun> or 3 <fire>","1 Invader and 1 <dahan> deal Damage to each other.","Threshold 3 <animal>","If target land has <beasts>, 2 Damage. Otherwise, you may Gather 1 <beasts>."],effects:[{[Pn.InTargetLand]:async()=>{},threshold:{[ir.Moon]:3},dontResolveAlone:!0,noConvertToThreshold:!0},{text:"Add 1 <strife>.",[Pn.InTargetLand]:async({land:e})=>{await e.addStrife(1)},threshold:{[ir.Air]:3}},{...Qh,threshold:{[ir.Sun]:3}},{instead:!0,...Qh,threshold:{[ir.Fire]:3}},{text:"If target land has <beasts>, 2 Damage. Otherwise, you may Gather 1 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.possiblyDontCountPiecesAs(Ln.Beasts),a.has(e.Beasts)?await a.damage(2):await a.mayGather(e.Beasts)},threshold:{[ir.Animal]:3}}]},Zh={name:"Epidemics Run Rampant",type:kn.Innate,speed:sr.Fast,set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Disease],range:1,generatesFear:!0,hasDamageInstructions:!0,fullText:["This Power's Damage is done (separately) to both Invaders and <dahan>.","Threshold 1 <fire> 3 <animal>","1 Damage per <disease>.","Threshold 1 <water> 2 <fire> 4 <animal>","+1 Damage per <disease>.","Threshold 3 <water> 3 <fire> 5 <animal>","+1 Damage per <disease>.","+1 <fear> per <disease> (max. 5).","Remove 1 <disease>."],effects:[{text:"This Power's Damage is done (separately) to both Invaders and <dahan><br><br>1 Damage per <disease>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(a.numberOf(e.Disease)),await a.damage(a.numberOf(e.Disease),e.Dahan)},threshold:{[ir.Fire]:1,[ir.Animal]:3}},{text:"+1 Damage per <disease>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(a.numberOf(e.Disease)),await a.damage(a.numberOf(e.Disease),e.Dahan)},threshold:{[ir.Water]:1,[ir.Fire]:2,[ir.Animal]:4}},{effects:[{text:"+1 Damage per <disease>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(a.numberOf(e.Disease)),await a.damage(a.numberOf(e.Disease),e.Dahan)}},{text:"+1 <fear> per <disease> (max. 5).",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.fear(Math.min(a.numberOf(e.Disease),5))}},{text:"Remove 1 <disease>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.removeOne(e.Disease)}}],threshold:{[ir.Water]:3,[ir.Fire]:3,[ir.Animal]:5}}]},eu={name:"Fetid Breath Spreads Infection",type:kn.Unique,speed:sr.Slow,energy:2,elements:[ir.Air,ir.Water,ir.Animal],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Invaders],range:1,generatesFear:!0,effects:[{textArea:[.712,.752],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.772,.812],text:"Add 1 <disease>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Disease)}}]},au={name:"Fiery Vengeance",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Sun,ir.Fire],set:gn.JaggedEarth,target:or.Spirit,mayUse:({spirit:e})=>e.destroyedPresence>0,generatesFear:!0,hasDamageInstructions:!0,effects:[{textArea:[.605,.917],text:"Cost to Use: Target Spirit Removes 1 of their Destroyed <presence> from the game.<br><br>1 <fear> and 1 Damage in one of target Spirit's lands.<br><br>(This is your Power, so <blight> counts as <badlands> even if target is another Spirit.)",[Pn.TargetSpirit]:async({spirit:e})=>{e.destroyedPresence-=1,await e.inLands().pickOne((async e=>{await e.fear(1),await e.damage(1)}))}}]},tu={name:"Plaguebearers",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Fire,ir.Water,ir.Animal],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Disease],range:2,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.653,.693],text:"1 <fear> if Invaders are present.",[Pn.InTargetLand]:async({land:e})=>{e.hasInvaders&&await e.fear(1)}},{textArea:[.709,.868],text:"For each <disease>, Push 2 <explorer>/<town>/<dahan>. 1 <disease> may move with each Pushed piece.",[Pn.InTargetLand]:async({$:e,land:a})=>{const t=await a.push({amount:2*a.numberOf(e.Disease),pieces:e.ExplorerTownOrDahan});for(;a.has(e.Disease)&&t.length>0;){const n=await a.move({quantifier:ur.May,pieces:e.Disease,destinationFilter:e=>t.some((a=>a.destination===e)),movement:Mr.Bring});if(!(n.length>0))break;Vr(t,(e=>e.destination===n[0].destination))}}}]},nu={name:"Savage Revenge",type:kn.Innate,speed:sr.Slow,set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Town,dr.City],range:0,modifiesRange:({spirit:e,withConvert:a})=>e.hasElements({[ir.Air]:3},a)?1:0,payForRange:async({spirit:e})=>{await e.convertElements({[ir.Air]:3})},hasDamageInstructions:!0,effects:[{text:"This Power has <range+1>.",[Pn.InTargetLand]:async()=>{},threshold:{[ir.Air]:3},noConvertToThreshold:!0,dontResolveAlone:!0},{instead:!0,text:"1 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(1)},threshold:{[ir.Fire]:3,[ir.Animal]:1}},{text:"+2 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(2)},threshold:{[ir.Fire]:4,[ir.Animal]:2}},{text:"+3 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(3)},threshold:{[ir.Fire]:5,[ir.Air]:2,[ir.Animal]:2}}]},ru={name:"Strike Low With Sudden Fevers",type:kn.Unique,speed:sr.Fast,energy:2,elements:[ir.Fire,ir.Air,ir.Earth,ir.Animal],set:gn.JaggedEarth,target:or.Land,targetFilter:[dr.Disease],range:1,generatesFear:!0,effects:[{textArea:[.713,.753],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.776,.816],text:"Invaders skip Ravage Actions.",[Pn.InTargetLand]:async({land:e})=>{await e.skipInvaderAction({all:!0,filter:({invaderAction:e})=>e===qr.Ravage})}}]},iu={name:"Exaltation Of Molten Stone",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Moon,ir.Fire,ir.Earth],set:gn.JaggedEarth,target:or.Spirit,targetFilter:[fr.Another],effects:[{textArea:[.604,.784],text:"Split 1 Energy per <fire> you have between yourself and target Spirit, as evenly as possible. (Gained from the supply.)",[Pn.TargetSpirit]:async({$:e,you:a,spirit:t})=>{await a.askToConvertElementsToCombo({[ir.Fire]:1});const n=a.elements[ir.Fire];t===a?await a.gainEnergy(n):n%2==0?(await a.gainEnergy(n/2),await t.gainEnergy(n/2)):await e.chooseBetween({effects:[{actionId:"YouGetLess",text:`${a.nameLink} gain ${Math.floor(n/2)} energy, ${t.nameLink} gain ${Math.ceil(n/2)} energy.`,[Pn.Now]:async()=>{await a.gainEnergy(Math.floor(n/2)),await t.gainEnergy(Math.ceil(n/2))}},{actionId:"TargetGetLess",text:`${a.nameLink} gain ${Math.ceil(n/2)} energy, ${t.nameLink} gain ${Math.floor(n/2)} energy.`,[Pn.Now]:async()=>{await a.gainEnergy(Math.ceil(n/2)),await t.gainEnergy(Math.floor(n/2))}}]})}},{textArea:[.772,.916],text:"Target Spirit gains <range+1> with their Powers that originate from a <mountains>.",[Pn.TargetSpirit]:async({$:e,power:a,spirit:t})=>{await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({power:a.power,players:[t]}),[Pn.ExtraRange]:e=>e.spirit===t&&e.location.isMountains?1:0})}}]},su={name:"Explosive Eruption",type:kn.Innate,speed:sr.Fast,set:gn.JaggedEarth,target:or.Land,range:0,generatesFear:!0,hasDestroyInstructions:!0,hasDamageInstructions:!0,effects:[{text:"Destroy X (1 or more) of your <presence> in target land. <broken> (below) checks how many were Destroyed. This Power's Damage is done (separately) to both Invaders and <dahan>. The Ranges below can't be increased.",[Pn.InTargetLand]:async({$:e,you:a,land:t,action:n})=>{const r=await e.selectX(1,t.numberOfPresenceOf(a)),i=await t.destroy({amount:r,pieces:e.Presence,owner:a});n.data.explosiveEruptionCount=i.length},threshold:{}},{text:"2 <broken>: In one land within <range-1>, X Damage.",[Pn.InTargetLand]:async({$:e,land:a,you:t,action:n})=>{const r=n.data.explosiveEruptionCount;r>=2&&await a.inLandsWithin(1,t,{mayIncrease:!1}).pickOne((async a=>{await a.damage(r),await a.damage(r,e.Dahan)}))},threshold:{[ir.Fire]:2,[ir.Earth]:2}},{text:"4 <broken>: X <fear>.",[Pn.InTargetLand]:async({land:e,action:a})=>{const t=a.data.explosiveEruptionCount;t>=4&&await e.fear(t)},threshold:{[ir.Fire]:3,[ir.Earth]:3}},{effects:[{text:"6 <broken>: In each land within <range-1>, 4 Damage.",[Pn.InTargetLand]:async({$:e,you:a,land:t,action:n})=>{n.data.explosiveEruptionCount>=6&&await t.inLandsWithin(1,a,{mayIncrease:!1}).forEach((async a=>{await a.damage(4),await a.damage(4,e.Dahan)}))}},{text:"Add 1 <blight> to target land; doing so does not Destroy your <presence>.",[Pn.InTargetLand]:async({$:e,you:a,land:t,action:n})=>{n.data.explosiveEruptionCount>=6&&(await e.addEffectUntilEndOfAction({[Pn.PreventBlightDestroyingPresence]:({location:e,spirit:n})=>e===t&&n===a}),await t.addBlight(1))}}],threshold:{[ir.Fire]:4,[ir.Air]:2,[ir.Earth]:4}},{effects:[{text:"10 <broken>: In each land within <range-2>, +4 Damage.",[Pn.InTargetLand]:async({$:e,you:a,land:t,action:n})=>{n.data.explosiveEruptionCount>=10&&await t.inLandsWithin(2,a,{mayIncrease:!1}).forEach((async a=>{await a.damage(4),await a.damage(4,e.Dahan)}))}},{text:"In each land adjacent to the target, add 1 <blight> if it doesn't have any.",[Pn.InTargetLand]:async({$:e,land:a,action:t})=>{t.data.explosiveEruptionCount>=10&&await a.inAdjacentLocations().forEach((async a=>{a.isLandForBlight&&a.doesntHave(e.Blight)&&await a.addBlight(1)}))}}],threshold:{[ir.Fire]:5,[ir.Air]:3,[ir.Earth]:5}}]},ou={name:"Lava Flows",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Fire,ir.Moon],set:gn.JaggedEarth,target:or.Land,range:1,hasDamageInstructions:!0,effects:[{textArea:[.673,.851],text:"Add 1 <badlands> and 1 <wilds>.<or>1 Damage.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"BadlandsAndWilds",textArea:[.68,.72],text:"Add 1 <badlands> and 1 <wilds>.",[Pn.Now]:async()=>{await a.add(1,e.Badlands),await a.add(1,e.Wilds)}},{actionId:"Damage",textArea:[.805,.845],text:"1 Damage.",[Pn.Now]:async()=>{await a.damage(1)}}]})}}]},du={name:"Powered By The Furnace Of The Earth",type:kn.Innate,speed:sr.Slow,set:gn.JaggedEarth,target:or.Land,range:0,effects:[{text:"Add 1 of your Destroyed <presence>.",[Pn.InTargetLand]:async({you:e,land:a})=>{await a.addPresence(e,{destroyed:!0})},threshold:{[ir.Earth]:3}},{text:"Cost 2 Energy: Gain a Power Card.",[Pn.InTargetLand]:async({$:e,you:a})=>{a.energy>=2&&await e.may({prompt:"Pay 2 Energy to Gain a Power Card ?"})&&(await a.payEnergy(2),await a.gainPowerCard())},threshold:{[ir.Fire]:3}},{text:"Move up to 2 of your <presence> from other lands to target land.",[Pn.InTargetLand]:async({you:e,land:a})=>{await e.presence().pickMultiple({optional:!0,amount:2,where:e=>e.location!==a,forPickedItem:async e=>{await e.move({locations:{target:zn.ToThisLocation,location:a}})}})},threshold:{[ir.Earth]:4,[ir.Fire]:4}},{text:"Return up to 2 of your Destroyed <presence> to your <presence> tracks.",[Pn.InTargetLand]:async({you:e})=>{await e.returnPresenceToTracks(2,{optional:!0,destroyed:!0})},threshold:{[ir.Fire]:5}}]},lu={name:"Pyroclastic Bombardment",type:kn.Unique,speed:sr.Fast,energy:3,elements:[ir.Fire,ir.Air,ir.Earth],set:gn.JaggedEarth,target:or.Land,sourceFilter:[dr.SacredSite],range:2,hasDamageInstructions:!0,effects:[{textArea:[.692,.732],text:"1 Damage to each <town>/<city>/<dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damageEach(1,e.TownCityOrDahan)}},{textArea:[.755,.795],text:"1 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(1)}},{textArea:[.812,.852],text:"1 Damage to <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(1,e.Dahan)}}]},cu={name:"Rain Of Ash",type:kn.Unique,speed:sr.Slow,energy:2,elements:[ir.Fire,ir.Air,ir.Earth],set:gn.JaggedEarth,target:or.Land,range:1,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.693,.733],text:"2 <fear> if Invaders are present.",[Pn.InTargetLand]:async({land:e})=>{e.hasInvaders&&await e.fear(2)}},{textArea:[.746,.842],text:"Push 2 <dahan> and 2 <explorer>/<town> to land(s) without your <presence>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await t.push({amount:2,pieces:e.Dahan,destinationFilter:e=>!e.hasPresenceOf(a)}),await t.push({amount:2,pieces:e.ExplorerOrTown,destinationFilter:e=>!e.hasPresenceOf(a)})}}]},hu={name:"Blazing Intimidation",type:kn.Unique,speed:sr.Fast,energy:2,elements:[ir.Fire,ir.Plant,ir.Animal],set:gn.NatureIncarnate,target:or.Land,range:1,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.637,.677],text:"1 <fear>",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.757,.848],text:"Push 2 <explorer>/<town> to a<br>land without <incarna-behemoth>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.push({amount:2,pieces:e.ExplorerOrTown,destinationFilter:a=>a.doesntHave(e.IncarnaBehemoth)})}}]},uu={name:"Exaltation Of Grasping Roots",type:kn.Unique,speed:sr.Slow,energy:0,elements:[ir.Moon,ir.Fire,ir.Earth,ir.Plant],set:gn.NatureIncarnate,target:or.Spirit,targetFilter:[fr.Another],effects:[{textArea:[.699,.79],text:"Target Spirit may Add 1 <wilds> in one of their lands.",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{await a.inLands().optionallyPickOne((async a=>{await a.add(1,e.Wilds)}),{players:[a]})}},{textArea:[.807,.848],text:"You may do likewise.",[Pn.TargetSpirit]:async({$:e,you:a})=>{await a.inLands().optionallyPickOne((async a=>{await a.add(1,e.Wilds)}))}}]},gu={name:"Smash, Stomp, And Flatten",type:kn.Innate,speed:sr.Slow,set:gn.NatureIncarnate,target:or.Land,targetFilter:[dr.IncarnaBehemoth],range:0,hasPushOrGather:!0,generatesFear:!0,hasDamageInstructions:!0,effects:[{text:"2 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(2)},threshold:{[ir.Fire]:2,[ir.Earth]:1}},{effects:[{text:"1 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(1)}},{text:"Push 1 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushOne(e.Dahan)}}],threshold:{[ir.Fire]:3,[ir.Earth]:1,[ir.Plant]:1}},{effects:[{text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{text:"1 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(1)}}],threshold:{[ir.Fire]:4,[ir.Earth]:2,[ir.Plant]:1}},{effects:[{text:"2 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(2)}},{text:"2 Damage to <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(2,e.Dahan)}}],threshold:{[ir.Fire]:5,[ir.Earth]:2,[ir.Plant]:2}},{text:"If <incarna-behemoth> is empowered, you may Repeat this Power once each turn. (You may take other Actions before repeating, including the Behemoth Rises.)",[Pn.InTargetLand]:async({$:e,you:a,isRepeat:t,...n})=>{!t&&a.hasEmpoweredIncarna&&null!=a.incarna&&(e.hasEffectNamed("Prevent Repeat Smash and Stomp")||(await e.addEffectUntilEndOfTurn({name:"Prevent Repeat Smash and Stomp"}),await e.addEffectUntilEndOfActionTree({[Pn.ActionEnds]:async()=>{await n.power.replay(sr.Slow)}})))}}]},fu={name:"Surging Lahar",type:kn.Unique,speed:sr.Slow,energy:2,elements:[ir.Fire,ir.Water,ir.Earth],set:gn.NatureIncarnate,target:or.Land,range:1,sourceFilter:[dr.SacredSite],hasDamageInstructions:!0,effects:[{textArea:[.724,.765],text:"2 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(2)}},{textArea:[.788,.829],text:"If your <presence> is present, Add 1 <badlands>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{t.hasPresenceOf(a)&&await t.add(1,e.Badlands)}}]},yu={name:"Terrifying Rampage",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Moon,ir.Fire,ir.Earth],set:gn.NatureIncarnate,target:or.Land,range:1,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.637,.677],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.631,.858],text:"2 Invaders don't participate in Ravage. (Choose the Invaders when ravaging; they don't deal Damage or take counterattack Damage.)",[Pn.InTargetLand]:async({$:e,land:a,effect:t})=>{await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===a?t.text:void 0,[Pn.DoesNotParticipateInRavage]:async({location:t})=>{t===a&&await t.doNotParticipateInRavage({quantifier:ur.Exactly,amount:2,pieces:e.Invader})}})}},{textArea:[.871,.911],text:"Push 3 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.push({amount:3,pieces:e.Dahan})}}]},pu={name:"Emerge From The Dread Night Wind",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Moon,ir.Air],set:gn.NatureIncarnate,target:or.Land,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.651,.692],text:"Add/Move <incarna-darkness> to target land.",[Pn.InTargetLand]:async({you:e,land:a})=>{e.hasIncarna?await e.incarna.move({locations:{target:zn.ToThisLocation,location:a}}):await a.addIncarna(Ln.IncarnaDarkness,e)}},{textArea:[.71,.751],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.715,.843],text:"If exactly 1 Invader is present, Abduct it. Otherwise, Push up to 2 <explorer>/<town> to different lands.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.hasExactly(1,e.Invader)?await a.invaders().anyOne.abduct():await a.push({amount:2,quantifier:ur.UpTo,pieces:e.ExplorerOrTown,differentLands:!0})}},{textArea:[.857,.898],text:"Push up to 2 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(2,e.Dahan)}}]},wu={name:"Leave A Trail Of Deathly Silence",type:kn.Innate,speed:sr.Fast,set:gn.NatureIncarnate,target:or.Spirit,targetFilter:[fr.Yourself],hasPushOrGather:!0,hasDamageInstructions:!0,effects:[{effects:[{text:"1 Damage at <incarna-darkness>.",[Pn.TargetSpirit]:async({spirit:e})=>{await(e.incarna?.location?.damage(1))}},{text:"You may Push <incarna-darkness>.",[Pn.TargetSpirit]:async({spirit:e})=>{await(e.incarna?.push({quantifier:ur.May}))}}],threshold:{[ir.Moon]:2,[ir.Animal]:1}},{effects:[{text:"1 Damage at <incarna-darkness>.",[Pn.TargetSpirit]:async({spirit:e})=>{await(e.incarna?.location?.damage(1))}},{text:"You may Push <incarna-darkness>.",[Pn.TargetSpirit]:async({spirit:e})=>{await(e.incarna?.push({quantifier:ur.May}))}}],threshold:{[ir.Moon]:3,[ir.Air]:1,[ir.Animal]:1}},{effects:[{text:"1 Damage at <incarna-darkness>.",[Pn.TargetSpirit]:async({spirit:e})=>{await(e.incarna?.location?.damage(1))}},{text:"You may Push <incarna-darkness>.",[Pn.TargetSpirit]:async({spirit:e})=>{await(e.incarna?.push({quantifier:ur.May}))}}],threshold:{[ir.Moon]:4,[ir.Air]:2,[ir.Animal]:2}},{text:"Move <incarna-darkness> to the <endless-dark>. It Brings 1 Invader (from it's land).",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{const t=await(a.incarna?.move({locations:{target:zn.ToThisLocation,location:e.theEndlessDark}}));void 0!==t&&t.length>0&&await t[0].source.move({amount:1,pieces:e.Invader,locations:{target:zn.ToThisLocation,location:e.theEndlessDark}})},threshold:{[ir.Moon]:5,[ir.Air]:2,[ir.Animal]:3}}]},mu={name:"Lost In The Endless Dark",type:kn.Innate,speed:sr.Slow,set:gn.NatureIncarnate,target:or.Land,targetFilter:[dr.TheEndlessDark],range:0,generatesFear:!0,effects:[{effects:[{text:"1 <fear> per Invader (max. 4).",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.fear(Math.min(a.numberOf(e.Invader),4))}},{text:"You may Downgrade 1 Invader. (Downgrading Removes <explorer>.)",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.downgrade({amount:1,quantifier:ur.May,pieces:e.Invader})}}],threshold:{[ir.Moon]:2,[ir.Air]:1}},{effects:[{text:"1 <fear> per Invader (max. 4).",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.fear(Math.min(a.numberOf(e.Invader),4))}},{text:"Downgrade any number of Invaders",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.downgrade({quantifier:ur.Any,pieces:e.Invader})}}],threshold:{[ir.Moon]:4,[ir.Air]:3}},{text:"Add <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Beasts)},threshold:{[ir.Moon]:3,[ir.Animal]:2}}]},vu={name:"Reach From The Infinite Darkness",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Moon,ir.Air,ir.Animal],set:gn.NatureIncarnate,target:or.Spirit,targetFilter:[fr.Yourself],effects:[{textArea:[.607,.792],text:"Abduct up to 2 <presence> (of any Spirits, with their permission) from any lands on the island, ignoring land type restrictions on moving <presence>.",[Pn.TargetSpirit]:async({$:e})=>{await e.forPiecesThatIs(e.Presence).pickMultiple({amount:2,optional:!0,forPickedItem:async e=>{await e.abduct()}})}},{textArea:[.802,.94],text:"Each Spirit's <presence> in the <endless-dark> grants them <range+1> with all their Powers (this turn).",[Pn.TargetSpirit]:async({$:e,power:a})=>{await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({power:a.power}),[Pn.ExtraRange]:a=>e.theEndlessDark.numberOfPresenceOf(a.spirit)})}}]},xu={name:"Swallowed By The Endless Dark",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Moon,ir.Air,ir.Water],set:gn.NatureIncarnate,target:or.Land,targetFilter:[dr.Invaders],range:0,generatesFear:!0,effects:[{textArea:[.674,.715],text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.674,.715],text:"Abduct 1 <explorer>",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.abduct(1,e.Explorer)}},{textArea:[.79,.938],text:"If you have 3 <moon> 3 <air>:<br>Abduct 1 Invader.",[Pn.InTargetLand]:async({you:e,land:a})=>{await e.askToConvertElements({[ir.Moon]:3,[ir.Air]:3})&&await a.abduct(1)}}]},bu={name:"Terror Of The Hunted",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Moon,ir.Fire,ir.Animal],set:gn.NatureIncarnate,target:or.Land,targetFilter:[dr.Invaders],range:0,generatesFear:!0,effects:[{textArea:[.624,.718],text:"If <beasts> are present, 1 <fear> and Add 1 <strife>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.has(e.Beasts)&&(await a.fear(1),await a.addStrife(1))}},{textArea:[.729,.77],text:"Add 1 <strife> per Terror Level.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.addStrife(e.terrorLevel)}},{textArea:[.791,.923],text:"If target land is the <endless-dark>, Add 1 <strife>. (<strife> only Escapes with the Invader it's attached to.)",[Pn.InTargetLand]:async({land:e})=>{e.isEndlessDark&&await e.addStrife(1)}}]},Tu={name:"Earth Shudders Buildings Fall",type:kn.Innate,speed:sr.Slow,set:gn.NatureIncarnate,target:or.Land,targetFilter:[dr.Quake],range:0,generatesFear:!0,hasDamageInstructions:!0,fullText:["Power Cards is the # of Power Cards you have in play.","Threshold 2 <fire> 3 <earth> 3 Power Cards","2 Damage per <quake>, to <town>/<city> only.","Threshold 3 <fire> 4 <earth> 5 Power Cards","1 <fear>. In any number of lands with <quake>: 2 Damage per <quake>, to <town>/<city> only. Remove 1 <quake>.","Threshold 4 <fire> 5 <earth> 7 Power Cards","2 <fear>. In each land where you removed <quake>: 1 Damage to each Invader."],effects:[{text:"3 Power Cards: 2 Damage per <quake>, to <town>/<city> only.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(2*a.numberOf(e.Quake),e.TownOrCity)},threshold:{[ir.Fire]:2,[ir.Earth]:3},powerOwnerThresholdCondition:e=>e.numberOfPowerCardsInPlay>=3},{effects:[{text:"5 Power Cards: 1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{text:"In any number of lands with <quake>: 2 Damage per <quake>, to <town>/<city> only. Remove 1 <quake>.",[Pn.InTargetLand]:async({$:e,action:a})=>{a.data.removement=[],await e.inLandsWithAllOf(e.Quake,e.Invader).pickMultiple({optional:!0,amount:e.inLandsWithAllOf(e.Quake,e.Invader).count,forPickedItem:async t=>{await t.damage(2*t.numberOf(e.Quake),e.TownOrCity),a.data.removement.push(...await t.removeOne(e.Quake))}})}}],threshold:{[ir.Fire]:3,[ir.Earth]:4},powerOwnerThresholdCondition:e=>e.numberOfPowerCardsInPlay>=5},{effects:[{text:"7 Power Cards: 2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{text:"In each land where you removed <quake>: 1 Damage to each Invader.",[Pn.InTargetLand]:async({$:e,action:a})=>{const t=od.createCollection(e,a.data.removement.map((e=>e.location)));await t.selectOrder().forEach((async e=>{await e.damageEach(1)}))}}],threshold:{[ir.Fire]:4,[ir.Earth]:5},powerOwnerThresholdCondition:e=>e.numberOfPowerCardsInPlay>=7}]},Au={name:"Exaltation Of Echoed Steps",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Moon,ir.Water,ir.Earth],set:gn.NatureIncarnate,target:or.Spirit,targetFilter:[fr.Another],hasPushOrGather:!0,effects:[{textArea:[.702,.791],text:"Target Spirit may Push 1 <presence>, Bringing up to 1 <explorer>/<town>/<dahan>/<beasts>.",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{await a.presence().optionallyPickOne((async a=>{const t=a.location,n=await a.push();n.length>0&&await t.push({quantifier:ur.UpTo,amount:1,pieces:e.ExplorerTownOrDahan,locations:{target:zn.ToThisLocation,location:n[0].destination}})}))}},{textArea:[.808,.848],text:"You may do likewise.",[Pn.TargetSpirit]:async({$:e,you:a})=>{await a.presence().optionallyPickOne((async a=>{const t=a.location,n=await a.push();n.length>0&&await t.push({quantifier:ur.UpTo,amount:1,pieces:e.ExplorerTownDahanOrBeasts,locations:{target:zn.ToThisLocation,location:n[0].destination}})}))}}]},Iu={name:"Gift Of Seismic Energy",type:kn.Unique,speed:sr.Fast,energy:3,elements:[ir.Sun,ir.Fire,ir.Earth,ir.Plant],set:gn.NatureIncarnate,target:or.Spirit,effects:[{textArea:[.624,.713],text:"If you target yourself, gain 3 Energy.",[Pn.TargetSpirit]:async({you:e,spirit:a})=>{a===e&&await a.gainEnergy(3)}},{textArea:[.726,.929],text:"Otherwise, target Spirit gains 1 Energy per Power Card you have in play (max. 6).<br>(Don't count <impending>.)",[Pn.TargetSpirit]:async({you:e,spirit:a})=>{a!==e&&await a.gainEnergy(Math.min(e.numberOfPowerCardsInPlay,6))}}]},Pu={name:"Inspire A Winding Dance",type:kn.Unique,speed:sr.Slow,energy:0,elements:[ir.Moon,ir.Water,ir.Earth,ir.Animal],set:gn.NatureIncarnate,target:or.Land,targetFilter:[dr.Invaders],range:1,hasPushOrGather:!0,effects:[{textArea:[.724,.765],text:"Push up to 1 <explorer>/<town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(1,e.ExplorerOrTown)}},{textArea:[.785,.826],text:"Gather up to 1 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(1,e.Dahan)}}]},Su={name:"Land Creaks With Tension",type:kn.Innate,speed:sr.Fast,set:gn.NatureIncarnate,target:or.Spirit,targetFilter:[fr.Yourself],effects:[{text:"If you have at least 1 <impending>, Add 1 <quake> in one of your lands.",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{a.numberOfImpendingCards>=1&&await a.inLands().pickOne((async a=>{await a.add(1,e.Quake)}))},threshold:{[ir.Earth]:1}},{text:"In one of your lands, Defend 1 per <impending> (max. 3).",[Pn.TargetSpirit]:async({spirit:e})=>{e.numberOfImpendingCards>=1&&await e.inLands().pickOne((async a=>{await a.defend(Math.min(e.numberOfImpendingCards,3))}))},threshold:{[ir.Moon]:1,[ir.Earth]:1}},{text:"If you have at least 3 <impending>, Add 1 <quake> in one of your lands.",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{a.numberOfImpendingCards>=3&&await a.inLands().pickOne((async a=>{await a.add(1,e.Quake)}))},threshold:{[ir.Moon]:1,[ir.Earth]:2}},{text:"In one of your lands, Defend 1 per <impending> (max. 3).",[Pn.TargetSpirit]:async({spirit:e})=>{e.numberOfImpendingCards>=1&&await e.inLands().pickOne((async a=>{await a.defend(Math.min(e.numberOfImpendingCards,3))}))},threshold:{[ir.Moon]:2,[ir.Earth]:3}}]},Eu={name:"Radiating Tremors",type:kn.Unique,speed:sr.Slow,energy:2,elements:[ir.Moon,ir.Fire,ir.Earth],set:gn.NatureIncarnate,target:or.Land,range:0,hasPushOrGather:!0,hasDamageInstructions:!0,effects:[{textArea:[.679,.72],text:"2 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(2)}},{textArea:[.738,.871],text:"You may Push any number of <quake>, dividing them as evenly as possible between adjacent lands.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.push({quantifier:ur.Any,pieces:e.Quake,evenly:!0})}}]},Ou={name:"Resounding Footfalls Sow Dismay",type:kn.Unique,speed:sr.Fast,energy:3,elements:[ir.Fire,ir.Air,ir.Earth],set:gn.NatureIncarnate,target:or.Land,range:0,generatesFear:!0,effects:[{textArea:[.693,.734],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.752,.793],text:"Add 1 <quake>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Quake)}},{textArea:[.815,.856],text:"Skip all Ravage Actions.",[Pn.InTargetLand]:async({land:e})=>{await e.skipInvaderAction({all:!0,filter:({invaderAction:e})=>e===qr.Ravage})}}]},ku={name:"Rumblings Portend A Greater Quake",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Moon,ir.Air,ir.Earth],set:gn.NatureIncarnate,target:or.Land,range:1,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.679,.818],text:"If you have at least as many <impending> as Power Cards in play, 1 <fear> and Add 1 <quake>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{a.numberOfImpendingCards>=a.numberOfPowerCardsInPlay&&(await t.fear(1),await t.add(1,e.Quake))}},{textArea:[.829,.87],text:"Push up to 3 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushUpTo(3,e.Dahan)}}]},Cu={name:"Blinding Glare",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Sun,ir.Air],set:gn.NatureIncarnate,target:or.Land,range:0,targetFilter:[dr.Invaders],generatesFear:!0,effects:[{textArea:[.59,.946],text:"2 <fear>.<or>Skip up to one Ravage Action.<br><br>If you have 5 <sun><br>Instead, 3 <fear>.<or>Skip up to one Invader Action.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{const n=await a.askToConvertElements({[ir.Sun]:5})?3:2;await e.chooseBetween({effects:[{actionId:"Fear",text:`${n} <fear>.`,textArea:2===n?[.593,.634]:[.815,.856],[Pn.Now]:async()=>{await t.fear(n)}},{actionId:"SkipRavage",textArea:2===n?[.682,.723]:[.896,.937],text:`Skip up to one ${2===n?"Ravage":"Invader"} Action.`,[Pn.Now]:async()=>{await t.skipInvaderAction({filter:({invaderAction:e})=>2===n&&e===qr.Ravage||3===n})}}]})}}]},Du={name:"Consider A Harmonious Nature",type:kn.Innate,speed:sr.Fast,set:gn.NatureIncarnate,target:or.Spirit,targetFilter:[fr.Yourself],hasDestroyInstructions:!0,effects:[{text:"When your Powers would add <blight> you may Destroy 1 <presence> instead (there or elsewhere).",[Pn.TargetSpirit]:async({$:e,you:a})=>{await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({icon:"-1 <blight><br>+1 <broken>",spirit:a,players:[a]}),[Pn.PreventAddBlight]:async()=>!(e.action.spirit!==a||!await e.may({prompt:"Destroy 1 <presence> to prevent <blight>?"}))&&(await a.destroyPresence(1),!0)})},threshold:{[ir.Sun]:3,[ir.Moon]:1}},{text:"Your Powers don't damage or destroy <dahan>.",[Pn.TargetSpirit]:async({$:e,you:a})=>{await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({icon:"<dahan><br>No <damage>",spirit:a,players:[a]}),[Pn.PreventRemovePiece]:({piece:t,removement:n})=>Promise.resolve(e.action.spirit===a&&t.isA(e.Dahan)&&wr[n].isDestroyLike),[Pn.PreventDamagingPiece]:({piece:t})=>Promise.resolve(e.action.spirit===a&&t.isA(e.Dahan))})},threshold:{[ir.Sun]:3,[ir.Water]:1}},{text:"Choose another Spirit. They Add 1 <broken> to one of your lands.",[Pn.TargetSpirit]:async({$:e,you:a,action:t})=>{await e.fromAllSpirits().pickOne((async e=>{t.data.harmoniousSpirit=e,await e.addPresence({locations:zn.AnyLands,destroyed:!0,filter:e=>e.hasPresenceOf(a)})}))},threshold:{[ir.Sun]:3,[ir.Plant]:1}},{text:"Give up to 3 of your Energy to the chosen Spirit.",[Pn.TargetSpirit]:async({$:e,you:a,action:t})=>{await e.chooseBetween({effects:[0,1,2,3].map((e=>({actionId:`Give${e}Energy`,text:`Give ${e} Energy`,[Pn.Now]:async()=>{await a.loseEnergy(e),await t.data.harmoniousSpirit.gainEnergy(e)},condition:()=>a.energy>=e})))})},threshold:{[ir.Sun]:3,[ir.Water]:1,[ir.Plant]:1}}]},Bu={name:"Focus The Suns Rays",type:kn.Unique,speed:sr.Slow,energy:0,elements:[ir.Sun,ir.Fire,ir.Air],set:gn.NatureIncarnate,target:or.Land,sourceFilter:[dr.SacredSite],range:2,hasDamageInstructions:!0,effects:[{textArea:[.659,.699],text:"1 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(1)}},{textArea:[.659,.699],text:"2 Damage to <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(2,e.Dahan)}},{textArea:[.717,.894],text:"Move up to 3 <presence> directly to target land (from anywhere on the island). You may Bring 1 <badlands> (total) with those <presence>.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{let n=!1;await a.presence().pickMultiple({amount:3,optional:!0,forPickedItem:async a=>{const r=a.location;if(await a.move({locations:{target:zn.ToThisLocation,location:t}}),!n){(await r.move({quantifier:ur.May,amount:1,pieces:e.Badlands,locations:{target:zn.ToThisLocation,location:t},pickPiecesEffect:{text:"You may Bring 1 <badlands> (total) with those <presence>."}})).length>0&&(n=!0)}},repeatSame:!0})}}]},Lu={name:"Scorching Convergence",type:kn.Innate,speed:sr.Slow,set:gn.NatureIncarnate,target:or.Land,sourceFilter:[dr.SacredSite],range:1,generatesFear:!0,hasDamageInstructions:!0,specifyOrigin:!0,effects:[{effects:[{text:"Move all of your <presence> from origin land directly to target land.",[Pn.InTargetLand]:async({$:e,you:a,land:t,origin:n})=>{await(n?.move({quantifier:ur.All,pieces:e.Presence,owner:a,locations:{target:zn.ToThisLocation,location:t}}))}},{text:"1 Damage, to <town>/<city> only.",[Pn.InTargetLand]:async({$:e,land:a,action:t})=>{const n=await a.damage(1,e.TownOrCity);t.data.destroyedInvaders=t.data.destroyedInvaders||n.length>0}}],threshold:{[ir.Sun]:2}},{effects:[{text:"3 Damage to Invaders.",[Pn.InTargetLand]:async({land:e,action:a})=>{const t=await e.damage(3);a.data.destroyedInvaders=a.data.destroyedInvaders||t.length>0}},{text:"3 Damage to Dahan.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.damage(3,e.Dahan)}},{text:"Add 1 <blight> without cascading.",[Pn.InTargetLand]:async({land:e})=>{await e.addBlight(1,{mayCascade:!1})}}],threshold:{[ir.Sun]:3,[ir.Fire]:1}},{text:"3 <fear> if this Power destroyed any Invaders.",[Pn.InTargetLand]:async({land:e,action:a})=>{a.data.destroyedInvaders&&await e.fear(3)},threshold:{[ir.Sun]:4,[ir.Fire]:2,[ir.Air]:1}},{text:"1 Damage per remaining <presence> of yours in target land.",[Pn.InTargetLand]:async({you:e,land:a})=>{await a.damage(a.numberOfPresenceOf(e))},threshold:{[ir.Sun]:5,[ir.Fire]:3,[ir.Air]:2}}]},Fu={name:"Unbearable Gaze",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Sun,ir.Fire],set:gn.NatureIncarnate,target:or.Land,range:1,sourceFilter:[dr.SacredSite],hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.693,.734],text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{textArea:[.763,.854],text:"Push 2 <explorer>/<town> from origin or target land (or 1 <explorer>/<town> from each).",[Pn.InTargetLand]:async({$:e,land:a,power:t})=>{let n=t.validOriginsGivenTargetLand(a).items;const r=[];await Jr(2,(async()=>{await e.forPiecesWhere((t=>t.isA(e.ExplorerOrTown)&&!r.includes(t)&&(t.location===a||n.includes(t.location)))).pickOne((async e=>{e.location!==a&&(n=[e.location]),await e.push(),r.push(e)}))}))}}]},Ru={name:"Wither Bodies Scar Stones",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Sun,ir.Fire,ir.Earth],set:gn.NatureIncarnate,target:or.Land,sourceFilter:[dr.SacredSite],range:2,hasDamageInstructions:!0,effects:[{textArea:[.685,.868],text:"1 Damage.<or>Add 1 <badlands>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{textArea:[.69,.731],actionId:"Damage",text:"1 Damage.",[Pn.Now]:async()=>{await a.damage(1)}},{textArea:[.815,.856],actionId:"Badlands",text:"Add 1 <badlands>",[Pn.Now]:async()=>{await a.add(1,e.Badlands)}}]})}}]},Mu={name:"Call To Vigilance",type:kn.Unique,speed:sr.Slow,energy:2,elements:[ir.Sun,ir.Air,ir.Animal],set:gn.NatureIncarnate,target:or.Land,range:1,sourceFilter:[dr.Dahan],hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.701,.742],text:"2 <fear> if Invaders are present.",[Pn.InTargetLand]:async({land:e})=>{e.hasInvaders&&await e.fear(2)}},{textArea:[.763,.852],text:"For each <dahan> in origin land, Push up to 1 <explorer>/<town>.",[Pn.InTargetLand]:async({$:e,land:a,power:t})=>{await t.validOriginsGivenTargetLand(a).autoPickOne((async t=>{await a.pushUpTo(t.numberOf(e.Dahan),e.ExplorerOrTown)}),{prompt:"Select origin land."})}}]},Nu={name:"Coordinated Raid",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Sun,ir.Earth,ir.Animal],set:gn.NatureIncarnate,target:or.Land,sourceFilter:[dr.Dahan],range:1,hasDamageInstructions:!0,effects:[{textArea:[.718,.759],text:"1 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(1)}},{textArea:[.785,.826],text:"If <dahan> are present, 1 Damage.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.has(e.Dahan)&&await a.damage(1)}}]},Wu={name:"Favors Of Story And Season",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Earth,ir.Plant,ir.Animal],set:gn.NatureIncarnate,target:or.Spirit,targetFilter:[fr.Another],hasPushOrGather:!0,effects:[{textArea:[.629,.718],text:"Target Spirit may Gather up to 3 <dahan> into one of their lands.",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{await a.inLands().optionallyPickOne((async a=>{await a.gatherUpTo(3,e.Dahan)}))}},{textArea:[.738,.913],text:"If they have at least 3 <dahan> among their lands, they gain 1 Energy and may Reclaim 1 Power Card instead of discarding it at the end of turn.",[Pn.TargetSpirit]:async({$:e,power:a,spirit:t})=>{t.numberOfPiecesInLands(e.Dahan)>=3&&(await t.gainEnergy(1),await t.mayReclaimPowerCardInsteadOfDiscarding(a))}}]},$u={name:"Keep Watch For New Incursions",type:kn.Innate,speed:sr.Fast,set:gn.NatureIncarnate,target:or.Land,sourceFilter:[dr.SacredSiteAndDahan],range:1,hasPushOrGather:!0,hasDamageInstructions:!0,effects:[{text:"Gather up to 2 <dahan>, from your lands only.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await t.gather({quantifier:ur.UpTo,amount:2,pieces:e.Dahan,filter:e=>e.hasPresenceOf(a)})},threshold:{[ir.Animal]:1}},{text:"Once this turn after Invaders are added or moved into target land, 1 Damage per <dahan> in target land, to those added/moved Invaders only.",[Pn.InTargetLand]:async({$:e,land:a,...t})=>{await a.afterPiecesAreAddedOrMovedAddTrigger({pieces:e.Invader,trigger:{triggerId:e.nextTriggerId(),[Pn.Now]:async({action:t})=>{await a.damage(a.numberOf(e.Dahan),e.Invader,{filter:e=>t.parentData.piecesAddedOrMoved.includes(e)&&e.location===a})}},effect:t.effect,action:t.action,removeAfterTrigger:!0})},threshold:{[ir.Sun]:1,[ir.Air]:2,[ir.Animal]:3}},{text:"Repeat this Power.",[Pn.InTargetLand]:async({power:e,isRepeat:a})=>{a||await e.repeat()},threshold:{[ir.Sun]:2,[ir.Air]:3,[ir.Animal]:4}}]},Gu={name:"Surrounded By The Dahan",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Moon,ir.Air,ir.Animal],set:gn.NatureIncarnate,target:or.Land,targetFilter:[dr.Dahan],range:0,generatesFear:!0,effects:[{textArea:[.693,.733],text:"2 <fear> if Invaders are present.",[Pn.InTargetLand]:async({land:e})=>{e.hasInvaders&&await e.fear(2)}},{textArea:[.754,.795],text:"1 <fear> if <dahan> outnumber <town>/<city>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.the(e.Dahan).outnumber(e.TownOrCity)&&await a.fear(1)}},{textArea:[.817,.857],text:"Isolate target land.",[Pn.InTargetLand]:async({land:e})=>{await e.isolate()}}]},Uu={name:"Warn Of Impending Conflict",type:kn.Innate,speed:sr.Fast,set:gn.NatureIncarnate,target:or.Spirit,targetFilter:[fr.Yourself],effects:[{text:"In one of your lands, 1 <dahan> deals Damage before Invaders during Ravages. (Choose a land when Invaders Ravage there.)",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({icon:"Ravage<br>1 <dahan>",spirit:a,players:[a]}),[Pn.DahanFightBeforeInvaders]:async t=>{t.land.hasPresenceOf(a)&&await t.land.piecesThatAre(e.Dahan).optionallyPickOne((async a=>{e.removeThisEffect(),await a.setFightsBeforeInvaders(!0)}))}})},threshold:{[ir.Sun]:2,[ir.Earth]:1}},{instead:!0,text:"In that land, another <dahan> deals Damage before Invaders during Ravages.",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({icon:"Ravage<br>2 <dahan>",spirit:a,players:[a]}),[Pn.DahanFightBeforeInvaders]:async t=>{t.land.hasPresenceOf(a)&&await t.land.piecesThatAre(e.Dahan).pickMultiple({optional:!0,amount:2,forPickedItem:async a=>{e.removeThisEffect(),await a.setFightsBeforeInvaders(!0)},effect:{noOptions:`${a.nameLink} has no lands with <dahan>.`}})}})},threshold:{[ir.Sun]:3,[ir.Earth]:1}},{instead:!0,text:"In that land, all <dahan> deal Damage before Invaders during Ravages.",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({icon:"Ravage<br>All <dahan>",spirit:a,players:[a]}),[Pn.DahanFightBeforeInvaders]:async t=>{t.land.hasPresenceOf(a)&&t.land.has(e.Dahan)&&await e.may({prompt:"Do damage before Invaders?"})&&(e.removeThisEffect(),await t.land.piecesThatAre(e.Dahan).forEach((async e=>{await e.setFightsBeforeInvaders(!0)})))}})},threshold:{[ir.Sun]:4,[ir.Earth]:2}},{instead:!0,text:"Instead, all <dahan> in all your lands does Damage before Invaders during Ravages.",label:"All <dahan> in all your lands.",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({icon:"Ravage<br>All <dahan>",spirit:a,players:[a]}),[Pn.DahanFightBeforeInvaders]:async t=>{t.land.hasPresenceOf(a)&&await t.land.piecesThatAre(e.Dahan).forEach((async e=>{await e.setFightsBeforeInvaders(!0)}))}})},threshold:{[ir.Sun]:5,[ir.Earth]:3}}]},Hu={name:"Blooming Of The Rocks And Trees",type:kn.Unique,speed:sr.Slow,energy:0,elements:[ir.Sun,ir.Air,ir.Earth,ir.Plant],set:gn.NatureIncarnate,target:or.Land,sourceFilter:[dr.SacredSite],range:1,effects:[{textArea:[.601,.934],text:"If no <blight> is present, Add 1 <vitality>.<or>If no Invaders are present, Add 1 <wilds>.<br><br>If you have 3 <plant>:<br>You may do both.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await e.chooseBetween({effects:[{actionId:"Vitality",textArea:[.612,.653],text:"If no <blight> is present, Add 1 <vitality>.",[Pn.Now]:async()=>{t.doesntHave(e.Blight)&&await t.add(1,e.Vitality)}},{actionId:"Wilds",textArea:[.732,.773],text:"If no Invaders are present, Add 1 <wilds>.",[Pn.Now]:async()=>{t.doesntHave(e.Invader)&&await t.add(1,e.Wilds)}},{actionId:"Both",textArea:[.891,.932],text:"Do both.",condition:()=>!e.treatingAllOrsAsAnds&&a.hasElementsWithConvert({[ir.Plant]:3}),[Pn.Now]:async()=>{await a.convertElements({[ir.Plant]:3}),t.doesntHave(e.Blight)&&await e.addSubEffect({textArea:[.612,.653],text:"If no <blight> is present, Add 1 <vitality>.",[Pn.Now]:async()=>{await t.add(1,e.Vitality)}}),t.doesntHave(e.Invader)&&await e.addSubEffect({textArea:[.732,.773],text:"If no Invaders are present, Add 1 <wilds>.",[Pn.Now]:async()=>{await t.add(1,e.Wilds)}})}}]})}}]},qu={name:"Boon Of Resilient Power",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Sun,ir.Moon,ir.Water,ir.Plant],set:gn.NatureIncarnate,target:or.Spirit,effects:[{textArea:[.649,.752],text:"Target Spirit may Add 1 <broken> to one of your lands.",[Pn.TargetSpirit]:async({you:e,spirit:a})=>{await a.addPresence({filter:a=>a.hasPresenceOf(e),destroyed:!0,locations:zn.AnyLands})}},{textArea:[.763,.899],text:"If you target yourself, gain a Major Power. Otherwise target Spirit gains a Power Card.",[Pn.TargetSpirit]:async({you:e,spirit:a})=>{a===e?await e.gainPowerCard({powerType:kn.Major}):await a.gainPowerCard()}}]},ju={name:"Entwine The Fates Of All",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Moon,ir.Water,ir.Earth,ir.Plant],set:gn.NatureIncarnate,target:or.Spirit,effects:[{textArea:[.735,.821],text:"In one of target Spirit's lands, Defend 2 per <presence> (from all Spirits).",[Pn.TargetSpirit]:async({$:e,spirit:a})=>{await a.inLands().pickOne((async a=>{await a.defend(2*a.numberOf(e.Presence))}))}}]},_u={name:"Radiant And Hallowed Grove",type:kn.Unique,speed:sr.Fast,energy:2,elements:[ir.Sun,ir.Moon,ir.Fire,ir.Plant],set:gn.NatureIncarnate,target:or.Land,targetFilter:[dr.IncarnaRoots],generatesFear:!0,effects:[{textArea:[.607,.701],text:"2 <fear> if Invaders are present or adjacent.",[Pn.InTargetLand]:async({land:e})=>{e.piecesInThisAndAdjacentLocations().where((e=>e.isInvader)).count>0&&await e.fear(2)}},{textArea:[.718,.935],text:"In both target and one adjacent land, you may Remove an Invader with Health less than or equal to the Terror Level. (Damage doesn't reduce Health.)",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.removeInvadersWorthOfHealthUpTo(e.terrorLevel),await a.inAdjacentLands().pickOne((async a=>{await a.removeInvadersWorthOfHealthUpTo(e.terrorLevel)}))}}]},Vu={name:"Revoke Sanctuary And Cast Out",type:kn.Innate,speed:sr.Slow,set:gn.NatureIncarnate,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.InvadersAndIncarnaRoots],range:0,generatesFear:!0,effects:[{effects:[{text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{text:"Remove 1 <explorer>/<town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.removeOne(e.ExplorerOrTown)}}],threshold:{[ir.Sun]:1,[ir.Moon]:1,[ir.Plant]:2}},{effects:[{text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{text:"Remove 1 <explorer>/<town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.removeOne(e.ExplorerOrTown)}}],threshold:{[ir.Sun]:2,[ir.Moon]:1,[ir.Plant]:3}},{effects:[{text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{text:"Remove 1 Invader.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.removeOne(e.Invader)}}],threshold:{[ir.Sun]:2,[ir.Moon]:2,[ir.Plant]:4}}]},Ju={name:"Shelter Under Towering Branches",type:kn.Innate,speed:sr.Slow,set:gn.NatureIncarnate,target:or.Land,sourceFilter:[dr.SacredSite],range:0,hasPushOrGather:!0,effects:[{text:"Gather up to 1 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(1,e.Dahan)},threshold:{[ir.Sun]:1,[ir.Plant]:1}},{text:"Gather up to 1 <explorer>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(1,e.Explorer)},threshold:{[ir.Sun]:1,[ir.Earth]:1,[ir.Plant]:2}},{text:"Gather up to 1 <town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(1,e.Town)},threshold:{[ir.Sun]:2,[ir.Earth]:1,[ir.Plant]:3}},{text:"Gather up to 1 <city>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(1,e.City)},threshold:{[ir.Sun]:3,[ir.Earth]:2,[ir.Plant]:4}}]},zu={name:"Exhale Confusion And Delirium",type:kn.Unique,speed:sr.Fast,energy:0,elements:[ir.Sun,ir.Moon,ir.Air,ir.Animal],set:gn.NatureIncarnate,target:or.Land,targetFilter:[dr.Strife],range:1,generatesFear:!0,effects:[{textArea:[.624,.665],text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.683,.924],text:"Invaders with <strife> don't participate in Ravage. (Check when Ravaging; they don't do Damage or take counterattack Damage.)",[Pn.InTargetLand]:async({$:e,land:a,effect:t})=>{await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===a?t.text:void 0,[Pn.DoesNotParticipateInRavage]:async({location:t})=>{t===a&&await t.doNotParticipateInRavage({pieces:e.Invader,pieceFilter:e=>e.strife>0})}})}}]},Yu={name:"Frightful Keening",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Sun,ir.Fire,ir.Air],set:gn.NatureIncarnate,target:or.Land,targetFilter:[dr.IncarnaVoice],hasPushOrGather:!0,generatesFear:!0,fullText:["Push <incarna-voice>.","If this pushes <incarna-voice> into a land with Invaders, 2 <fear> there (before adding <strife>)."],effects:[{textArea:[.674,.715],text:"Push <incarna-voice>.",[Pn.InTargetLand]:async({$:e,you:a,action:t})=>{a.incarna&&(await e.addSubEffectUntilEndOfAction({textArea:[.74,.874],text:"If this pushes <incarna-voice> into a land with Invaders, 2 <fear> there (before adding <strife>).",highPriority:!0,[Pn.AfterMoving]:async({piece:t,destination:n})=>{t.isA(e.IncarnaVoice)&&t.owner===a&&n.hasInvaders&&await n.fear(2)}}),t.data.movement=await a.incarna.push())}}]},Ku={name:"Inscrutable Journeying",type:kn.Innate,speed:sr.Fast,set:gn.NatureIncarnate,target:or.Spirit,targetFilter:[fr.Yourself],hasPushOrGather:!0,effects:[{text:"You may Push <incarna-voice>.",[Pn.TargetSpirit]:async({spirit:e})=>{await(e.incarna?.push({quantifier:ur.May}))},threshold:{[ir.Air]:1}},{text:"You may Push <incarna-voice>.",[Pn.TargetSpirit]:async({spirit:e})=>{await(e.incarna?.push({quantifier:ur.May}))},threshold:{[ir.Air]:3}},{text:"You may Push <incarna-voice>.",[Pn.TargetSpirit]:async({spirit:e})=>{await(e.incarna?.push({quantifier:ur.May}))},threshold:{[ir.Air]:5}},{text:"Empower <incarna-voice>.",[Pn.TargetSpirit]:async({spirit:e})=>{await e.empowerIncarna()},threshold:{[ir.Moon]:2,[ir.Fire]:1,[ir.Air]:4,[ir.Plant]:1}}]},Qu={name:"Mind Shattering Song",type:kn.Innate,speed:sr.Slow,set:gn.NatureIncarnate,target:or.Land,sourceFilter:[dr.SacredSite],targetFilter:[dr.Strife],range:1,mayAlwaysDowngrade:!0,generatesFear:!0,hasDestroyInstructions:!0,hasDamageInstructions:!0,effects:[{text:"1 <fear> per <moon> you have.",[Pn.InTargetLand]:async({you:e,land:a})=>{await e.askToConvertElementsToCombo({[ir.Moon]:1}),await a.fear(e.elements[ir.Moon])},threshold:{[ir.Moon]:1,[ir.Air]:2}},{text:"1 Damage per <sun> you have, to Invaders with <strife> only.",[Pn.InTargetLand]:async({$:e,you:a,land:t})=>{await t.damage(a.elements[ir.Sun],e.Invader,{filter:e=>e.strife>0})},threshold:{[ir.Sun]:1,[ir.Air]:2}},{text:"For each <sun><moon> pair you have, Destroy 1 Invader with <strife>.",[Pn.InTargetLand]:async({you:e,land:a})=>{await e.askToConvertElementsToCombo({[ir.Sun]:1,[ir.Moon]:1}),await a.destroy({amount:e.numberOfElementCombos({[ir.Sun]:1,[ir.Moon]:1}),filter:e=>e.strife>0})},threshold:{[ir.Moon]:1,[ir.Sun]:1,[ir.Air]:4}}]},Xu={name:"Turmoil's Touch",type:kn.Unique,speed:sr.Slow,energy:0,elements:[ir.Sun,ir.Moon,ir.Air,ir.Plant],set:gn.NatureIncarnate,target:or.Spirit,targetFilter:[fr.Another],effects:[{textArea:[.66,.896],text:"Target Spirit may either pay 1 Energy or discard a Power Card (from hand) to Take a Minor Power into their discard. You  may do likewise.",[Pn.TargetSpirit]:async({$:e,you:a,spirit:t})=>{await t.andAnotherSpirit(a,{now:async(a,t)=>{await e.chooseBetween({text:`${t?"Target Spirit":"You"} may either pay 1 Energy or discard a Power Card (from hand) to Take a Minor Power into ${t?"their":"your"} discard.`,textArea:t?[.663,.832]:[.852,.893],effects:[{actionId:"Energy",text:"Pay 1 Energy to Take a Minor Power into their discard.",[Pn.Now]:async()=>{await a.payEnergy(1);const e=await a.gainPowerCard({powerType:kn.Minor,drawAmount:1,taken:!0});for(const a of e.chosen)await a.discard()},condition:()=>a.energy>=1},{actionId:"DiscardPowerCard",text:"Discard a Power Card (from hand) to Take a Minor Power into their discard.",[Pn.Now]:async()=>{await a.discardPowerCards(1);const e=await a.gainPowerCard({powerType:kn.Minor,drawAmount:1,taken:!0});for(const a of e.chosen)await a.discard()},condition:()=>a.numberOfPowerCardsInHand>0},{actionId:"Neither",text:"Neither.",[Pn.Now]:async()=>{}}]})}})}}]},Zu={name:"Twist Perceptions",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Moon,ir.Air,ir.Animal],set:gn.NatureIncarnate,target:or.Land,targetFilter:[dr.Invaders],range:1,hasPushOrGather:!0,fullText:["Add 1 <strife>.","You may Push the Invader you added <strife> to.","(If you add <strife> to <explorer>/<town>, you can push that Invader first with Senseless Roaming before pushing it with this Power.)"],effects:[{textArea:[.632,.673],text:"Add 1 <strife>.",[Pn.InTargetLand]:async({$:e,land:a})=>{const t=await a.addStrife(1);t.length>0&&await e.addSubEffect({textArea:[.629,.916],text:"You may Push the Invader you added <strife> to.<br><br>(If you add <strife> to <explorer>/<town>, you can push that Invader first with Senseless Roaming before pushing it with this Power.)",[Pn.Now]:async()=>{for(const e of t)await e.push({quantifier:ur.May,pickPiecesEffect:{}})}})}}]},eg={name:"Afflict With Bloodthirst",type:kn.Innate,speed:sr.Fast,set:gn.NatureIncarnate,target:or.Land,range:1,hasPushOrGather:!0,hasDamageInstructions:!0,effects:[{textArea:[.341,.381],text:"Gather 1 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherOne(e.Beasts)},threshold:{[ir.Animal]:1}},{textArea:[.423,.463],text:"2 <fear> if Invaders are present.",[Pn.InTargetLand]:async({land:e})=>{e.hasInvaders&&await e.fear(2)},threshold:{[ir.Fire]:1,[ir.Animal]:3}},{textArea:[.478,.597],text:"1 <explorer> and 1 <town>/<dahan> do Damage, to other Invaders only.",[Pn.InTargetLand]:async({$:e,land:a})=>{const t=[];for(const n of[e.Explorer,e.TownOrDahan])await a.piecesThatAre(n).autoPickOne((e=>(t.push(e),Promise.resolve())),{prompt:`Pick which ${Zn[n].text} to do Damage to other Invaders.`});for(const n of t)await e.addSubEffect({highlightPieces:[n],[Pn.Now]:async()=>{await a.damage(n.strengthOutOfRavage,e.Invader,{filter:e=>e!==n})}})},threshold:{[ir.Sun]:1,[ir.Fire]:2,[ir.Animal]:4}},{textArea:[.614,.698],text:"For each <beasts>: Push 1 <explorer> and 1 <town>/<dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.push({amount:a.numberOf(e.Beasts),pieces:e.Explorer}),await a.push({amount:a.numberOf(e.Beasts),pieces:e.TownOrDahan})},threshold:{[ir.Fire]:1,[ir.Animal]:2}}]},ag={name:"Blood Water And Bloodlust",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Fire,ir.Water,ir.Animal],set:gn.NatureIncarnate,target:or.Land,sourceFilter:[dr.Blight],range:1,effects:[{textArea:[.752,.793],text:"Add 1 <beasts> and 1 <disease>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Beasts),await a.add(1,e.Disease)}}]},tg={name:"Boon Of Corrupted Blood",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Fire,ir.Animal],set:gn.NatureIncarnate,target:or.Spirit,hasPushOrGather:!0,hasDestroyInstructions:!0,hasDamageInstructions:!0,fullText:["1 Damage in one of target Spirit's lands","If you target another Spirit, in that land also: Destroy 1 of their <presence>. 1 Damage. Gather 1 <beasts>."],effects:[{textArea:[.635,.724],text:"1 Damage in one of target Spirit's lands",[Pn.TargetSpirit]:async({$:e,you:a,spirit:t})=>{await t.inLands().pickOne((async n=>{await n.damage(1),t!==a&&await e.addSubEffect({effects:[{textArea:[.74,.871],text:"If you target another Spirit, in that land also: Destroy 1 of their <presence>.",[Pn.Now]:async()=>{await n.destroy({pieces:e.Presence,owner:t})}},{textArea:[.871,.912],text:"1 Damage.",[Pn.Now]:async()=>{await n.damage(1)}},{textArea:[.871,.912],text:"Gather 1 <beasts>.",[Pn.Now]:async()=>{await n.gatherOne(e.Beasts)}}]})}))}}]},ng={name:"Call To A Fastness Of Renewal",type:kn.Innate,speed:sr.Fast,set:gn.NatureIncarnate,target:or.Land,range:1,hasPushOrGather:!0,effects:[{textArea:[.348,.388],text:"Gather up to 2 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gatherUpTo(2,e.Dahan)},threshold:{[ir.Water]:1}},{textArea:[.423,.463],text:"Defend 3 or Downgrade 1 Invader.",[Pn.InTargetLand]:async({$:e,land:a})=>{await e.chooseBetween({effects:[{actionId:"Defend",text:"Defend 3",[Pn.Now]:async()=>{await a.defend(3)}},{actionId:"Downgrade",text:"Downgrade 1 Invader.",[Pn.Now]:async()=>{await a.downgrade()}}]})},threshold:{[ir.Water]:2,[ir.Plant]:1}},{textArea:[.504,.544],text:"Add 1 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Beasts)},threshold:{[ir.Water]:3,[ir.Plant]:1}},{textArea:[.565,.657],text:"If at least 2 <dahan> are present, Replace 1 Invader with 1 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{a.hasAtLeast(2,e.Dahan)&&await a.replaceOne({pieces:e.Invader,withPiece:Ln.Dahan})},threshold:{[ir.Sun]:1,[ir.Water]:4,[ir.Plant]:2}}]},rg={name:"Draw To The Water's Edge",type:kn.Unique,speed:sr.Fast,energy:1,elements:[ir.Sun,ir.Water,ir.Plant],set:gn.NatureIncarnate,target:or.Land,range:0,hasPushOrGather:!0,effects:[{textArea:[.729,.818],text:"Gather up to 2 <town> from a single land.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.gather({quantifier:ur.UpTo,pieces:e.Town,amount:2,single:!0})}}]},ig={name:"Sanguinary Taint",type:kn.Innate,speed:sr.Slow,set:gn.NatureIncarnate,target:or.Land,range:1,hasPushOrGather:!0,generatesFear:!0,hasDamageInstructions:!0,effects:[{effects:[{text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{text:"1 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(1)}},{text:"Push 1 <dahan>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushOne(e.Dahan)}}],threshold:{[ir.Animal]:2}},{effects:[{text:"1 Damage",[Pn.InTargetLand]:async({land:e})=>{await e.damage(1)}},{text:"Add 1 <beasts>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Beasts)}}],threshold:{[ir.Water]:1,[ir.Animal]:3}},{effects:[{text:"1 <fear>",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{text:"4 Damage.",[Pn.InTargetLand]:async({land:e})=>{await e.damage(4)}},{text:"Add 1 <disease>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.add(1,e.Disease)}}],threshold:{[ir.Fire]:2,[ir.Water]:2,[ir.Animal]:5}}]},sg={name:"Swirl And Spill",type:kn.Innate,speed:sr.Slow,set:gn.NatureIncarnate,target:or.Land,range:1,hasPushOrGather:!0,generatesFear:!0,effects:[{text:"Push up to 2 <explorer>/<dahan>/<blight>.",[Pn.InTargetLand]:async({$:e,land:a,action:t})=>{t.data.movements=[],t.data.movements.push(...await a.pushUpTo(2,e.ExplorerDahanOrBlight))},threshold:{[ir.Water]:2}},{effects:[{text:"1 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(1)}},{text:"Push up to 2 <town>/<presence>/<beasts>.",[Pn.InTargetLand]:async({$:e,land:a,action:t})=>{t.data.movements.push(...await a.pushUpTo(2,e.TownPresenceOrBeasts))}}],threshold:{[ir.Water]:3,[ir.Animal]:1}},{text:"In one land pushed into, Downgrade all <town> and all <city>.",[Pn.InTargetLand]:async({$:e,action:a})=>{const t=a.data.movements.map((e=>e.destination));await od.createCollection(e,t).pickOne((async a=>{await a.downgrade({quantifier:ur.All,pieces:e.TownOrCity})}))},threshold:{[ir.Water]:5,[ir.Plant]:2,[ir.Animal]:2}}]},og={name:"Wrack With Pain And Grief",type:kn.Unique,speed:sr.Slow,energy:1,elements:[ir.Water,ir.Plant,ir.Animal],set:gn.NatureIncarnate,target:or.Land,sourceFilter:[dr.Blight],targetFilter:[dr.Invaders],range:1,hasPushOrGather:!0,generatesFear:!0,effects:[{textArea:[.724,.765],text:"2 <fear>.",[Pn.InTargetLand]:async({land:e})=>{await e.fear(2)}},{textArea:[.782,.823],text:"Push 1 <explorer> and 1 <town>.",[Pn.InTargetLand]:async({$:e,land:a})=>{await a.pushOne(e.Explorer),await a.pushOne(e.Town)}}]},dg={[Ui.ACircuitousAndWendingJourney]:rc,[Ui.ADreadfulTideOfScurryingFlesh]:hh,[Ui.AYearOfPerfectStillness]:Dd,[Ui.AbsoluteStasis]:Qc,[Ui.AbsorbCorruption]:Es,[Ui.AbsorbEssence]:uc,[Ui.AcceleratedRot]:lr,[Ui.AfflictWithBloodthirst]:eg,[Ui.AidFromTheSpiritspeakers]:ic,[Ui.AirMovesEarthEndures]:Dh,[Ui.AllEnvelopingGreen]:Vd,[Ui.AngryBears]:ii,[Ui.AnimatedWrackroot]:Os,[Ui.AsphyxiatingSmoke]:vc,[Ui.BargainOfCoursingPaths]:ki,[Ui.BargainsOfPowerAndProtection]:si,[Ui.BatsScoutForRaidsByDarkness]:ro,[Ui.BelligerentAndAggressiveCrops]:Jd,[Ui.BesetAndConfoundTheInvaders]:uh,[Ui.BirdsCryWarning]:io,[Ui.BlazingIntimidation]:hu,[Ui.BlazingRenewal]:cr,[Ui.BlindingGlare]:Cu,[Ui.BloodDrawsPredators]:so,[Ui.BloodWaterAndBloodlust]:ag,[Ui.BloodwrackPlague]:Rr,[Ui.BloomingOfTheRocksAndTrees]:Hu,[Ui.BlurTheArcOfYears]:Xc,[Ui.BombardWithBouldersAndStingingSeeds]:Ci,[Ui.BoonOfAncientMemories]:mh,[Ui.BoonOfCorruptedBlood]:tg,[Ui.BoonOfGrowingPower]:Vl,[Ui.BoonOfReimagining]:Bh,[Ui.BoonOfResilientPower]:qu,[Ui.BoonOfSunshinesPromise]:ml,[Ui.BoonOfSwarmingBedevilment]:gh,[Ui.BoonOfVigor]:vl,[Ui.BoonOfWatchfulGuarding]:Sc,[Ui.CallOfTheDahanWays]:_i,[Ui.CallOfTheDeeps]:cl,[Ui.CallOnHerdersForAid]:Dc,[Ui.CallOnMidnightsDream]:Id,[Ui.CallToAFastnessOfRenewal]:ng,[Ui.CallToASunlitHaven]:xl,[Ui.CallToBloodshed]:Vi,[Ui.CallToFerocity]:ks,[Ui.CallToGuard]:oo,[Ui.CallToIsolation]:Ji,[Ui.CallToMigrate]:zi,[Ui.CallToTend]:Yi,[Ui.CallToTrade]:Cs,[Ui.CallToVigilance]:Mu,[Ui.CarapacedLand]:lo,[Ui.CastDownIntoTheBrinyDeep]:Nr,[Ui.CleansingFloods]:hr,[Ui.CloseTheWays]:sc,[Ui.ConcealingShadows]:Pl,[Ui.ConfoundingMists]:Ds,[Ui.ConsiderAHarmoniousNature]:Du,[Ui.CoordinatedRaid]:Nu,[Ui.CreepersTearIntoMortar]:zd,[Ui.CropsWitherAndFade]:Sl,[Ui.CyclesOfTimeAndTide]:Bs,[Ui.DarkAndTangledWoods]:Ki,[Ui.DarkSkiesLooseAStingingRain]:Xl,[Ui.DarknessSwallowsTheUnwary]:El,[Ui.DeathApproachesFromBeneathTheSurface]:Uc,[Ui.DeathFallsGentlyFromOpenBlossoms]:Wr,[Ui.DelusionsOfDanger]:Qi,[Ui.DesiccatingWinds]:co,[Ui.DevouringAnts]:Xi,[Ui.DireMetamorphosis]:ho,[Ui.DisorientingLandscape]:Ls,[Ui.DissolveTheBondsOfKinship]:gr,[Ui.DissolvingVapors]:Ph,[Ui.DomesticatedAnimalsGoBerserk]:uo,[Ui.DrawOfTheFruitfulEarth]:Bd,[Ui.DrawToTheWatersEdge]:rg,[Ui.DrawTowardsAConsumingVoid]:oi,[Ui.DreadApparitions]:Pd,[Ui.DreamOfTheUntouchedLand]:di,[Ui.DreamsOfTheDahan]:Sd,[Ui.DriftDownIntoSlumber]:Zi,[Ui.Drought]:es,[Ui.DryWoodExplodesInSmolderingSplinters]:go,[Ui.EarthMovesWithVigorAndMight]:Gd,[Ui.EarthShuddersBuildingsFall]:Tu,[Ui.EerieNoisesAndMovingTrees]:Ec,[Ui.ElementalAegis]:gc,[Ui.ElementalBoon]:as,[Ui.ElementalTeachings]:vh,[Ui.ElusiveAmbushes]:Fs,[Ui.EmergeFromTheDreadNightWind]:pu,[Ui.EncircleTheUnsuspectingPrey]:$l,[Ui.EncompassingWard]:ts,[Ui.EnticingAndLullingDreams]:Ol,[Ui.EnticingSplendor]:ns,[Ui.EntrancingApparitions]:rs,[Ui.EntrapTheForcesOfCorruption]:fo,[Ui.EntwineTheFatesOfAll]:ju,[Ui.EntwinedPower]:yr,[Ui.EpidemicsRunRampant]:Zh,[Ui.EvermultiplyingSwarm]:fh,[Ui.ExaltationOfEchoedSteps]:Au,[Ui.ExaltationOfGraspingRoots]:uu,[Ui.ExaltationOfMoltenStone]:iu,[Ui.ExaltationOfTangledGrowth]:Mc,[Ui.ExaltationOfTheIncandescentSky]:Di,[Ui.ExaltationOfTheStormWind]:al,[Ui.ExaltationOfTheTransformingFlame]:xc,[Ui.ExhaleConfusionAndDelirium]:zu,[Ui.ExplosiveEruption]:su,[Ui.FavorOfTheSunAndStarlitDark]:yo,[Ui.FavorsCalledDue]:kl,[Ui.FavorsOfStoryAndSeason]:Wu,[Ui.FerociousRampage]:Hc,[Ui.FetidBreathSpreadsInfection]:eu,[Ui.FieldsChokedWithGrowth]:Yd,[Ui.FieryVengeance]:au,[Ui.FireAndFlood]:$r,[Ui.FireBurnsWaterSoothes]:Lh,[Ui.FireInTheSky]:Rs,[Ui.Firestorm]:bc,[Ui.FlamesFury]:Tc,[Ui.FlashFloods]:bl,[Ui.Flashfires]:Ac,[Ui.FleshrotFever]:Ms,[Ui.FlockingRedTalons]:Bi,[Ui.FlowDownriverBlowDownwind]:po,[Ui.FlowLikeWaterReachLikeAir]:Gr,[Ui.FlowingAndSilentFormsDartBy]:Sh,[Ui.FocusTheLandsAnguish]:li,[Ui.FocusTheSunsRays]:Bu,[Ui.ForestsOfLivingObsidian]:ci,[Ui.ForsakeSocietyToChaseAfterDreams]:rh,[Ui.FoulVaporsAndFetidMuck]:Nc,[Ui.FoundationsSinkIntoMud]:Zl,[Ui.FragmentsOfYesteryear]:Li,[Ui.FrenziedAssault]:Gl,[Ui.FrightfulKeening]:Yu,[Ui.GatherTheScatteredLightOfStars]:Fh,[Ui.GatherTheWarriors]:Bl,[Ui.GiftOfAbundance]:ec,[Ui.GiftOfConstancy]:is,[Ui.GiftOfFlowingPower]:fc,[Ui.GiftOfFuriousMight]:qc,[Ui.GiftOfLivingEnergy]:ss,[Ui.GiftOfNaturesConnection]:wo,[Ui.GiftOfPower]:os,[Ui.GiftOfProliferation]:Kd,[Ui.GiftOfSearingHeat]:Bc,[Ui.GiftOfSeismicEnergy]:Iu,[Ui.GiftOfStrength]:Hd,[Ui.GiftOfThePrimordialDeeps]:yc,[Ui.GiftOfTheSparkingSky]:tl,[Ui.GiftOfTheSunlitAir]:Vc,[Ui.GiftOfTheUntamedWild]:ih,[Ui.GiftOfTwinnedDays]:mo,[Ui.GiftOfWindspedSteps]:Jc,[Ui.GnawingRootbiters]:ds,[Ui.GoldsAllure]:Ns,[Ui.GrantHatredARavenousForm]:Ur,[Ui.GraspingTide]:hl,[Ui.GrowthThroughSacrifice]:Ws,[Ui.GuardTheHealingLand]:qd,[Ui.GuardianSerpents]:$s,[Ui.GuideTheWayOnFeatheredWings]:yh,[Ui.HarbingersOfTheLightning]:nl,[Ui.HauntedByPrimalMemories]:vo,[Ui.HazardsSpreadAcrossTheIsland]:xo,[Ui.HerdTowardsTheLurkingMaw]:jc,[Ui.HereThereBeMonsters]:Gs,[Ui.HoldTheIslandFastWithABulwarkOfWill]:Gh,[Ui.ImbueWithNourishingVitality]:jd,[Ui.ImpenetrableTanglesOfGreenery]:Qd,[Ui.ImpersonateAuthority]:Vh,[Ui.InciteTheMob]:Jh,[Ui.IndomitableClaim]:pr,[Ui.InfestationOfVenomousSpiders]:hi,[Ui.InfestedAquifers]:Us,[Ui.InfiniteVitality]:mr,[Ui.InflameTheFiresOfLife]:Hs,[Ui.InsatiableHungerOfTheSwarm]:Hr,[Ui.InscrutableJourneying]:Ku,[Ui.InspireAWindingDance]:Pu,[Ui.InspireTheReleaseOfStolenLands]:Fi,[Ui.InstrumentsOfTheirOwnRuin]:jr,[Ui.IntractableThicketsAndThorns]:Wc,[Ui.IrresistibleCall]:ui,[Ui.JaggedShardsPushFromTheEarth]:Uh,[Ui.KeepWatchForNewIncursions]:$u,[Ui.LandCreaksWithTension]:Su,[Ui.LandOfHauntsAndEmbers]:ls,[Ui.LavaFlows]:ou,[Ui.LayPathsTheyCannotHelpButWalk]:oc,[Ui.LeadTheFuriousAssault]:Ll,[Ui.LeadTheWarriorsToBattle]:Fl,[Ui.LearnTheInvadersTactics]:xh,[Ui.LeaveATrailOfDeathlySilence]:wu,[Ui.LetThemBreakThemselvesAgainstTheStone]:Hh,[Ui.LetsSeeWhatHappens]:zh,[Ui.LightningTornSkiesIncitePandemonium]:il,[Ui.LightningsBoon]:rl,[Ui.LikeCallsToLike]:bo,[Ui.LostInTheEndlessDark]:mu,[Ui.LostInTheSwirlingHaze]:Eh,[Ui.LureOfTheUnknown]:cs,[Ui.ManifestIncarnation]:_r,[Ui.ManifestationOfPowerAndGlory]:Rl,[Ui.MantleOfDread]:Cl,[Ui.MarkTerritoryWithScarsAndTeeth]:_c,[Ui.MassiveFlooding]:Tl,[Ui.MeltEarthIntoQuicksand]:gi,[Ui.MesmerizedTranquility]:To,[Ui.MindShatteringSong]:Qu,[Ui.MischiefAndSabotage]:Oc,[Ui.MistsOfOblivion]:vr,[Ui.MysteriousAbductions]:kc,[Ui.NaturesResilience]:hs,[Ui.NeverHeardFromAgain]:sh,[Ui.NightTerrors]:Ed,[Ui.ObserveTheEverChangingWorld]:bh,[Ui.OceanBreaksTheShore]:ul,[Ui.OfferPassageBetweenWorlds]:dc,[Ui.OpenShiftingWaterways]:$c,[Ui.OverenthusiasticArson]:Yh,[Ui.OvergrowInANight]:Xd,[Ui.PactOfTheJoinedHunt]:qs,[Ui.ParalyzingFright]:xr,[Ui.PathsTiedByNature]:lc,[Ui.PeaceOfTheNighttimeSky]:Rh,[Ui.PentupCalamity]:zr,[Ui.PerilsOfTheDeepestIsland]:oh,[Ui.PillarOfLivingFlame]:br,[Ui.PlagueShipsSailToDistantPorts]:Ri,[Ui.Plaguebearers]:tu,[Ui.PlowsShatterOnRockyGround]:qh,[Ui.PoisonedDew]:js,[Ui.PoisonedLand]:Tr,[Ui.PortentsOfDisaster]:_s,[Ui.PoundShipsToSplinters]:gl,[Ui.PourTimeSideways]:Zc,[Ui.PoweredByTheFurnaceOfTheEarth]:du,[Ui.Powerstorm]:Ar,[Ui.PredatoryNightmares]:Od,[Ui.PreyOnTheBuilders]:Ul,[Ui.PromisesOfProtection]:Vs,[Ui.ProwlingPanthers]:Js,[Ui.PullBeneathTheHungryEarth]:us,[Ui.PunishThoseWhoTrespass]:Jl,[Ui.PurifyingFlame]:gs,[Ui.PursueWithScratchesPecksAndStings]:ph,[Ui.PyroclasticBombardment]:lu,[Ui.PyroclasticFlow]:Yr,[Ui.QuickenTheEarthsStruggles]:fs,[Ui.RadiantAndHallowedGrove]:_u,[Ui.RadiatingTremors]:Eu,[Ui.RagingStorm]:sl,[Ui.RainAndMudSuppressConflict]:ac,[Ui.RainOfAsh]:cu,[Ui.RainOfBlood]:ys,[Ui.RangingHunt]:Hl,[Ui.RavagedUndergrowthSlithersBackToLife]:Mi,[Ui.RazorsharpUndergrowth]:zs,[Ui.ReachFromTheInfiniteDarkness]:vu,[Ui.ReachingGrasp]:ps,[Ui.ReclaimedByTheDeeps]:fl,[Ui.RegrowFromRoots]:zl,[Ui.RenewingBoon]:Ao,[Ui.RenewingRain]:Ys,[Ui.ResoundingFootfallsSowDismay]:Ou,[Ui.RevokeSanctuaryAndCastOut]:Vu,[Ui.RitesOfTheLandsRejection]:Ks,[Ui.RitualsOfDestruction]:_d,[Ui.RiversBounty]:Al,[Ui.RoilingBogAndSnaggingThorn]:Td,[Ui.RouseTheTreesAndStones]:ws,[Ui.RumblingEarthquakes]:Ni,[Ui.RumblingsPortendAGreaterQuake]:ku,[Ui.SacrosanctWilderness]:Yl,[Ui.SanguinaryTaint]:ig,[Ui.SapTheStrengthOfMultitudes]:ms,[Ui.SavageMawbeasts]:vs,[Ui.SavageRevenge]:nu,[Ui.SavageTransformation]:Kr,[Ui.ScarredAndStonyLand]:jh,[Ui.ScatterToTheWinds]:zc,[Ui.ScorchWithWavesOfHeat]:Lc,[Ui.ScorchingConvergence]:Lu,[Ui.ScourTheLand]:Qs,[Ui.ScreamDiseaseIntoTheWind]:dd,[Ui.SeaMonsters]:fi,[Ui.SearAngerIntoTheWildLands]:ld,[Ui.SerpentRousesInAnger]:pc,[Ui.SerpentWakesInPower]:wc,[Ui.SetThemOnAnEvertwistingTrail]:cd,[Ui.SettleIntoHuntinggrounds]:yi,[Ui.ShadowsOfTheBurningForest]:xs,[Ui.ShapeTheSelfAnew]:Mh,[Ui.ShareMentorshipAndExpertise]:Th,[Ui.ShareSecretsOfSurvival]:Ah,[Ui.ShatterHomesteads]:ol,[Ui.ShelterUnderToweringBranches]:Ju,[Ui.SiderealGuidance]:Nh,[Ui.SkiesHeraldTheSeasonOfReturn]:hd,[Ui.SkyStretchesToShore]:Xs,[Ui.SleepAndNeverWaken]:pi,[Ui.SlipTheFlowOfTime]:eh,[Ui.SmashStompAndFlatten]:gu,[Ui.SmiteTheLandWithFulmination]:dl,[Ui.SmotheringInfestation]:Qr,[Ui.SocietyDissolvesAtTheBeckoningHeart]:dh,[Ui.SoftlyBeckonEverInward]:lh,[Ui.SolidifyEchoesOfMajestyPast]:Wi,[Ui.SongOfSanctity]:bs,[Ui.SpillBitternessIntoTheEarth]:wi,[Ui.SpiritsMayYetDream]:Cd,[Ui.SpreadingAndDreadfulMire]:Gc,[Ui.SpreadingWilds]:Kl,[Ui.SpurOnWithWordsOfFire]:Zs,[Ui.StarsBlazeInTheDaytimeSky]:Wh,[Ui.SteamVents]:Ts,[Ui.StemTheFlowOfFreshWater]:Zd,[Ui.StingingSandstorm]:Fc,[Ui.Stormswath]:mi,[Ui.StranglingFirevine]:Xr,[Ui.StrengthOfTheWakingIsland]:mc,[Ui.StretchOutCoilsOfForebodingDread]:Dl,[Ui.StrikeLowWithSuddenFevers]:ru,[Ui.StrongAndConstantCurrents]:ud,[Ui.StubbornSolidity]:_h,[Ui.StudyTheInvadersFears]:Ih,[Ui.SuckingOoze]:gd,[Ui.SuddenAmbush]:Ml,[Ui.SuffocatingShroud]:Oh,[Ui.SunsetsFireFlowsAcrossTheLand]:fd,[Ui.SurgingLahar]:fu,[Ui.SurroundedByTheDahan]:Gu,[Ui.SwallowTheLanddwellers]:yl,[Ui.SwallowedByTheEndlessDark]:xu,[Ui.SwallowedByTheWilderness]:ch,[Ui.SwarmingWasps]:eo,[Ui.SweepIntoTheSea]:Zr,[Ui.SwelteringExhaustion]:Rc,[Ui.SwirlAndSpill]:sg,[Ui.TalonsOfLightning]:Ir,[Ui.TeemingRivers]:ao,[Ui.TeethGleamFromDarkness]:ql,[Ui.TempestOfLeavesAndBranches]:Yc,[Ui.TerrifyingChase]:jl,[Ui.TerrifyingNightmares]:Pr,[Ui.TerrifyingRampage]:yu,[Ui.TerritorialStrife]:yd,[Ui.TerrorOfTheHunted]:bu,[Ui.TerrorTurnsToMadness]:pd,[Ui.TheBurnedLandRegrows]:Ic,[Ui.TheFogClosesIn]:kh,[Ui.TheJungleHungers]:Sr,[Ui.TheLandThrashesInFuriousPain]:Er,[Ui.ThePastReturnsAgain]:th,[Ui.TheShoreSeethesWithHatred]:wd,[Ui.TheTeemingHostArrives]:wh,[Ui.TheTreesAndStonesSpeakOfWar]:Or,[Ui.TheWoundedWildTurnsOnItsAssailants]:vi,[Ui.ThicketsEruptWithEveryTouchOfBreeze]:xi,[Ui.ThreateningFlames]:Pc,[Ui.ThrivingChokefungus]:md,[Ui.ThunderingDestruction]:ll,[Ui.TidalBoon]:pl,[Ui.TigersHunting]:ei,[Ui.TooNearTheJungle]:_l,[Ui.TormentingRotflies]:to,[Ui.ToweringWrath]:Ql,[Ui.TransformToAMurderousDarkness]:bi,[Ui.TransformativeSacrifice]:$i,[Ui.TravelersBoon]:cc,[Ui.TreacherousWaterways]:vd,[Ui.TreesRadiateCelestialBrilliance]:Ti,[Ui.Tsunami]:kr,[Ui.TurmoilsTouch]:Xu,[Ui.TwilightFogBringsMadness]:no,[Ui.TwistPerceptions]:Zu,[Ui.TwistedFlowersMurmurUltimatums]:ai,[Ui.UnbearableDeluge]:tc,[Ui.UnbearableGaze]:Fu,[Ui.UnbelievableRegrowth]:el,[Ui.UncannyMelting]:As,[Ui.UnearthABeastOfWrathfulStone]:ji,[Ui.UnexpectedTigers]:Kh,[Ui.UnleashATorrentOfTheSelfsOwnEssence]:Ai,[Ui.UnlockTheGatesOfDeepestPower]:ti,[Ui.UnnervingPall]:Ch,[Ui.UnquenchableFlames]:xd,[Ui.UnrelentingGrowth]:ni,[Ui.UtterACurseOfDreadAndBone]:Ii,[Ui.VanishSoftlyAwayForgottenByAll]:Pi,[Ui.VeilTheNightsHunt]:Is,[Ui.VengeanceOfTheDead]:Cr,[Ui.VigorOfTheBreakingDawn]:Br,[Ui.ViolentWindstorms]:Kc,[Ui.VisionsOfAShiftingFuture]:nh,[Ui.VisionsOfFieryDoom]:Ps,[Ui.VoiceOfCommand]:Si,[Ui.VoiceOfThunder]:Nl,[Ui.VolcanicEruption]:ri,[Ui.VoraciousGrowth]:Ss,[Ui.WallsOfRockAndThorn]:Ei,[Ui.WardTheShores]:Ad,[Ui.WarnOfImpendingConflict]:Uu,[Ui.WashAway]:Il,[Ui.WaterEatsAwayTheDeepRootsOfEarth]:wl,[Ui.WaterNourishesLifesGrowth]:nc,[Ui.WaysOfShoreAndHeartland]:hc,[Ui.WeaveTogetherTheFabricOfPlace]:Oi,[Ui.WeepForWhatIsLost]:bd,[Ui.WhisperedGuidanceThroughTheNight]:Cc,[Ui.WhyDontYouAndThemFight]:Xh,[Ui.WindsOfRustAndAtrophy]:Lr,[Ui.WitherBodiesScarStones]:Ru,[Ui.WoodSeeksGrowthHumansSeekFreedom]:$h,[Ui.WordsOfWarning]:Wl,[Ui.WrackWithPainAndGrief]:og,[Ui.WrapInWingsOfSunlight]:Fr};var lg;!function(e){e.HealthyIsland="HealthyIsland",e.BlightedIsland="BlightedIsland"}(lg||(lg={}));const cg=e=>{let a=0;for(let t=0,n=e.length;t<n;t+=1)a+=e[t];return a},hg=(e,a)=>Math.exp(-e/a),ug=(e,a)=>1-Math.exp(-e/a),gg=(e,a,t)=>{const n=Math.min(Math.max(e,Math.min(a,t)),Math.max(a,t));return a===t?a:Math.abs((n-a)/(t-a))},fg=[In.ProudAndMightCapital,In.BuildingBoom,In.IndenturedServantsEarnLand,In.HighImmigrationI,In.HighImmigrationFull,In.LocalAutonomy,In.IndependentResolve,In.SprawlingPlantation,In.DemandForNewCashCrops,In.FrontierExplorers,In.SlaveLabor,In.TriangleTrade,In.SlowHealingEcosystem,In.PersistentExplorers,In.IrreparableDamage,In.SeekPrimeTerritory,In.MigratoryHerders,In.MoreRuralThanUrban,In.HerdsThriveInVerdantLands,In.WaveOfImmigration,In.FarFlungHerds,In.LandRush,In.HuntersSwarmTheIsland,In.StalkThePredators,In.HuntersSeekShellAndHide,In.ASenseForImpendingDisaster,In.CompetitionAmongHunters,In.PressureForFastProfit,In.LandStrippedBare,In.MiningTunnels,In.AvariceRewarded,In.CeaselessMining,In.MiningBoomI,In.UntappedSaltDeposits,In.MiningBoomII,In.TheEmpireAscendant,In.TradeHub,In.PortsSprawlOutward,In.TradingPort,In.ChartTheCoastline,In.RunoffAndBilgewater,In.ExportsFuelInwardGrowth,In.SwayedByTheInvaders,In.HeavyMining,In.FineSteelForToolsAndGuns,In.RoyalBacking,In.MiningRush,In.ShadowsPartake,In.Immense,In.Travel,In.Madness,In.Reach,In.Resilience,In.DarkFire,In.Encircle,In.Intensify,In.Lair,In.Locus,In.Mentor,In.Nourishing,In.Regrowth,In.SpreadingHostility,In.Stranded,In.Tactician,In.Transforming,In.Unconstrained,In.Violence,In.Warrior,In.DownwardSpiral,In.MemoryFadesToDust,In.BackAgainstTheWall,In.AllThingsWeaken,In.PowerCorrodesTheSpirit,In.UntendedLandCrumbles,In.AttenuatedEssence,In.BlightCorrodesTheSpirit,In.IntensifyingExploitation,In.TheBorderOfLifeAndDeath,In.RoilingWaters,In.SereneWaters,In.DreamOfTheUntouchedLand,In.BargainsOfPowerAndProtection,In.BargainsOfCoursingPath,In.Bringer,In.Earth,In.GreenChokeTheLandWithGreen,In.GreenSteadyRegeneration,In.Lightning,In.Ocean,In.River,In.Shadows,In.Thunderspeaker,In.FangsAllyOfTheBeasts,In.FangsCallForthPredators,In.Keeper,In.Downpour,In.Finder,In.Serpent,In.Wildfire,In.Eyes,In.Heat,In.Mud,In.Teeth,In.Whirlwind,In.Fractured,In.LureHomeOfTheIslandsHeart,In.LureEnthrallTheForeignExplorers,In.ManyMinds,In.MemoryKnowledge,In.MemoryInsight,In.ShroudGatherPowerFromTheCoolAndDark,In.ShroudMistsShiftAndFlow,In.SlowAndSilentDeath,In.Starlight,In.Stone,In.Trickster,In.Vengeance,In.Volcano,In.Behemoth,In.Darkness,In.Earthquakes,In.Gaze,In.HearthVigil,In.Roots,In.Voice,In.WoundedSeekingAPathTowardsHealing],yg={[Gi.Setup]:0,[Gi.SetupPresence]:0,[Gi.InitialExplore]:0,[Gi.RoyalBacking]:0,[Gi.Grow]:0,[Gi.GainEnergy]:0,[Gi.PlayPowers]:0,[Gi.FastPowers]:0,[Gi.BlightedIsland]:.5,[Gi.Event]:.5,[Gi.Fear]:.5,[Gi.HighImmigration]:.5,[Gi.Ravage]:.5,[Gi.Build]:.5,[Gi.Explore]:.5,[Gi.AdvanceCards]:.5,[Gi.SlowPowers]:1,[Gi.TimePasses]:1},pg={[Xn.City]:1,[Xn.Town]:.5};class wg{static inputNames=["Blight lost, healthy island","Blight lost, blighted island","Slow healing blight","Capital size","Coastal lands with cities","Max towns allowed","Fear","Terror level","Stage","Turn","Phase",...["1","2","3","4","5","6","7","8"].flatMap((e=>["Building","Ravaging","Strength","Health","Coastalness","Badlands","Blight","Cities","Dahan","Disease","Explorers","Presence","Towns","Vitality","Wilds","Defense","Incarna","Presence","Adjacent Presence","Adjacent Buildings"].map((a=>`${e}: ${a}`)))),"Energy","Energy Income","Cardplays","Destroyed Presence","Absorbed Presence","Presence in Ocean","Incarna","Empowered Incarna","Sun Elements","Moon Elements","Fire Elements","Air Elements","Water Elements","Earth Elements","Plant Elements","Animal Elements","Minor Powers","Major Powers","Forgotten Uniques","Number of discarded cards",...fg,...Object.keys(dg)];static getInputs(e,a){const{effectIds:t,startingBlight:n,fearCardsInLevelCount:r,fearPool:i,currentFear:s}=e,o=e.spirits[a],d=o.startingBoard,l=o.elements,c=e.invaderCardsInVisibleSlot(ah.Build),h=e.invaderCardsInVisibleSlot(ah.Ravage);return[e.blightStatus===lg.HealthyIsland?gg(e.blightOnBlightCard,n,0):0,e.blightStatus===lg.BlightedIsland?gg(e.blightOnBlightCard,rr[e.blightCardActive].blightPerPlayer*e.spiritCount,0):0,gg(e.slowHealingBlight,0,3),gg(e.capitalSize,0,7),gg(e.coastalLandsWithCities,0,2*e.boardCount+1),gg(e.townsCount,0,e.maxTownsAllowed+1),hg(cg(r)*i-s,30),gg(e.terrorLevel,1,3),gg(e.stage,1,3),ug(e.turn,5),yg[e.phase],...d.locations.flatMap((e=>e.type===jo.Ocean?[]:[c.some((a=>e.matchesInvaderCard(a,qr.Build)))?pg[e.buildPlans]:0,h.some((a=>e.matchesInvaderCard(a,qr.Ravage)))?1:0,ug(e.invaders().where((e=>0===e.strife&&!e.doesNotParticipateInRavage)).sum((e=>e.strengthDuringRavage)),2),ug(e.invaders().where((e=>0===e.strife&&!e.doesNotParticipateInRavage)).sum((e=>e.health)),2),e.isCoastal?1:0,...[Xn.Badlands,Xn.Blight,Xn.City,Xn.Dahan,Xn.Disease,Xn.Explorer,Xn.Presence,Xn.Town,Xn.Vitality,Xn.Wilds].map((a=>ug(e.numberOf(a),1))),ug(e.defense,3),e.hasIncarnaOf(o)?1:0,ug(e.numberOfPresenceOf(o),1),ug(e.numberOfPiecesInAdjacentLands(Xn.Presence),1),ug(e.numberOfPiecesInAdjacentLands(Xn.TownOrCity),1)])),ug(o.energy,5),ug(o.trackEnergy,3),gg(o.cardPlays,1,6),ug(o.destroyedPresence,1),gg(o.absorbedPresence.length,0,6),ug(d.ocean.numberOfPresenceOf(o),1),o.hasIncarna?1:0,o.hasEmpoweredIncarna?1:0,...[ir.Sun,ir.Moon,ir.Fire,ir.Air,ir.Water,ir.Earth,ir.Plant,ir.Animal].map((e=>ug(l[e],2))),ug(zo(o.powers,(e=>e.isA(En.Minor))),2),ug(zo(o.powers,(e=>e.isA(En.Major))),2),hg(zo(o.powers,(e=>e.isA(En.Unique))),2),1-o.numberOfPowerCardsInHand/o.numberOfPowerCards,...fg.map((e=>t.includes(e)?1:0)),...Object.keys(dg).map((e=>o.hasPower(e)?1:0))]}}var mg,vg;function xg(e,a,t=" "){if(e.length>=a)return e;const n=a-e.length;return t.repeat(n)+e}!function(e){e.BrandenburgPrussia="BrandenburgPrussia",e.Sweden="Sweden",e.England="England",e.France="France",e.Scotland="Scotland",e.Habsburg="Habsburg",e.Russia="Russia",e.Saltburg="Saltburg"}(mg||(mg={})),function(e){e.Covered="Covered",e.Uncovered="Uncovered",e.UncoveredPlayed="UncoveredPlayed"}(vg||(vg={}));class bg{static weights={absorbedPresence:1.5,badlandsWithInvaders:.38,bargainEffects:2,beneficialPiecesInOcean:-1,blightLeft:2.5,blightLeftImportant:2.8,boardsWithLessThanFiveDahan:-.6,boardsWithLessThanFourDahan:-1.2,boardsWithLessThanSixDahan:-1.2,cityBuildingLands:-2,coastalLandsWithThieves:-2,coastalLandsWithWarding:3,damage:.1,destroyedSerpentPresence:1,discardedCards:-.1,earnedFearCardsAtTL1:1,earnedFearCardsAtTL2:3,earnedFearCardsAtTL3:5,elementsInCorners:1,emptyLands:.3,energy:.09,energyMismatch:-.2,explorersLeftAtTL1:-1,explorersLeftBeyondTL1:-.5,fearLeft:-1.5,fearPool:0,floodedLands:5,highImmigrationLands:-1,islandIsBlighted:-9.375,landsAdjacentToFlameMarker:1,landsAdjacentToPresence:.3,landsAdjacentToSacredSite:.4,landsWithBuildings:0,landsWithCities:0,landsWithConvertableDahan:-1,landsWithDahanAndInvader:.1275,landsWithExplorersAndBeasts:.75,landsWithInvaders:-.2,landsWithInvadersAndDisease:.51,landsWithPresence:.4,landsWithSacredSite:.51,landsWithTwoDahan:.19,landsWithTwoDahanAndInvader:.3,majorPowerCards:5.625,minPresenceOnIsland:1.5,minPresenceOnIslandDuringDownwardSpiral:4,minorPowerCards:2.1,numberOfBadLands:1,numberOfBeasts:.4,numberOfBlight:-1,numberOfCardsInExploreDeck:2,numberOfCities:-4,numberOfDahan:1,numberOfDeeps:.5,numberOfDisease:.4,numberOfOmen:-2.5,numberOfQuake:.3,numberOfThieves:-1,numberOfVitality:.8,numberOfWardingPattern:2,numberOfWilds:.8,preparedElements:.2,presenceOnIsland:.1,quakesWithBuildings:.3,ravagingLandsNoBlightBlighted:-1.6,ravagingLandsNoBlightHealthy:-1,ravagingLandsWithBlightBlighted:-3.2,ravagingLandsWithBlightHealthy:-2,spiritsWithAtLeast1Dahan:.2,spiritsWithAtLeast2Dahan:1.3,spiritsWithAtLeast3Dahan:1.2,spiritsWithAtLeast4Dahan:.5,stage:0,strifeHealth:.3,sumEnergyCostOfCards:0,terrorLevel:1,townBuildingLandsAtTL3:-.75,townBuildingLandsBeforeTL3:-1.5,townsLeftAtTL3:-1,townsLeftBeforeTL3:-2,uncoveredPresence:3,uniquePowerCards:2.8};lastValue={};static extractFeatures(e){const{blightOnBlightCard:a,blightCardActive:t,blightStatus:n,currentFear:r,fearCardsEarned:i,fearCardsInLevelCount:s,fearPool:o,pieceCount:d,spiritCount:l,spirits:c,stage:h,terrorLevel:u,invaderCardsInExploreDeck:g}=e,f=Math.min(Jo(c,(e=>e.presence().count)),4)*l,y=_o(c,(e=>e.presence().count)),p=t&&[ar.BlightCorrodesTheSpirit,ar.DownwardSpiral,ar.MemoryFadesToDust,ar.SlowDissolutionOfWill,ar.UntendedLandCrumbles].includes(t)?f:0,w=e.spirits.find((e=>e.spirit===fn.Serpent)),m=w?w.absorbedPresence.length:0,v=w?w.destroyedPresence:0,x=e.spirits.find((e=>e.spirit===fn.Memory)),b=x?cg(Object.values(x.preparedElements)):0;let T=0;for(const a of e.invaderCardsInSlot(ah.HighImmigration))null!==a&&(T+=e.inLandsWhere((e=>e.matchesInvaderCard(a,qr.Build)&&(e.has(Xn.Invader)||e.buildCardsAffectLandsWithoutInvaders))).count);let A=0;e.adversaryLeading?.adversary===mg.Sweden&&e.stage<=2&&(A+=e.inLandsWhere((e=>e.hasDahan&&e.numberOfDahan<=e.numberOfInvaders+1)).count);let I=0;for(const a of e.invaderCardsInVisibleSlot(ah.Build))I+=e.inLandsWhere((e=>e.matchesInvaderCard(a,qr.Build)&&e.buildPlans===Xn.City&&!e.has(Xn.Disease)&&(e.has(Xn.Invader)||e.buildCardsAffectLandsWithoutInvaders))).count;let P=0;for(const a of e.invaderCardsInVisibleSlot(ah.Build))P+=e.inLandsWhere((e=>e.matchesInvaderCard(a,qr.Build)&&e.buildPlans===Xn.Town&&!e.has(Xn.Disease)&&(e.has(Xn.Invader)||e.buildCardsAffectLandsWithoutInvaders))).count;let S=0,E=0;for(const a of e.invaderCardsInVisibleSlot(ah.Ravage)){const t=e.inLandsWhere((e=>e.matchesInvaderCard(a,qr.Ravage)&&e.invaders().where((e=>0===e.strife&&!e.doesNotParticipateInRavage)).sum((e=>e.strengthDuringRavage))>=2));E+=t.copy().where((e=>!e.hasBlight&&!e.has(Xn.Vitality))).count,S+=t.copy().where((e=>e.hasBlight&&!e.has(Xn.Vitality))).count}const O=n===lg.BlightedIsland?E:0,k=n===lg.HealthyIsland?E:0,C=n===lg.BlightedIsland?S:0,D=n===lg.HealthyIsland?S:0,B=cg(c.map((e=>e.lands.length))),L=cg(c.map((e=>this.spiritCaresAboutSacredSite(e)?e.numberOfSacredSites:1))),F=cg(c.map((a=>e.inLandsWhere((e=>e.hasPresenceOf(a)||e.hasAdjacentPresenceOf([a]))).count))),R=e.effectsOfType(Pn.EnergyDebt).length,M=e.inLandsWhere((e=>e.hasDahan&&e.hasInvaders)).count,N=e.inLandsWhere((e=>e.numberOfDahan>=2&&e.hasInvaders)).count,W=e.inLandsWhere((e=>e.numberOfDahan>=2)).count;let $=0,G=0,U=0,H=0;e.spirits.forEach((e=>{const a=e.numberOfPiecesInLands(Xn.Dahan);a>=1&&($+=1),a>=2&&(G+=1),a>=3&&(U+=1),a>=4&&(H+=1)}));let q=0,j=0,_=0;e.boards.forEach((e=>{e.numberOf(Xn.Dahan)<6&&(_+=1),e.numberOf(Xn.Dahan)<5&&(q+=1),e.numberOf(Xn.Dahan)<4&&(j+=1)}));const V=cg(c.map((a=>this.spiritCaresAboutSacredSite(a)?e.inLandsWhere((e=>e.hasSacredSiteOf(a)||e.hasAdjacentLandWhere((e=>e.hasSacredSiteOf(a))))).count:5))),J=e.scenario===Nd.RitualsOfTheDestroyingFlame?e.inLandsWithOrAdjacentTo(Xn.FlameMarker).count:0,z=e.scenario===Nd.WardTheShores?e.inCoastalLands().numberOf((e=>e.has(Xn.WardingPattern))):0,Y=e.scenario===Nd.DespicableTheft?e.inCoastalLands().sum((e=>e.numberOf(Xn.Thief))):0,K=e.scenario===Nd.ElementalInvocation?e.inCornersWhere((e=>void 0!==e.element)).count:0,Q=_o(c,(e=>zo(e.trackStatus,(e=>e!==vg.Covered)))),X=_o(c,(e=>e.powersWhere((e=>e.isA(En.Major))).count)),Z=_o(c,(e=>e.powersWhere((e=>e.isA(En.Minor))).count)),ee=_o(c,(e=>e.powersWhere((e=>e.isA(En.Unique))).count)),ae=_o(c,(e=>Math.abs(e.cardPlays*e.averageEnergyCost-e.trackEnergy))),te=_o(c,(e=>e.powersWhere((e=>e.isInDiscard)).count)),ne=_o(c,(e=>cg(e.powers.map((e=>e.costToPlay))))),re=_o(c,(e=>e.energy)),ie=n===lg.HealthyIsland?0:1,se=a,oe=Math.min(ie?se:3*l,3*l),de=cg(s)*o-r,le=1===u?i.length*l:0,ce=2===u?i.length*l:0,he=3===u?i.length*l:0,ue=g.length*l,[ge,fe,ye,pe,we,me,ve,xe,be,Te,Ae,Ie,Pe,Se,Ee]=[Ln.Badlands,Ln.Beasts,Ln.Blight,Ln.City,Ln.Dahan,Ln.Deeps,Ln.Disease,Ln.Explorer,Ln.Omen,Ln.Quake,Ln.Thief,Ln.Town,Ln.Vitality,Ln.WardingPattern,Ln.Wilds].map((e=>d[e]||0)),Oe=e.forPieces().sum((e=>e.strife?e.baseHealth:0)),ke=e.inOceans().sum((e=>e.piecesWhere((e=>e.isOneOf(Xn.BadlandsBeastsDiseaseOrWilds,Xn.Deeps,Xn.Quake))).count)),Ce=e.inLandsWhere((e=>e.hasInvaders&&e.has(Xn.Disease))).count,De=e.inLandsWhere((e=>e.hasInvaders&&e.has(Xn.Badlands))).sum((e=>e.numberOf(Xn.Badlands))),Be=e.inLandsWhere((e=>e.has(Xn.Quake)&&e.hasTownsOrCities)).sum((e=>e.numberOf(Xn.Quake))),Le=e.inLandsWhere((e=>e.has(Xn.Explorer)&&e.has(Xn.Beasts))).count,Fe=e.inLandsWhere((e=>e.isFlooded)).count,Re=1===u?xe:0,Me=u>1?xe:0,Ne=u<3?Ie:0,We=3===u?Ie:0,$e=u<3?P:0,Ge=3===u?P:0,Ue=e.inLandsWhere((e=>!e.hasTownsOrCities)).count,He=e.inLandsWhere((e=>e.hasTownsOrCities)).count,qe=e.inLandsWhere((e=>e.hasCity)).count,je=e.inLandsWhere((e=>e.hasInvaders)).count,_e=cg(e.pieces.map((e=>e.damage)));return{absorbedPresence:m,badlandsWithInvaders:De,bargainEffects:R,beneficialPiecesInOcean:ke,blightLeft:se,blightLeftImportant:oe,boardsWithLessThanFiveDahan:q,boardsWithLessThanFourDahan:j,boardsWithLessThanSixDahan:_,cityBuildingLands:I,coastalLandsWithThieves:Y,coastalLandsWithWarding:z,damage:_e,destroyedSerpentPresence:v,discardedCards:te,earnedFearCardsAtTL1:le,earnedFearCardsAtTL2:ce,earnedFearCardsAtTL3:he,elementsInCorners:K,emptyLands:Ue,energy:re,energyMismatch:ae,explorersLeftAtTL1:Re,explorersLeftBeyondTL1:Me,fearLeft:de,fearPool:o,floodedLands:Fe,highImmigrationLands:T,islandIsBlighted:ie,landsAdjacentToFlameMarker:J,landsAdjacentToPresence:F,landsAdjacentToSacredSite:V,landsWithBuildings:He,landsWithCities:qe,landsWithConvertableDahan:A,landsWithDahanAndInvader:M,landsWithExplorersAndBeasts:Le,landsWithInvaders:je,landsWithInvadersAndDisease:Ce,landsWithPresence:B,landsWithSacredSite:L,landsWithTwoDahan:W,landsWithTwoDahanAndInvader:N,majorPowerCards:X,minPresenceOnIsland:f,minPresenceOnIslandDuringDownwardSpiral:p,minorPowerCards:Z,numberOfBadLands:ge,numberOfBeasts:fe,numberOfBlight:ye,numberOfCardsInExploreDeck:ue,numberOfCities:pe,numberOfDahan:we,numberOfDeeps:me,numberOfDisease:ve,numberOfOmen:be,numberOfQuake:Te,numberOfThieves:Ae,numberOfVitality:Pe,numberOfWardingPattern:Se,numberOfWilds:Ee,preparedElements:b,presenceOnIsland:y,quakesWithBuildings:Be,ravagingLandsNoBlightBlighted:O,ravagingLandsNoBlightHealthy:k,ravagingLandsWithBlightBlighted:C,ravagingLandsWithBlightHealthy:D,spiritsWithAtLeast1Dahan:$,spiritsWithAtLeast2Dahan:G,spiritsWithAtLeast3Dahan:U,spiritsWithAtLeast4Dahan:H,stage:h,strifeHealth:Oe,sumEnergyCostOfCards:ne,terrorLevel:u,townBuildingLandsAtTL3:Ge,townBuildingLandsBeforeTL3:$e,townsLeftAtTL3:We,townsLeftBeforeTL3:Ne,uncoveredPresence:Q,uniquePowerCards:ee}}estimateValue(e,a=!1,t){const n=bg.extractFeatures(e),r=t||bg.weights;let i=0;for(const[e,t]of Object.entries(n))a&&this.row(e,r[e]??0,t),i+=(r[e]??0)*t;return i/=e.spiritCount,Promise.resolve(i)}async estimateValueWithReward(e,a=!1,t){let n=await this.estimateValue(e,a,t);return n+=1e3*this.reward(e),Promise.resolve(n)}reward(e){const{winReason:a,lostReason:t}=e;return void 0!==a?1:void 0!==t?-1:0}static spiritCaresAboutSacredSite(e){return void 0!==e.powers.find((e=>e.data.sourceFilter?.includes(dr.SacredSite)||e.data.sourceFilter?.includes(dr.SacredSiteAndDahan)))}row(e,a,t){const n=this.lastValue[e]??null,r=a*t;console.log(`${xg(e,34)} | ${xg(""+Math.round(10*a)/10,5)} | ${xg(""+Math.round(10*t)/10,5)} | ${xg(`${r.toFixed(2)}`,6)} | ${null!==n?xg(`${(r-n).toFixed(2)}`,6):""}`),this.lastValue[e]=r}}var Tg=function(e,a,t,n){var r,i=arguments.length,s=i<3?a:null===n?n=Object.getOwnPropertyDescriptor(a,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,a,t,n);else for(var o=e.length-1;o>=0;o--)(r=e[o])&&(s=(i<3?r(s):i>3?r(a,t,s):r(a,t))||s);return i>3&&s&&Object.defineProperty(a,t,s),s};class Ag{$;cardMap={};deck;stacked;unused;constructor(e,a){ed.makeObservable(this),this.$=e,this.unused=a?a.slice():[],this.deck=this.unused.map((()=>[])),this.stacked=[]}get cardAt(){return e=>{if(e>=this.deck.length)return null;if(1===this.deck[e].length){const a=this.deck[e][0];if("number"!=typeof a)return a}return null}}get cards(){return this.deck.map(((e,a)=>this.cardAt(a)))}get count(){return this.deck.length}get hasRevealed(){return e=>!this.includes(e)||this.deck.some((a=>1===a.length&&a[0]===e||a.some((a=>a===e))&&a.some((e=>"number"==typeof e))))}get includes(){return e=>this.deck.some((a=>a.includes(e)))||this.unused.includes(e)}get isEmpty(){return 0===this.count}get possibleCards(){return this.deck.map(((e,a)=>this.possibleCardsAt(a)))}get possibleCardsAt(){return e=>{if(e>=this.deck.length)return[];if(0===this.deck[e].length)return[...this.unused];{const a=[...this.deck[e]];for(;;){const e=a.findIndex((e=>"number"==typeof e));if(e<0)break;const t=a[e],n=this.cardMap[t];a.splice(e,1,...n&&n.length>0?n:this.unused)}return Dr(a)}}}get unusedCards(){return this.unused}addStackedCard(e){this.stacked.push(e)}async draw(e=0){await this.reveal(e);const[a]=this.deck.splice(e,1);return void 0!==a?a[0]:void 0}async drawFromBottom(){await this.reveal(this.count-1);const e=this.deck.pop();return void 0!==e?e[0]:void 0}insert(e,a=0){this.insertOneOf([e],a)}insertAtBottom(e){this.insertOneOf([e],this.count)}insertAtBottomOneOf(e){this.insertOneOf(e,this.count)}insertOneOf(e,a=0){this.deck.splice(a,0,e)}putBottomCardToTop(){const e=this.removeCard(this.deck.length-1);void 0!==e&&this.insertOneOf(e)}remove(e){if("number"!=typeof e){const a=this.unused.indexOf(e);a>=0&&this.unused.splice(a,1)}Object.values(this.cardMap).forEach((a=>{const t=a.indexOf(e);t>=0&&a.splice(t,1)})),this.deck.forEach((a=>{const t=a.indexOf(e);t>=0&&a.splice(t,1)}))}removeCard(e){if(e<this.deck.length){const[a]=this.deck.splice(e,1);return a}}async reveal(e){if(e<this.deck.length){const a=this.possibleCardsAt(e);this.$.config.controlledFate&&a.length>1&&await this.$.addEffect({[Pn.Now]:async()=>{const e=await this.$.query({name:"Controlled Fate",text:"Select Card",query:An.SelectCard,items:a,actionIds:a.map((e=>`Fate-${e}`))});this.addStackedCard(a[e])}});const t=this.stacked.length>0&&a.includes(this.stacked[0]);let n=await this.getCardFromPossibilities(this.deck[e],t);return await Wa((async()=>{for(this.deck[e].length=0,this.remove(n);"number"==typeof n;){const e=await this.getCardFromPossibilities(this.cardMap[n],t);delete this.cardMap[n],this.remove(e),n=e}this.deck[e].push(n)})),n}return null}async shuffleTopNCards(e,a){if(a){const a=[this.deck[e[0]][0]];for(let t=1;t<e.length;t+=1){let n=0;for(;n in this.cardMap;)n+=1;this.cardMap[n]=this.deck[e[t]],a.push(n)}for(let t=0;t<e.length;t+=1)this.deck[e[t]]=[...a]}else{let a=e.map((e=>this.deck[e]));this.$.config.controlledFate?await this.$.may({name:"Controlled Fate",text:"Reverse order?"},!0)&&(a=a.reverse()):a=this.$.shuffle(a);for(let t=0;t<e.length;t+=1)this.deck.splice(e[t],1,a[t])}}get getCardFromPossibilities(){return(e,a)=>{const t=e.length;if(1===t)return Promise.resolve(e[0]);if(0===t)return a&&this.unused.includes(this.stacked[0])?Promise.resolve(this.stacked.shift()):this.$.drawFrom(this.unused,[]);if(a){if(e.includes(this.stacked[0]))return Promise.resolve(this.stacked.shift());{const a=e.find((e=>"number"==typeof e));if(void 0!==a)return Promise.resolve(a)}}return Promise.resolve(this.$.randomFromArray(e))}}}Tg([De],Ag.prototype,"deck",void 0);const Ig=Object.keys(gn),Pg=(e,a=1)=>{let t="\n";return Object.entries(e).forEach((([n,r],i)=>{for(let e=0;e<a;e+=1)t+="  ";t+=`${n}: ${null!=r?r:"None"}`,i<Object.entries(e).length-1&&(t+="\n")})),t};var Sg=function(e,a,t,n){var r,i=arguments.length,s=i<3?a:null===n?n=Object.getOwnPropertyDescriptor(a,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,a,t,n);else for(var o=e.length-1;o>=0;o--)(r=e[o])&&(s=(i<3?r(s):i>3?r(a,t,s):r(a,t))||s);return i>3&&s&&Object.defineProperty(a,t,s),s};class Eg{blightCardActive;blightCardsInDeck;blightCardsInDiscard=[];blightOnBlightCard=0;blightPool=0;revealedBlightCards=0;slowHealingBlight=0;static allBlightCards=Object.keys(rr).filter((e=>!rr[e].banned));$;currentBlightCardEffect;constructor(e){ed.makeObservable(this),this.$=e;const a=this.$.playingWithCommandBeasts,t=e.config.sets??Ig;this.blightCardsInDeck=new Ag(e,(t.length===Ig.length?Eg.allBlightCards:Eg.allBlightCards.filter((e=>t.includes(rr[e].set)))).filter((e=>!a||!rr[e].requireEvents))),this.blightOnBlightCard=this.startingBlight}get blightStatus(){return this.blightCardData&&!this.blightCardData.stillHealthy?lg.BlightedIsland:lg.HealthyIsland}get startingBlight(){return this.$.config.boards.length*(this.$.config.blightCards?2:5)+1}get willTakeFromBlightPool(){return this.revealedBlightCards>0}async addBlightToBlightCard(e){e>0&&(this.blightOnBlightCard+=e,await this.$.sendEvent({type:Tn.BlightAdded,amount:e}))}addBlightToBlightPool(e){return e>0&&(this.blightPool+=e),Promise.resolve()}addOneToRevealedBlightCards(){this.revealedBlightCards+=1}async addSlowHealingBlight(e){this.slowHealingBlight+=e,await this.$.sendEvent({type:Tn.SlowHealingBlightAdded,amount:e}),await this.$.doEffects(Pn.AfterAddingSlowHealingBlight)}discardBlightCard(e){return this.blightCardsInDeck.remove(e),this.blightCardsInDiscard.push(e),Promise.resolve()}async removeBlightFromBlightCard(e,a){await Jr(e,(async()=>{if(this.blightOnBlightCard>0){if(await this.$.oneEffectActivates(Pn.PreventRemoveBlightFromBlightCard,{location:a}))return;this.blightOnBlightCard-=1,await this.$.sendEvent({type:Tn.BlightRemoved,amount:1})}0===this.blightOnBlightCard&&this.blightStatus===lg.HealthyIsland&&this.$.config.blightCards&&await this.drawNewBlightCard()}))}removeBlightFromBlightPool(e){return e>0&&(this.blightPool=Math.max(this.blightPool-e,0)),Promise.resolve()}removeSlowHealingBlight(e){return this.slowHealingBlight=Math.max(this.slowHealingBlight-e,0),Promise.resolve()}toString(){return Pg({blightCardsInDeck:this.blightCardsInDeck.count,blightCardActive:this.blightCardActive??"None",blightCardsInDiscard:Yo(this.blightCardsInDiscard,(e=>e)),blightOnBlightCard:this.blightOnBlightCard,blightPool:this.blightPool},2)}get blightCardData(){return void 0!==this.blightCardActive?rr[this.blightCardActive]:void 0}async drawNewBlightCard(){if(this.blightCardsInDeck.count>0){this.currentBlightCardEffect&&(this.$.removeEffectsWithName(this.currentBlightCardEffect.name),this.currentBlightCardEffect=void 0);const e=await this.blightCardsInDeck.draw();this.blightCardActive&&this.blightCardsInDiscard.push(this.blightCardActive),this.blightCardActive=e,await this.$.sendEvent({type:Tn.BlightCardFlipped,blightCard:e});const a={...rr[e],card:e};if(this.willTakeFromBlightPool){const e=Math.min(this.blightPool,a.blightPerPlayer*this.$.boardCount);this.blightPool-=e,this.blightOnBlightCard+=e,this.revealedBlightCards-=1,0===this.revealedBlightCards&&(this.blightOnBlightCard+=this.blightPool,this.blightPool=0)}else this.blightOnBlightCard+=a.blightPerPlayer*this.$.boardCount;await this.$.doEffects(Pn.BeforeRevealingBlightCard,{blightCard:e}),await this.$.query({query:An.ClickToContinueCard,items:[e],actionIds:[e]}),await this.$.addEffect({name:a.name,text:`${a.name} drawn.<br><br>When playing solo, if you get a Blight Card which has only 2 Blight per player, you may choose to draw a random replacement.`,card:this.blightCardActive,[Pn.Now]:async()=>{await this.$.chooseBetween({autoPlayOneOption:!0,effects:[{actionId:"Keep",text:`Keep ${a.name}.`,[Pn.Now]:async()=>{this.currentBlightCardEffect=a,await this.$.addEffect(a),await this.$.doEffects(Pn.AfterDrawingBlightCard,{blightCard:e})}},{actionId:"DrawNew",text:"Draw a new blight card.",[Pn.Now]:async()=>{this.blightOnBlightCard=0,await this.drawNewBlightCard()},condition:()=>1===this.$.spiritCount&&!a.stillHealthy&&2===a.blightPerPlayer}]})}}),0===this.blightOnBlightCard&&this.blightStatus===lg.HealthyIsland&&this.$.config.blightCards&&await this.drawNewBlightCard()}}}Sg([De],Eg.prototype,"blightCardActive",void 0),Sg([De],Eg.prototype,"blightCardsInDeck",void 0),Sg([De],Eg.prototype,"blightCardsInDiscard",void 0),Sg([De],Eg.prototype,"blightOnBlightCard",void 0),Sg([De],Eg.prototype,"blightPool",void 0),Sg([De],Eg.prototype,"revealedBlightCards",void 0),Sg([De],Eg.prototype,"slowHealingBlight",void 0);const Og={set:gn.BranchAndClaw,banned:!0,name:"A Strange Madness Among The Beasts",events:[{name:"A Strange Madness Among the Beasts",fullText:["<i>They grow even wilder and more savage. You may:","Let them Rampage unto Death","<i><bullet> Each <beasts> destroys 1 <dahan>.","<i><bullet> Remove 1 <beasts> from each board.","Guide the Madness","<i>Cost: 3 Energy per <beasts> you decide to keep on the Island (min 3 Energy). Aided by <animal>","<i><bullet> Remove any number of <beasts>.","<i><bullet> Each Spirit may Push 1 <beasts> to an adjacent land."],effects:[{textArea:[.168,.521],text:"You may:<br><br>Let them Rampage unto Death <or>Guide the Madness",[Pn.Now]:async({$:e})=>{await e.chooseBetween({effects:[{actionId:"RampageUntoDeath",label:"Let them Rampage unto Death",effects:[{textArea:[.213,.253],text:"Each <beasts> destroys 1 <dahan>.",[Pn.Now]:async()=>{await e.inLandsWithAllOf(e.Beasts,e.Dahan).selectOrder().forEach((async a=>{await e.doMainEventAction((async()=>{e.dontCountAs(Ln.Beasts),await a.destroy({amount:a.numberOf(e.Beasts),pieces:e.Dahan})}),{land:a})}),{noOptions:"No lands with <beasts> and <dahan>."})}},{textArea:[.25,.29],text:"Remove 1 <beasts> from each board.",[Pn.Now]:()=>e.doMainEventActionOnEachBoard((a=>e.countPieceOnlyIfHavingPiece(Ln.Beasts,(()=>a.forPiecesThatIs(e.Beasts))).pickOne((async e=>{await e.remove()}),{highlightBoards:[a],noOptions:`On board ${a.name}: No <beasts> to remove.`})))}]},{actionId:"GuideTheMadness",label:"Guide the Madness",effects:[{textArea:[.36,.473],text:"Cost: 3 Energy per <beasts> you decide to keep on the Island (min 3 Energy).<br>Aided by <animal>",[Pn.Now]:async()=>{await e.doMainEventAction((async()=>{const a=e.forPiecesThatIs(e.Beasts);let t=a.count;for(;!e.playersCanJointlyPayEnergyAidedBy({energy:3*t,element:ir.Animal});)t-=1;for(const e of[!1,!0])await a.pickMultiple({optional:e,amount:a.count-(e?0:t),forPickedItem:async e=>{await e.remove()},effect:{prompt:"Pick <beasts> to remove."}});await e.payEnergyJointlyAidedBy({energy:Math.max(3*a.count,3),element:ir.Animal}),await e.eachSpirit((a=>e.doMainEventAction((()=>e.forPiecesThatIs(e.Beasts).optionallyPickOne((async e=>{await e.push()}),{textArea:[.466,.506],players:[a],text:"Each Spirit may Push 1 <beasts> to an adjacent land.",noOptions:"No lands with <beasts>."})),{spirit:a})))}))}}],condition:()=>e.playersCanJointlyPayEnergyAidedBy({energy:3,element:ir.Animal})}]})}}]},{name:"Savage Frenzy",tokenEvent:!0,effects:[{textArea:[.64,.729],text:"Each <beasts> destroys 1 <explorer> and deals 2 Damage.",[Pn.Now]:({$:e})=>e.inLandsWith(e.Beasts).selectOrder().forEach((a=>e.doTokenEventAction((async()=>{await a.destroy({amount:a.numberOf(e.Beasts),pieces:e.Explorer}),await a.damage(2*a.numberOf(e.Beasts))}),{land:a})),{noOptions:"No lands with <beasts>."})}]},{name:"Seek a Safer Home",dahanEvent:!0,effects:[{textArea:[.799,.924],text:"On Each Board: Push 2 <dahan> from a land with <beasts>/<disease>/<wilds> to a land without any of these tokens.",[Pn.Now]:({$:e})=>e.doDahanEventActionOnEachBoard((async a=>(await e.countPieceOptionally(Ln.Beasts,(()=>a.inLandsWith(e.Dahan).where((a=>a.hasOneOf(e.Beasts,e.Disease,e.Wilds)&&a.hasAdjacentLandWhere((a=>a.dontHaveAnyOf(e.Beasts,e.Disease,e.Wilds))))).filteredByAnyInPriority((a=>a.hasAtLeast(2,e.Dahan)))))).pickOne((async a=>{await a.push({amount:2,pieces:e.Dahan,together:!0,destinationFilter:a=>a.dontHaveAnyOf(e.Beasts,e.Disease,e.Wilds)})}),{highlightBoards:[a],noOptions:`On board ${a.name}: No applicable lands.`})))}]}]},kg={name:"Beasts Attack",tokenEvent:!0,effects:[{textArea:[.649,.729],text:"Each <beasts> deals 2 Damage. Remove any token that destroys <town>/<city>.",[Pn.Now]:({$:e})=>e.inLandsWithAllOf(e.Beasts,e.Invader).selectOrder().forEach((a=>e.doTokenEventAction((async()=>{await a.possiblyDontCountPiecesAs(Ln.Beasts),await Jr(a.numberOf(e.Beasts),(async()=>{(await a.damage(2,e.Invader)).some((a=>wr[a.removement].isDestroyLike&&a.piece.isA(e.TownOrCity)))&&await a.removeOne(e.Beasts)}))}),{land:a})),{noOptions:"No lands with <beasts> and Invaders."})}]},Cg={set:gn.BranchAndClaw,name:"Cultural Assimilation",events:[{name:"Cultural Assimilation",terrorLevels:[1,2],effects:[{textArea:[.103,.217],text:"On Each Board: In a land with exactly 1 <dahan> that has or is adjacent to a <city>, replace that <dahan> with 1 <town>.",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((a=>a.forPiecesThatIs(e.Dahan).where((a=>a.location.hasExactly(1,e.Dahan)&&(a.location.has(e.City)||a.location.hasAdjacentLandWhere((a=>a.has(e.City)&&!a.isIsolated))&&!a.location.isIsolated))).pickOne((async e=>{await e.replace([Ln.Town])}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with exactly 1 <dahan> that has or is adjacent to a <city>.`})))}]},{name:"Reprisal Against the Dahan",terrorLevels:[3],effects:[{textArea:[.373,.48],text:"On Each Board: Choose a land with <dahan> and <town>/<city>. Invaders do 3 Damage to <dahan> there, ignoring Defend Powers.",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((a=>a.inLandsWithAllOf(e.Dahan,e.TownOrCity).pickOne((async a=>{await a.damage(3,e.Dahan)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <dahan> and <town>/<city>.`})))}]},kg,{name:"Reckless Offensive",dahanEvent:!0,effects:[{textArea:[.79,.939],text:"On Each Board: Choose a land with at least 2 <dahan> and at least 2 <town>/<city>. Each <dahan> destroys 1 <town>/<city>. Add 1 <blight>.",[Pn.Now]:({$:e})=>e.doDahanEventActionOnEachBoard((a=>a.inLandsWhere((a=>a.hasAtLeast(2,e.Dahan)&&a.hasAtLeast(2,e.TownOrCity))).pickOne((async a=>{await a.destroy({amount:a.numberOf(e.Dahan),pieces:e.TownOrCity}),await a.addBlight(1)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with at least 2 <dahan> and at least 2 <town>/<city>.`})),{selectOrder:!0})}]}]},Dg={name:"Fierce Mien",dahanEvent:!0,effects:[{textArea:[.821,.905],text:"1 <fear> per land with Invaders where <dahan> outnumber <town>/<city>.",[Pn.Now]:async({$:e})=>{const a=e.inLandsWithAllOf(e.Invader,e.Dahan).where((a=>a.the(e.Dahan).outnumber(e.TownOrCity)));await e.clickToContinue({highlightLocations:a.items,noOptions:`${a.count} land${a.count>1?"s":""} = ${a.count} <fear>.`}),await a.forEach((async a=>{await e.doDahanEventAction((async()=>{await a.fear(1)}),{land:a})}),{noOptions:"No lands with Invaders where <dahan> outnumber <town>/<city>"})}}]},Bg={name:"Grim Toll",tokenEvent:!0,effects:[{textArea:[.636,.754],text:"On Each Board: Choose a land with <disease>. In that land, do 2 Damage to Invaders and 2 Damage to <dahan>.",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((a=>a.inLandsWith(e.Disease).pickOne((async a=>{await a.damage(2),await a.damage(2,e.Dahan)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <disease>.`})),{selectOrder:!0})}]},Lg={set:gn.BranchAndClaw,name:"Distant Exploration",events:[{name:"Distant Exploration",terrorLevels:[1],effects:[{textArea:[.107,.284],text:"During the Explore step, Invaders Explore at +1 distance.<br><br>(So a land 2 away from a <town>/<city>/Ocean will be Explored into.)",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.DistantExploration,[Pn.ExtraExploreDistance]:()=>!0,[Pn.GlobalReminder]:()=>({icon:"<range+1><br>Explore"})})}}]},{name:"Fearful Mobs",terrorLevels:[2,3],effects:[{textArea:[.372,.447],text:"When Ravaging, Invaders do +3 Damage (per land) in lands with 3 or more Invaders.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.FearfulMobs,[Pn.AdjustCollectiveInvaderRavageDamage]:({land:e})=>e.participatingInvaders().count>=3?3:0,[Pn.GlobalReminder]:()=>({icon:"Ravage<br>+3 <damage>"})})}}]},Bg,Dg]},Fg=e=>({name:"New diseases",tokenEvent:!0,effects:[{textArea:e?[.797,.939]:[.615,.76],text:"On half of the boards (rounding up), add 1 <disease> to a land with both <dahan> and Invaders. Do 2 Damage to <dahan> there.",[Pn.Now]:({$:e})=>e.inBoards().pickMultiple({amount:Math.ceil(e.boards.length/2),forPickedItem:a=>e.doTokenEventAction((()=>a.inLandsWithAllOf(e.Dahan,e.Invader).pickOne((async a=>{await a.add(1,e.Disease),await a.damage(2,e.Dahan)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with both <dahan> and Invaders.`})),{board:a}),effect:{prompt:"Pick board to add <disease>."}})}]}),Rg={set:gn.BranchAndClaw,name:"Farmers Seek The Dahan For Aid",events:[{name:"Farmers Seek the Dahan for Aid",fullText:["<i>The Dahan are uncertain whether to teach the Invaders farming techniques more in tune with the Island's life. You recommend they:","Spurn The Invaders","<i><bullet> On Each Board: 2 Damage to <dahan> in a land with <town>/<city> and <dahan>.","<i><bullet> On Each Board: Add 1 <blight> to a land with at least 2 <town>/<city>.","<i><bullet> <town>/<city> have -1 Health (to a minimum of 1) until the end of the turn.","Teach The Invaders","<i><bullet> On Each Board: Add 1 <town> to a land with <dahan>.","<i><bullet> The next normal Ravage becomes a Build. (This could be on a future turn.)"],effects:[{textArea:[.247,.681],text:"You may:<br><br>Spurn The Invaders<or>Teach The Invaders",[Pn.Now]:async({$:e})=>{await e.chooseBetween({effects:[{actionId:"SpurnTheInvaders",label:"Spurn The Invaders",effects:[{textArea:[.284,.359],text:"On Each Board: 2 Damage to <dahan> in a land with <town>/<city> and <dahan>.",[Pn.Now]:()=>e.doMainEventActionOnEachBoard((a=>a.inLandsWithAllOf(e.Dahan,e.TownOrCity).pickOne((async a=>{await a.damage(2,e.Dahan)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <dahan> and <town>/<city>.`})))},{textArea:[.355,.429],text:"On Each Board: Add 1 <blight> to a land with at least 2 <town>/<city>.",[Pn.Now]:()=>e.doMainEventActionOnEachBoard((a=>a.inLandsWhere((a=>a.hasAtLeast(2,e.TownOrCity))).pickOne((async e=>{await e.addBlight(1)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with at least 2 <town>/<city>.`})))},{textArea:[.418,.495],text:"<town>/<city> have -1 Health (to a minimum of 1) until the end of the turn.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.SpurnTheInvaders,[Pn.AdjustHealth]:({piece:a})=>a.isA(e.TownOrCity)?-1:0,[Pn.GlobalReminder]:()=>({icon:"<town>/<city><br>-1 HP"})}),await e.globalHealthCheck()}}]},{actionId:"TeachTheInvaders",label:"Teach The Invaders",effects:[{textArea:[.564,.604],text:"On Each Board: Add 1 <town> to a land with <dahan>.",[Pn.Now]:()=>e.doMainEventActionOnEachBoard((a=>a.inLandsWith(e.Dahan).pickOne((async a=>{await a.add(1,e.Town)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <dahan>.`})))},{textArea:[.6,.674],text:"The next normal Ravage becomes a Build. (This could be on a future turn.)",[Pn.Now]:async()=>{await e.clickToContinue(),await e.addSubEffect({effectId:In.TeachTheInvaders,[Pn.GlobalReminder]:()=>({icon:"Ravage<br>=Build"}),[Pn.SkipNextRavageCard]:async({card:a})=>(await e.clickToContinue({name:"Ravage",text:`The Ravage in ${Uo[a].text} becomes a Build.`,textArea:void 0,card:a}),await e.buildFromCard(a,ah.Ravage,{noIntro:!0}),e.removeThisEffect(),!0)})}}]}]})}}]},Fg(!0)]},Mg=e=>({name:"Prey on the Unwary",tokenEvent:!0,effects:[{textArea:e?[.82,.9]:[.649,.729],text:"Each <beasts> destroys 1 <explorer>.",[Pn.Now]:async({$:e})=>{await e.inLandsWith(e.Beasts).selectOrder().forEach((a=>e.doTokenEventAction((async()=>{await a.destroy({amount:a.numberOf(e.Beasts),pieces:e.Explorer})}),{land:a})),{noOptions:"No lands with <beasts>."})}},{textArea:e?[.86,.9]:[.689,.729],text:"Add 1 <beasts> on a board without one.",[Pn.Now]:({$:e})=>e.doTokenEventAction((async()=>{e.dontCountAs(Ln.Beasts),await e.inBoardsWithout(e.Beasts).pickOne((a=>a.inLands().pickOne((async a=>{await a.add(1,e.Beasts)}),{highlightBoards:[a]})),{noOptions:"No boards without <beasts>."})}))}]}),Ng={set:gn.BranchAndClaw,name:"Heavy Farming",events:[{name:"Heavy Farming",blightStatus:lg.HealthyIsland,effects:[{textArea:[.107,.25],text:"During the next normal Ravage, each <town> does +1 Damage. (If there is no Ravage this Phase, leave this card by the Ravage Space until one happens.)",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffect({effectId:In.HeavyFarming,[Pn.AdjustIndividualInvaderRavageDamage]:({normal:a,piece:t})=>a&&t.isA(e.Town)?1:0,[Pn.AfterResolvingRavageCard]:()=>(e.removeThisEffect(),Promise.resolve()),[Pn.GlobalReminder]:()=>({icon:"<town><br>+1 <damage>"})})}}]},{name:"Overcrowded Cities",blightStatus:lg.BlightedIsland,effects:[{textArea:[.372,.58],text:"On Each Board with <city>: Add 1 <blight> to a land with <city>.<br><br>Spirits may prevent this on any/all boards by destroying 2 <presence> from each board to be protected.",[Pn.Now]:({$:e})=>e.inBoardsWith(e.City).forEach((a=>e.doMainEventAction((()=>e.chooseBetween({effects:[{actionId:"AddBlight",textArea:[.372,.443],text:"Add 1 <blight> to a land with <city>.",[Pn.Now]:()=>a.inLandsWith(e.City).pickOne((async e=>{await e.addBlight(1)}),{prompt:"Pick a land to add 1 <blight>.",highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <city>.`})},{actionId:"PreventByDestroyingPresence",textArea:[.474,.58],text:"Prevent this by destroying 2 <presence>.",[Pn.Now]:()=>a.destroyPresence(2),condition:()=>a.numberOf(e.Presence)>=2}]})),{board:a})),{noOptions:"No boards with <city>."})}]},Mg(!1),{name:"Coming of Age",dahanEvent:!0,effects:[{textArea:[.827,.9],text:"On Each Board: Add 1 <dahan> to a Jungle or Wetland with <dahan>.",[Pn.Now]:({$:e})=>e.doDahanEventActionOnEachBoard((a=>a.inLandsWith(e.Dahan).where((e=>e.isJungleOrWetlands)).pickOne((async a=>{await a.add(1,e.Dahan)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <dahan> in Jungles or Wetlands.`})))}]}]},Wg={set:gn.BranchAndClaw,name:"Interesting Discoveries",events:[{name:"Interesting Discoveries",stages:[1],effects:[{textArea:[.105,.179],text:"On Each Board: Choose a <sacred>. Gather 1 <explorer> into its land, and add 1 additional <explorer>.",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((a=>a.inLandsWhere((e=>e.hasSacredSite)).pickOne((async a=>{await a.gatherOne(e.Explorer),await a.add(1,e.Explorer)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <sacred>.`})),{selectOrder:!0})}]},{name:"Increasing Aggression",stages:[2,3],effects:[{textArea:[.372,.447],text:"Invaders do +1 Damage (per land) when Ravaging.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.IncreasingAggression,[Pn.AdjustCollectiveInvaderRavageDamage]:()=>1,[Pn.GlobalReminder]:()=>({icon:"+1 <damage>"})})}}]},{name:"Wheezlelung Outbreak",tokenEvent:!0,effects:[{textArea:[.634,.74],text:"On Each Board: Add 1 <disease> to the Jungle/Wetland with the most <town>/<city> (minimum 1).",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((a=>a.inLandsWith(e.TownOrCity).where((e=>e.isJungleOrWetlands)).withMost((a=>a.numberOf(e.TownOrCity))).pickOne((async a=>{await a.add(1,e.Disease)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No Jungle/Wetland with <town>/<city>.`})))}]},{name:"Tend the Land",dahanEvent:!0,effects:[{textArea:[.823,.9],text:"On Each Board: Remove 1 <blight> from a land with at least 2 <dahan>.",[Pn.Now]:({$:e})=>e.doDahanEventActionOnEachBoard((a=>a.forPiecesThatIs(e.Blight,(a=>a.hasAtLeast(2,e.Dahan))).pickOne((async e=>{await e.location.removeBlight()}),{prompt:"Pick a <blight> to remove.",highlightBoards:[a]})))}]}]},$g={name:"Canny Defense",dahanEvent:!0,effects:[{textArea:[.824,.9],text:"During Ravage, in every land, Defend 1 per <dahan> in the land.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.CannyDefense,[Pn.GlobalReminder]:()=>({icon:"Defend<br><dahan>"}),[Pn.DefendFromGame]:({land:e})=>e.numberOfParticipatingDahan})}}]},Gg={set:gn.BranchAndClaw,name:"Invaders Surge Inland",events:[{name:"Invaders Surge Inland",blightStatus:lg.HealthyIsland,effects:[{textArea:[.107,.183],text:"On a Coastal land on Each Board: Move 1 <town> one or two lands Inland.",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((a=>a.forPiecesThatIs(e.Town,(e=>e.isCoastal)).pickOne((async e=>{const a=await e.move({destinationFilter:a=>a.distanceToNearestOcean>e.location.distanceToNearestOcean,pickDestinationEffect:{noOptions:"Picked land has no land that is more Inland."}});if(a.length>0){const{destination:t}=a[0];await e.move({quantifier:ur.May,destinationFilter:e=>e.distanceToNearestOcean>t.distanceToNearestOcean,pickDestinationEffect:{noOptions:"Town can not move further. No lands are more Inland."}})}}),{highlightBoards:[a],noOptions:`On board ${a.name}: No Coastal lands with <town>.`})),{selectOrder:!0})}]},{name:"Widening Destruction",blightStatus:lg.BlightedIsland,effects:[{textArea:[.371,.579],text:"On Each Board: Add 1 <blight> to a land with/adjacent to <town>/<city>.<br><br>Spirits may prevent this on any/all boards by destroying 2 <presence> from each board to be protected.",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((a=>e.chooseBetween({effects:[{actionId:"AddBlight",textArea:[.373,.446],text:"Add 1 <blight> to a land with/adjacent to <town>/<city>.",[Pn.Now]:()=>a.inLocationsWithOrAdjacentTo(e.TownOrCity).where((e=>e.isLandForBlight)).pickOne((async e=>{await e.addBlight(1)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with/adjacent to <town>/<city>.`})},{actionId:"PreventByDestroyingPresence",textArea:[.474,.58],text:"Prevent this by destroying 2 <presence>.",[Pn.Now]:()=>a.destroyPresence(2),condition:()=>a.numberOf(e.Presence)>=2}]})),{selectOrder:!0})}]},Bg,$g]},Ug={set:gn.BranchAndClaw,name:"Investigation Of Dangers",events:[{name:"Investigation of Dangers",terrorLevels:[1],effects:[{textArea:[.107,.181],text:"On Each Board: Add 1 <explorer> to a land without Invaders or <dahan>.",[Pn.Now]:({$:e})=>e.onEachBoard((a=>a.inLandsWithout(e.InvaderOrDahan).pickOne((async a=>{await a.add(1,e.Explorer)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands without Invaders or <dahan>.`})))}]},{name:"Destroy the Unnatural!",terrorLevels:[2,3],effects:[{textArea:[.371,.447],text:"Invaders do +3 Damage (per land) when Ravaging in lands with <presence>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.DestroyTheUnnatural,[Pn.AdjustCollectiveInvaderRavageDamage]:({land:a})=>a.hasIgnoringCountAs(e.Presence)?3:0,[Pn.GlobalReminder]:()=>({icon:"+3 <damage><br><presence>"})})}}]},Mg(!1),{name:"Rouse the Spirits",dahanEvent:!0,effects:[{textArea:[.804,.916],text:"Each Spirit with at least 3 <dahan> among all its lands may use a <slow> Power now (instead of later).",[Pn.Now]:({$:e})=>e.spiritsWhich((a=>a.numberOfPiecesInLands(e.Dahan)>=3)).selectOrder().forEach((a=>e.doDahanEventAction((async()=>{await $d.createCollection(e,a.resolvableCardsWithSpeed(sr.Slow)).optionallyPickOne((async e=>{await e.owner.targetAndResolvePower(e,!1)}),{players:[a],noOptions:`${a.nameLink} does not have a <slow> Power in play.`})}))),{noOptions:"No spirits have at least 3 <dahan> among all its lands."})}]}]},Hg={set:gn.BranchAndClaw,name:"Missionaries Arrive",events:[{name:"Missionaries Arrive",fullText:["<i>They teach and spread lessons of a foreign god. You may:","Ignore their contact with the Dahan","<i><bullet> For each board, discard the top Minor Power. If it has <sun>, Push 1 <explorer> from a land with <dahan>. Otherwise, replace 1 <dahan> with 1 <town>.","<i><bullet> After resolving this card, return it to the Event Deck under the top 2 cards.","Curse the tongues of the foreigners","<i>Cost: 4 Energy per player. Aided by <sun>.","<i><bullet> Each Spirit adds 1 <disease> to a land with <city>.","<i><bullet> 2 <fear> per player.","<i><bullet> During the next normal Ravage, <city> do +3 Damage."],effects:[{textArea:[.212,.683],text:"You may:<br><br>Ignore their contact with the Dahan<or>Curse the tongues of the foreigners",[Pn.Now]:async({$:e})=>{await e.chooseBetween({effects:[{actionId:"IgnoreContact",label:"Ignore their contact with the Dahan",effects:[{textArea:[.25,.363],text:"For each board, discard the top Minor Power. If it has <sun>, Push 1 <explorer> from a land with <dahan>. Otherwise, replace 1 <dahan> with 1 <town>.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.doMainEventActionOnEachBoard((async a=>{const t=await e.drawAndDiscardPower(kn.Minor);if(void 0!==t){let n=!1;t===Ui.ElementalBoon&&(n=await e.may({text:"Do you want Elemental Boon to have <sun>?"})),dg[t].elements?.includes(ir.Sun)||n?await e.addSubEffect({textArea:void 0,card:t,text:"If it has <sun>, Push 1 <explorer> from a land with <dahan>.",[Pn.Now]:()=>a.forPiecesThatIs(e.Explorer,(a=>a.has(e.Dahan))).pickOne((async e=>{await e.push()}),{prompt:"Pick a <explorer> to Push.",highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <dahan> and <explorer>.`})}):await e.addSubEffect({textArea:void 0,card:t,text:"Card does not have <sun>:<br><br>Replace 1 <dahan> with 1 <town>.",[Pn.Now]:()=>a.forPiecesThatIs(e.Dahan).pickOne((async e=>{await e.replace([Ln.Town])}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <dahan>.`})})}}))}},{textArea:[.358,.433],text:"After resolving this card, return it to the Event Deck under the top 2 cards.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({[Pn.AfterResolvingEventCard]:({eventCard:a})=>(e.removeThisEffect(),e.removeEventCardFromDiscard(a),e.insertEventCard(a).underCards(2),Promise.resolve())})}}]},{actionId:"CurseTheTongues",label:"Curse the tongues of the foreigners",condition:()=>e.playersCanJointlyPayEnergyAidedBy({energy:4*e.spiritCount,element:ir.Sun}),effects:[{textArea:[.509,.549],text:"Cost: 4 Energy per player. Aided by <sun>.",[Pn.Now]:async()=>{await e.payEnergyJointlyAidedBy({energy:4*e.spiritCount,element:ir.Sun})}},{textArea:[.541,.581],text:"Each Spirit adds 1 <disease> to a land with <city>.",[Pn.Now]:()=>e.eachSpirit((()=>e.doMainEventAction((()=>e.inLandsWith(e.City).pickOne((async a=>{await a.add(1,e.Disease)}),{noOptions:"No lands with <city>."})))))},{textArea:[.577,.617],text:"2 <fear> per player.",[Pn.Now]:async()=>{await e.clickToContinue({noOptions:`${e.spiritCount} player${e.spiritCount>1?"s":""} = ${2*e.spiritCount} <fear>.`}),await e.doMainEventAction((async()=>{await e.fear(2*e.spiritCount)}))}},{textArea:[.611,.682],text:"During the next normal Ravage, <city> do +3 Damage.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.addSubEffect({effectId:In.CurseTheTongues,[Pn.AdjustIndividualInvaderRavageDamage]:({normal:a,piece:t})=>a&&t.isA(e.City)?3:0,[Pn.AfterResolvingRavageCard]:()=>(e.removeThisEffect(),Promise.resolve()),[Pn.GlobalReminder]:()=>({icon:"<city><br>+3 <damage>"})})}}]}]})}}]},Mg(!0)]},qg={name:"Offerings of Pattern and Dance",dahanEvent:!0,effects:[{textArea:[.848,.92],text:"Each Spirit with at least 2 <dahan> among all its lands gains 1 Energy.",[Pn.Now]:async({$:e})=>{const a=e.spiritsWhich((a=>a.numberOfPiecesInLands(e.Dahan)>=2));await e.clickToContinue({noOptions:a.count>0?`${a.count} out of ${e.spiritCount} Spirits ${a.count>1?"have":"has"} at least 2 <dahan> among all its lands:<br>${a.items.map((e=>e.nameLink)).join(" ")}`:"No spirits have at least 2 <dahan> among all its lands."}),await a.forEach((a=>e.doDahanEventAction((async()=>{await a.gainEnergy(1)}))))}}]},jg={set:gn.BranchAndClaw,name:"New Species Spread",events:[{name:"New Species Spread",fullText:["<i>New plants and animals brought by the Invaders Damage the local ecology. You may:","Let the Invasive Species Bloom","<i><bullet> For each board, discard the top Minor Power. If it is <fast>, add 1 <blight> to a land with <town>/<city>.","<i><bullet> After resolving this card, return it to the Event Deck under the top 2 cards.","Transmute the Worst of the Species","<i>Cost: 4 Energy per player. Aided by <moon>.","<i><bullet> 1 <fear> per player. On Each Board: Add 1 <beasts> to a land with <town>/<city>."],effects:[{textArea:[.212,.584],text:"You may:<br><br>Let the Invasive Species Bloom<or>Transmute the Worst of the Species",[Pn.Now]:async({$:e})=>{await e.chooseBetween({effects:[{actionId:"LetThemBloom",label:"Let the Invasive Species Bloom",effects:[{textArea:[.253,.329],text:"For each board, discard the top Minor Power. If it is <fast>, add 1 <blight> to a land with <town>/<city>.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.doMainEventActionOnEachBoard((async a=>{const t=await e.drawAndDiscardPower(kn.Minor);void 0!==t&&(dg[t].speed===sr.Fast?await e.addSubEffect({card:t,textArea:void 0,highlightBoards:[a],text:"If it is <fast>, add 1 <blight> to a land with <town>/<city>.",[Pn.Now]:()=>a.inLandsWith(e.TownOrCity).pickOne((async e=>{await e.addBlight(1)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <town>/<city>.`})}):await e.clickToContinue({card:t,textArea:void 0,highlightBoards:[a],text:"The discarded Power is <slow>:<br><br>Nothing happens."}))}))}},{textArea:[.319,.393],text:"After resolving this card, return it to the Event Deck under the top 2 cards.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({[Pn.AfterResolvingEventCard]:({eventCard:a})=>(e.removeThisEffect(),e.insertEventCard(a).underCards(2),Promise.resolve())})}}]},{actionId:"TransmuteTheWorst",label:"Transmute the Worst of the Species",condition:()=>e.playersCanJointlyPayEnergyAidedBy({energy:4*e.spiritCount,element:ir.Moon}),effects:[{textArea:[.47,.51],text:"Cost: 4 Energy per player. Aided by <moon>.",[Pn.Now]:async()=>{await e.payEnergyJointlyAidedBy({energy:4*e.spiritCount,element:ir.Moon})}},{textArea:[.506,.546],text:"1 <fear> per player.",[Pn.Now]:async()=>{await e.clickToContinue({noOptions:`${e.spiritCount} player${e.spiritCount>1?"s":""} = ${e.spiritCount} <fear>.`}),await e.doMainEventAction((async()=>{await e.fear(e.spiritCount)}))}},{textArea:[.506,.578],text:"On Each Board: Add 1 <beasts> to a land with <town>/<city>.",[Pn.Now]:()=>e.doMainEventActionOnEachBoard((a=>a.inLandsWith(e.TownOrCity).pickOne((async a=>{await a.add(1,e.Beasts)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <town>/<city>.`})))}]}]})}}]},Fg(!1),qg]},_g={name:"Lingering Plagues",tokenEvent:!0,effects:[{textArea:[.641,.71],text:"On Each Board: Add 1 <disease>.",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((a=>a.inLands().pickOne((async a=>{await a.add(1,e.Disease)}))))},{textArea:[.673,.746],text:"Ignore <disease> during Builds this Invader Phase.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.LingeringPlagues,[Pn.GlobalReminder]:()=>({icon:"Ignore<br><disease>"}),[Pn.PreventDiseasePreventingBuilds]:()=>Promise.resolve(!0)})}}]},Vg={set:gn.BranchAndClaw,banned:!0,name:"Outpaced",events:[{name:"Outpaced",fullText:["<i>Humanity has always been faster than you, but the Invaders' terrifying speed catches you off guard. Each Spirit chooses independently for each of their Slow Power Cards played this turn:","Stay Steady and Slow","<i><bullet> Discard the Power Card.","<i><bullet> Gain 1 Energy, plus the card's printed Energy cost.","Work to Match their Pace","<i><bullet> Pay 3 Energy.<or>Destroy 2 <presence>.","<i><bullet> You may choose to resolve the Power Card now. (Instead of during the <slow> Phase.)"],effects:[{textArea:[.279,.581],text:"Each Spirit chooses independently for each of their Slow Power Cards played this turn:<br><br>Stay Steady and Slow<or>Work to Match their Pace",[Pn.Now]:({$:e})=>e.resolvablePowers(sr.Slow,!0).where((e=>e.isA(En.AnyCard))).selectOrder().forEach((a=>e.doMainEventAction((async()=>{const t=[];a.isSlow&&a.mayChangeSpeed?t.push({actionId:"MakeFastToAvoidEffect",label:"Make <fast> to avoid effect.",effects:[{[Pn.Now]:async()=>{await a.changeSpeedIfNeeded(sr.Fast)}}]}):a.isFast&&t.push({actionId:"LeaveItFastToAvoidEffect",label:"Leave it <fast> to avoid effect.",[Pn.Now]:async()=>{}}),(a.isSlow||a.mayChangeSpeed)&&t.push({actionId:"StaySteadyAndSlow",label:"Stay Steady and Slow",effects:[{textArea:[.318,.358],text:"Discard the Power Card.",[Pn.Now]:async()=>{await a.changeSpeedIfNeeded(sr.Slow),await a.discard()}},{textArea:[.354,.394],text:"Gain 1 Energy, plus the card's printed Energy cost.",[Pn.Now]:async()=>{await a.owner.gainEnergy(1+a.costToPlay)}}],condition:()=>a.isSlow||a.mayChangeSpeed},{actionId:"WorkToMatchTheirPace",label:"Work to Match their Pace",effects:[{textArea:[.462,.502],text:"Pay 3 Energy.<or>Destroy 2 <presence>.",[Pn.Now]:async()=>{await a.changeSpeedIfNeeded(sr.Slow),await e.chooseBetween({effects:[{actionId:"PayEnergy",text:"Pay 3 Energy.",condition:()=>a.owner.energy>=3,[Pn.Now]:()=>a.owner.payEnergy(3)},{actionId:"DestroyPresence",text:"Destroy 2 <presence>.",[Pn.Now]:async()=>{await a.owner.destroyPresence(2)}}]})}},{textArea:[.498,.572],text:"You may choose to resolve the Power Card now. (Instead of during the <slow> Phase.)",[Pn.Now]:async()=>{!a.isResolved&&await e.may({prompt:`Resolve ${a.powerLink} now?`})&&await a.owner.targetAndResolvePower(a)}}],condition:()=>a.isSlow||a.mayChangeSpeed}),await e.chooseBetween({effects:t})}))),{noOptions:"No resolvable Slow Power Cards."})}]},_g,{name:"Raids in Force",dahanEvent:!0,effects:[{textArea:[.814,.917],text:"Each Spirit chooses a different land where <dahan> outnumber <town>/<city>. Each <dahan> there does 1 Damage.",[Pn.Now]:({$:e})=>e.inLandsWhere((a=>a.the(e.Dahan).outnumber(e.TownOrCity))).inDifferent((a=>e.eachSpirit((()=>e.doDahanEventAction((()=>a((async a=>{await a.damage(a.numberOf(e.Dahan))}))))))),{noOptions:"No lands where <dahan> outnumber <town>/<city>."})}]}]},Jg={set:gn.BranchAndClaw,name:"Population Rises",events:[{name:"Population Rises",blightStatus:lg.HealthyIsland,effects:[{textArea:[.102,.18],text:"On Each Board: Add 1 <town> to a land with <explorer>/<town>.",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((a=>a.inLandsWith(e.ExplorerOrTown).pickOne((async a=>{await a.add(1,e.Town)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <explorer>/<town>.`})))}]},{name:"Power Fades",blightStatus:lg.BlightedIsland,effects:[{textArea:[.365,.611],text:"Each Spirit chooses independently to: Destroy 2 of their <presence><or>Forget 2 of their Powers<or>Take 1 <blight> from the Blight Card and remove it from the game.",[Pn.Now]:({$:e})=>e.eachSpirit((a=>e.doMainEventAction((async()=>{await e.chooseBetween({effects:[{actionId:"DestroyPresence",textArea:[.401,.441],text:"Destroy 2 of their <presence>",[Pn.Now]:async()=>{await a.destroyPresence(2)},condition:()=>a.numberOfPresenceInLands>=2},{actionId:"ForgetPowers",textArea:[.47,.51],text:"Forget 2 of their Powers",condition:()=>a.hasAtLeastNonBlessed(2,En.AnyCard),[Pn.Now]:async()=>{await a.forgetPowers({amount:2})}},{actionId:"RemoveBlight",textArea:[.538,.608],text:"Take 1 <blight> from the Blight Card and remove it from the game.",[Pn.Now]:async()=>{await e.removeBlightFromBlightCard(1)}}]})}))))}]},{name:"Sandfever Outbreak",tokenEvent:!0,effects:[{textArea:[.636,.745],text:"On Each Board: Add 1 <disease> to the Sands or Mountains with most <town>/<city> (minimum 1).",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((a=>a.inLandsWith(e.TownOrCity).where((e=>e.isMountainsOrSands)).withMost((a=>a.numberOf(e.TownOrCity))).pickOne((async a=>{await a.add(1,e.Disease)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <town>/<city>.`})))}]},qg]},zg={[Io.Jungles]:{plural:"Jungles",text:"<jungles>"},[Io.Mountains]:{plural:"Mountains",text:"<mountains>"},[Io.Sands]:{plural:"Sands",text:"<sands>"},[Io.Wetlands]:{plural:"Wetlands",text:"<wetlands>"}},Yg={set:gn.BranchAndClaw,name:"Promising Farmland",events:[{name:"Promising Farmland",blightStatus:lg.HealthyIsland,effects:[{textArea:[.105,.179],text:"When Exploring, once per board, place 1 <town> instead of 1 <explorer>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue();const a=[];await e.addSubEffectUntilEndOfTurn({effectId:In.PromisingFarmland,[Pn.GlobalReminder]:()=>({icon:"Explore<br>+1 <town>"}),[Pn.ExploreOrderMatters]:()=>!0,[Pn.AlterInvaderActionInLand]:async({land:t,invaderAction:n})=>{const r=t.boards().where((e=>!a.includes(e.boardIndex)));return n===qr.Explore&&r.count>0&&(await t.add(1,e.Town),a.push(r.anyOne.boardIndex),!0)}})}}]},{name:"New Cash Crops take Hold",blightStatus:lg.BlightedIsland,effects:[{textArea:[.373,.582],text:"Invaders immediately Ravage in 1 terrain type not showing under any Invader Action<br><br>Spirits may prevent this on any/all boards by destroying 2 <presence> from each board to be protected.",[Pn.Now]:({$:e})=>e.doMainEventAction((async()=>{const a=await e.pickTerrainsWhere((a=>!e.showingTerrainTypes.includes(a)),{noOptions:"No terrain types are not showing."});if(!a)return;const t=[];await e.onEachBoard((n=>e.chooseBetween({highlightBoards:[n],prompt:`On board ${n.name}, choose between:`,effects:[{actionId:"Ravage",textArea:[.371,.446],text:`Let Invaders Ravage in ${zg[a].text}.`,[Pn.Now]:()=>Promise.resolve()},{actionId:"PreventRavage",textArea:[.475,.579],text:"Prevent ravage by destroying 2 <presence>.",[Pn.Now]:async()=>{t.push(n),await n.destroyPresence(2)},condition:()=>n.numberOf(e.Presence)>=2}]}))),await e.addEffectUntilEndOfAction({[Pn.PreventInvaderActionInLand]:({land:e})=>Promise.resolve(e.boards().hasOneWhere((e=>t.includes(e))))}),await e.doExtraRavageInTerrain(a)}))}]},{name:"Beasts Provoked",tokenEvent:!0,effects:[{textArea:[.648,.727],text:"On Each Board: Add 1 <beasts> to a land without <blight> that has <town>.",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((a=>a.inLandsWithout(e.Blight).where((a=>a.has(e.Town))).pickOne((async a=>{await a.add(1,e.Beasts)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands without <blight> that has <town>.`})))}]},$g]},Kg={name:"Stricken",tokenEvent:!0,effects:[{textArea:[.656,.73],text:"In lands with <disease>/<strife>, Invaders skip Ravage Actions.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.Stricken,[Pn.GlobalReminder]:()=>({icon:"Skip<br>Ravage"}),[Pn.PreventInvaderActionInLand]:({land:a,invaderAction:t})=>Promise.resolve(t===qr.Ravage&&(a.has(e.Disease)||a.participatingInvaders().hasOneWhere((e=>e.strife>0))))})}}]},Qg={set:gn.BranchAndClaw,name:"Putting Down Roots",events:[{name:"Putting Down Roots",blightStatus:lg.HealthyIsland,effects:[{textArea:[.107,.181],text:"On an Inland land on Each Board: Replace 1 <explorer> with 1 <town>.",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((a=>a.forPiecesThatIs(e.Explorer,(e=>e.isInland)).pickOne((async e=>{await e.upgrade()}),{highlightBoards:[a],noOptions:`On board ${a.name}: No Inland lands with <explorer>.`})))}]},{name:"The Center Crumbles",blightStatus:lg.BlightedIsland,effects:[{textArea:[.371,.581],text:"On Each Board with Invaders: Add 1 <blight> to an Inland land.<br><br>Spirits may prevent this on any/all boards by destroying 3 <presence> from each board to be protected.",[Pn.Now]:({$:e})=>e.inBoardsWith(e.Invader).selectOrder().forEach((a=>e.doMainEventAction((()=>e.chooseBetween({highlightBoards:[a],prompt:`On board ${a.name}, choose between:`,effects:[{actionId:"AddBlight",textArea:[.371,.442],text:"Add 1 <blight> to an Inland land.",prompt:"Pick a land to add <blight>.",[Pn.Now]:()=>a.inInlandLands().pickOne((async e=>{await e.addBlight(1)}))},{actionId:"PreventBlight",textArea:[.472,.582],text:"Prevent <blight> by destroying 3 <presence>.",[Pn.Now]:()=>a.destroyPresence(3),condition:()=>a.numberOf(e.Presence)>=3}]})),{board:a})),{autoPlayOneOption:!0})}]},Kg,{name:"Drive Off the Interlopers",dahanEvent:!0,effects:[{textArea:[.824,.901],text:"Each player may Push 1 <explorer>/<town> from a land with <dahan>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doDahanEventAction((()=>e.forPiecesThatIs(e.ExplorerOrTown,(a=>a.has(e.Dahan))).optionallyPickOne((async e=>{await e.push()}),{noOptions:"No lands with <explorer>/<town> and <dahan>."})))))}]}]},Xg={set:gn.BranchAndClaw,name:"Rising Interest In The Island",events:[{name:"Rising Interest In The Island",fullText:["<i>Your Island is unlike any the Invaders have seen. Their leaders begin to take interest in tales of strangeness. You may:","Ignore the Curiosity","<i><bullet> Return the top card of the Invader Deck to the box. (Skip cards specially placed during Setup.)","<i><bullet> On Each Board: Add 1 <town> to a land without one.","Weave Lies in the Minds of their Observers","<i>Cost: 4 Energy per player. Aided by <air>.","<i><bullet> Return the top Fear Card to the box.","<i><bullet> During the next normal Ravage, each <town>/<city> does +1 Damage."],effects:[{textArea:[.227,.567],text:"You may:<br><br>Ignore the Curiosity<or>Weave Lies in the Minds of their Observers",[Pn.Now]:async({$:e})=>{await e.doMainEventAction((async()=>{await e.chooseBetween({effects:[{actionId:"IgnoreTheCuriosity",label:"Ignore the Curiosity",effects:[{textArea:[.265,.337],text:"Return the top card of the Invader Deck to the box. (Skip cards specially placed during Setup.)",[Pn.Now]:async()=>{await e.clickToContinue(),await e.removeTopNonSpecialExploreCard()}},{textArea:[.332,.372],text:"On Each Board: Add 1 <town> to a land without one.",[Pn.Now]:()=>e.doMainEventActionOnEachBoard((a=>a.inLandsWithout(e.Town).pickOne((async a=>{await a.add(1,e.Town)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands without <town>.`})))}]},{actionId:"WeaveLies",label:"Weave Lies in the Minds of their Observers",condition:()=>e.playersCanJointlyPayEnergyAidedBy({energy:4*e.spiritCount,element:ir.Air}),effects:[{textArea:[.423,.463],text:"Cost: 4 Energy per player. Aided by <air>.",[Pn.Now]:async()=>{await e.payEnergyJointlyAidedBy({energy:4*e.spiritCount,element:ir.Air})}},{textArea:[.456,.496],text:"Return the top Fear Card to the box.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.removeTopFearCard()}},{textArea:[.49,.565],text:"During the next normal Ravage, each <town>/<city> does +1 Damage.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.addSubEffect({effectId:In.WeaveLies,[Pn.AdjustIndividualInvaderRavageDamage]:({normal:a,piece:t})=>a&&t.isA(e.TownOrCity)?1:0,[Pn.AfterResolvingRavageCard]:()=>(e.removeThisEffect(),Promise.resolve()),[Pn.GlobalReminder]:()=>({icon:"<town>/<city><br>+1 <damage>"})})}}]}]})}))}}]},{name:"Beasts of the Jungle",tokenEvent:!0,effects:[{textArea:[.63,.739],text:"On Each Board: Add 1 <beasts> to a Jungle without <blight>. 1 <fear> if Invaders are present.",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((a=>a.inLandsWithout(e.Blight).where((e=>e.isJungle)).pickOne((async a=>{await a.add(1,e.Beasts),a.hasInvaders&&await a.fear(1)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No Jungle without <blight>.`})))}]},{name:"Traps and Snares",dahanEvent:!0,effects:[{textArea:[.822,.897],text:"On Each Board: Add 1 <wilds> to a land with <dahan>.",[Pn.Now]:({$:e})=>e.doDahanEventActionOnEachBoard((a=>a.inLandsWith(e.Dahan).pickOne((async a=>{await a.add(1,e.Wilds)}),{highlightBoards:[a],noOptions:`On board ${a.name}: no lands with <dahan>.`})))}]}]},Zg={name:"Beasts Prowl",tokenEvent:!0,effects:[{textArea:[.634,.746],text:"Each <beasts> generates 1 <fear> if Invaders are present, and moves to an adjacent land if not.",[Pn.Now]:async({$:e})=>{const a=new Set;await e.inLandsWith(e.Beasts).selectOrder().forEach((t=>e.doTokenEventAction((async()=>{const n=t.piecesWhere((t=>t.isA(e.Beasts)&&!a.has(t)));t.hasInvaders?await t.fear(n.count):await n.forEach((async a=>{await a.move({quantifier:a.isIgnoringCountAsA(e.Beasts)?ur.Exactly:ur.UpTo})}));for(const e of n.items)a.add(e)}),{land:t})),{noOptions:"No lands with <beasts>."})}}]},ef={set:gn.BranchAndClaw,name:"Sacred Sites Under Threat",events:[{name:"Sacred Sites Under Threat",fullText:["<i>Invaders have begun to find hidden places of natural power. You may:","Let the Island's Strength Repulse Them","<i><bullet> Each <sacred> Pushes 1 <explorer>/<town> to an adjacent land.","<i><bullet> Remove 1 <blight> per player from the Blight Card, returning it to the box.","Guard Them Yourself, for Well or Ill","<i>Cost: 3 Energy per land where you do Damage.<br>Aided by <fire>.","<i>In Each land with <sacred> and Invaders:","<i>Either do 2 Damage.<or>Destroy 1 <presence> from each Spirit."],effects:[{textArea:[.194,.602],text:"You may:<br><br>Let the Island's Strength Repulse Them<or>Guard Them Yourself, for Well or Ill",[Pn.Now]:async({$:e})=>{await e.doMainEventAction((async()=>{await e.chooseBetween({effects:[{actionId:"Repulse",label:"Let the Island's Strength Repulse Them",effects:[{textArea:[.23,.27],text:"Each <sacred> Pushes 1 <explorer>/<town> to an adjacent land.",[Pn.Now]:()=>e.inLandsWhere((e=>e.hasSacredSite)).selectOrder().forEach((a=>e.doMainEventAction((async()=>{await a.push({amount:a.numberOfSacredSites,pieces:e.ExplorerOrTown})}),{land:a})))},{textArea:[.266,.34],text:"Remove 1 <blight> per player from the Blight Card, returning it to the box.",[Pn.Now]:async()=>{await e.clickToContinue({noOptions:`${e.spiritCount} player${e.spiritCount>1?"s":""} = ${e.spiritCount} <blight>.`}),await e.removeBlightFromBlightCard(1)}}]},{actionId:"GuardThem",label:"Guard Them Yourself, for Well or Ill",effects:[{textArea:[.39,.604],text:"In Each land with <sacred> and Invaders:<br><br>Either do 2 Damage.<or>Destroy 1 <presence> from each Spirit.",[Pn.Now]:async()=>{let a=0;await e.inLandsWith(e.Invader).where((e=>e.hasSacredSite)).selectOrder().forEach((t=>e.doMainEventAction((async()=>{await e.chooseBetween({effects:[{actionId:"Damage",textArea:[.496,.536],text:"Do 2 Damage.",[Pn.Now]:async()=>{a+=1,await t.damage(2)},condition:()=>e.playersCanJointlyPayEnergyAidedBy({energy:3*(a+1)*e.spiritCount,element:ir.Fire})},{actionId:"DestroyPresence",textArea:[.561,.601],text:"Destroy 1 <presence> from each Spirit.",[Pn.Now]:async()=>{await e.eachSpirit((async a=>{await t.destroy({pieces:e.Presence,owner:a})}))}}]})}),{land:t}))),await e.addSubEffect({textArea:[.39,.467],text:"Cost: 3 Energy per land where you do Damage.<br>Aided by <fire>.",[Pn.Now]:async()=>{await e.payEnergyJointlyAidedBy({energy:3*a*e.spiritCount,element:ir.Fire})}})}}]}]})}))}}]},Zg,{name:"Spirit Speakers Solve Riddles of Power",dahanEvent:!0,effects:[{textArea:[.845,.913],text:"Each Spirit with at least 4 <dahan> among it lands gains a Minor Power.",[Pn.Now]:({$:e})=>e.spiritsWhich((a=>a.numberOfPiecesInLands(e.Dahan)>=4)).forEach((a=>e.doDahanEventAction((async()=>{await a.gainPowerCard({powerType:kn.Minor})}))),{noOptions:"No spirits has at least 4 <dahan> among it lands."})}]}]},af={set:gn.BranchAndClaw,name:"Search For New Lands",events:[{name:"Search For New Lands",blightStatus:lg.HealthyIsland,effects:[{textArea:[.107,.186],text:"In Each land with at least 2 <explorer>: Push 1 <explorer> to an adjacent land without Invaders.",[Pn.Now]:({$:e})=>e.inLandsWhere((a=>a.hasAtLeast(2,e.Explorer))).selectOrder().forEach((a=>e.doMainEventAction((async()=>{await a.push({amount:1,pieces:e.Explorer,destinationFilter:a=>a.doesntHave(e.Invader)})}),{land:a})),{noOptions:"No lands with at least 2 <explorer>"})}]},{name:"Devastated Shores",blightStatus:lg.BlightedIsland,effects:[{textArea:[.371,.579],text:"On Each Board with Invaders: Add 1 <blight> to a Coastal land.<br><br>Spirits may prevent this on any/all boards by destroying 2 <presence> from each board to be protected.",[Pn.Now]:({$:e})=>e.inBoardsWith(e.Invader).selectOrder().forEach((a=>e.doMainEventAction((async()=>{await e.chooseBetween({prompt:`On board ${a.name}, choose between:`,highlightBoards:[a],effects:[{actionId:"AddBlight",textArea:[.371,.442],text:"Add 1 <blight> to a Coastal land.",prompt:"Pick a land to add <blight>.",[Pn.Now]:()=>a.inCoastalLocations().where((e=>e.isLandForBlight)).pickOne((async e=>{await e.addBlight(1)}))},{actionId:"PreventByDestroyingPresence",textArea:[.473,.584],text:"Prevent <blight> by destroying 2 <presence>.",[Pn.Now]:()=>a.destroyPresence(2),condition:()=>a.numberOf(e.Presence)>=2}]})}),{board:a})))}]},{name:"Distant Hunt",tokenEvent:!0,effects:[{textArea:[.638,.748],text:"On Each Board: Push 1 <beasts> to an adjacent land with no <blight>. It deals 1 Damage there.",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((async a=>(await e.countPieceOptionally(Ln.Beasts,(()=>a.forPiecesThatIs(e.Beasts,(a=>a.hasAdjacentLandWhere((a=>a.doesntHave(e.Blight)))))))).pickOne((async a=>{const t=await a.push({destinationFilter:a=>a.doesntHave(e.Blight)});t.length>0&&await t[0].destination.damage(1)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <beasts> adjacent to a land with no <blight>.`})),{selectOrder:!0})}]},$g]},tf={set:gn.BranchAndClaw,name:"Seeking The Interior",events:[{name:"Seeking The Interior",stages:[1],effects:[{textArea:[.107,.18],text:"In each Coastal land, Push 1 <explorer> one land Inland.",[Pn.Now]:({$:e})=>e.inCoastalLands().forEach((a=>e.doMainEventAction((async()=>{await a.push({amount:1,pieces:e.Explorer,destinationFilter:e=>e.distanceToNearestOcean>a.distanceToNearestOcean})}),{land:a})))}]},{name:"Local Diaspora",stages:[2,3],effects:[{textArea:[.367,.444],text:"In the single land with the most Invaders, Push 1 <explorer>/<town> to each adjacent land.",[Pn.Now]:({$:e})=>e.doMainEventAction((()=>e.inLands().withMost((a=>a.numberOf(e.Invader))).pickOne((async a=>{await a.push({amount:a.adjacentLands.length,pieces:e.ExplorerOrTown,differentLands:!0})}))))}]},Zg,{name:"Forsake the Barren Land",dahanEvent:!0,effects:[{textArea:[.805,.917],text:"On Each Board: Push 2 <dahan> from a land with <blight> to a land without <blight>.",[Pn.Now]:({$:e})=>e.doDahanEventActionOnEachBoard((a=>a.inLandsWithAllOf(e.Dahan,e.Blight).where((a=>a.hasAdjacentLandWhere((a=>a.doesntHave(e.Blight))))).filteredByAnyInPriority((a=>a.hasAtLeast(2,e.Dahan))).pickOne((async a=>{await a.push({amount:2,pieces:e.Dahan,together:!0,destinationFilter:a=>a.doesntHave(e.Blight)})}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <dahan> and <blight> adjacent to a land without <blight>.`})),{selectOrder:!0})}]}]};var nf;!function(e){e.AccumulatedDevastation="AccumulatedDevastation",e.AnOminousDawn="AnOminousDawn",e.AStrangeMadnessAmongTheBeasts="AStrangeMadnessAmongTheBeasts",e.BureaucratsAdjustFunding="BureaucratsAdjustFunding",e.CitiesRise="CitiesRise",e.CivicEngagement="CivicEngagement",e.CoastalTownsMultiply="CoastalTownsMultiply",e.CulturalAssimilation="CulturalAssimilation",e.DahanTradeWithTheInvaders="DahanTradeWithTheInvaders",e.DistantExploration="DistantExploration",e.EagerExplorers="EagerExplorers",e.EtherealConjunction="EtherealConjunction",e.FarOffWarsTouchTheIsland="FarOffWarsTouchTheIsland",e.FarmersSeekTheDahanForAid="FarmersSeekTheDahanForAid",e.FocusedFarming="FocusedFarming",e.Fortuneseekers="Fortuneseekers",e.GradualCorruption="GradualCorruption",e.HardworkingSettlers="HardworkingSettlers",e.HarvestBountyHarvestDust="HarvestBountyHarvestDust",e.HeavyFarming="HeavyFarming",e.InfluxOfSettlers="InfluxOfSettlers",e.InterestingDiscoveries="InterestingDiscoveries",e.InvadersSurgeInland="InvadersSurgeInland",e.InvestedAristocracy="InvestedAristocracy",e.InvestigationOfDangers="InvestigationOfDangers",e.LesserSpiritsImperiled="LesserSpiritsImperiled",e.LifesBalanceTilts="LifesBalanceTilts",e.MapmakersChartTheWild="MapmakersChartTheWild",e.MissionariesArrive="MissionariesArrive",e.NewSpeciesSpread="NewSpeciesSpread",e.NoBraveryWithoutNumbers="NoBraveryWithoutNumbers",e.NuminousCrisis="NuminousCrisis",e.Outpaced="Outpaced",e.Overconfidence="Overconfidence",e.PopulationRises="PopulationRises",e.PromisingFarmland="PromisingFarmland",e.ProvincialSeat="ProvincialSeat",e.PullTogetherInAdversity="PullTogetherInAdversity",e.PuttingDownRoots="PuttingDownRoots",e.RelentlessOptimism="RelentlessOptimism",e.RemnantsOfASpiritsHeart="RemnantsOfASpiritsHeart",e.ResourcefulPopulace="ResourcefulPopulace",e.RisingInterestInTheIsland="RisingInterestInTheIsland",e.SacredSitesUnderThreat="SacredSitesUnderThreat",e.SearchForNewLands="SearchForNewLands",e.SearchForUnclaimedLand="SearchForUnclaimedLand",e.SeekNewFarmland="SeekNewFarmland",e.SeekingTheInterior="SeekingTheInterior",e.SlaveRebellion="SlaveRebellion",e.SmallerPortsSpringUp="SmallerPortsSpringUp",e.SprawlContainedByTheWilds="SprawlContainedByTheWilds",e.StrangeTalesAttractExplorers="StrangeTalesAttractExplorers",e.TemporaryTruce="TemporaryTruce",e.TerrorSpikesUpwards="TerrorSpikesUpwards",e.TheFrontierCalls="TheFrontierCalls",e.TheStrugglesOfGrowth="TheStrugglesOfGrowth",e.ThrivingTrade="ThrivingTrade",e.TightknitCommunities="TightknitCommunities",e.UrbanDevelopment="UrbanDevelopment",e.VisionsOutOfTime="VisionsOutOfTime",e.WarTouchesTheIslandsShores="WarTouchesTheIslandsShores",e.WaveOfReconnaissance="WaveOfReconnaissance",e.WellpreparedExplorers="WellpreparedExplorers",e.WoundedLandsAttractExplorers="WoundedLandsAttractExplorers",e.YearsOfLittleRain="YearsOfLittleRain"}(nf||(nf={}));const rf={set:gn.BranchAndClaw,name:"Slave Rebellion",events:[{name:"Small Uprising",stages:[1,2],effects:[{textArea:[.239,.279],text:"On Each Board: Add <strife> to 1 <town>.",[Pn.Now]:async({$:e})=>{await e.doMainEventActionOnEachBoard((a=>a.forPiecesThatIs(e.Town).pickOne((async e=>{await e.addStrife()}),{highlightBoards:[a],noOptions:`On board ${a.name}: No <town>.`})))}},{textArea:[.239,.383],text:"After finishing the Event Card, draw another one, then return this card to the Event Deck as per Setup.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({[Pn.AfterResolvingEventCard]:async()=>{await e.clickToContinue(),e.removeThisEffect(),e.config.events&&(await e.drawEventCard(),e.config.thematicRebellion?(e.insertEventCard(nf.SlaveRebellion).underCards(0),await e.shuffleTopThreeEventCards(),e.putBottomEventCardToTop(),e.putBottomEventCardToTop()):e.insertEventCard(nf.SlaveRebellion).underCards(3))}})}}]},{name:"Rebellion",stages:[3],effects:[{textArea:[.503,.578],text:"On Each Board: Destroy 1 <town>. Add <strife> to any 2 <town>/<city>.",[Pn.Now]:async({$:e})=>{await e.doMainEventActionOnEachBoard((async a=>{await a.forPiecesThatIs(e.Town).pickOne((async e=>{await e.destroy()}),{prompt:"Pick a <town> to Destroy.",highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <town>.`}),await a.forPiecesThatIs(e.TownOrCity).pickMultiple({amount:2,forPickedItem:async e=>{await e.addStrife()},effect:{prompt:"Pick <town>/<city> to add <strife>.",highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <town>/<city>.`}})}))}},{textArea:[.539,.608],text:"Then, every Invader takes 1 Damage per <strife> it has.",[Pn.Now]:async({$:e})=>{await e.inLandsWithStrife().selectOrder().forEach((a=>e.doMainEventAction((()=>a.piecesWithStrife().forEach((async e=>{await e.damageOnlyThis(e.strife)}))),{land:a})),{noOptions:"No lands with <strife>."})}},{textArea:[.575,.679],text:"After finishing this Event Card, draw another one. This card is discarded.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({[Pn.AfterResolvingEventCard]:async()=>{await e.clickToContinue(),e.removeThisEffect(),e.config.events&&await e.drawEventCard()}})}}]},{name:"Aid the Uprising",dahanEvent:!0,effects:[{textArea:[.809,.914],text:"Invaders with <strife> take 1 Damage per <dahan> present. Add 1 <dahan> per <town>/<city> this destroys.",[Pn.Now]:async({$:e})=>{await e.inLandsWithStrife().where((a=>a.has(e.Dahan))).selectOrder().forEach((async a=>{const t=a.numberOf(e.Dahan);await e.doDahanEventAction((()=>a.piecesWithStrife().forEach((async n=>{const r=await n.damageOnlyThis(t);for(const{piece:t,removement:n}of r)t.isA(e.TownOrCity)&&wr[n].isDestroyLike&&await a.add(1,e.Dahan)}))),{land:a})}),{noOptions:"No lands with <strife> and <dahan>."})}}]}]},sf={set:gn.BranchAndClaw,name:"Strange Tales Attract Explorers",events:[{name:"Strange Tales Attract Explorers",stages:[1],effects:[{textArea:[.107,.147],text:"Now: 1 <fear> per Spirit that has at least 1 <sacred>.",[Pn.Now]:({$:e})=>e.doMainEventAction((async()=>{const a=e.spiritsWhich((e=>e.numberOfSacredSites>0)).count;await e.clickToContinue({noOptions:`${a} Spirit${a>1?"s":""} with <sacred> = ${a} <fear>.`}),await e.fear(a)}))},{textArea:[.14,.216],text:"After advancing Invaders Cards: Add 1 <explorer> to each land with <sacred>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.StrangeTalesAttractExplorers,[Pn.AfterAdvancingCards]:()=>e.inLandsWhere((e=>e.hasSacredSite)).forEach((a=>e.doMainEventAction((async()=>{await a.add(1,e.Explorer)}),{land:a}))),[Pn.GlobalReminder]:()=>({icon:"+1 <explorer><br><sacred>"})})}}]},{name:"Fortification",stages:[2,3],effects:[{textArea:[.373,.518],text:"After advancing Invader Cards: Invaders Build in one terrain not shown under any Invader Action. (If there's no such terrain, nothing happens.)",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.Fortification,[Pn.AfterAdvancingCards]:async()=>{const a=await e.pickTerrainsWhere((a=>!e.showingTerrainTypes.includes(a)),{noOptions:"No terrain types are not showing."});a&&await e.doExtraBuildInTerrain(a)},[Pn.GlobalReminder]:()=>({icon:"Extra<br>Build"})})}}]},kg,{name:"Coming of Age",dahanEvent:!0,effects:[{textArea:[.824,.904],text:"On Each Board: Add 1 <dahan> to a Mountain or Sands with <dahan>.",[Pn.Now]:({$:e})=>e.doDahanEventActionOnEachBoard((a=>a.inLandsWith(e.Dahan).where((e=>e.isMountainsOrSands)).pickOne((async a=>{await a.add(1,e.Dahan)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No Mountain or Sands with <dahan>.`})))}]}]},of={name:"Blight Spreads",blightStatus:lg.BlightedIsland,effects:[{textArea:[.371,.585],text:"On Each Board: Add 1 <blight> to a land adjacent to a land with <blight>.<br><br>Spirits may prevent this on any/all boards by destroying 2 <presence> from each board to be protected.",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((a=>e.chooseBetween({highlightBoards:[a],prompt:`On board ${a.name}: choose between:`,effects:[{actionId:"AddBlight",textArea:[.371,.446],text:"Add 1 <blight> to a land adjacent to a land with <blight>",[Pn.Now]:()=>a.inLocationsWhere((a=>a.isLandForBlight&&a.hasAdjacentLocationWhere((a=>a.isLandForBlight&&a.has(e.Blight))))).pickOne((async e=>{await e.addBlight(1)}),{prompt:"Pick land to add <blight>.",highlightBoards:[a],noOptions:`On board ${a.name}: No lands adjacent to a land with <blight>.`})},{actionId:"PreventByDestroyingPresence",textArea:[.472,.585],text:"Prevent this by destroying 2 <presence>.",[Pn.Now]:()=>a.destroyPresence(2),condition:()=>a.numberOf(e.Presence)>=2}]})),{selectOrder:!0})}]},df={set:gn.BranchAndClaw,name:"Tight-Knit Communities",events:[{name:"Tight-Knit Communities",blightStatus:lg.HealthyIsland,effects:[{textArea:[.107,.181],text:"For the rest of the turn, <town>/<city> have +1 Health.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.TightknitCommunities,[Pn.AdjustHealth]:({piece:a})=>a.isA(e.TownOrCity)?1:0,[Pn.GlobalReminder]:()=>({icon:"<town>/<city><br>+1 HP"})})}}]},of,Mg(!1),{name:"Coming of Age",dahanEvent:!0,effects:[{textArea:[.821,.903],text:"On Each Board: Add 1 <dahan> to a Coastal land with <dahan>.",[Pn.Now]:({$:e})=>e.doDahanEventActionOnEachBoard((a=>a.inCoastalLands().where((a=>a.has(e.Dahan))).pickOne((async a=>{await a.add(1,e.Dahan)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No Coastal lands with <dahan>.`})))}]}]},lf={set:gn.BranchAndClaw,name:"Urban Development",events:[{name:"Urban Development",blightStatus:lg.HealthyIsland,effects:[{textArea:[.107,.25],text:"During the next normal Ravage, each <city> does +2 Damage. (If there is no Ravage this Phase, leave this card by the Ravage Space until one happens.)",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffect({effectId:In.UrbanDevelopment,[Pn.AdjustIndividualInvaderRavageDamage]:({normal:a,piece:t})=>a&&t.isA(e.City)?2:0,[Pn.AfterResolvingRavageCard]:()=>(e.removeThisEffect(),Promise.resolve()),[Pn.GlobalReminder]:()=>({icon:"<city><br>+2 <damage>"})})}}]},{name:"Festering Pits of Blight",blightStatus:lg.BlightedIsland,effects:[{textArea:[.371,.447],text:"On Each Board with Invaders: Add 1 <blight> to a land with at least 2 <blight>, but do not cascade.",[Pn.Now]:({$:e})=>e.inBoardsWith(e.Invader).selectOrder().forEach((a=>e.doMainEventAction((()=>a.inLocationsWhere((a=>a.isLandForBlight&&a.hasAtLeast(2,e.Blight))).pickOne((async e=>{await e.addBlight(1,{mayCascade:!1})}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with at least 2 <blight>.`})),{board:a})))}]},_g,Dg]},cf={set:gn.BranchAndClaw,banned:!0,name:"War Touches The Islands Shores",events:[{name:"War Touches The Islands Shores",fullText:["<i>Invaders from a different faraway land assault the ones here, torching farms and bombarding Cities. You may:","Allow the Attacks","<i><bullet> For each board, discard the top Major Power. Deal its Energy in Damage to Invaders and the land in the Coastal land with the most <town>/<city> (minimum 1). Defend reduces the Damage to both Invaders and the Land.","Help Repel the Newcomers","<i>Cost: 1 Energy per player.","<i><bullet> Add a Fear Card to the top of the Fear Deck."],effects:[{textArea:[.245,.607],text:"You may:<br><br>Allow the Attacks<or>Help Repel the Newcomers",[Pn.Now]:async({$:e})=>{await e.chooseBetween({effects:[{actionId:"AllowTheAttacks",label:"Allow the Attacks",textArea:[.285,.462],text:"For each board, discard the top Major Power. Deal its Energy in Damage to Invaders and the land in the Coastal land with the most <town>/<city> (minimum 1). Defend reduces the Damage to both Invaders and the Land.",[Pn.Now]:()=>e.doMainEventActionOnEachBoard((async a=>{await a.inCoastalLands().where((a=>a.has(e.TownOrCity))).withMost((a=>a.numberOf(e.TownOrCity))).pickOne((async a=>{const t=await e.drawAndDiscardPower(kn.Major);if(void 0!==t){const n=dg[t].energy-a.defense;await e.addSubEffect({card:t,textArea:void 0,text:"Deal its Energy in Damage to Invaders and the land in the Coastal land with the most <town>/<city> (minimum 1). Defend reduces the Damage to both Invaders and the Land.",[Pn.Now]:async()=>{n>0?(await a.damage(n),await a.damageLand(n)):await e.clickToContinue({noOptions:"Defend reduced the Damage to 0."})}})}}),{highlightBoards:[a],noOptions:`On board ${a.name}: no Coastal land with <town>/<city>.`})}),{selectOrder:!0})},{actionId:"RepelTheNewcomers",label:"Help Repel the Newcomers",condition:()=>e.playersCanJointlyPayEnergyAidedBy({energy:e.spiritCount}),effects:[{textArea:[.532,.572],text:"Cost: 1 Energy per player.",[Pn.Now]:async()=>{await e.payEnergyJointlyAidedBy({energy:e.spiritCount})}},{textArea:[.567,.607],text:"Add a Fear Card to the top of the Fear Deck.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.addFearCards(1).toLevel(e.terrorLevel)}}]}]})}}]},{name:"Beasts Find New Homes",tokenEvent:!0,effects:[{textArea:[.627,.743],text:"On Each Board: Push 1 <beasts> to an adjacent land without <blight>. 1 <fear> if Invaders are present there.",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((async a=>(await e.countPieceOptionally(Ln.Beasts,(()=>a.forPiecesThatIs(e.Beasts,(a=>a.hasAdjacentLandWhere((a=>a.doesntHave(e.Blight)))))))).pickOne((async a=>{const t=await a.push({destinationFilter:a=>a.doesntHave(e.Blight)});t.length>0&&t[0].destination.hasInvaders&&await t[0].destination.fear(1)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No <beasts> adjacent to a land without <blight>.`})),{selectOrder:!0})}]},{name:"Reclaim Territory",dahanEvent:!0,effects:[{textArea:[.814,.923],text:"Each player may Push 1 <dahan> to an adjacent land, doing 1 Damage there.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doDahanEventAction((()=>e.forPiecesThatIs(e.Dahan).optionallyPickOne((async e=>{const a=await e.push();a.length>0&&await a[0].destination.damage(1)}),{noOptions:"No <dahan>."})))))}]}]},hf={set:gn.BranchAndClaw,name:"Wave Of Reconnaissance",events:[{name:"Wave Of Reconnaissance",stages:[1],effects:[{textArea:[.108,.179],text:"When Exploring: Add 1 additional <explorer> to each land Explored.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.WaveOfReconnaissance,[Pn.AfterSuccessfulExplore]:async({land:a})=>{await a.add(1,e.Explorer)},[Pn.GlobalReminder]:()=>({icon:"+1 <explorer>"})})}}]},{name:"Urbanization",stages:[2,3],effects:[{textArea:[.371,.446],text:"In each land with at least 2 <town>, replace half the <town> (rounding up) with <city>.",[Pn.Now]:({$:e})=>e.inLandsWhere((a=>a.hasAtLeast(2,e.Town))).selectOrder().forEach((a=>e.doMainEventAction((async()=>{const t=Math.ceil(a.numberOf(e.Town)/2);await a.replaceIndividually({amount:t,pieces:e.Town,withPiece:Ln.City})}),{land:a})),{noOptions:"No lands with at least 2 <town>."})}]},Kg,{name:"Retreat",dahanEvent:!0,effects:[{textArea:[.821,.899],text:"On Each Board: Push 2 <dahan> from a land with <city> to a land without <city>.",[Pn.Now]:({$:e})=>e.doDahanEventActionOnEachBoard((a=>a.forPiecesThatIs(e.Dahan,(a=>a.has(e.City)&&a.hasAdjacentLandWhere((a=>a.doesntHave(e.City))))).filteredByAnyInPriority((a=>a.location.hasAtLeast(2,e.Dahan))).pickOne((async a=>{const t=a.location,n=await a.push({withoutWait:t.numberOf(e.Dahan)>=2,destinationFilter:a=>a.doesntHave(e.City)});n.length>0&&t.has(e.Dahan)&&await t.piecesThatAre(e.Dahan).autoPickOne((async e=>{await e.push({pickDestinationEffect:{autoPlayOneOption:!0},destinationFilter:e=>e===n[0].destination})}))}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <dahan> and <city> adjacent to a land without <city>.`})),{selectOrder:!0})}]}]},uf={set:gn.BranchAndClaw,name:"Well-prepared Explorers",events:[{name:"Well-prepared Explorers",blightStatus:lg.HealthyIsland,effects:[{textArea:[.105,.145],text:"For the rest of this turn, <explorer> have +1 Health.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.WellpreparedExplorers,[Pn.AdjustHealth]:({piece:a})=>a.isIgnoringCountAsA(e.Explorer)?1:0,[Pn.GlobalReminder]:()=>({icon:"<explorer><br>+1 HP"})})}}]},of,Zg,{name:"Coming of Age",dahanEvent:!0,effects:[{textArea:[.828,.904],text:"On Each Board: Add 1 <dahan> to an Inland with <dahan>.",[Pn.Now]:({$:e})=>e.doDahanEventActionOnEachBoard((a=>a.inInlandLands().where((a=>a.has(e.Dahan))).pickOne((async a=>{await a.add(1,e.Dahan)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No Inland lands with <dahan>.`})),{selectOrder:!0})}]}]},gf={set:gn.BranchAndClaw,name:"Years Of Little Rain",events:[{name:"Years Of Little Rain",fullText:["<i>A terrible drought parches the Island. You may:","Let the Plants die and the Land Wither","<i><bullet> For each board, discard the top Minor Power. If it lacks <water>, add 1 <blight> to a Sands.","<i><bullet> <town>, <city>, and <dahan> have -1 Health (minimum 1) until the end of the turn.","Act to Ease the Drought","<i>Cost: 4 Energy per player. Aided by <water>.","<i><bullet> Each Spirit may add 1 <presence> to one of their lands with <dahan>."],effects:[{textArea:[.179,.549],text:"You may:<br><br>Let the Plants die and the Land Wither<or>Act to Ease the Drought",[Pn.Now]:async({$:e})=>{await e.chooseBetween({effects:[{actionId:"LetThePlantsDie",label:"Let the Plants die and the Land Wither",effects:[{textArea:[.219,.299],text:"For each board, discard the top Minor Power. If it lacks <water>, add 1 <blight> to a Sands.",[Pn.Now]:()=>e.doMainEventActionOnEachBoard((async a=>{const t=await e.drawAndDiscardPower(kn.Minor);if(void 0===t)return;let n=!1;t===Ui.ElementalBoon&&(n=await e.may({text:"Do you want Elemental Boon to have <water>?"})),dg[t].elements.includes(ir.Water)||n?await e.clickToContinue({card:t,textArea:void 0,highlightBoards:[a],text:"The discarded Power has <water>:<br><br>Nothing happens."}):await e.addSubEffect({card:t,textArea:void 0,highlightBoards:[a],text:"If it lacks <water>, add 1 <blight> to a Sands.",[Pn.Now]:()=>a.inSands().pickOne((async e=>{await e.addBlight(1)}))})}),{selectOrder:!0})},{textArea:[.294,.365],text:"<town>, <city>, and <dahan> have -1 Health (minimum 1) until the end of the turn.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.YearsOfLittleRain,[Pn.AdjustHealth]:({piece:a})=>a.isOneOf(e.Town,e.City,e.Dahan)?-1:0,[Pn.GlobalReminder]:()=>({icon:"-1 HP"})}),await e.globalHealthCheck()}}]},{actionId:"ActToEase",label:"Act to Ease the Drought",condition:()=>e.playersCanJointlyPayEnergyAidedBy({energy:4*e.spiritCount,element:ir.Water}),effects:[{textArea:[.44,.48],text:"Cost: 4 Energy per player. Aided by <water>.",[Pn.Now]:async()=>{await e.payEnergyJointlyAidedBy({energy:4*e.spiritCount,element:ir.Water})}},{textArea:[.475,.544],text:"Each Spirit may add 1 <presence> to one of their lands with <dahan>.",[Pn.Now]:()=>e.eachSpirit((a=>e.doMainEventAction((async()=>{a.presence().hasOneWhere((a=>a.location.has(e.Dahan)))?await a.addPresence({filter:a=>a.has(e.Dahan)}):await e.clickToContinue({noOptions:`${a.nameLink} has no lands with <dahan>.`})}))))}]}]})}}]},kg,$g]},ff={name:"Coordinated Defense",dahanEvent:!0,effects:[{textArea:[.805,.918],text:"When Invaders Ravage, if the land has both <dahan> and <presence>, Defend 5.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.CoordinatedDefense,[Pn.GlobalReminder]:()=>({icon:"Defend<br><dahan>+<presence>"}),[Pn.DefendFromGame]:({land:a})=>a.has(e.Presence)&&a.numberOfParticipatingDahan>0?5:0})}}]},yf={set:gn.JaggedEarth,name:"Bureaucrats Adjust Funding",events:[{name:"Bureaucrats Adjust Funding",terrorLevels:[1,2],effects:[{textArea:[.104,.177],text:"On Each Board with 9 or more <town>/<city>: Build Cards skip the highest-numbered matching land.",[Pn.Now]:({$:e})=>e.inBoardsWhere((a=>a.numberOf(e.TownOrCity)>=9)).forEach((async a=>{for(const t of e.invaderCardsInVisibleSlot(ah.Build)){const n=a.highestNumberedLandMatching(t,qr.Build);await e.addSubEffectUntilEndOfTurn({effectId:In.BureaucratsAdjustFunding,[Pn.Reminder]:e=>e===n?"Build Cards skip the highest-numbered matching land.":void 0,[Pn.PreventInvaderActionInLand]:async({land:a,invaderAction:r,card:i})=>r===qr.Build&&i===t&&a===n&&(await e.sendEvent({type:Tn.GenericSub,text:`The Build in land ${a.coordinateLink} was prevented by <e>BureaucratsAdjustFunding</e>.`}),!0)})}}),{noOptions:"No boards with 9 or more <town>/<city>."})},{textArea:[.168,.305],text:"On Each Board with 3 or fewer <town>/<city>: Build Cards cause 1 extra Build Action in the highest-numbered matching land. (This can affect a land without Invaders.)",[Pn.Now]:({$:e})=>e.inBoardsWhere((a=>a.numberOf(e.TownOrCity)<=3)).forEach((async a=>{for(const t of e.invaderCardsInVisibleSlot(ah.Build)){const n=a.highestNumberedLandMatching(t,qr.Build);n&&await e.addSubEffectUntilEndOfTurn({effectId:In.BureaucratsAdjustFunding,[Pn.Reminder]:e=>e===n?"Build Cards cause 1 extra Build Action in the highest-numbered matching land.":void 0,[Pn.AfterResolvingBuildCard]:async({card:a,normal:t})=>{t&&(await e.sendEvent({type:Tn.GenericSub,text:`<e>BureaucratsAdjustFunding</e> caused an extra Build in land ${n.coordinateLink}.`}),await n.doNormalBuild(a),e.removeThisEffect())}})}}),{noOptions:"No boards with 3 or fewer <town>/<city>."})}]},{name:"Ransack and Run",terrorLevels:[3],effects:[{textArea:[.393,.5],text:"After the Ravage Step, On Each Board: In the land with the most <city> (min. 1), Ravage, then Remove 1 <city>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.RansackAndRun,[Pn.GlobalReminder]:()=>({icon:"Extra<br>Ravage"}),[Pn.AfterTheNormalRavageStep]:()=>e.doMainEventActionOnEachBoard((a=>a.inLandsWithMostMinimumOne(e.City).pickOne((async a=>{await a.doExtraRavage(),await a.remove({amount:1,pieces:e.City})}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <city>.`})))})}}]},{name:"Terrifying Beasts",tokenEvent:!0,effects:[{textArea:[.64,.732],text:"2 <fear> per board with 2 or more <beasts>.",[Pn.Now]:async({$:e})=>{const a=e.inBoardsWhere((a=>a.numberOf(e.Beasts)>=2));await e.clickToContinue({highlightBoards:a.items,noOptions:`${a.count} board${a.count>1?"s":""} = ${2*a.count} <fear>.`}),await e.doTokenEventAction((async()=>{await e.fear(2*a.count)}))}}]},ff]},pf={name:"Beasts chase off Homesteaders",tokenEvent:!0,effects:[{textArea:[.668,.738],text:"On Each Board: Push up to 2 <explorer> or 1 <town> from a land with <beasts>.",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((a=>a.forPiecesThatIs(e.ExplorerOrTown,(a=>a.has(e.Beasts))).optionallyPickOne((async a=>{const t=await a.push();t.length>0&&t[0].piece.isA(e.Explorer)&&await t[0].source.pushUpTo(1,e.Explorer)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No <explorer>/<town> in a land with <beasts>.`})),{selectOrder:!0})}]},wf={name:"Careful Defense",dahanEvent:!0,effects:[{textArea:[.82,.896],text:"When Invaders Ravage, if the land has <dahan>, Defend 2.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.CarefulDefense,[Pn.GlobalReminder]:()=>({icon:"Defend<br><dahan>"}),[Pn.DefendFromGame]:({land:e})=>e.numberOfParticipatingDahan>0?2:0})}}]},mf={set:gn.JaggedEarth,name:"Cities Rise",events:[{name:"Cities Rise",blightStatus:lg.HealthyIsland,effects:[{textArea:[.104,.223],text:"On Each Board: In the land with the most <town>, Replace 2 <town> with 2 <city>. (If there is only 1 <town>, instead Replace it with 1 <city>.)",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((a=>a.inLandsWithMostMinimumOne(e.Town).pickOne((async a=>{const t=Math.min(a.numberOf(e.Town),2);await a.replaceIndividually({amount:t,pieces:e.Town,withPiece:Ln.City})}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <town>.`})))}]},{name:"Depleted Soil",blightStatus:lg.BlightedIsland,effects:[{textArea:[.372,.451],text:"In lands with <town>/<city>, it only takes 1 Damage to add <blight>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.DepletedSoil,[Pn.AdjustLandHealth]:({land:a})=>a.has(e.TownOrCity)?-1:0,[Pn.GlobalReminder]:()=>({icon:"Lands<br>-1 HP"})})}}]},pf,wf]},vf={set:gn.JaggedEarth,name:"Civic Engagement",events:[{name:"Civic Engagement",blightStatus:lg.HealthyIsland,effects:[{textArea:[.104,.221],text:"On Each Board: Remove 1 <strife>. If you can't Invaders do +1 Damage (per land) when Ravaging in lands with <town>/<city>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.doMainEventActionOnEachBoard((async a=>{const t=a.forPiecesWhere((e=>e.strife>0));t.count>0?await t.pickOne((async e=>{await e.removeStrife()})):await e.addSubEffectUntilEndOfTurn({effectId:In.CivicEngagement,[Pn.GlobalReminder]:()=>({icon:`${a.name}<br>+1 <damage>`,text:`On board ${a.name}: +1 Damage (per land) when Ravaging in lands with <town>/<city>.`}),[Pn.AdjustCollectiveInvaderRavageDamage]:({land:t})=>t.boards().has(a)&&t.participatingInvaders().where((a=>a.isA(e.TownOrCity))).count>0?1:0})}))}}]},{name:"Life's Web Torn Asunder",blightStatus:lg.BlightedIsland,effects:[{textArea:[.373,.452],text:"On Each Board with 6 or more <blight>: Add 1 <blight> to a land adjacent to <blight>.",[Pn.Now]:({$:e})=>e.inBoardsWhere((a=>a.numberOf(e.Blight)>=6)).selectOrder().forEach((a=>e.doMainEventAction((()=>a.inLocationsWhere((a=>a.isLandForBlight&&a.hasAdjacentLocationWithPiece(e.Blight))).pickOne((async e=>{await e.addBlight(1)}))),{board:a})),{noOptions:"No boards with 6 or more <blight>."})}]},{name:"Casualties of Fang and Sting",tokenEvent:!0,effects:[{textArea:[.667,.743],text:"On Each Board: Destroy 1 <explorer>/<town> in a land with <beasts>.",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((a=>a.forPiecesThatIs(e.ExplorerOrTown,(a=>a.has(e.Beasts))).pickOne((async e=>{await e.destroy()}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <explorer>/<town> and <beasts>.`})),{selectOrder:!0})}]},{name:"Keep Far from the Lands of Plague",dahanEvent:!0,effects:[{textArea:[.839,.914],text:"On Each Board: Push 3 <dahan> from lands with <disease> to lands without <disease>.",[Pn.Now]:({$:e})=>e.doDahanEventActionOnEachBoard((a=>a.forPiecesThatIs(e.Dahan,(a=>a.has(e.Disease)&&a.hasAdjacentLandWhere((a=>a.doesntHave(e.Disease))))).pickMultiple({amount:3,effect:{highlightBoards:[a],noOptions:`On board ${a.name}: No such lands.`},forPickedItem:async a=>{await a.push({destinationFilter:a=>a.doesntHave(e.Disease)})}})))}]}]},xf={name:"Explorers Blunder",tokenEvent:!0,effects:[{textArea:[.651,.735],text:"On Each Board: Destroy 2 <explorer> among lands with <beasts>.",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((a=>a.forPiecesThatIs(e.Explorer,(a=>a.has(e.Beasts))).pickMultiple({amount:2,forPickedItem:async e=>{await e.destroy()},effect:{prompt:"Destroy <explorer> among lands with <beasts>.",highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <beasts> and <explorer>.`},repeatSame:!0})),{selectOrder:!0})}]},bf={set:gn.JaggedEarth,name:"Coastal Towns Multiply",events:[{name:"Coastal Towns Multiply",blightStatus:lg.HealthyIsland,effects:[{textArea:[.107,.183],text:"On Each Board: Add 1 <town> to a Coastal land adjacent to a Coastal <town>.",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((a=>a.inCoastalLands().where((a=>!a.isIsolated&&a.hasAdjacentLandWhere((a=>a.isCoastal&&a.has(e.Town)&&!a.isIsolated)))).pickOne((async a=>{await a.add(1,e.Town)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No Coastal lands adjacent to a Coastal <town>.`})),{selectOrder:!0})}]},{name:"Cooperation Among Towns",blightStatus:lg.BlightedIsland,effects:[{textArea:[.375,.453],text:"Invaders do +1 Damage (per land) when Ravaging in lands with <town>/<city> and no <strife>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.CooperationAmongTowns,[Pn.GlobalReminder]:()=>({icon:"<town>/<city><br>+1 <damage>"}),[Pn.AdjustCollectiveInvaderRavageDamage]:({land:a})=>a.participatingInvaders().where((a=>a.isA(e.TownOrCity))).count>0&&!a.hasStrife?1:0})}}]},xf,{name:"Coming of Age",dahanEvent:!0,effects:[{textArea:[.82,.893],text:"On Each Board: Add 1 <dahan> to a land with <dahan> and no <blight>/<disease>.",[Pn.Now]:({$:e})=>e.doDahanEventActionOnEachBoard((a=>a.inLandsWith(e.Dahan).where((a=>a.dontHaveAnyOf(e.Blight,e.Disease))).pickOne((async a=>{await a.add(1,e.Dahan)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <dahan> and no <blight>/<disease>.`})))}]}]},Tf={set:gn.JaggedEarth,name:"Dahan Trade With The Invaders",events:[{name:"Dahan Trade With The Invaders",fullText:["<i>Some seek knowledge, others are interested in tools and trade goods, still others simply curious. All hope to avoid violence, and the Invaders seem amenable - at least for now. You may:","Ignore their Interest","<i><dahan> do not participate in Ravages this turn.","Display Your Wrath at this Betrayal","<i>Cost: 2 Energy per player, aided by <fire>.","<i>Each Spirit with <dahan> in their lands Destroys 1 of them and generates 1 <fear>.","Change and Help them Learn from the Enemy","<i>Cost: 6 Energy per player, aided by <air>.","<i><dahan> do not participate in Ravages this turn.","<i>Each Spirit Forgets a Power Card.","<i>From next turn on, each <dahan> provides Defend 1 in its land. (There is a Reminder Card for this.)"],effects:[{textArea:[.263,.743],text:"You may:<br><br>Ignore Their Interest<or>Display Your Wrath at this Betrayal<or>Change and Help them Learn from the Enemy",[Pn.Now]:async({$:e})=>{await e.chooseBetween({effects:[{actionId:"IgnoreTheirInterest",label:"Ignore Their Interest",textArea:[.309,.349],text:"<dahan> do not participate in Ravages this turn.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.IgnoreTheirInterest,[Pn.GlobalReminder]:()=>({icon:"<dahan><br>DNPIR"}),[Pn.DoesNotParticipateInRavage]:async({location:a})=>{await a.doNotParticipateInRavage({pieces:e.Dahan})}})}},{actionId:"DisplayYourWrath",label:"Display Your Wrath at this Betrayal",textArea:[.436,.508],text:"Each Spirit with <dahan> in their lands Destroys 1 of them and generates 1 <fear>.",condition:()=>e.playersCanJointlyPayEnergyAidedBy({energy:2*e.spiritCount,element:ir.Fire}),[Pn.Now]:async()=>{await e.addSubEffect({effects:[{textArea:[.399,.439],text:"Cost: 2 Energy per player, aided by <fire>.",[Pn.Now]:async()=>{await e.payEnergyJointlyAidedBy({energy:2*e.spiritCount,element:ir.Fire})}},{[Pn.Now]:()=>e.spiritsWhich((a=>a.hasPieceInLands(e.Dahan))).selectOrder().forEach((a=>e.doMainEventAction((async()=>{await a.forPiecesThatIs(e.Dahan).pickOne((async e=>{await e.destroy()}),{prompt:"Pick <dahan> to Destroy.",noOptions:`${a.nameLink} has no lands with <dahan>.`}),await e.fear(1)}))),{noOptions:"No spirits with <dahan> in their lands."})}]})}},{actionId:"ChangeAndHelp",label:"Change and Help them Learn from the Enemy",condition:()=>e.playersCanJointlyPayEnergyAidedBy({energy:6*e.spiritCount,element:ir.Air}),effects:[{textArea:[.561,.601],text:"Cost: 6 Energy per player, aided by <air>.",[Pn.Now]:async()=>{await e.payEnergyJointlyAidedBy({energy:6*e.spiritCount,element:ir.Air})}},{textArea:[.594,.634],text:"<dahan> do not participate in Ravages this turn.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.ChangeAndHelp,[Pn.GlobalReminder]:()=>({icon:"<dahan><br>DNPIR"}),[Pn.DoesNotParticipateInRavage]:async({location:a})=>{await a.doNotParticipateInRavage({pieces:e.Dahan})}})}},{textArea:[.627,.667],text:"Each Spirit Forgets a Power Card.",[Pn.Now]:()=>e.eachSpirit((a=>e.doMainEventAction((async()=>{await a.forgetPowers()}))))},{textArea:[.661,.731],text:"From next turn on, each <dahan> provides Defend 1 in its land.",[Pn.Now]:async()=>{await e.clickToContinue();const a=e.turn+1;await e.addSubEffect({[Pn.GlobalReminder]:()=>({icon:"Defend<br><dahan>",ongoing:!0}),[Pn.DefendFromGame]:({land:t})=>e.turn>=a?t.numberOfParticipatingDahan:0})}}]}]})}}]},{name:"Outbreaks Shift",tokenEvent:!0,effects:[{textArea:[.839,.913],text:"On Each Board: Push 1 <disease> to the adjacent land with the most Invaders (min. 1).",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((a=>a.forPiecesThatIs(e.Disease,(a=>a.hasAdjacentLandWithPiece(e.Invader))).pickOne((async a=>{const t=a.location.inAdjacentLands().maxNumberOf((a=>a.numberOf(e.Invader)));await a.push({destinationFilter:a=>a.numberOf(e.Invader)===t})}),{prompt:"Pick a <disease> to Push."})),{selectOrder:!0})}]}]},Af={set:gn.JaggedEarth,name:"Eager Explorers",events:[{name:"Eager Explorers",terrorLevels:[1],effects:[{textArea:[.106,.217],text:"On Each Board: After the first successful Build Action, add 1 <explorer> to an adjacent land without Invaders.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.onEachBoard((async a=>{await e.addSubEffectUntilEndOfTurn({effectId:In.EagerExplorers,[Pn.GlobalReminder]:()=>({icon:"+1 <explorer>"}),[Pn.AfterSuccessfulBuild]:async({land:t})=>{t.boards().has(a)&&(t.isIsolated||await t.inAdjacentLandsWhere((a=>a.doesntHave(e.Invader)&&!a.isIsolated)).pickOne((async a=>{await a.add(1,e.Explorer)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No adjacent lands without Invaders.`}),e.removeThisEffect())}})}))}}]},{name:"Xenophobia",terrorLevels:[2,3],effects:[{textArea:[.372,.485],text:"When Ravaging in lands with <dahan>, each individual Invader does -1 Damage to the land and +1 Damage to <dahan>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.Xenophobia,[Pn.GlobalReminder]:()=>({icon:"-1/+1 <damage>"}),[Pn.AdjustIndividualInvaderRavageDamage]:({piece:e,towardsLand:a})=>e.isInvader&&e.location.numberOfParticipatingDahan>0?a?-1:1:0})}}]},pf,{name:"At Their Gates Demanding Redress",dahanEvent:!0,effects:[{textArea:[.857,.897],text:"2 <fear> per land with <dahan> and <city>.",[Pn.Now]:async({$:e})=>{const a=e.inLandsWithAllOf(e.Dahan,e.City);await e.clickToContinue({highlightLocations:a.items,noOptions:`${a.count} land${a.count>1?"s":""} = ${2*a.count} <fear>.`}),await a.forEach((a=>e.doDahanEventAction((async()=>{await a.fear(2)}),{land:a})))}}]}]},If={set:gn.JaggedEarth,name:"Fortune-Seekers",events:[{name:"Fortune-Seekers",blightStatus:lg.HealthyIsland,effects:[{textArea:[.106,.218],text:"The next Explore Card matches all lands without <town>/<city> instead of the printed land type. Ignore any <escalation> on it.",[Pn.Now]:async({$:e})=>{await e.clickToContinue();let a=null;await e.addSubEffectUntilEndOfTurn({effectId:In.Fortuneseekers,[Pn.GlobalReminder]:()=>({icon:"Explore<br>Changed"}),[Pn.OverrideMatchesInvaderCard]:({land:a,invaderAction:t})=>t===qr.Explore?!a.has(e.TownOrCity):void 0,[Pn.PreventEscalation]:({card:e})=>null===a?(a=e,Promise.resolve(!0)):Promise.resolve(!1),[Pn.AfterResolvingExploreCard]:()=>(e.removeThisEffect(),Promise.resolve())})}}]},{name:"The land's Bounty Exhausted",blightStatus:lg.BlightedIsland,effects:[{textArea:[.369,.442],text:"In lands without <presence>, it only takes 1 Damage to add <blight>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.TheLandsBountyExhausted,[Pn.AdjustLandHealth]:({land:a})=>a.doesntHave(e.Presence)?-1:0,[Pn.GlobalReminder]:()=>({icon:"Land<br>-1 HP"})})}}]},Bg,{name:"Tell the Old Stories",dahanEvent:!0,effects:[{textArea:[.789,.93],text:"Each Spirit with at least 2 <dahan> among its lands either Reclaims 1 Power Card or re-gains a Unique Power it previously Forgot.",[Pn.Now]:({$:e})=>e.spiritsWhich((a=>a.numberOfPiecesInLands(e.Dahan)>=2)).forEach((a=>e.doDahanEventAction((async()=>{await e.chooseBetween({players:[a],noOptions:`${a.nameLink} has no reclaimable/forgotten cards.`,effects:[{actionId:"Reclaim",text:"Reclaim 1 Power Card.",[Pn.Now]:async()=>{await a.reclaim(1)},condition:()=>a.hasReclaimableCards},{actionId:"Regain",text:"Re-gain a previously Forgotten Unique Power.",condition:()=>a.availableRememberedUniques.length>0,[Pn.Now]:async()=>{await a.gainPowerCard({fromSelection:a.availableRememberedUniques,taken:!0})}}]})}))),{noOptions:"No Spirit has at least 2 <dahan> among its lands."})}]}]},Pf={set:gn.JaggedEarth,name:"Gradual Corruption",events:[{name:"Gradual Corruption",blightStatus:lg.HealthyIsland,effects:[{textArea:[.107,.352],text:"On Each Board: Add 1 <blight> to a land with <town>/<city>.<br><br>Spirits may prevent this on any/all boards py paying X Energy per board to protect where X is the number of cards in the Invader discard. (This may be 0.)",[Pn.Now]:async({$:e})=>{const a=e.invaderCardsInVisibleSlot(ah.Discard).length;await e.doMainEventActionOnEachBoard((t=>e.chooseBetween({prompt:`On board ${t.name}, choose between:`,highlightBoards:[t],effects:[{actionId:"AddBlight",text:"Add 1 <blight> to a land with <town>/<city>.",[Pn.Now]:()=>t.inLandsWith(e.TownOrCity).pickOne((async e=>{await e.addBlight(1)}),{noOptions:"No lands with <town>/<city>."})},{actionId:"PreventByPayingEnergy",text:`Prevent <blight> by jointly paying ${a} Energy.`,[Pn.Now]:async()=>{await e.payEnergyJointlyAidedBy({energy:a})},condition:()=>e.playersCanJointlyPayEnergyAidedBy({energy:a})}]})))}}]},{name:"Ravaged Wilderness",blightStatus:lg.BlightedIsland,effects:[{textArea:[.418,.494],text:"On Each Board: Remove 1 <beasts> from a land with <blight>. Remove 1 <wilds> from a land with <blight>.",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((async a=>{await e.addSubEffect({effects:[{textArea:[.418,.494],text:"Remove 1 <beasts> from a land with <blight>.",[Pn.Now]:()=>e.countPieceOnlyIfHavingPiece(Ln.Beasts,(()=>a.forPiecesThatIs(e.Beasts,(a=>a.has(e.Blight))))).pickOne((async e=>{await e.remove()}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <beasts> and <blight>.`})},{textArea:[.452,.492],text:"Remove 1 <wilds> from a land with <blight>.",[Pn.Now]:()=>a.forPiecesThatIs(e.Wilds,(a=>a.has(e.Blight))).pickOne((async e=>{await e.remove()}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <wilds> and <blight>.`})}]})}))}]},{name:"Fatalities Rise",tokenEvent:!0,effects:[{textArea:[.617,.76],text:"In each land with <disease>, 1 Damage to each Invader and 1 Damage to each <dahan>. Remove 1 <disease> from each land where this Destroys any <town>/<city>.",[Pn.Now]:({$:e})=>e.inLandsWith(e.Disease).selectOrder().forEach((a=>e.doTokenEventAction((async()=>{const t=await a.damageEach(1);await a.damageEach(1,e.Dahan),t.some((({removement:a,piece:t})=>wr[a].isDestroyLike&&t.isA(e.TownOrCity)))&&await a.removeOne(e.Disease)}),{land:a})),{noOptions:"No lands with <disease>."})}]},{name:"Blessings of Bounty and Health",dahanEvent:!0,effects:[{textArea:[.838,.914],text:"Each Spirit may add 1 <dahan> to one of its lands with <dahan>.",[Pn.Now]:({$:e})=>e.eachSpirit((a=>e.doDahanEventAction((()=>a.inLandsWith(e.Dahan).optionallyPickOne((async a=>{await a.add(1,e.Dahan)}),{noOptions:`${a.nameLink} has no lands with <dahan>.`})))))}]}]},Sf={set:gn.JaggedEarth,name:"Hard-Working Settlers",events:[{name:"Hard-Working Settlers",fullText:["<i>The latest round of settlers are regrettably diligent, focused, and curious. You may:","Act Cautiously in the Background","<i><bullet> Push up to 2 <dahan>.","<i><bullet> Add 1 <town> to a land without <town>.","<i><bullet> Immediately Ravage in the land with the most Invaders that matches a Ravage Card.","Create Unnerving Distractions at the cost of piquing their interest.","<i><bullet> Ravage Cards skip up to one matching land on each board. (Players choose which.)","<i><bullet> 1 <fear> per player.","<i><bullet> Remove the bottommost Stage II and Stage III Cards in the Invader Deck from the game."],effects:[{textArea:[.197,.708],text:"You may:<br><br>Act Cautiously in the Background<or>Create Unnerving Distractions",[Pn.Now]:async({$:e})=>{await e.doMainEventAction((async()=>{await e.chooseBetween({effects:[{actionId:"ActCautiously",label:"Act Cautiously in the Background",[Pn.Now]:()=>e.doMainEventActionOnEachBoard((async a=>{await e.addSubEffect({highlightBoards:[a],effects:[{textArea:[.274,.314],text:"Push up to 2 <dahan>.",[Pn.Now]:async()=>{const t=[];await a.forPiecesThatIs(e.Dahan).pickMultiple({amount:2,forPickedItem:async e=>{t.push(e),await e.push()},where:e=>!t.includes(e),optional:!0,repeatSame:!0,effect:{highlightBoards:[a],prompt:"Pick <dahan> to Push.",noOptions:`On board ${a.name}: No lands with <dahan>.`}})}},{textArea:[.308,.348],text:"Add 1 <town> to a land without <town>.",[Pn.Now]:()=>a.inLandsWithout(e.Town).pickOne((async a=>{await a.add(1,e.Town)}),{prompt:"Pick a land to add 1 <town>.",highlightBoards:[a],noOptions:`On board ${a.name}: No lands without <town>.`})},{textArea:[.345,.418],text:"Immediately Ravage in the land with the most Invaders that matches a Ravage Card.",[Pn.Now]:()=>a.inLandsWhere((a=>a.hasInvaders&&a.matchesInvaderCards(e.invaderCardsInVisibleSlot(ah.Ravage),qr.Ravage))).withMost((a=>a.numberOf(e.Invader))).pickOne((async e=>{await e.doExtraRavage()}),{prompt:"Pick a land to Ravage.",highlightBoards:[a],noOptions:`On board ${a.name}: No lands with Invaders match a Ravage Card.`})}]})}),{selectOrder:!0})},{actionId:"CreateUnnervingDistractions",label:"Create Unnerving Distractions",effects:[{textArea:[.523,.594],text:"Ravage Cards skip up to one matching land on each board. (Players choose which.)",[Pn.Now]:async()=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.CreateUnnervingDistractions,[Pn.GlobalReminder]:()=>({icon:"Skip<br>Ravage"}),[Pn.BeforeResolvingInvaderCard]:async({card:a,invaderAction:t})=>{t===qr.Ravage&&await e.doMainEventActionOnEachBoard((t=>t.inLandsWhere((e=>e.matchesInvaderCard(a,qr.Ravage))).optionallyPickOne((async t=>{await e.addEffectUntilEndOfTurn({[Pn.OverrideMatchesInvaderCard]:e=>(e.land!==t||e.card!==a||e.invaderAction!==qr.Ravage)&&void 0})}))))}})}},{textArea:[.589,.629],text:"1 <fear> per player.",[Pn.Now]:async()=>{await e.clickToContinue({noOptions:`${e.spiritCount} player${e.spiritCount>1?"s":""} = ${e.spiritCount} <fear>.`}),await e.doMainEventAction((async()=>{await e.fear(e.spiritCount)}))}},{textArea:[.624,.697],text:"Remove the bottommost Stage II and Stage III Cards in the Invader Deck from the game.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.removeBottomMostInvaderCardOfStage(2),await e.removeBottomMostInvaderCardOfStage(3)}}]}]})}))}}]},{name:"Beasts Prey on the Injured",tokenEvent:!0,effects:[{textArea:[.828,.868],text:"This turn, <beasts> also count as <badlands>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.BeastsPreyOnTheInjured,[Pn.BeastsCountAsBadlands]:()=>!0,[Pn.GlobalReminder]:()=>({icon:"<beasts>=<badlands>"})})}},{textArea:[.863,.933],text:"On Each Board: Destroy a Damaged Invader in a land with <beasts>.",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((async a=>(await e.countPieceOptionally(Ln.Beasts,(()=>a.forPiecesWhere((a=>a.isInvader&&a.damage>0&&a.location.has(e.Beasts)))))).pickOne((async e=>{await e.destroy()}),{highlightBoards:[a],noOptions:`On board ${a.name}: No Damaged Invader in a land with <beasts>.`})))}]}]},Ef={set:gn.JaggedEarth,name:"Harvest Bounty, Harvest Dust",events:[{name:"Harvest Bounty, Harvest Dust",stages:[1,2],effects:[{textArea:[.106,.32],text:"If the island is Healthy, On Each Board: Choose a land with <town>/<city>. Ravage there.<br><br>If the island is Blighted, On Each Board: Push 1 <town> from a land with 2 or more <town>/<city> to a land without <town>/<city>.",[Pn.Now]:async({$:e})=>{e.blightStatus===lg.HealthyIsland?await e.addSubEffect({textArea:[.106,.187],text:"If the island is Healthy, On Each Board: Choose a land with <town>/<city>. Ravage there.",[Pn.Now]:()=>e.doMainEventActionOnEachBoard((a=>a.inLandsWith(e.TownOrCity).pickOne((async e=>{await e.doExtraRavage()}))),{selectOrder:!0})}):await e.addSubEffect({textArea:[.21,.32],text:"If the island is Blighted, On Each Board: Push 1 <town> from a land with 2 or more <town>/<city> to a land without <town>/<city>.",[Pn.Now]:()=>e.doMainEventActionOnEachBoard((a=>a.forPiecesThatIs(e.Town,(a=>a.hasAtLeast(2,e.TownOrCity)&&a.hasAdjacentLandWhere((a=>a.doesntHave(e.TownOrCity))))).pickOne((async a=>{await a.push({destinationFilter:a=>a.doesntHave(e.TownOrCity)})}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with 2 or more <town>/<city> adjacent to a land without <town>/<city>.`})),{selectOrder:!0})})}}]},{name:"Widespread Clearcutting",stages:[3],effects:[{textArea:[.394,.537],text:"On Each Board: Choose a land with <town>/<city>. Add 1 <blight> there, without cascading. Players may Destroy 2 <presence>/<dahan> in that land to prevent adding <blight>.",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((a=>a.inLandsWith(e.TownOrCity).pickOne((async a=>{await e.chooseBetween({effects:[{actionId:"AddBlight",textArea:[.426,.466],text:"Add 1 <blight> there, without cascading.",[Pn.Now]:async()=>{await a.addBlight(1,{mayCascade:!1})}},{actionId:"PreventByDestroyingPresence",textArea:[.429,.541],text:"Prevent adding <blight> by Destroying 2 <presence>/<dahan> in this land.",condition:()=>a.piecesWhere((a=>a.isPresence||a.isA(e.Dahan))).count>=2,[Pn.Now]:async()=>{await a.destroy({amount:2,filter:a=>a.isPresence||a.isA(e.Dahan)})}}]})}))))}]},xf,{name:"Coordinated Strikes",dahanEvent:!0,effects:[{textArea:[.821,.894],text:"In each land with 3 or more <dahan>, 2 Damage and Defend 2.",[Pn.Now]:async({$:e})=>{await e.inLandsWhere((a=>a.hasAtLeast(3,e.Dahan))).selectOrder().forEach((async e=>{await e.damage(2)}),{noOptions:"No lands with 3 or more <dahan>."}),await e.addSubEffectUntilEndOfTurn({effectId:In.CoordinatedStrikes,[Pn.GlobalReminder]:()=>({icon:"3 <dahan><br>Defend"}),[Pn.DefendFromGame]:({land:e})=>e.numberOfParticipatingDahan>=3?2:0})}}]}]},Of=e=>({name:"Prey on the Heedless",tokenEvent:!0,effects:[{textArea:e?[.66,.735]:[.653,.727],text:"In each land with <beasts>, 1 Damage per <beasts>.",[Pn.Now]:({$:e})=>e.inLandsWith(e.Beasts).selectOrder().forEach((a=>e.doTokenEventAction((async()=>{await a.damage(a.numberOf(e.Beasts))}),{land:a})),{noOptions:"No lands with <beasts>."})}]}),kf={set:gn.JaggedEarth,name:"Invested Aristocracy",events:[{name:"Invested Aristocracy",stages:[1,2],effects:[{textArea:[.105,.217],text:"After the Ravage Step, On Each Board: If no <blight> was added to this board, add 1 <town> to the highest-numbered land with no Invaders.",[Pn.Now]:async({$:e})=>{let a=[];await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.InvestedAristocracy,[Pn.GlobalReminder]:()=>({icon:"+1 <town>"}),[Pn.StartOfRavageStep]:()=>(a=e.boards.map((a=>a.numberOf(e.Blight))),Promise.resolve()),[Pn.AfterTheNormalRavageStep]:()=>e.doMainEventActionOnEachBoard((async t=>{t.numberOf(e.Blight)<=a[t.boardIndex]&&await t.inLandsWhere((a=>a===t.highestNumberedLand((a=>a.doesntHave(e.Invader))))).pickOne((async a=>{await a.add(1,e.Town)}),{prompt:"Pick a land to add <town>.",highlightBoards:[t],noOptions:`On board ${t.name}: No lands without Invaders.`})}))})}}]},{name:"Foreign Dignitaries Visit",stages:[3],effects:[{textArea:[.369,.576],text:"If the island is Healthy, Ravages do +2 Damage (total) in the lowest-numbered matching land on each board.<br><br>If the island is Blighted, add 1 Fear Card to the top of the Fear Deck.",[Pn.Now]:async({$:e})=>{e.blightStatus===lg.HealthyIsland?await e.addSubEffect({textArea:[.369,.477],text:"If the island is Healthy, Ravages do +2 Damage (total) in the lowest-numbered matching land on each board.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.ForeignDignitariesVisit,[Pn.GlobalReminder]:()=>({icon:"Ravage<br>+2 <damage>"}),[Pn.BeforeResolvingInvaderCard]:async({card:a,invaderAction:t})=>{t===qr.Ravage&&await e.onEachBoard((async t=>{const n=t.lowestNumberedLandMatching(a,qr.Ravage);await e.addSubEffectUntilEndOfTurn({[Pn.Reminder]:e=>e===n?"Ravages do +2 Damage (total).":void 0,[Pn.AdjustCollectiveInvaderRavageDamage]:e=>e.land===n?2:0,[Pn.AfterResolvingRavageCard]:()=>(e.removeThisEffect(),Promise.resolve())})}))}})}}):await e.addSubEffect({textArea:[.502,.576],text:"If the island is Blighted, add 1 Fear Card to the top of the Fear Deck.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.doMainEventAction((async()=>{await e.addFearCards(1).toLevel(e.terrorLevel)}))}})}}]},Of(!1),{name:"Coming of Age",dahanEvent:!0,effects:[{textArea:[.821,.891],text:"On Each Board: Add 1 <dahan> to an land with 2 or more <dahan>.",[Pn.Now]:({$:e})=>e.doDahanEventActionOnEachBoard((a=>a.inLandsWhere((a=>a.hasAtLeast(2,e.Dahan))).pickOne((async a=>{await a.add(1,e.Dahan)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with 2 or more <dahan>.`})))}]}]},Cf={name:"Return to Old Pillars",dahanEvent:!0,effects:[{textArea:[.803,.915],text:"On Each Board: Gather 1 or 2 <dahan> into a land with <dahan> Setup symbols.",[Pn.Now]:({$:e})=>e.doDahanEventActionOnEachBoard((a=>a.inLandsWhere((a=>a.setupSymbols.includes(Ln.Dahan)&&a.hasAdjacentLandWithPiece(e.Dahan))).pickOne((async a=>{await a.gather({quantifier:ur.UpToMinimumOne,amount:2,pieces:e.Dahan})}),{highlightBoards:[a]})),{selectOrder:!0})}]},Df={set:gn.JaggedEarth,name:"Lesser Spirits Imperiled",events:[{name:"Lesser Spirits Imperiled",fullText:["<i>The Invaders' spread is threatening many of the island's smaller Spirits. You may:","Tend to your own Strength","<i><bullet> Each Spirit gains 1 Energy.","<i><bullet> Discard 1 Minor Power per player from the deck. For each with <plant>, Remove 1 <blight> from the Blight Card, returning it to the box. For each with <animal>, Destroy 1 <dahan> in a land with <blight>.","Forge a Web of Mutual Support","<i>Cost: 4 Energy per player, aided by <plant>.","<i><bullet> Each Spirit Destroys 1 of their <presence>.","<i><bullet> Each Spirit gains 1 permanent Element for the rest of the game. (Choose separately, now.)"],effects:[{textArea:[.196,.6],text:"You may:<br><br>Tend to your own Strength<or>Forge a Web of Mutual Support",[Pn.Now]:async({$:e})=>{await e.chooseBetween({effects:[{actionId:"TendToYourOwnStrength",label:"Tend to your own Strength",effects:[{textArea:[.23,.27],text:"Each Spirit gains 1 Energy.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.eachSpirit((a=>e.doMainEventAction((async()=>{await a.gainEnergy(1)}))))}},{textArea:[.265,.403],text:"Discard 1 Minor Power per player from the deck. For each with <plant>, Remove 1 <blight> from the Blight Card, returning it to the box. For each with <animal>, Destroy 1 <dahan> in a land with <blight>.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.eachSpirit((()=>e.doMainEventAction((async()=>{const a=await e.drawAndDiscardPower(kn.Minor);void 0!==a&&await e.addSubEffect({textArea:[.265,.403],text:"Discard 1 Minor Power per player from the deck. For each with <plant>, Remove 1 <blight> from the Blight Card, returning it to the box. For each with <animal>, Destroy 1 <dahan> in a land with <blight>.",[Pn.Now]:async()=>{const t=dg[a].elements?.includes(ir.Plant),n=dg[a].elements?.includes(ir.Animal);t&&await e.addSubEffect({card:a,textArea:void 0,text:"For each with <plant>, Remove 1 <blight> from the Blight Card, returning it to the box.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.removeBlightFromBlightCard(1)}}),n&&await e.addSubEffect({card:a,textArea:void 0,text:"For each with <animal>, Destroy 1 <dahan> in a land with <blight>.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.inLandsWithAllOf(e.Blight,e.Dahan).pickOne((async a=>{await a.destroyOne(e.Dahan)}),{noOptions:"No lands with <dahan> and <blight>."})}}),t||n||await e.clickToContinue({card:a,textArea:void 0,text:"The discarded Power has neither <plant> nor <animal>."})}})}))))}}]},{actionId:"ForgeAWeb",label:"Forge a Web of Mutual Support",condition:()=>e.playersCanJointlyPayEnergyAidedBy({energy:4*e.spiritCount,element:ir.Plant}),effects:[{textArea:[.457,.497],text:"Cost: 4 Energy per player, aided by <plant>.",[Pn.Now]:async()=>{await e.payEnergyJointlyAidedBy({energy:4*e.spiritCount,element:ir.Plant})}},{textArea:[.49,.53],text:"Each Spirit Destroys 1 of their <presence>.",[Pn.Now]:()=>e.eachSpirit((a=>e.doMainEventAction((async()=>{await a.destroyPresence(1)}))))},{textArea:[.523,.597],text:"Each Spirit gains 1 permanent Element for the rest of the game. (Choose separately, now.)",[Pn.Now]:()=>e.eachSpirit((a=>e.doMainEventAction((async()=>{await a.gainElements({amount:1,forTheRestOfTheGame:!0})}))))}]}]})}}]},{name:"Quit the Farmed Lands",tokenEvent:!0,effects:[{textArea:[.633,.745],text:"On Each Board: Push 1 <beasts> to a land without <town>/<city>. 1 <fear> if <explorer> are present there.",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((async a=>(await e.countPieceOptionally(Ln.Beasts,(()=>a.forPiecesThatIs(e.Beasts,(a=>a.hasAdjacentLandWhere((a=>a.doesntHave(e.TownOrCity)))))))).pickOne((async a=>{const t=await a.push({destinationFilter:a=>a.doesntHave(e.TownOrCity)});t.length>0&&t[0].destination.has(e.Explorer)&&await t[0].destination.fear(1)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <beasts> adjacent to a land without <town>/<city>.`})),{selectOrder:!0})}]},Cf]},Bf={name:"A Thousand Small Struggles",tokenEvent:!0,effects:[{textArea:[.825,.934],text:"On Each Board with 4 or more <town>/<city> and 4 or fewer <dahan>: Add 1 <blight> to a land without <dahan>.",[Pn.Now]:({$:e})=>e.inBoardsWhere((a=>a.numberOf(e.TownOrCity)>=4&&a.numberOf(e.Dahan)<=4)).selectOrder().forEach((a=>e.doTokenEventAction((()=>a.inLandsWithout(e.Dahan).pickOne((async e=>{await e.addBlight(1)}),{highlightBoards:[a]})),{board:a})),{noOptions:"No board with 4 or more <town>/<city> and 4 or fewer <dahan>."})}]},Lf={set:gn.JaggedEarth,name:"Life's Balance Tilts",events:[{name:"Life's Balance Tilts",fullText:["<i>The energies of life shift towards destruction, bringing wasting and disease to the animals of the island. Death is a part of life, but does this go too far? You may:","Let Destruction Have its Day","<i><bullet> On Each Board: Remove 1 <beasts>. Add 1 <disease>.","<i><bullet> For Each Board: Discard the top Minor Power. If it is <fast>, add 1 <blight>.","<i><bullet> Invaders and <dahan> have -1 Health (min. 1) this turn.","Fortify the Resilience of Life","<i>Cost: 4 Energy per player, aided by <animal>.","<i><bullet> On Each Board: Add 1 <beasts>. Remove 1 <disease>.","<i><bullet> For Each Board: Discard the top Minor Power. If it is <slow>, Remove 1 <blight>.","<i><bullet> Invaders and <dahan> have +1 Health this turn."],effects:[{textArea:[.273,.709],text:"You may:<br><br>Let Destruction Have its Day<or>Fortify the Resilience of Life",[Pn.Now]:async({$:e})=>{await e.chooseBetween({effects:[{actionId:"LetDestructionHaveItsDay",label:"Let Destruction Have its Day",effects:[{textArea:[.311,.351],text:"On Each Board: Remove 1 <beasts>. Add 1 <disease>.",[Pn.Now]:()=>e.doMainEventActionOnEachBoard((async a=>{await e.countPieceOnlyIfHavingPiece(Ln.Beasts,(()=>a.forPiecesThatIs(e.Beasts))).pickOne((async e=>{await e.remove()}),{highlightBoards:[a],text:"Remove 1 <beasts>.",noOptions:`On board ${a.name}: No lands with <beasts>.`}),await a.inLands().pickOne((async a=>{await a.add(1,e.Disease)}),{highlightBoards:[a],text:"Add 1 <disease>."})}))},{textArea:[.348,.419],text:"For Each Board: Discard the top Minor Power. If it is <fast>, add 1 <blight>.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.doMainEventActionOnEachBoard((async a=>{const t=await e.drawAndDiscardPower(kn.Minor);void 0!==t&&dg[t].speed===sr.Fast?await e.addSubEffect({card:t,textArea:void 0,text:"If it is <fast>, add 1 <blight>.",[Pn.Now]:()=>a.inLocationsWhere((e=>e.isLandForBlight)).pickOne((async e=>{await e.addBlight(1)}),{highlightBoards:[a]})}):await e.clickToContinue({text:"Discarded Power was <slow>. Nothing happens.",card:t,textArea:void 0,highlightBoards:[a]})}))}},{textArea:[.414,.454],text:"Invaders and <dahan> have -1 Health (min. 1) this turn.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.LetDestructionHaveItsDay,[Pn.GlobalReminder]:()=>({icon:"-1 HP"}),[Pn.AdjustHealth]:({piece:a})=>a.isOneOf(e.Invader,e.Dahan)?-1:0}),await e.globalHealthCheck()}}]},{actionId:"FortifyTheResilienceOfLife",label:"Fortify the Resilience of Life",condition:()=>e.playersCanJointlyPayEnergyAidedBy({energy:4*e.spiritCount,element:ir.Animal}),effects:[{textArea:[.525,.565],text:"Cost: 4 Energy per player, aided by <animal>.",[Pn.Now]:async()=>{await e.payEnergyJointlyAidedBy({energy:4*e.spiritCount,element:ir.Animal})}},{textArea:[.558,.598],text:"On Each Board: Add 1 <beasts>. Remove 1 <disease>.",[Pn.Now]:()=>e.doMainEventActionOnEachBoard((async a=>{await a.inLands().pickOne((async a=>{await a.add(1,e.Beasts)}),{text:"Add 1 <beasts>.",highlightBoards:[a]}),await a.forPiecesThatIs(e.Disease).pickOne((async e=>{await e.remove()}),{text:"Remove 1 <disease>.",highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <disease>.`})}))},{textArea:[.59,.661],text:"For Each Board: Discard the top Minor Power. If it is <slow>, Remove 1 <blight>.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.doMainEventActionOnEachBoard((async a=>{const t=await e.drawAndDiscardPower(kn.Minor);void 0!==t&&dg[t].speed===sr.Slow?await e.addSubEffect({card:t,text:"If it is <slow>, Remove 1 <blight>.",textArea:void 0,[Pn.Now]:()=>a.forPiecesThatIs(e.Blight).pickOne((async e=>{await e.location.removeBlight()}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <blight>.`})}):await e.clickToContinue({text:"Discarded Power was <fast>. Nothing happens.",card:t,textArea:void 0,highlightBoards:[a]})}))}},{textArea:[.66,.7],text:"Invaders and <dahan> have +1 Health this turn.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.FortifyTheResilienceOfLife,[Pn.GlobalReminder]:()=>({icon:"+1 HP"}),[Pn.AdjustHealth]:({piece:a})=>a.isOneOf(e.Invader,e.Dahan)?1:0})}}]}]})}}]},Bf]},Ff={set:gn.JaggedEarth,name:"Mapmakers Chart The Wild",events:[{name:"Mapmakers Chart The Wild",stages:[1,2],effects:[{textArea:[.107,.147],text:"Ignore <wilds> during the Explore Step.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.MapmakersChartTheWild,[Pn.GlobalReminder]:()=>({icon:"Ignore<br><wilds>"}),[Pn.IgnoreWildsDuringExplore]:()=>!0})}},{textArea:[.141,.216],text:"On Each Board without <wilds>: Explore Actions add +1 <explorer> (in each land successfully Explored).",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.inBoardsWhere((a=>0===a.numberOf(e.Wilds))).forEach((async a=>{await e.addSubEffectUntilEndOfTurn({text:`On board ${a.name}: Explore Actions add +1 <explorer> (in each land successfully Explored).`,[Pn.GlobalReminder]:()=>({icon:`${a.name}<br>+1 <explorer>`}),[Pn.AfterSuccessfulExplore]:async({land:t})=>{t.boards().has(a)&&await t.add(1,e.Explorer)}})}))}}]},{name:"Increasing Aggression",stages:[3],effects:[{textArea:[.367,.442],text:"Invaders do +1 Damage (per land) when Ravaging.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.IncreasingAggression,[Pn.GlobalReminder]:()=>({icon:"+1 <damage>"}),[Pn.AdjustCollectiveInvaderRavageDamage]:()=>1})}}]},Of(!1),{name:"Coming of Age",dahanEvent:!0,effects:[{textArea:[.819,.9],text:"On Each Board: Add 1 <dahan> to a land with <dahan> and no <badlands>/<beasts>/<disease>/<wilds>.",[Pn.Now]:({$:e})=>e.doDahanEventActionOnEachBoard((async a=>{e.dontCountAs(Ln.Badlands),e.dontCountAs(Ln.Beasts),await a.inLandsWith(e.Dahan).where((a=>!a.hasOneOf(e.Badlands,e.Beasts,e.Disease,e.Wilds))).pickOne((async a=>{await a.add(1,e.Dahan)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <dahan> and no <badlands>/<beasts>/<disease>/<wilds>.`})}))}]}]},Rf={set:gn.JaggedEarth,name:"No Bravery Without Numbers",events:[{name:"No Bravery Without Numbers",stages:[1,2],effects:[{textArea:[.107,.216],text:"Invaders do not Ravage in lands unless there are more Invaders than the current Terror Level.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.NoBraveryWithoutNumbers,[Pn.GlobalReminder]:()=>({icon:"Skip<br>Ravage"}),[Pn.PreventInvaderActionInLand]:({land:a,invaderAction:t})=>Promise.resolve(a.participatingInvaders().count<=e.terrorLevel&&t===qr.Ravage)})}}]},{name:"Courage of the Crowd",stages:[3],effects:[{textArea:[.368,.476],text:"Invaders do not Ravage in lands unless there are more Invaders than the current Terror Level.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.CourageOfTheCrowd,[Pn.GlobalReminder]:()=>({icon:"Skip<br>Ravage"}),[Pn.PreventInvaderActionInLand]:({land:a,invaderAction:t})=>Promise.resolve(a.participatingInvaders().count<=e.terrorLevel&&t===qr.Ravage)})}},{textArea:[.502,.542],text:"Ravage actions do +2 Damage (per land).",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.CourageOfTheCrowd,[Pn.GlobalReminder]:()=>({icon:"+2 <damage>"}),[Pn.AdjustCollectiveInvaderRavageDamage]:()=>2})}}]},Of(!1),{name:"Leave the Hostile Land",dahanEvent:!0,effects:[{textArea:[.807,.914],text:"In each land, Push 1 <dahan> per <badlands>/<disease> to lands without <badlands>/<disease>.",[Pn.Now]:({$:e})=>e.inLands().where((a=>a.hasAllOf(e.Dahan,e.BadlandsOrDisease))).selectOrder().forEach((a=>e.doDahanEventAction((async()=>{await a.possiblyDontCountPiecesAs(Ln.Badlands),await a.push({amount:a.numberOf(e.BadlandsOrDisease),pieces:e.Dahan,destinationFilter:a=>a.doesntHave(e.BadlandsOrDisease)})}),{land:a})),{noOptions:"No lands with <dahan> and <badlands>/<disease>."})}]}]},Mf={name:"Plagues Bring Fear and Death",tokenEvent:!0,effects:[{textArea:[.667,.707],text:"1 <fear> per board with <disease>.",[Pn.Now]:async({$:e})=>{const a=e.inBoardsWith(e.Disease);await e.clickToContinue({highlightBoards:a.items,noOptions:`${a.count} board${a.count>1?"s":""} = ${a.count} <fear>.`}),await e.doTokenEventAction((async()=>{await e.fear(a.count)}))}},{textArea:[.699,.739],text:"On Each Board: 2 Damage to <dahan> in a land with <disease>.",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((a=>a.inLandsWithAllOf(e.Disease,e.Dahan).pickOne((async a=>{await a.damage(2,e.Dahan)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <dahan> and <disease>.`})))}]},Nf={set:gn.JaggedEarth,name:"Numinous Crisis",events:[{name:"Numinous Crisis",fullText:["<i>The spiritual energy of the island weakens as life's connections grow ever more tattered. You may:","Draw Strength from it while you can","<i><bullet> Remove 1 <blight> per player from the Blight Card. Then if the Blight Card has not flipped, keep Removing <blight> until it flips. Gain 3 Energy per <blight> Removed, divided as evenly as possible among all Spirits.","Pour your Strength into the Island","<i><bullet> Each Spirit either pays 3 Energy, Forgets 2 Power Cards, or return 1 <presence> to their <presence> tracks.","<i><bullet> Add 1 <blight> per Spirit to the Blight Card (from the box)."],effects:[{textArea:[.193,.601],text:"You may:<br><br>Draw Strength from it while you can<or>Pour your Strength into the Island",[Pn.Now]:async({$:e})=>{await e.chooseBetween({effects:[{actionId:"DrawStrength",label:"Draw Strength from it while you can",textArea:[.229,.404],text:"Remove 1 <blight> per player from the Blight Card. Then if the Blight Card has not flipped, keep Removing <blight> until it flips. Gain 3 Energy per <blight> Removed, divided as evenly as possible among all Spirits.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.doMainEventAction((async()=>{let a=e.spiritCount;for(await e.removeBlightFromBlightCard(a);void 0===e.blightCardActive;)await e.removeBlightFromBlightCard(1),a+=1;await e.clickToContinue({textArea:[.299,.404],text:"Gain 3 Energy per <blight> Removed, divided as evenly as possible among all Spirits.",noOptions:`Removed ${a} <blight> = ${3*a} energy.`}),await e.gainEnergyDividedEvenly(3*a)}))}},{actionId:"PourYourStrength",label:"Pour your Strength into the Island",effects:[{textArea:[.457,.529],text:"Each Spirit either pays 3 Energy, Forgets 2 Power Cards, or return 1 <presence> to their <presence> tracks.",[Pn.Now]:()=>e.eachSpirit((a=>e.doMainEventAction((()=>e.chooseBetween({effects:[{actionId:"PayEnergy",textArea:[.457,.497],text:"Pay 3 Energy.",condition:()=>a.energy>=3,[Pn.Now]:async()=>{await a.payEnergy(3)}},{actionId:"ForgetPowerCards",textArea:[.457,.528],text:"Forget 2 Power Cards.",condition:()=>a.nonBlessedPowerCards.length>=2,[Pn.Now]:async()=>{await a.forgetPowers({amount:2})}},{actionId:"ReturnPresence",textArea:[.492,.532],text:"Return 1 <presence> to the <presence> tracks.",[Pn.Now]:async()=>{await a.destroyPresence(1,Wn.Silent),await a.returnPresenceToTracks(1)}}]})))))},{textArea:[.523,.598],text:"Add 1 <blight> per Spirit to the Blight Card (from the box).",[Pn.Now]:async()=>{await e.clickToContinue({noOptions:`${e.spiritCount} Spirit${e.spiritCount>1?"s":""} = ${e.spiritCount} <blight>.`}),await e.doMainEventAction((async()=>{await e.addBlightToBlightCard(e.spiritCount)}))}}]}]})}}]},Mf,wf]},Wf={set:gn.JaggedEarth,name:"Overconfidence",events:[{name:"Overconfidence",terrorLevels:[1],effects:[{textArea:[.107,.317],text:"If you have any Earned Fear Cards, discard 2 of them now (so you don't get their text benefits).<br><br>Otherwise, move 2 Earned <fear> Markers per player to the top of the Fear pool.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.doMainEventAction((async()=>{e.fearCardsEarnedCount>0?await e.discardEarnedFearCards(2):await e.loseFear(2)}))}}]},{name:"Terror Breeds Aggression",terrorLevels:[2,3],effects:[{textArea:[.383,.495],text:"For every 2 Fear Cards currently in the Earned Fear Cards pile, Invaders do +1 Damage (per land) when Ravaging.",[Pn.Now]:async({$:e})=>{await e.clickToContinue();const a=Math.floor(e.fearCardsEarnedCount/2);a>0&&await e.addSubEffectUntilEndOfTurn({effectId:In.TerrorBreedsAggression,[Pn.GlobalReminder]:()=>({icon:`+${a} <damage>`}),[Pn.AdjustCollectiveInvaderRavageDamage]:()=>a})}}]},{name:"Beasts Multiply",tokenEvent:!0,effects:[{textArea:[.63,.742],text:"On Each Board: Add 1 <beasts> to a land adjacent to <beasts>, then Destroy 1 <dahan> in a land with <beasts>.",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((async a=>{await(await e.countPieceOptionally(Ln.Beasts,(()=>a.inLandsWhere((a=>a.hasAdjacentLandWithPiece(e.Beasts)))))).pickOne((async a=>{await a.add(1,e.Beasts)}),{textArea:[.664,.704],text:"Add 1 <beasts> to a land adjacent to <beasts>",highlightBoards:[a],noOptions:`On board ${a.name}: No land adjacent to <beasts>.`}),await a.forPiecesThatIs(e.Dahan,(a=>a.has(e.Beasts))).pickOne((async e=>{await e.destroy()}),{textArea:[.664,.738],text:"Destroy 1 <dahan> in a land with <beasts>.",highlightBoards:[a],noOptions:`On board ${a.name}: No land with <dahan> and <beasts>.`})}),{selectOrder:!0})}]},ff]},$f={set:gn.JaggedEarth,name:"Provincial Seat",events:[{name:"Provincial Seat",blightStatus:lg.HealthyIsland,effects:[{textArea:[.107,.179],text:"On Each Board: Choose a land with <city>. Build there.",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((a=>a.inLandsWith(e.City).pickOne((async e=>{await e.doExtraBuild()}))))}]},{name:"Lands Hollow of Promise",blightStatus:lg.BlightedIsland,effects:[{textArea:[.373,.579],text:"On Each Board: Add 1 <blight> to a land without <presence>.<br><br>Spirits may prevent this on any/all boards by Destroying 2 <presence> from each board to be protected.",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((a=>e.chooseBetween({highlightBoards:[a],prompt:`On board ${a.name}, choose between:`,effects:[{actionId:"AddBlight",textArea:[.37,.443],text:"Add 1 <blight> to a land without <presence>.",prompt:"Pick land to add <blight>.",[Pn.Now]:()=>a.inLocationsWhere((a=>a.isLandForBlight&&a.doesntHaveIgnoringCountAs(e.Presence))).pickOne((async e=>{await e.addBlight(1)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands without <presence>.`})},{actionId:"PreventByDestroyingPresence",textArea:[.472,.577],text:"Prevent this by destroying 2 <presence>.",[Pn.Now]:()=>a.destroyPresence(2),condition:()=>a.numberOf(e.Presence)>=2}]})))}]},pf,{name:"Rally to the Defense of Distant Kin",dahanEvent:!0,effects:[{textArea:[.837,.914],text:"On Each Board: Gather 1 <dahan> into a land with <dahan>. In that land, Defend 1 per <dahan>.",[Pn.Now]:({$:e})=>e.doDahanEventActionOnEachBoard((a=>a.inLandsWith(e.Dahan).pickOne((async a=>{await a.gatherOne(e.Dahan),await a.defend(a.numberOf(e.Dahan))}))),{selectOrder:!0})}]}]},Gf={set:gn.JaggedEarth,name:"Pull Together In Adversity",events:[{name:"Pull Together In Adversity",terrorLevels:[1,2],effects:[{textArea:[.105,.176],text:"For the rest of this turn, ignore 1 <strife> on each Invader. (This includes not removing that <strife>.)",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.PullTogetherInAdversity,[Pn.GlobalReminder]:()=>({icon:"Ignore<br><strife>"}),[Pn.IgnoreOneStrife]:()=>!0})}}]},{name:"Purge the Land with Salt and Fire",terrorLevels:[3],effects:[{textArea:[.368,.476],text:"On Each Board in a land with 2 or more <town>:<br>Add 1 <blight> without cascading. Add 2 <badlands>. Remove all <town>.",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((a=>a.inLandsWhere((a=>a.hasAtLeast(2,e.Town))).pickOne((async a=>{await a.addBlight(1,{mayCascade:!1}),await a.add(2,e.Badlands),await a.remove({quantifier:ur.All,pieces:e.Town})}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with 2 or more <town>.`})),{selectOrder:!0})}]},xf,wf]},Uf={set:gn.JaggedEarth,name:"Relentless Optimism",events:[{name:"Relentless Optimism",terrorLevels:[1],effects:[{textArea:[.107,.183],text:"For the rest of this turn, don't generate <fear> for Destroying <town>/<city>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.RelentlessOptimism,[Pn.GlobalReminder]:()=>({icon:"No <fear><br><town>/<city>"}),[Pn.PreventFearGeneration]:({fromDestroyingBuildings:e})=>Promise.resolve(e)})}}]},{name:"Cultures Mix and Clash",terrorLevels:[2,3],effects:[{textArea:[.406,.584],text:"On Each Board: If <dahan> outnumber <town>/<city> by 2 or more, Replace 1 <town> with 1 <dahan>.<br><br>If <town>/<city> outnumber <dahan> by 2 or more, Replace 1 <dahan> with 1 <town>.",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((async a=>{a.numberOf(e.Dahan)>=a.numberOf(e.TownOrCity)+2?await a.forPiecesThatIs(e.Town).pickOne((async e=>{await e.replace([Ln.Dahan])}),{textArea:[.407,.48],text:"If <dahan> outnumber <town>/<city> by 2 or more, Replace 1 <town> with 1 <dahan>.",highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <town>.`}):a.numberOf(e.TownOrCity)>=a.numberOf(e.Dahan)+2?await a.forPiecesThatIs(e.Dahan).pickOne((async e=>{await e.replace([Ln.Town])}),{textArea:[.508,.582],text:"If <town>/<city> outnumber <dahan> by 2 or more, Replace 1 <dahan> with 1 <town>.",highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <dahan>.`}):await e.clickToContinue({noOptions:`On board ${a.name}: Neither applies.`})}))}]},{name:"Foreign Diseases",tokenEvent:!0,effects:[{textArea:[.637,.742],text:"On Each Board, in the land with the most combined Invaders + <dahan> (min. 1 of each): Add 1 <disease>. 2 Damage to <dahan>.",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((a=>a.inLandsWithAllOf(e.Invader,e.Dahan).withMost((a=>a.numberOf(e.InvaderOrDahan))).pickOne((async a=>{await a.add(1,e.Disease),await a.damage(2,e.Dahan)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with Invaders and <dahan>.`})))}]},qg]},Hf={set:gn.JaggedEarth,name:"Remnants Of A Spirits Heart",events:[{name:"Remnants Of A Spirits Heart",fullText:["<i>A group of Dahan find a stony ridge with lingering blessings from an ancient mountain-Spirit. You may:","Leave its Strength with the Dahan","<i><bullet> <dahan> have +10 Health this turn.","<i><bullet> In lands with <dahan>, Invaders have +1 Health this turn.","With Patient Focus Craft a Great Warding","<i>Cost: 4 Energy per player, aided by <earth>.","<i><bullet> Defend from Spirits is 4 lower per land this turn (min.0).","<i><bullet> During one future Spirit Phase, players may jointly decide to grant Defend 4 to all lands that turn. (There is a Reminder Card for this.)"],effects:[{textArea:[.207,.592],text:"You may:<br><br>Leave its Strength with the Dahan<or>With Patient Focus Craft a Great Warding",[Pn.Now]:async({$:e})=>{await e.doMainEventAction((async()=>{await e.chooseBetween({effects:[{actionId:"LeaveItsStrength",label:"Leave its Strength with the Dahan",effects:[{textArea:[.242,.282],text:"<dahan> have +10 Health this turn.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.LeaveItsStrength,[Pn.GlobalReminder]:()=>({icon:"<dahan><br>+10 HP"}),[Pn.AdjustHealth]:({piece:a})=>a.isA(e.Dahan)?10:0})}},{textArea:[.276,.316],text:"In lands with <dahan>, Invaders have +1 Health this turn.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.LeaveItsStrength,[Pn.GlobalReminder]:()=>({icon:"Invaders<br>+1 HP"}),[Pn.AdjustHealth]:({piece:a})=>a.isInvader&&a.location?.has(e.Dahan)?1:0,[Pn.AfterRemovePiece]:async({piece:a,location:t})=>{a.isA(e.Dahan)&&await t.healthCheck()}})}}]},{actionId:"CraftAGreatWarding",label:"With Patient Focus Craft a Great Warding",condition:()=>e.playersCanJointlyPayEnergyAidedBy({energy:4*e.spiritCount,element:ir.Earth}),effects:[{textArea:[.377,.417],text:"Cost: 4 Energy per player, aided by <earth>.",[Pn.Now]:async()=>{await e.payEnergyJointlyAidedBy({energy:4*e.spiritCount,element:ir.Earth})}},{textArea:[.414,.483],text:"Defend from Spirits is 4 lower per land this turn (min.0).",[Pn.Now]:async()=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.CraftAGreatWardingUntilEndOfTurn,[Pn.GlobalReminder]:()=>({icon:"Defend<br>4 lower"}),[Pn.DefendFromSpirits]:()=>-4})}},{textArea:[.479,.585],text:"During one future Spirit Phase, players may jointly decide to grant Defend 4 to all lands that turn. (There is a Reminder Card for this.)",[Pn.Now]:async()=>{await e.clickToContinue(),await e.addSubEffect({effectId:In.CraftAGreatWardingOngoing,[Pn.GlobalReminder]:()=>({icon:"Defend<br>4 to All",ongoing:!0}),[Pn.ExtraAction]:({effect:a})=>({actionId:"GreatWarding",[Pn.Now]:async()=>{await e.addSubEffectUntilEndOfTurn({text:"Defend 4 to all lands.",[Pn.DefendFromGame]:()=>4}),e.removeEffect(a)}})})}}]}]})}))}}]},{name:"Hunting Parties",tokenEvent:!0,effects:[{textArea:[.653,.73],text:"For each land with <beasts> and <city>: 1 <fear> and Destroy 1 <beasts> there.",[Pn.Now]:({$:e})=>e.inLandsWithAllOf(e.Beasts,e.City).selectOrder().forEach((a=>e.doTokenEventAction((async()=>{await a.possiblyDontCountPiecesAs(Ln.Beasts),a.has(e.Beasts)&&(await a.fear(1),await a.destroyOne(e.Beasts,{autoPlay:!0}))}),{land:a})),{noOptions:"No lands with <beasts> and <city>."})}]},Bf]},qf={name:"Offerings of Story and Season",dahanEvent:!0,effects:[{textArea:[.804,.913],text:"Each Spirit with at least 3 <dahan> among its lands gains 1 Energy and may Reclaim 1 Card.",[Pn.Now]:({$:e})=>e.spiritsWhich((a=>a.numberOfPiecesInLands(e.Dahan)>=3)).forEach((a=>e.doDahanEventAction((async()=>{await a.gainEnergy(1),await a.reclaim(1)}))),{noOptions:"No Spirits with at least 3 <dahan> among all its lands."})}]},jf={set:gn.JaggedEarth,name:"Resourceful Populace",events:[{name:"Resourceful Populace",terrorLevels:[1],effects:[{textArea:[.107,.285],text:"For the rest of this turn, after an Action Destroys 1 or more <town>/<city>, add 1 <town> to an adjacent land. (If there are no adjacent lands - e.g., due to Isolate - don't add anything.)",[Pn.Now]:async({$:e,effect:a,...t})=>{await e.clickToContinue();const n={triggerId:e.nextTriggerId(),[Pn.Now]:({action:a})=>e.doMainEventAction((()=>e.inLandsWhere((e=>e.hasAdjacentLocationWhere((e=>a.parentData.resourcefulPopulaceLocations.includes(e))))).pickOne((async a=>{await a.add(1,e.Town)}),{noOptions:"No adjacent lands."})))};await e.addSubEffectUntilEndOfTurn({effectId:In.ResourcefulPopulace,[Pn.GlobalReminder]:()=>({icon:"+1 <town>"}),[Pn.AfterRemovePiece]:async({piece:r,location:i,removement:s})=>{r.isA(e.TownOrCity)&&wr[s].isDestroyLike&&e.action.type!==qo.GameAction&&!i.isIsolated&&(void 0===e.action.data.resourcefulPopulaceLocations&&(e.action.data.resourcefulPopulaceLocations=[]),e.action.data.resourcefulPopulaceLocations.push(i),await e.addTrigger(n,a,t.action))}})}}]},{name:"Strip the Land Bare",terrorLevels:[2,3],effects:[{textArea:[.373,.413],text:"<town> each do +1 Damage when Ravaging.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.StripTheLandBare,[Pn.GlobalReminder]:()=>({icon:"<town><br>+1 <damage>"}),[Pn.AdjustIndividualInvaderRavageDamage]:({piece:a})=>a.isA(e.Town)?1:0})}},{textArea:[.408,.482],text:"After a Ravage Action adds <blight>, Remove 1 <explorer> and 1 <town> from the Ravaged land.",[Pn.Now]:async({$:e,...a})=>{await e.clickToContinue();const t={triggerId:e.nextTriggerId(),[Pn.Now]:async({action:a})=>{const t=a.parentData.damagedLand;await t.remove({amount:1,pieces:e.Explorer}),await t.remove({amount:1,pieces:e.Town})}};await e.addSubEffectUntilEndOfTurn({effectId:In.StripTheLandBare,[Pn.GlobalReminder]:()=>({icon:"<blight><br>-<explorer><town>"}),[Pn.AfterRavagingDamageLand]:async({blightedLands:n,land:r})=>{n.length>0&&(e.action.data.damagedLand=r,await e.addTrigger(t,a.effect,a.action))}})}}]},{name:"Virulence among Close-Packed Homes",tokenEvent:!0,effects:[{textArea:[.664,.74],text:"On Each Board: Add <disease> to the Inland land with the most <town>/<city> (min. 1).",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((a=>a.inInlandLands().where((a=>a.has(e.TownOrCity))).withMost((a=>a.numberOf(e.TownOrCity))).pickOne((async a=>{await a.add(1,e.Disease)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No Inland land with <town>/<city>.`})))}]},qf]},_f={set:gn.JaggedEarth,name:"Seek New Farmland",events:[{name:"Seek New Farmland",blightStatus:lg.HealthyIsland,effects:[{textArea:[.107,.181],text:"In each land with 2 or more <town>, Push 1 <town> to a land without <town>.",[Pn.Now]:({$:e})=>e.inLandsWhere((a=>a.hasAtLeast(2,e.Town))).selectOrder().forEach((a=>e.doMainEventAction((async()=>{await a.push({amount:1,pieces:e.Town,destinationFilter:a=>a.doesntHave(e.Town)})}),{land:a})),{noOptions:"No lands with 2 or more <town>."})}]},{name:"Voracious Consumption",blightStatus:lg.BlightedIsland,effects:[{textArea:[.373,.582],text:"On Each Board: After the Ravage Step, add 1 <blight> to a land with <city> and no <blight>.<br><br>Spirits may prevent this on any/all boards by Destroying 2 <presence> from each board to be protected.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.VoraciousConsumption,[Pn.GlobalReminder]:()=>({icon:"+1 <blight>"}),[Pn.AfterTheNormalRavageStep]:()=>e.doMainEventActionOnEachBoard((async a=>{await e.chooseBetween({prompt:`On board ${a.name}, choose between:`,highlightBoards:[a],effects:[{actionId:"AddBlight",textArea:[.373,.447],text:"Add 1 <blight> to a land with <city> and no <blight>.",prompt:"Pick a land to add <blight>.",[Pn.Now]:()=>a.inLandsWith(e.City).where((a=>a.doesntHave(e.Blight))).pickOne((async e=>{await e.addBlight(1)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <city> and no <blight>.`})},{actionId:"PreventByDestroyingPresence",textArea:[.476,.585],text:"Prevent <blight> by destroying 2 <presence>.",[Pn.Now]:()=>a.destroyPresence(2),condition:()=>a.numberOf(e.Presence)>=2}]})}),{selectOrder:!0})})}}]},Mf,{name:"Engage on their own Terms",dahanEvent:!0,effects:[{textArea:[.805,.913],text:"During Ravage, <dahan> only do 1 Damage each, but deal Damage before Invaders.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.EngageOnTheirOwnTerms,[Pn.GlobalReminder]:()=>({icon:"<dahan><br>1 <damage>"}),[Pn.DahanFightBeforeInvaders]:async({land:a})=>{a.has(e.Dahan)&&await e.clickToContinue(),await a.piecesThatAre(e.Dahan).forEach((async e=>{await e.setFightsBeforeInvaders(!0)}))},[Pn.AdjustDamageDuringRavage]:({piece:a})=>a.isA(e.Dahan)?-1:0})}}]}]},Vf={set:gn.JaggedEarth,name:"Smaller Ports Spring Up",events:[{name:"Smaller Ports Spring Up",stages:[1,2],effects:[{textArea:[.105,.187],text:"On Each Board with exactly 1 Coastal <city>: Add 1 <town> to a Coastal land without <city>.",[Pn.Now]:({$:e})=>e.inBoardsWhere((a=>a.inCoastalLands().hasExactlyOneWhere(1,(a=>a.has(e.City)))&&1===a.inCoastalLands().firstOneWhere((a=>a.has(e.City))).numberOf(e.City))).forEach((a=>e.doMainEventAction((()=>a.inCoastalLands().where((a=>a.doesntHave(e.City))).pickOne((async a=>{await a.add(1,e.Town)}))),{board:a})),{noOptions:"No boards with exactly 1 Coastal <city>."})}]},{name:"Extensive Building",stages:[3],effects:[{textArea:[.371,.452],text:"On Each Board: Build in a land with Invaders not matching a Build Card.",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((a=>a.inLandsWith(e.Invader).where((a=>!a.matchesInvaderCards(e.invaderCardsInVisibleSlot(ah.Build),qr.Build))).pickOne((async e=>{await e.doExtraBuild()}),{noOptions:`On board ${a.name}: No lands with Invaders not matching a Build Card.`})))}]},Kg,{name:"Settlers Encroach too far",dahanEvent:!0,effects:[{textArea:[.841,.914],text:"On Each Board: Choose a land with <town> and <dahan>. Push 1 <town> per 2 <dahan> there.",[Pn.Now]:({$:e})=>e.doDahanEventActionOnEachBoard((a=>a.inLandsWithAllOf(e.Town,e.Dahan).pickOne((async a=>{await a.push({amount:Math.floor(a.numberOf(e.Dahan)/2),pieces:e.Town})}),{highlightBoards:[a],noOptions:`On board ${a.name}: No land with <town> and <dahan>.`})),{selectOrder:!0})}]}]},Jf={set:gn.JaggedEarth,name:"Sprawl Contained By The Wilds",events:[{name:"Sprawl Contained By The Wilds",blightStatus:lg.HealthyIsland,effects:[{textArea:[.107,.21],text:"On Each Board: Add 1 <wilds> to a land without Invaders. Build in the land with the most <town>/<city> (min. 1).",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((async a=>{await e.addSubEffect({effects:[{textArea:[.107,.176],text:"Add 1 <wilds> to a land without Invaders.",[Pn.Now]:()=>a.inLandsWithout(e.Invader).pickOne((async a=>{await a.add(1,e.Wilds)}))},{textArea:[.138,.21],text:"Build in the land with the most <town>/<city> (min. 1).",[Pn.Now]:()=>a.inLandsWithMostMinimumOne(e.TownOrCity).pickOne((async e=>{await e.doExtraBuild()}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <town>/<city>.`})}]})}))}]},{name:"Dissolution Threatens",blightStatus:lg.BlightedIsland,effects:[{textArea:[.383,.604],text:"Each Spirit chooses:<br>Accept this Fragmentation<or>Focus your will towards Wholeness",[Pn.Now]:({$:e})=>e.eachSpirit((a=>e.doMainEventAction((()=>e.chooseBetween({effects:[{actionId:"AcceptThisFragmentation",label:"Accept this Fragmentation",textArea:[.423,.463],text:"Destroy 2 <presence>, adding 1 <wilds> in place of each.",[Pn.Now]:async()=>{const t=await a.destroyPresence(2);for(const{location:a}of t)await a.add(1,e.Wilds)}},{actionId:"FocusYourWill",label:"Focus your will towards Wholeness",effects:[{textArea:[.499,.539],text:"Add 1 of your Destroyed <presence> to one of your lands.",[Pn.Now]:async()=>{await a.addPresence({destroyed:!0})}},{textArea:[.534,.604],text:"Next turn, all your Powers are <slow> and cannot be made <fast>.",[Pn.Now]:async()=>{await e.clickToContinue();const t=e.turn;await e.addSubEffect({effectId:In.FocusYourWill,[Pn.GlobalReminder]:()=>({players:[a],icon:"Powers<br><slow>"}),[Pn.AdjustPowerSpeedOnPlay]:async({power:n})=>n.owner===a&&e.turn===t+1&&(await n.setStatus(Md.PlayedSlow),!0),[Pn.PreventChangeSpeedOfPower]:({power:n})=>n.owner===a&&e.turn===t+1,[Pn.TimePasses]:()=>(e.turn===t+1&&e.removeThisEffect(),Promise.resolve())})}}]}]})))))}]},xf,{name:"Lay Ambushes",dahanEvent:!0,effects:[{textArea:[.819,.899],text:"During Ravage, <dahan> deal Damage at the same time as Invaders.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.LayAmbushes,[Pn.GlobalReminder]:()=>({icon:"Ravage<br><dahan>"}),[Pn.DahanFightSimultaneously]:()=>!0})}}]}]},zf={set:gn.JaggedEarth,name:"Temporary Truce",events:[{name:"Temporary Truce",terrorLevels:[1],effects:[{textArea:[.107,.216],text:"In lands with <dahan>: 1 <dahan> and 1 <town>/<city> do not participate in Ravages. (They neither take nor deal Damage.)",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.TemporaryTruce,[Pn.GlobalReminder]:()=>({icon:"DNPIR"}),[Pn.DoesNotParticipateInRavage]:async({location:a})=>{a.has(e.Dahan)&&(await a.pickOnePieceToNotParticipateInRavage(e.Dahan),await a.pickOnePieceToNotParticipateInRavage(e.TownOrCity))}})}}]},{name:"Temporary Caution",terrorLevels:[2,3],effects:[{textArea:[.373,.485],text:"During the Ravage Step, On Each Board: Skip 1 Ravage Action in a land where <dahan> outnumber <town>/<city>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.TemporaryCaution,[Pn.GlobalReminder]:()=>({icon:"Skip<br>Ravage"}),[Pn.BeforeResolvingInvaderCard]:async({invaderAction:a,card:t})=>{a===qr.Ravage&&await e.onEachBoard((a=>a.inLandsWhere((a=>a.participatingDahan().count>a.participatingInvaders().where((a=>a.isA(e.TownOrCity))).count)).pickOne((async a=>{await e.addEffectUntilEndOfTurn({[Pn.PreventInvaderActionInLand]:e=>Promise.resolve(e.land===a&&e.invaderAction===qr.Ravage&&e.card===t)})}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands where <dahan> outnumber <town>/<city>.`})))}})}}]},Of(!1),{name:"Speak of the Spirits' Anger",dahanEvent:!0,effects:[{textArea:[.809,.921],text:"For each board, 1 <fear> if any <dahan> are in lands with <town>/<city>.",[Pn.Now]:async({$:e})=>{const a=a=>a.hasOneLandWhere((a=>a.hasAllOf(e.Dahan,e.TownOrCity))),t=e.inBoardsWhere(a).count;await e.clickToContinue({noOptions:`${t} board${1!==t?"s":""} = ${t} <fear>.`}),await e.doDahanEventActionOnEachBoard((async t=>{a(t)&&await e.fear(1)}))}}]}]},Yf={set:gn.JaggedEarth,name:"The Frontier Calls",events:[{name:"The Frontier Calls",blightStatus:lg.HealthyIsland,effects:[{textArea:[.107,.181],text:"Explore Actions add +1 <explorer> to lands without <town>/<city>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.TheFrontierCalls,[Pn.GlobalReminder]:()=>({icon:"+1 <explorer>"}),[Pn.BeforeSuccessfulExplore]:({land:a})=>(a.has(e.TownOrCity)||(e.action.data.hadNoBuilding=!0),Promise.resolve()),[Pn.AfterSuccessfulExplore]:async({land:a})=>{e.action.data.hadNoBuilding&&(await e.sendEvent({type:Tn.GenericMain,text:"Invaders successfully Explored into a land which had no <town>/<city>."}),await a.add(1,e.Explorer))}})}}]},{name:"Self-Sacrifice Buys Time",blightStatus:lg.BlightedIsland,effects:[{textArea:[.374,.414],text:"Destroy 1 <presence> from each Spirit.",[Pn.Now]:({$:e})=>e.eachSpirit((a=>e.doMainEventAction((async()=>{await a.destroyPresence(1)}))))},{textArea:[.44,.582],text:"The next X <blight> added to the island this turn come from the box instead of the Blight Card where X is the number of Spirits.",[Pn.Now]:async({$:e})=>{const a=De.box(0);await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.SelfSacrificeBuysTime,[Pn.GlobalReminder]:()=>({icon:`<blight><br>${a.get()} / ${e.spiritCount}`}),[Pn.PreventRemoveBlightFromBlightCard]:async({location:t})=>void 0!==t&&a.get()<e.spiritCount&&(a.set(a.get()+1),await e.sendEvent({type:Tn.GenericMain,text:"Self-Sacrifice Buys Time made <blight> come from the box instead of the Blight Card."}),a.get()===e.spiritCount&&e.removeThisEffect(),!0)})}}]},{name:"Lair in Untamed Lands",tokenEvent:!0,effects:[{textArea:[.648,.729],text:"On Each Board: Add 1 <beasts> to a land without <town>/<city>/<blight>.",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((a=>a.inLandsWithNoneOf(e.Town,e.City,e.Blight).pickOne((async a=>{await a.add(1,e.Beasts)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands without <town>/<city>/<blight>.`})))}]},{name:"Seek out new Grounds",dahanEvent:!0,effects:[{textArea:[.804,.911],text:"On Each Board: Gather 1 or 2 <dahan> into a land without <dahan> Setup symbols.",[Pn.Now]:({$:e})=>e.doDahanEventActionOnEachBoard((a=>a.inLandsWhere((a=>!a.hasSetupSymbols&&a.hasAdjacentLandWithPiece(e.Dahan))).pickOne((async a=>{await a.gather({quantifier:ur.UpToMinimumOne,amount:2,pieces:e.Dahan})}))),{selectOrder:!0})}]}]},Kf=e=>({name:"Irregular Outbreaks",tokenEvent:!0,effects:[{textArea:e?[.638,.71]:[.637,.714],text:"<disease> doesn't prevent Builds this Invader Phase.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.IrregularOutbreaks,[Pn.GlobalReminder]:()=>({icon:"Ignore<br><disease>"}),[Pn.PreventDiseasePreventingBuilds]:()=>Promise.resolve(!0)})}},{textArea:e?[.704,.745]:[.67,.75],text:"1 <fear> per board with <disease>.",[Pn.Now]:async({$:e})=>{const a=e.inBoardsWith(e.Disease);await e.clickToContinue({highlightBoards:a.items,noOptions:`${a.count} board${a.count>1?"s":""} = ${a.count} <fear>.`}),await e.doTokenEventAction((async()=>{await e.fear(a.count)}))}}]}),Qf={set:gn.JaggedEarth,name:"The Struggles Of Growth",events:[{name:"The Struggles Of Growth",fullText:["<i>A painful crux-point. Each Spirit chooses:","Trade Reach for Deeper Nature","<i>Destroy 2 of your <presence>. Gain a Power Card.","Leave Behind that which restrains you","<i>Forget a Power Card. Gain 2 Energy. Move up to 2 of your <presence> up to <range-4>."],blightStatus:lg.HealthyIsland,effects:[{textArea:[.151,.34],text:"Each Spirit chooses: Trade Reach for Deeper Nature<or>Leave Behind that which Restrains you",[Pn.Now]:({$:e})=>e.eachSpirit((a=>e.doMainEventAction((()=>e.chooseBetween({effects:[{actionId:"TradeReach",label:"Trade Reach for Deeper Nature",effects:[{textArea:[.184,.224],text:"Destroy 2 of your <presence>.",[Pn.Now]:async()=>{await a.destroyPresence(2)}},{textArea:[.184,.224],text:"Gain a Power Card.",[Pn.Now]:async()=>{await a.gainPowerCard()}}]},{actionId:"LeaveBehind",label:"Leave Behind that which restrains you",effects:[{textArea:[.265,.305],text:"Forget a Power Card.",[Pn.Now]:async()=>{await a.forgetPowers()}},{textArea:[.265,.305],text:"Gain 2 Energy.",[Pn.Now]:async()=>{await a.gainEnergy(2)}},{textArea:[.265,.337],text:"Move up to 2 of your <presence> up to <range-4>.",[Pn.Now]:async()=>{await a.presence().pickMultiple({amount:2,optional:!0,forPickedItem:async e=>{await e.move({locations:{target:zn.WithinRange,range:4,spirit:a}})},effect:{prompt:"Pick a <presence> to move."}})}}]}]})))))}]},{name:"Blight Deepens",blightStatus:lg.BlightedIsland,effects:[{textArea:[.4,.568],text:"On Each Board: Add 1 <blight> to a land with <blight>, but do not cascade.<br><br>Spirits may prevent this on any/all boards by Destroying 1 <presence> from each board to be protected.",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((a=>e.chooseBetween({effects:[{actionId:"AddBlight",textArea:[.4,.47],text:"Add 1 <blight> to a land with <blight>, but do not cascade.",[Pn.Now]:()=>a.inLocationsWith(e.Blight).where((e=>e.isLandForBlight)).pickOne((async e=>{await e.addBlight(1,{mayCascade:!1})}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <blight>.`})},{actionId:"PreventByDestroyingPresence",textArea:[.493,.567],text:"Prevent adding <blight> by destroying 2 <presence>.",[Pn.Now]:()=>a.destroyPresence(2),condition:()=>a.numberOf(e.Presence)>=2}]})),{selectOrder:!0})}]},Kf(!1),wf]},Xf={set:gn.JaggedEarth,name:"Thriving Trade",events:[{name:"Thriving Trade",blightStatus:lg.HealthyIsland,effects:[{textArea:[.107,.184],text:"On Each Board: Add 1 <city> to a Coastal land with <city>.",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((a=>a.inCoastalLands().where((a=>a.has(e.City))).pickOne((async a=>{await a.add(1,e.City)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No Coastal lands with <city>.`})))}]},{name:"Partitioned Wilderness",blightStatus:lg.BlightedIsland,effects:[{textArea:[.354,.598],text:"On Each Board: If there are 4 or more lands with <town>, add 1 <blight> to a land with or adjacent to <town>.<br><br>Spirits may prevent this on any/all boards by Destroying 3 <presence> from each board to be protected.",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((async a=>{a.inLandsWith(e.Town).count>=4?await e.chooseBetween({highlightBoards:[a],effects:[{actionId:"AddBlight",textArea:[.354,.457],text:"Add 1 <blight> to a land with or adjacent to <town>.",[Pn.Now]:()=>a.inLocationsWithOrAdjacentTo(e.Town).where((e=>e.isLandForBlight)).pickOne((async a=>{await a.add(1,e.Blight)}))},{actionId:"PreventByDestroyingPresence",textArea:[.489,.6],text:"Prevent adding <blight> by destroying 3 <presence>.",[Pn.Now]:()=>a.destroyPresence(3),condition:()=>a.numberOf(e.Presence)>=3}]}):await e.clickToContinue({noOptions:`On board ${a.name}: There are not 4 or more lands with <town>.`,highlightBoards:[a]})}),{selectOrder:!0})}]},{name:"Pestilence Arrives on Canvas Sails",tokenEvent:!0,effects:[{textArea:[.654,.765],text:"On Each Board: Add 1 <disease> to the Coastal land with the most <town>/<city> (min. 1). In that land, 3 Damage to <dahan>.",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((a=>a.inCoastalLands().where((a=>a.has(e.TownOrCity))).withMost((a=>a.numberOf(e.TownOrCity))).pickOne((async a=>{await a.add(1,e.Disease),await a.damage(3,e.Dahan)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No Coastal land with <town>/<city>.`})))}]},{name:"Clever Cooperation",dahanEvent:!0,effects:[{textArea:[.805,.914],text:"Each Spirit may Push 1 of their <presence> from a land with <dahan>. 2 Damage in the land Pushed to.",[Pn.Now]:({$:e})=>e.eachSpirit((a=>e.doDahanEventAction((()=>a.presence().where((a=>a.location.has(e.Dahan))).optionallyPickOne((async e=>{const a=await e.push();a.length>0&&await a[0].destination.damage(2)}),{prompt:"Pick 1 of your <presence> to Push.",noOptions:`${a.nameLink} has no lands with <dahan>.`})))))}]}]},Zf=e=>({name:"The World's Vibrance Fades",blightStatus:lg.BlightedIsland,effects:[{textArea:e?[.407,.571]:[.363,.542],text:"Remove 1 <blight> per player from the Blight Card, returning it to the box.<br><br>Each Spirit may prevent 1 <blight> from being Removed by Destroying 2 of their <presence>.",[Pn.Now]:({$:a})=>a.eachSpirit((t=>a.doMainEventAction((()=>a.chooseBetween({effects:[{actionId:"RemoveBlight",textArea:e?[.407,.479]:[.363,.433],text:"Remove 1 <blight> from the Blight Card.",[Pn.Now]:async()=>{await a.removeBlightFromBlightCard(1)}},{actionId:"DestroyPresence",textArea:e?[.496,.574]:[.463,.542],text:"Destroy 2 of your <presence>.",[Pn.Now]:async()=>{await t.destroyPresence(2)}}]})))))}]}),ey={set:gn.JaggedEarth,name:"Wounded Lands Attract Explorers",events:[{name:"Wounded Lands Attract Explorers",blightStatus:lg.HealthyIsland,effects:[{textArea:[.105,.145],text:"On Each Board: Add 1 <explorer> to a land with <blight>.",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((a=>a.inLandsWith(e.Blight).pickOne((async a=>{await a.add(1,e.Explorer)}),{highlightBoards:[a],noOptions:`On board: ${a.name}: No land with <blight>.`})))}]},Zf(!1),pf,{name:"Raiding and Retaliation",dahanEvent:!0,effects:[{textArea:[.789,.934],text:"In each land with <town>/<city>: 1 Damage per <dahan>, then each surviving <town>/<city> deals 1 Damage to <dahan>. (Defend/<strife> apply normally.)",[Pn.Now]:({$:e})=>e.inLandsWith(e.TownOrCity).where((a=>a.has(e.Dahan))).selectOrder().forEach((a=>e.doDahanEventAction((async()=>{if(await a.damage(a.numberOf(e.Dahan)),a.has(e.Dahan)){const t=a.piecesThatAre(e.TownOrCity).sum((e=>e.strife>0?0:1))-a.defense;await a.piecesThatAre(e.TownOrCity).forEach((async e=>{e.strife>0&&await e.removeStrife()})),await a.damage(t,e.Dahan)}}),{land:a})))}]}]},ay={set:gn.NatureIncarnate,name:"Accumulated Devastation",events:[{name:"Accumulated Devastation",blightStatus:lg.HealthyIsland,effects:[{textArea:[.106,.348],text:"On Each Board: During the first successful Ravage Action (in one land) this Invader Phase, increase the total Damage ravaging Invaders deal to each land (but not to <dahan>) by the current Invader Stage. Do this for at most one Ravage Action per board (for one Ravage Action in one land).",[Pn.Now]:async({$:e})=>{const a=[];await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.AccumulatedDevastation,[Pn.AlterInvaderActionInLand]:async({land:t,invaderAction:n,normal:r})=>(n===qr.Ravage&&r&&!a.includes(t.board)&&(a.push(t.board),await e.addSubEffectUntilEndOfAction({[Pn.AdjustCollectiveInvaderRavageDamage]:({towardsLand:a})=>a?e.stage:0,[Pn.ActionEnds]:()=>(e.removeThisEffect(),Promise.resolve())})),!1),[Pn.GlobalReminder]:()=>({icon:"Extra<br><damage>"})})}}]},Zf(!0),{name:"Territorial Beasts",tokenEvent:!0,effects:[{textArea:[.632,.746],text:"On Each Board: Isolate a land with <beasts>. 1 <fear> if Invaders are present.",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((async a=>{await a.inLandsWith(e.Beasts).pickOne((async e=>{await e.isolate(),e.hasInvaders&&await e.fear(1)}),{highlightBoards:[a]})}))}]},{name:"Years of Health and Harmony",dahanEvent:!0,effects:[{textArea:[.838,.91],text:"On Each Board with 5 or more <dahan>: Add 1 <dahan> to the land with the most <dahan>.",[Pn.Now]:({$:e})=>e.inBoardsWhere((a=>a.numberOf(e.Dahan)>=5)).forEach((a=>e.doDahanEventAction((()=>a.inLandsWithMost((a=>a.numberOf(e.Dahan))).pickOne((async a=>{await a.add(1,e.Dahan)}),{highlightBoards:[a]})),{board:a})),{noOptions:"No boards with 5 ore more <dahan>."})}]}]},ty={set:gn.NatureIncarnate,name:"An Ominous Dawn",events:[{name:"An Ominous Dawn",terrorLevels:[1],effects:[{textArea:[.109,.293],text:"1 <fear> per Power Card in play that generates <fear>. (In its instructions, not by destroying <town>/<city>. Count thresholds even if you don't have the Elements. Generated <fear> can't cause Wavering Resolve.)",[Pn.Now]:({$:e})=>e.doMainEventAction((async()=>{const a=e.powerCardsInPlayThatGeneratesFear,t=a.length;await e.clickToContinue({highlightPowers:a,noOptions:`${t} Power Card${t>1?"s":""} = ${t} <fear>.`}),await e.fear(t)}))}]},{name:"Wavering Resolve",terrorLevels:[2,3],effects:[{textArea:[.366,.549],text:"Remove 1 Health worth of Invaders per Power Card in play that generates <fear>. (In its instructions, not by destroying <town>/<city>. Count thresholds even if you don't have the Elements.)",[Pn.Now]:({$:e})=>e.doMainEventAction((async()=>{const a=e.powerCardsInPlayThatGeneratesFear,t=a.length;await e.clickToContinue({highlightPowers:a,noOptions:`${t} Power Card${t>1?"s":""} = ${t} Health worth.`}),await e.removeInvadersWorthOfHealthUpTo(t)}))}]},{name:"Dangerous Lands",tokenEvent:!0,effects:[{textArea:[.626,.74],text:"On Each Board: 1 Damage in a land with <badlands>/<beasts>. 1 Damage to <dahan> in a land with <badlands>/<beasts> and <dahan>.",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((async a=>{await a.inLandsWith(e.BadlandsOrBeasts).pickOne((async e=>{await e.damage(1)}),{noOptions:`On board ${a.name}: No land with <badlands>/<beasts>.`}),await a.inLandsWithAllOf(e.BadlandsOrBeasts,e.Dahan).pickOne((async a=>{await a.damage(1,e.Dahan)}),{noOptions:`On board ${a.name}: No land with <badlands>/<beasts> and <dahan>.`})}),{selectOrder:!0})}]},{name:"Waning Support",dahanEvent:!0,effects:[{textArea:[.785,.935],text:"On Each Board with <town>/<city><br>...and 5 or fewer <dahan>: Destroy 1 <presence>.<br>...and 3 or fewer <dahan>: Also Add 1 <blight> to a land with <town>/<city>.",[Pn.Now]:({$:e})=>e.inBoardsWhere((a=>a.hasOneLandWith(e.TownOrCity))).forEach((a=>e.doDahanEventAction((async()=>{a.numberOf(e.Dahan)<=5?(await e.addSubEffect({textArea:[.787,.859],text:"On Each Board with <town>/<city> and 5 or fewer <dahan>:<br>Destroy 1 <presence>.",[Pn.Now]:async()=>{await a.destroyPresence(1)}}),a.numberOf(e.Dahan)<=3&&await e.addSubEffect({textArea:[.854,.934],text:"...and 3 or fewer <dahan>: Also Add 1 <blight> to a land with <town>/<city>.",[Pn.Now]:async()=>{await a.inLandsWith(e.TownOrCity).pickOne((async e=>{await e.addBlight(1)}))}})):await e.clickToContinue({noOptions:`On board ${a.name}: More than 5 <dahan>.`})}),{board:a})),{noOptions:"No boards with <town>/<city."})}]}]},ny={set:gn.NatureIncarnate,name:"Ethereal Conjunction",events:[{name:"Ethereal Conjunction:",fullText:["<i>A confluence of spiritual forces gathers into an unformed maelstrom. Each Spirit chooses:","Endure It's Forces as Best you Can","<i><bullet> Destroy 1 <presence> and lose 1 Energy.","Seek to Control it, though it Exhausts you","<i><bullet> Choose any non-Major Power Card of yours (in hand, play or discard). Put it into play (without paying its cost); use it immediately (even if already used this turn); and then Forget it.","<i><bullet> Discard all Power Cards (from hand)."],effects:[{textArea:[.191,.502],text:"Each spirit chooses:<br><br>Endure It's Forces as Best you Can<or>Seek to Control it, though it Exhausts you",[Pn.Now]:({$:e})=>e.eachSpirit((a=>e.doMainEventAction((()=>e.chooseBetween({effects:[{actionId:"EndureItsForces",label:"Endure It's Forces as Best you Can",textArea:[.233,.273],text:"Destroy 1 <presence> and lose 1 Energy.",[Pn.Now]:async()=>{await a.destroyPresence(1),await a.loseEnergy(1)}},{actionId:"SeekToControlIt",label:"Seek to Control it, though it Exhausts you",effects:[{textArea:[.324,.461],text:"Choose any non-Major Power Card of yours (in hand, play or discard). Put it into play (without paying its cost); use it immediately (even if already used this turn); and then Forget it.",[Pn.Now]:()=>a.powersWhere((e=>e.isA(En.NonMajorCard)&&!e.isBlessed&&!e.assisted)).pickOne((async t=>{await e.addSubEffect({effects:[{textArea:[.357,.429],text:"Put it into play (without paying its cost).",[Pn.Now]:async()=>{await t.play({withoutPaying:!0,withoutUsingCardPlays:!0})}},{textArea:[.39,.463],text:"Use it immediately (even if already used this turn).",[Pn.Now]:async()=>{await a.targetAndResolvePower(t)}},{textArea:[.422,.462],text:"Forget it.",[Pn.Now]:async()=>{await a.forgetPowerState(t)}}]})}),{noOptions:`${a.nameLink} has no non-Major Power Card.`})},{textArea:[.454,.494],text:"Discard all Power Cards (from hand).",[Pn.Now]:async()=>{await e.clickToContinue(),await a.discardAllPowerCards()}}]}]})))))}]},Kf(!0),{name:"Tend to the Living Earth",dahanEvent:!0,effects:[{textArea:[.81,.921],text:"On Each Board with 5 or more <dahan>, Remove 1 <blight> in a land with <dahan>.",[Pn.Now]:({$:e})=>e.inBoardsWhere((a=>a.numberOf(e.Dahan)>=5)).forEach((a=>e.doDahanEventAction((()=>a.forPiecesThatIs(e.Blight,(a=>a.has(e.Dahan))).pickOne((async e=>{await e.location.removeBlight()}),{prompt:"Pick <blight> to Remove.",highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <blight> and <dahan>.`})),{board:a})),{noOptions:"No boards with 5 ore more <dahan>."})}]}]},ry={set:gn.NatureIncarnate,name:"Far-Off Wars Touch The Island",events:[{name:"Far Off Wars Touch The Island",fullText:["<i>Invaders from a different, distant land launch an assault upon the island while the Invaders here rally together in a wave of nationalism. Defending the island with them might come at too high a price.","<i><bullet> Add a Fear Card to the top of the Fear Deck","<i><bullet> On Each Board, in the land with the most <town>/<city>, choose (for that board) either:","Encourage the Destruction","<i><bullet> 4 <fear>. Destroy half of <town> (round up) and half of <city> (round up). Add 2 <blight> without cascading.","Blunt the Offensive","<i><bullet> Destroy 1 <town> but do not gain <fear>."],effects:[{textArea:[.269,.31],text:"Add a Fear Card to the top of the Fear Deck",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.doTokenEventAction((async()=>{await e.addFearCards(1).toLevel(e.terrorLevel)}))}},{textArea:[.298,.599],text:"On Each Board, in the land with the most <town>/<city>, choose (for that board) either:<br><br>Encourage the Destruction<or>Blunt the Offensive",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((a=>a.inLandsWithMost((a=>a.numberOf(e.TownOrCity))).pickOne((t=>e.chooseBetween({highlightBoards:[a],highlightLocations:[t],effects:[{actionId:"EncourageTheDestruction",label:"Encourage the Destruction",effects:[{textArea:[.432,.473],text:"4 <fear>.",[Pn.Now]:async()=>{await t.fear(4)}},{textArea:[.432,.513],text:"Destroy half of <town> (round up) and half of <city> (round up).",[Pn.Now]:async()=>{await t.destroy({amount:Math.ceil(t.numberOf(e.Town)/2),pieces:e.Town}),await t.destroy({amount:Math.ceil(t.numberOf(e.City)/2),pieces:e.City})}},{textArea:[.463,.503],text:"Add 2 <blight> without cascading.",[Pn.Now]:async()=>{await t.addBlight(2,{mayCascade:!1})}}]},{actionId:"BluntTheOffensive",label:"Blunt the Offensive",textArea:[.563,.604],text:"Destroy 1 <town> but do not gain <fear>.",[Pn.Now]:async()=>{await e.addEffectUntilEndOfAction({[Pn.PreventFearGeneration]:({fromDestroyingBuildings:e})=>Promise.resolve(e)}),await t.destroyOne(e.Town)}}]})),{autoPlayOneOption:!0,highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <town>/<city>.`})))}]},{name:"Ecosystem Damage",tokenEvent:!0,effects:[{textArea:[.654,.732],text:"On Each Board: Add 1 <badlands> to a land with <blight>.",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((a=>a.inLandsWith(e.Blight).pickOne((async a=>{await a.add(1,e.Badlands)}))),{selectOrder:!0})}]},Cf]},iy={set:gn.NatureIncarnate,name:"Focused Farming",events:[{name:"Focused Farming",blightStatus:lg.HealthyIsland,effects:[{textArea:[.112,.19],text:"On Each Board: Add 1 <explorer> and 1 <town> to land with <town>/<blight>.",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((a=>a.inLandsWhere((a=>a.hasOneOf(e.Town,e.Blight))).pickOne((async a=>{await a.add(1,e.Explorer),await a.add(1,e.Town)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No land with <town>/<blight>.`})))}]},{name:"Essence Disperses",blightStatus:lg.BlightedIsland,effects:[{textArea:[.368,.582],text:"Each Spirit chooses independently to:<br><br>Forget 1 Power Card.<or>Lose 2 Energy (to min. 0) and Destroy 1 <presence>. In the land where you destroyed <presence>, return 1 <blight> to the box (if possible).",[Pn.Now]:({$:e})=>e.eachSpirit((a=>e.doMainEventAction((()=>e.chooseBetween({effects:[{actionId:"ForgetPowerCard",label:"Forget 1 Power Card.",effects:[{textArea:[.398,.439],text:"Forget 1 Power Card.",[Pn.Now]:async()=>{await a.forgetPowers()}}]},{actionId:"DestroyPresence",label:"Lose Energy and Destroy <presence>.",effects:[{textArea:[.473,.582],text:"Lose 2 Energy (to min. 0) and Destroy 1 <presence>. In the land where you destroyed <presence>, return 1 <blight> to the box (if possible).",[Pn.Now]:async()=>{await a.loseEnergy(2);const e=await a.destroyPresence(1);e.length>0&&await e[0].location.removeBlight({toTheBox:!0})}}]}]})))))}]},xf,qf]},sy=async(e,a)=>{await e.addSubEffect({textArea:[.366,.442],text:"On Each Board: Skip the first Ravage Action (in one land matching the Ravage Card).",[Pn.Now]:async()=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.InfluxOfSettlers,text:`The first Ravage Action is skipped on Board ${a.name}.`,[Pn.GlobalReminder]:()=>({icon:`${a.name}: Skip<br>Ravage`}),[Pn.PreventInvaderActionInLand]:async({land:t,invaderAction:n})=>t.board===a&&n===qr.Ravage&&(await e.sendEvent({type:Tn.GenericSub,text:`The Ravage in land ${t.coordinateLink} was skipped from Lethargy and Degeneration.`}),e.removeThisEffect(),!0)})}})},oy=async(e,a)=>{await a.inLandsWith(e.TownOrCity).pickOne((async e=>{await e.addBlight(1)}),{textArea:[.407,.448],text:"Add 1 <blight> to a land with <town>/<city>.",highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <town>/<city>.`})},dy={set:gn.NatureIncarnate,name:"Influx Of Settlers",events:[{name:"Influx Of Settlers",blightStatus:lg.HealthyIsland,effects:[{textArea:[.116,.257],text:"On the single board with the most <town>/<city>: Add 1 <town> per player, split between as many different lands as possible. (This will usually be 1 <town> per chosen land.)",[Pn.Now]:({$:e})=>e.inBoards().withMost((a=>a.numberOf(e.TownOrCity))).pickOne((a=>a.inLands().inDifferent((a=>e.eachSpirit((()=>e.doMainEventAction((()=>a((async a=>{await a.add(1,e.Town)}))))))))))}]},{name:"Lethargy and Degeneration",blightStatus:lg.BlightedIsland,effects:[{textArea:[.371,.59],text:"On Each Board: Skip the first Ravage Action (in one land). Add 1 <blight> to a land with <town>/<city>.<br><br>Spirits may prevent either/both effects on any/all boards (choose per board) by Destroying 2 <presence> from each board to be protected.",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((a=>e.chooseBetween({highlightBoards:[a],effects:[{actionId:"LetBothHappen",textArea:[.371,.585],label:"Let both effects happen.",[Pn.Now]:async()=>{await sy(e,a),await oy(e,a)}},{actionId:"PreventRavage",label:"Prevent Ravage skip by Destroying 2 <presence>.",textArea:[.451,.587],[Pn.Now]:async()=>{await a.destroyPresence(2),await oy(e,a)},condition:()=>a.numberOf(e.Presence)>=2},{actionId:"PreventBlight",textArea:[.451,.587],label:"Prevent adding <blight> by Destroying 2 <presence>.",[Pn.Now]:async()=>{await a.destroyPresence(2),await sy(e,a)},condition:()=>a.numberOf(e.Presence)>=2},{actionId:"PreventBoth",textArea:[.451,.587],label:"Prevent both effect by Destroying 2 <presence>.",[Pn.Now]:async()=>{await a.destroyPresence(2)},condition:()=>a.numberOf(e.Presence)>=2}]})))}]},{name:"Sand Stalkers",tokenEvent:!0,effects:[{textArea:[.635,.743],text:"On Each Board: Add 1 <beasts> to the Sands with the most Invaders. 1 <fear> if Invaders are present there.",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((a=>a.inSands().withMost((a=>a.numberOf(e.Invader))).pickOne((async a=>{await a.add(1,e.Beasts),a.hasInvaders&&await a.fear(1)}))))}]},{name:"Network of Support and Trade",dahanEvent:!0,effects:[{textArea:[.835,.911],text:"When Invaders Ravage, if the land has <dahan>, Defend 1 + Defend 1 per adjacent <dahan>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.NetworkOfSupportAndTrade,[Pn.GlobalReminder]:()=>({icon:"Defend<br><dahan>"}),[Pn.DefendFromGame]:({land:a})=>a.has(e.Dahan)?1+a.inAdjacentLands().sum((e=>e.numberOfParticipatingDahan)):0})}}]}]},ly={set:gn.NatureIncarnate,name:"Search For Unclaimed Land",events:[{name:"Search For Unclaimed Land",blightStatus:lg.HealthyIsland,effects:[{textArea:[.115,.19],text:"On Each Board: Explore in the land with the fewest total Invaders/<dahan> (no source required).",[Pn.Now]:({$:e})=>e.doMainEventActionOnEachBoard((a=>a.inLandsWithLeast((a=>a.numberOf(e.InvaderOrDahan))).pickOne((async e=>{await e.doExtraExplore()}),{highlightBoards:[a],noOptions:`On board ${a.name}: No land with Invaders/<dahan>.`})))}]},{name:"Widespread Hunting",blightStatus:lg.BlightedIsland,effects:[{textArea:[.362,.585],text:"When <town>/<city> Ravage in a land:<br><bullet> If no <beasts> are present, Invaders do +2 Damage (total).<br><bullet> Otherwise, Destroy 1 <beasts>.<br><br>Do this at most once per board (for one Ravage Action in one land).",[Pn.Now]:async({$:e})=>{const a=[];await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.WidespreadHunting,[Pn.AlterInvaderActionInLand]:async({land:t,invaderAction:n,normal:r})=>(n===qr.Ravage&&r&&!a.includes(t.board)&&(a.push(t.board),t.has(e.Beasts)?await t.destroyOne(e.Beasts):await e.addSubEffectUntilEndOfAction({[Pn.AdjustCollectiveInvaderRavageDamage]:()=>2})),!1),[Pn.GlobalReminder]:()=>({icon:"Extra<br><damage>"})})}}]},{name:"Plagues in Populous Lands",tokenEvent:!0,effects:[{textArea:[.635,.74],text:"On Each Board: Add 1 <disease> to a land with 3 or more Invaders.",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((async a=>{await a.inLandsWhere((a=>a.numberOf(e.Invader)>=3)).pickOne((async a=>{await a.add(1,e.Disease)}),{noOptions:`On board ${a.name}: No land with 3 or more Invaders.`})}))}]},{name:"Spreading Conflict Prompts Caution",dahanEvent:!0,effects:[{textArea:[.827,.935],text:"On Each Board: Push up to 3 <dahan> from a land matching a Ravage card to a land not matching a Ravage card.",[Pn.Now]:({$:e})=>e.doDahanEventActionOnEachBoard((async a=>{await a.inLands().where((a=>a.has(e.Dahan)&&a.matchesInvaderCards(e.invaderCardsInVisibleSlot(ah.Ravage),qr.Ravage))).pickOne((async a=>{await a.push({amount:3,quantifier:ur.UpTo,pieces:e.Dahan,destinationFilter:a=>!a.matchesInvaderCards(e.invaderCardsInVisibleSlot(ah.Ravage),qr.Ravage)})}),{noOptions:`On board ${a.name}: No lands with <dahan> in a land matching a Ravage Card.`})}),{selectOrder:!0})}]}]},cy={set:gn.NatureIncarnate,name:"Terror Spikes Upwards",events:[{name:"Terror Spikes Upwards",terrorLevels:[1,2],effects:[{textArea:[.112,.306],text:"If you have any Earned Fear Cards, resolve the first one now as if the Terror Level were 1 higher (then discard it).<br><br>Otherwise, 1 <fear> per player. (Generated <fear> can't cause Final Harvest.)",[Pn.Now]:({$:e})=>e.doMainEventAction((async()=>{await e.clickToContinue(),e.fearCardsEarnedCount>0?await e.addSubEffect({textArea:[.112,.219],text:"If you have any Earned Fear Cards, resolve the first one now as if the Terror Level were 1 higher (then discard it).",[Pn.Now]:async()=>{await e.resolveNextFearCard({extraTerrorLevel:1})}}):await e.addSubEffect({textArea:[.236,.306],text:"Otherwise, 1 <fear> per player. (Generated <fear> can't cause Final Harvest.)",[Pn.Now]:async()=>{await e.fear(e.spiritCount)}})}))}]},{name:"Final Harvest",terrorLevels:[3],effects:[{textArea:[.37,.443],text:"Each <city> does +3 Damage during Ravage Actions.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.FinalHarvest,[Pn.GlobalReminder]:()=>({icon:"<city><br>+3 <damage>"}),[Pn.AdjustIndividualInvaderRavageDamage]:({piece:a})=>a.isA(e.City)?3:0})}},{textArea:[.462,.538],text:"After each Ravage Action, Remove 1 <town>/<city> from that land.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.FinalHarvest,[Pn.GlobalReminder]:()=>({icon:"Remove<br><town>/<city>"}),[Pn.AfterRavaging]:({land:a})=>e.doMainEventAction((async()=>{await a.remove({amount:1,pieces:e.TownOrCity})}))})}}]},{name:"Secure Settled Territory",tokenEvent:!0,effects:[{textArea:[.624,.769],text:"On Each Board: In a land with <badlands>/<beasts> and <town>/<city>: Destroy 1 <badlands>/<beasts>. 1 Damage to <dahan>. 1 Damage.",[Pn.Now]:({$:e})=>e.doTokenEventActionOnEachBoard((a=>e.countPiecesOnlyIfHavingPieces([Ln.Badlands,Ln.Beasts],(()=>a.inLandsWithAllOf(e.BadlandsOrBeasts,e.TownOrCity))).pickOne((async a=>{await e.addSubEffect({effects:[{textArea:[.696,.736],text:"Destroy 1 <badlands>/<beasts>.",[Pn.Now]:async()=>{await a.destroyOne(e.BadlandsOrBeasts)}},{textArea:[.696,.736],text:"1 Damage to <dahan>.",[Pn.Now]:async()=>{await a.damage(1,e.Dahan)}},{textArea:[.732,.772],text:"1 Damage.",[Pn.Now]:async()=>{await a.damage(1)}}]})}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <badlands>/<beasts> and <town>/<city>.`})),{selectOrder:!0})}]},{name:"War Among the Dahan",dahanEvent:!0,effects:[{textArea:[.811,.917],text:"On Each Board: In the land with the most <dahan> (min. 2), Push half the <dahan> (round down).",[Pn.Now]:({$:e})=>e.doDahanEventActionOnEachBoard((a=>a.inLands().where((a=>a.hasAtLeast(2,e.Dahan))).withMost((a=>a.numberOf(e.Dahan))).pickOne((async a=>{await a.push({amount:Math.floor(a.numberOf(e.Dahan)/2),pieces:e.Dahan})}),{noOptions:`On board ${a.name}: No lands with at least 2 <dahan>.`})),{selectOrder:!0})}]}]},hy={set:gn.NatureIncarnate,name:"Visions Out Of Time",events:[{name:"Visions Out Of Time",fullText:["<i>A Spirit more loosely time-moored than most warns of catastrophe's subtle seeds. Each Spirit chooses:","Let the Warning Waft into Day's Past","<i>Lose 1 Energy and replace your most expensive non-Unique Power Card in hand or discard pile (combined) with one of the same type: Reveal the top 4 cards of the deck, Take 1, put it where your card is, then put your card in that deck's discard.","Head off the Problems Yourself","<i>Add 1 Omen token (Scenario Marker) to the land without Omens that has the most Invaders (min. 1). After the Ravage Step next turn, at each Omen: 2 <fear>. Invaders Ravage. Remove 1 Omen."],effects:[{textArea:[.195,.601],text:"Each Spirit chooses:<br><br>Let the Warning Waft into Day's Past<or>Head off the Problems Yourself",[Pn.Now]:({$:e})=>e.eachSpirit((a=>e.doMainEventAction((()=>e.chooseBetween({effects:[{actionId:"LetTheWarningWaft",label:"Let the Warning Waft into Day's Past",textArea:[.232,.409],text:"Lose 1 Energy and replace your most expensive non-Unique Power Card in hand or discard pile (combined) with one of the same type: Reveal the top 4 cards of the deck, Take 1, put it where your card is, then put your card in that deck's discard.",[Pn.Now]:async()=>{await a.loseEnergy(1);const e=a.powersWhere((e=>e.isA(En.NonUniqueCard)&&(e.isInHand||e.isInDiscard))).withMost((e=>e.costToPlay));if(e.count>0){const t=e.anyOne.data.type===kn.Major,n=await a.gainPowerCard({powerType:t?kn.Major:kn.Minor,withoutForgetting:!0,taken:!0});n.chosen.length>0&&await e.pickOne((async e=>{e.isInDiscard&&await n.chosen[0].discard(),await e.forget({silent:!0})}))}}},{actionId:"HeadOffTheProblems",label:"Head off the Problems Yourself",effects:[{textArea:[.46,.599],text:"Add 1 Omen token (Scenario Marker) to the land without Omens that has the most Invaders (min. 1). After the Ravage Step next turn, at each Omen: 2 <fear>. Invaders Ravage. Remove 1 Omen.",[Pn.Now]:async()=>{const a=e.turn;await e.inLandsWithout(e.Omen).where((e=>e.hasInvaders)).withMost((a=>a.numberOf(e.Invader))).pickOne((async a=>{await a.add(1,e.Omen)})),e.hasEffectNamed("Head off the Problems Yourself")||await e.addSubEffect({name:"Head off the Problems Yourself",effectId:In.HeadOffTheProblems,[Pn.GlobalReminder]:()=>({icon:"Omen",visible:e.turn<=a+1}),[Pn.AfterTheNormalRavageStep]:async()=>{e.turn===a+1&&await e.inLandsWith(e.Omen).selectOrder().forEach((async a=>{await e.doMainEventAction((async()=>{await a.fear(2),await a.doExtraRavage(),await a.removeOne(e.Omen)}))}))}})}}]}]})))))}]},Of(!0),{name:"Strength from Trade",dahanEvent:!0,effects:[{textArea:[.804,.918],text:"Lands with <dahan> have Defend 2. In lands with <town>/<city> and no <dahan>, Ravage Actions do +1 Damage.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.StrengthFromTrade,[Pn.GlobalReminder]:()=>({icon:"Defend<br>+1 <damage>"}),[Pn.DefendFromGame]:({land:a})=>a.hasAtLeast(1,e.Dahan)?2:0,[Pn.AdjustCollectiveDahanRavageDamage]:({land:a})=>a.has(e.TownOrCity)&&a.doesntHave(e.Dahan)?1:0})}}]}]},uy={[nf.AccumulatedDevastation]:ay,[nf.AnOminousDawn]:ty,[nf.AStrangeMadnessAmongTheBeasts]:Og,[nf.BureaucratsAdjustFunding]:yf,[nf.CitiesRise]:mf,[nf.CivicEngagement]:vf,[nf.CoastalTownsMultiply]:bf,[nf.CulturalAssimilation]:Cg,[nf.DahanTradeWithTheInvaders]:Tf,[nf.DistantExploration]:Lg,[nf.EagerExplorers]:Af,[nf.EtherealConjunction]:ny,[nf.FarOffWarsTouchTheIsland]:ry,[nf.FarmersSeekTheDahanForAid]:Rg,[nf.FocusedFarming]:iy,[nf.Fortuneseekers]:If,[nf.GradualCorruption]:Pf,[nf.HardworkingSettlers]:Sf,[nf.HarvestBountyHarvestDust]:Ef,[nf.HeavyFarming]:Ng,[nf.InfluxOfSettlers]:dy,[nf.InterestingDiscoveries]:Wg,[nf.InvadersSurgeInland]:Gg,[nf.InvestedAristocracy]:kf,[nf.InvestigationOfDangers]:Ug,[nf.LesserSpiritsImperiled]:Df,[nf.LifesBalanceTilts]:Lf,[nf.MapmakersChartTheWild]:Ff,[nf.MissionariesArrive]:Hg,[nf.NewSpeciesSpread]:jg,[nf.NoBraveryWithoutNumbers]:Rf,[nf.NuminousCrisis]:Nf,[nf.Outpaced]:Vg,[nf.Overconfidence]:Wf,[nf.PopulationRises]:Jg,[nf.PromisingFarmland]:Yg,[nf.ProvincialSeat]:$f,[nf.PullTogetherInAdversity]:Gf,[nf.PuttingDownRoots]:Qg,[nf.RelentlessOptimism]:Uf,[nf.RemnantsOfASpiritsHeart]:Hf,[nf.ResourcefulPopulace]:jf,[nf.RisingInterestInTheIsland]:Xg,[nf.SacredSitesUnderThreat]:ef,[nf.SearchForNewLands]:af,[nf.SearchForUnclaimedLand]:ly,[nf.SeekNewFarmland]:_f,[nf.SeekingTheInterior]:tf,[nf.SlaveRebellion]:rf,[nf.SmallerPortsSpringUp]:Vf,[nf.SprawlContainedByTheWilds]:Jf,[nf.StrangeTalesAttractExplorers]:sf,[nf.TemporaryTruce]:zf,[nf.TerrorSpikesUpwards]:cy,[nf.TheFrontierCalls]:Yf,[nf.TheStrugglesOfGrowth]:Qf,[nf.ThrivingTrade]:Xf,[nf.TightknitCommunities]:df,[nf.UrbanDevelopment]:lf,[nf.VisionsOutOfTime]:hy,[nf.WarTouchesTheIslandsShores]:cf,[nf.WaveOfReconnaissance]:hf,[nf.WellpreparedExplorers]:uf,[nf.WoundedLandsAttractExplorers]:ey,[nf.YearsOfLittleRain]:gf};var gy=function(e,a,t,n){var r,i=arguments.length,s=i<3?a:null===n?n=Object.getOwnPropertyDescriptor(a,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,a,t,n);else for(var o=e.length-1;o>=0;o--)(r=e[o])&&(s=(i<3?r(s):i>3?r(a,t,s):r(a,t))||s);return i>3&&s&&Object.defineProperty(a,t,s),s};class fy{eventCardsInDeck;eventCardsInDiscard=[];lastSeenEventCard;static allEventCards=Object.keys(uy).filter((e=>!uy[e].banned));$;constructor(e){ed.makeObservable(this),this.$=e;const a=e.config.sets??Ig;this.eventCardsInDeck=new Ag(e,a.length===Ig.length?fy.allEventCards:fy.allEventCards.filter((e=>a.includes(uy[e].set)))),this.eventCardsInDeck.remove(nf.SlaveRebellion)}get activeEventCard(){return this.eventCardIsActive&&this.eventCardsInDiscard.length>0?this.eventCardsInDiscard[this.eventCardsInDiscard.length-1]:void 0}get eventCardAtIndexIsSpecial(){return e=>this.eventCardsInDeck.cardAt(e)===nf.SlaveRebellion}get eventCardIsActive(){return[Gi.AdvanceCards,Gi.Build,Gi.Event,Gi.Explore,Gi.Fear,Gi.HighImmigration,Gi.Ravage,Gi.SlowPowers].includes(this.$.phase)}async drawEventCard(){if(this.eventCardsInDeck.count>0){await this.$.setPhase(Gi.Event);const e=await this.eventCardsInDeck.draw();this.lastSeenEventCard=e,this.eventCardsInDiscard.push(e);const a=this.$.blightStatus,t=this.$.terrorLevel,n=this.$.stage;if(await this.$.sendEvent({type:Tn.DrawEventCard,eventCard:e}),await this.$.query({query:An.ClickToContinueCard,items:[e],actionIds:[e]}),this.$.turn>1&&this.$.randomEventsEnabled){const r=uy[e];for(const i of r.events){const{blightStatus:r,terrorLevels:s,stages:o}=i;this.$.gameEnded||void 0!==r&&a!==r||void 0!==s&&!s.includes(t)||void 0!==o&&!o.includes(n)||(await this.$.sendEvent({type:Tn.ResolveEventCard,eventData:i}),await this.$.addEffectUntilEndOfTurn({...i,card:e}))}await this.$.doEffects(Pn.AfterResolvingEventCard,{eventCard:e})}}}insertEventCard(e){return{underCards:a=>{this.eventCardsInDiscard.includes(e)&&Vr(this.eventCardsInDiscard,e),this.eventCardsInDeck.insert(e,a)}}}putBottomEventCardToTop(){if(!this.eventCardsInDeck.isEmpty){const e=this.eventCardsInDeck.removeCard(this.eventCardsInDeck.count-1);this.eventCardsInDeck.insertOneOf(e,0)}}putTopEventCardToBottom(){if(!this.eventCardsInDeck.isEmpty){const e=this.eventCardsInDeck.removeCard(0);this.eventCardsInDeck.insertOneOf(e,this.eventCardsInDeck.count)}}removeEventCardFromDiscard(e){this.eventCardsInDiscard.includes(e)&&Vr(this.eventCardsInDiscard,e)}async revealTopEventCard(){const e=await this.eventCardsInDeck.reveal(0);return null!==e&&await this.$.clickToContinue({card:e,text:`The top Event Card is ${uy[e].name}.`}),e}shuffleTopThreeEventCards(){return this.eventCardsInDeck.shuffleTopNCards([0,1,2],!0)}shuffleTopTwoEventCards(){return this.eventCardsInDeck.shuffleTopNCards([0,1],!0)}toString(){return Pg({eventCardsInDeck:this.eventCardsInDeck.count,eventCardsInDiscard:Yo(this.eventCardsInDiscard)},2)}}gy([De],fy.prototype,"eventCardsInDeck",void 0),gy([De],fy.prototype,"eventCardsInDiscard",void 0),gy([De],fy.prototype,"lastSeenEventCard",void 0);const yy={name:"Avoid the Dahan",set:gn.Base,levels:[{textArea:[.273,.36],text:"Invaders do not Explore into lands with at least 2 <dahan>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.AvoidTheDahanI,[Pn.GlobalReminder]:()=>({icon:"Skip<br>Explore"}),[Pn.PreventInvaderActionInLand]:({land:a,invaderAction:t})=>Promise.resolve(t===qr.Explore&&a.hasAtLeast(2,e.Dahan))})}},{textArea:[.549,.64],text:"Invaders do not Build in lands where <dahan> outnumber <town>/<city>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.AvoidTheDahanII,[Pn.GlobalReminder]:()=>({icon:"Skip<br>Build"}),[Pn.PreventInvaderActionInLand]:({land:a,invaderAction:t})=>Promise.resolve(t===qr.Build&&a.the(e.Dahan).outnumber(e.TownOrCity))})}},{textArea:[.854,.894],text:"Invaders do not Build in lands with <dahan>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.AvoidTheDahanIII,[Pn.GlobalReminder]:()=>({icon:"Skip<br>Build"}),[Pn.PreventInvaderActionInLand]:({land:a,invaderAction:t})=>Promise.resolve(t===qr.Build&&a.has(e.Dahan))})}}]},py={name:"Belief Takes Root",set:gn.Base,levels:[{textArea:[.296,.336],text:"Defend 2 in all lands with <presence>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.BeliefTakesRootI,[Pn.GlobalReminder]:()=>({icon:"Defend<br><presence>"}),[Pn.DefendFromGame]:({land:a})=>a.hasAtLeast(1,e.Presence)?2:0})}},{effects:[{textArea:[.538,.578],text:"Defend 2 in all lands with <presence>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.BeliefTakesRootII,[Pn.GlobalReminder]:()=>({icon:"Defend<br><presence>"}),[Pn.DefendFromGame]:({land:a})=>a.hasAtLeast(1,e.Presence)?2:0})}},{textArea:[.584,.669],text:"Each Spirit gains 1 Energy per <sacred> they have in lands with Invaders.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.eachSpirit((a=>e.doFearAction((async()=>{await a.gainEnergy(a.inLandsWhere((e=>e.hasSacredSiteOf(a)&&e.hasInvaders)).count)}))))}}]},{textArea:[.819,.949],text:"Each player chooses a different land and removes up to 2 Health worth of Invaders per <presence> there.",[Pn.Now]:async({$:e})=>{await e.inDifferentLands((a=>e.eachSpirit((()=>e.doFearAction((()=>a((async a=>{await a.removeInvadersWorthOfHealthUpTo(2*a.numberOf(e.Presence))}))))))))}}]},wy={name:"Dahan Enheartened",set:gn.Base,levels:[{textArea:[.252,.383],text:"Each player may Push 1 <dahan> from a land with Invaders or Gather 1 <dahan> into a land with Invaders.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.inLandsWhere((a=>a.hasInvaders&&a.hasOrIsAdjacentToLandsWith(e.Dahan))).optionallyPickOne((a=>e.forPiecesThatIs(e.Dahan,(e=>e.isAdjacentTo(a)||e===a)).pickOne((t=>e.doFearAction((async()=>{t.location===a?await t.push():await a.gather({pieces:e.Dahan,pieceFilter:e=>e===t,pickPiecesEffect:{autoPlayOneOption:!0}})}))),{text:"Push/Gather 1 <dahan> from/into this land.",highlightLocations:[a]})),{text:"Choose a land with Invaders.",noOptions:"No applicable lands."})))},{textArea:[.534,.664],text:"Each player chooses a different land. In chosen lands: Gather up to 2 <dahan>, then 1 Damage if <dahan> are present.",[Pn.Now]:({$:e})=>e.inDifferentLands((a=>e.eachSpirit((()=>e.doFearAction((()=>a((async a=>{await a.gatherUpTo(2,e.Dahan),a.has(e.Dahan)&&await a.damage(1)}))))))))},{textArea:[.817,.952],text:"Each player chooses a different land. In chosen lands: Gather up to 2 <dahan>, then 1 Damage per <dahan> present.",[Pn.Now]:({$:e})=>e.inDifferentLands((a=>e.eachSpirit((()=>e.doFearAction((()=>a((async a=>{await a.gatherUpTo(2,e.Dahan),a.has(e.Dahan)&&await a.damage(a.numberOf(e.Dahan))}))))))))}]},my={name:"Dahan On Their Guard",set:gn.Base,levels:[{textArea:[.296,.336],text:"In each land, Defend 1 per <dahan>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.DahanOnTheirGuardI,[Pn.GlobalReminder]:()=>({icon:"Defend<br><dahan>"}),[Pn.DefendFromGame]:({land:a})=>a.numberOf(e.Dahan)})}},{textArea:[.551,.638],text:"In each land with <dahan>, Defend 1, plus an additional Defend 1 per <dahan>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.DahanOnTheirGuardII,[Pn.GlobalReminder]:()=>({icon:"Defend<br><dahan>"}),[Pn.DefendFromGame]:({land:e})=>e.numberOfParticipatingDahan>0?1+e.numberOfParticipatingDahan:0})}},{textArea:[.858,.898],text:"In each land, Defend 2 per <dahan>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.DahanOnTheirGuardIII,[Pn.GlobalReminder]:()=>({icon:"Defend<br><dahan>"}),[Pn.DefendFromGame]:({land:e})=>2*e.numberOfParticipatingDahan})}}]},vy={name:"Dahan Raid",set:gn.Base,levels:[{textArea:[.279,.367],text:"Each player chooses a different land with <dahan>. 1 Damage there.",[Pn.Now]:({$:e})=>e.inLandsWith(e.Dahan).inDifferent((a=>e.eachSpirit((()=>e.doFearAction((()=>a((async e=>{await e.damage(1)}))))))),{noOptions:"No lands with <dahan>."})},{textArea:[.548,.636],text:"Each player chooses a different land with <dahan>. 1 Damage per <dahan> there.",[Pn.Now]:({$:e})=>e.inLandsWith(e.Dahan).inDifferent((a=>e.eachSpirit((()=>e.doFearAction((()=>a((async a=>{await a.damage(a.numberOf(e.Dahan))}))))))))},{textArea:[.837,.923],text:"Each player chooses a different land with <dahan>. 2 Damage per <dahan> there.",[Pn.Now]:({$:e})=>e.inLandsWith(e.Dahan).inDifferent((a=>e.eachSpirit((()=>e.doFearAction((()=>a((async a=>{await a.damage(2*a.numberOf(e.Dahan))}))))))),{noOptions:"No lands with <dahan>."})}]},xy={name:"Emigration Accelerates",set:gn.Base,levels:[{textArea:[.276,.364],text:"Each player removes 1 <explorer> from a Coastal land.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.Explorer,(e=>e.isCoastal)).pickOne((async e=>{await e.remove()}),{noOptions:"No Coastal lands with <explorer>."})))))},{textArea:[.549,.636],text:"Each player removes 1 <explorer>/<town> from a Coastal land.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.ExplorerOrTown,(e=>e.isCoastal)).pickOne((async e=>{await e.remove()}),{noOptions:"No Coastal lands with <explorer>/<town>."})))))},{textArea:[.834,.921],text:"Each player removes 1 <explorer>/<town> from any land.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.ExplorerOrTown).pickOne((async e=>{await e.remove()}),{noOptions:"No lands with <explorer>/<town>."})))))}]},by={name:"Fear Of The Unseen",set:gn.Base,levels:[{textArea:[.275,.363],text:"Each player removes 1 <explorer>/<town> from a land with <sacred>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.ExplorerOrTown,(e=>e.hasSacredSite)).pickOne((async e=>{await e.remove()}),{noOptions:"No lands with <sacred> and <explorer>/<town>."})))))},{textArea:[.548,.638],text:"Each player removes 1 <explorer>/<town> from a land with <presence>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.ExplorerOrTown,(a=>a.has(e.Presence))).pickOne((async e=>{await e.remove()}),{noOptions:"No lands with <explorer>/<town> and <presence>."})))))},{textArea:[.834,.924],text:"Each player removes 1 <explorer>/<town> from a land with <presence>, or 1 <city> from a land with <sacred>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesWhere((a=>a.isA(e.ExplorerOrTown)&&a.location.has(e.Presence)||a.isA(e.City)&&a.location.hasSacredSite)).pickOne((async e=>{await e.remove()}),{noOptions:"No applicable lands."})))))}]},Ty={name:"Isolation",set:gn.Base,levels:[{textArea:[.276,.361],text:"Each player removes 1 <explorer>/<town> from a land where it is the only Invader.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.ExplorerOrTown,(a=>a.hasExactly(1,e.Invader))).pickOne((async e=>{await e.remove()}),{noOptions:"No lands with <explorer>/<town> where it is the only Invader."})))))},{textArea:[.554,.64],text:"Each player removes 1 <explorer>/<town> from a land with 2 or fewer Invaders.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.ExplorerOrTown,(a=>a.hasAtMost(2,e.Invader))).pickOne((async e=>{await e.remove()}),{noOptions:"No lands with <explorer>/<town> with 2 or fewer Invaders."})))))},{textArea:[.837,.921],text:"Each player removes an Invader from a land with 2 or fewer Invaders.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.Invader,(a=>a.hasAtMost(2,e.Invader))).pickOne((async e=>{await e.remove()}),{noOptions:"No lands with 2 or fewer Invaders."})))))}]},Ay={name:"Overseas Trade SeemSafer",set:gn.Base,levels:[{textArea:[.296,.336],text:"Defend 3 in all Coastal lands.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.OverseasTradeSeemSaferI,[Pn.GlobalReminder]:()=>({icon:"Defend<br>Coastal"}),[Pn.DefendFromGame]:({land:e})=>e.isCoastal?3:0})}},{effects:[{textArea:[.552,.592],text:"Defend 6 in all Coastal lands.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.OverseasTradeSeemSaferII,[Pn.GlobalReminder]:()=>({icon:"Defend<br>Coastal"}),[Pn.DefendFromGame]:({land:e})=>e.isCoastal?6:0})}},{textArea:[.552,.638],text:"Invaders do not Build <city> in Coastal lands this turn.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.OverseasTradeSeemSaferII,[Pn.GlobalReminder]:()=>({icon:"Skip<br>Build"}),[Pn.PreventInvaderActionInLand]:({land:e,invaderAction:a})=>Promise.resolve(a===qr.Build&&e.isCoastal&&e.buildPlans===Xn.City)})}}]},{effects:[{textArea:[.838,.878],text:"Defend 9 in all Coastal lands.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.OverseasTradeSeemSaferIII,[Pn.GlobalReminder]:()=>({icon:"Defend<br>Coastal"}),[Pn.DefendFromGame]:({land:e})=>e.isCoastal?9:0})}},{textArea:[.838,.923],text:"Invaders do not Build in Coastal lands this turn.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.OverseasTradeSeemSaferIII,[Pn.GlobalReminder]:()=>({icon:"Skip<br>Build"}),[Pn.PreventInvaderActionInLand]:({land:e,invaderAction:a})=>Promise.resolve(a===qr.Build&&e.isCoastal&&e.buildPlans===Xn.City)})}}]}]},Iy={name:"Retreat!",set:gn.Base,levels:[{textArea:[.269,.364],text:"Each player may Push up to 2 <explorer> from an Inland land.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.inLandsWith(e.Explorer).where((e=>e.isInland)).optionallyPickOne((async a=>{await a.pushUpTo(2,e.Explorer)}),{noOptions:"No Inland lands with <explorer>."})))))},{textArea:[.549,.638],text:"Each player may Push up to 3 <explorer>/<town> from an Inland land.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.inLandsWith(e.ExplorerOrTown).where((e=>e.isInland)).optionallyPickOne((async a=>{await a.pushUpTo(3,e.ExplorerOrTown)}),{noOptions:"No Inland lands with <explorer>/<town>."})))))},{textArea:[.837,.923],text:"Each player may Push any number of <explorer>/<town> from one land.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.inLandsWith(e.ExplorerOrTown).optionallyPickOne((async a=>{await a.push({quantifier:ur.Any,pieces:e.ExplorerOrTown})}),{noOptions:"No lands with <explorer>/<town>."})))))}]},Py={name:"Scapegoats",set:gn.Base,levels:[{textArea:[.296,.336],text:"Each <town> destroys 1 <explorer> in its land.",[Pn.Now]:({$:e})=>e.inLandsWith(e.Town).selectOrder().forEach((a=>e.doFearAction((async()=>{await a.destroy({amount:a.numberOf(e.Town),pieces:e.Explorer})}),{land:a})),{noOptions:"No lands with <town>."})},{textArea:[.544,.647],text:"Each <town> destroys 1 <explorer> in its land. Each <city> destroys 2 <explorer> in its land.",[Pn.Now]:({$:e})=>e.inLandsWith(e.TownOrCity).selectOrder().forEach((a=>e.doFearAction((async()=>{await a.destroy({amount:a.numberOf(e.Town)+2*a.numberOf(e.City),pieces:e.Explorer})}),{land:a})),{noOptions:"No lands with <town>/<city>."})},{textArea:[.828,.932],text:"Destroy all <explorer> in lands with <town>/<city>. Each <city> destroys 1 <town> in its land.",[Pn.Now]:({$:e})=>e.inLandsWith(e.TownOrCity).selectOrder().forEach((a=>e.doFearAction((async()=>{await a.destroyAll(e.Explorer),await a.destroy({amount:a.numberOf(e.City),pieces:e.Town})}),{land:a})),{noOptions:"No lands with <town>/<city>."})}]},Sy={name:"Seek Safety",set:gn.Base,levels:[{textArea:[.256,.388],text:"Each player may Push 1 <explorer> into a land with more <town>/<city> than the land it came from.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.Explorer,(a=>a.hasAdjacentLandWhere((t=>t.numberOf(e.TownOrCity)>a.numberOf(e.TownOrCity))))).optionallyPickOne((async a=>{await a.push({amount:1,pieces:e.Explorer,destinationFilter:t=>t.numberOf(e.TownOrCity)>a.location.numberOf(e.TownOrCity)})}),{noOptions:"No applicable lands."})))))},{textArea:[.532,.676],text:"Each player may Gather 1 <explorer> into a land with <town>/<city>, or Gather 1 <town> into a land with <city>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.chooseBetween({effects:[{actionId:"GatherExplorer",text:"Gather 1 <explorer> into a land with <town>/<city>.",[Pn.Now]:()=>e.inLandsWith(e.TownOrCity).where((a=>a.hasAdjacentLandWhere((a=>a.has(e.Explorer))))).pickOne((async a=>{await a.gatherOne(e.Explorer)})),condition:()=>e.existLandWhere((a=>a.has(e.TownOrCity)&&a.hasAdjacentLandWhere((a=>a.has(e.Explorer)))))},{actionId:"GatherTown",text:"Gather 1 <town> into a land with <city>.",[Pn.Now]:()=>e.inLandsWith(e.City).where((a=>a.hasAdjacentLandWithPiece(e.Town))).pickOne((async a=>{await a.gatherOne(e.Town)})),condition:()=>e.existLandWhere((a=>a.has(e.City)&&a.hasAdjacentLandWithPiece(e.Town)))},{actionId:"Neither",text:"Neither."}]})))))},{textArea:[.819,.957],text:"Each player may remove up to 3 Health worth of Invaders from a land without <city>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.inLandsWhere((a=>a.has(e.ExplorerOrTown)&&a.doesntHave(e.City))).optionallyPickOne((async e=>{await e.removeInvadersWorthOfHealthUpTo(3)}),{noOptions:"No lands with Invader without <city>."})))))}]},Ey={name:"Tall Tales Of Savagery",set:gn.Base,levels:[{textArea:[.276,.365],text:"Each player removes 1 <explorer> from a land with <dahan>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.Explorer,(a=>a.has(e.Dahan))).pickOne((async e=>{await e.remove()}),{noOptions:"No lands with <dahan> and <explorer>."})))))},{textArea:[.549,.638],text:"Each player removes 2 <explorer> or 1 <town> from a land with <dahan>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((async()=>{await e.forPiecesThatIs(e.ExplorerOrTown,(a=>a.has(e.Dahan))).filteredByAnyInPriority((a=>a.location.hasAtLeast(2,e.Explorer)||a.location.has(e.Town)),(a=>a.location.hasAtLeast(1,e.Explorer))).pickOne((async a=>{await e.doFearAction((async()=>{const t=a.piece,n=a.location;await a.remove(),t===Ln.Explorer&&await n.removeOne(e.Explorer)}))}),{noOptions:"No applicable lands."})}))))},{effects:[{textArea:[.819,.911],text:"Remove 2 <explorer> or 1 <town> from each land with <dahan>.",[Pn.Now]:async({$:e})=>{await e.inLandsWith(e.Dahan).selectOrder().forEach((async a=>{await e.doFearAction((async()=>{await a.piecesThatAre(e.ExplorerOrTown).pickOne((async a=>{const t=a.piece,n=a.location;await a.remove(),t===Ln.Explorer&&await n.removeOne(e.Explorer)}))}))}),{noOptions:"No lands with <dahan>."})}},{textArea:[.868,.955],text:"Then, remove 1 <city> from each land with at least 2 <dahan>.",[Pn.Now]:async({$:e})=>{await e.inLandsWith(e.City).where((a=>a.hasAtLeast(2,e.Dahan))).forEach((async a=>{await e.doFearAction((async()=>{await a.removeOne(e.City)}))}),{noOptions:"No lands with <city> and at least 2 <dahan>."})}}]}]},Oy={name:"Trade Suffers",set:gn.Base,levels:[{textArea:[.305,.345],text:"Invaders do not Build in lands with <city>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.TradeSuffersI,[Pn.GlobalReminder]:()=>({icon:"Skip<br>Build"}),[Pn.PreventInvaderActionInLand]:({land:a,invaderAction:t})=>Promise.resolve(t===qr.Build&&a.has(e.City))})}},{textArea:[.549,.64],text:"Each player may replace 1 <town> with 1 <explorer> in a Coastal land.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.Town,(e=>e.isCoastal)).optionallyPickOne((async e=>{await e.replace([Ln.Explorer])}),{noOptions:"No Coastal lands with <town>."})))))},{textArea:[.832,.92],text:"Each player may replace 1 <city> with 1 <town>, or 1 <town> with 1 <explorer> in a Coastal land.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.TownOrCity,(e=>e.isCoastal)).optionallyPickOne((async e=>{await e.downgrade()}),{noOptions:"No Coastal lands with <town>."})))))}]},ky={name:"Wary Of The Interior",set:gn.Base,levels:[{textArea:[.273,.365],text:"Each player removes 1 <explorer> from an Inland land.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.Explorer,(e=>e.isInland)).pickOne((async e=>{await e.remove()}),{noOptions:"No Inland lands with <explorer>."})))))},{textArea:[.549,.636],text:"Each player removes 1 <explorer>/<town> from an Inland land.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.ExplorerOrTown,(e=>e.isInland)).pickOne((async e=>{await e.remove()}),{noOptions:"No Inland lands with <explorer>/<town>."})))))},{textArea:[.835,.924],text:"Each player removes 1 <explorer>/<town> from any land.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.ExplorerOrTown).pickOne((async e=>{await e.remove()}),{noOptions:"No lands with <explorer>/<town>."})))))}]},Cy={name:"Dahan Attack",set:gn.BranchAndClaw,levels:[{textArea:[.276,.361],text:"Each player removes 1 <explorer> from a land with <dahan>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.Explorer,(a=>a.has(e.Dahan))).pickOne((async e=>{await e.remove()}),{noOptions:"No lands with <dahan> and <explorer>."})))))},{textArea:[.552,.643],text:"Each player chooses a different land with <dahan>. 1 Damage per <dahan> there.",[Pn.Now]:({$:e})=>e.inLandsWith(e.Dahan).inDifferent((a=>e.eachSpirit((()=>e.doFearAction((()=>a((async a=>{await a.damage(a.numberOf(e.Dahan))}))))))),{noOptions:"No lands with <dahan>."})},{textArea:[.814,.946],text:"Each player chooses a different land with <town>/<city>. Gather 1 <dahan> into that land. Then 2 Damage per <dahan> there.",[Pn.Now]:({$:e})=>e.inLandsWith(e.TownOrCity).inDifferent((a=>e.eachSpirit((()=>e.doFearAction((()=>a((async a=>{await a.gatherOne(e.Dahan),await a.damage(2*a.numberOf(e.Dahan))}))))))),{noOptions:"No lands with <town>/<city>."})}]},Dy=({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.Invader,(a=>a.has(e.Dahan))).pickOne((async e=>{await e.addStrife()}),{noOptions:"No lands with <dahan> and Invaders."}))))),By={name:"Dahan Threaten",set:gn.BranchAndClaw,levels:[{textArea:[.288,.328],text:"Each player adds 1 <strife> in a land with <dahan>.",[Pn.Now]:Dy},{effects:[{textArea:[.534,.574],text:"Each player adds 1 <strife> in a land with <dahan>.",[Pn.Now]:Dy},{textArea:[.579,.666],text:"For the rest of this turn, Invaders have -1 Health per <strife> to a minimum of 1.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.invadersHaveMinusOneHealthPerStrife()}}]},{effects:[{textArea:[.838,.878],text:"Each player adds 1 <strife> in a land with <dahan>.",[Pn.Now]:Dy},{textArea:[.881,.921],text:"In every land with <strife>, 1 Damage per <dahan>.",[Pn.Now]:({$:e})=>e.inLandsWithStrife().where((a=>a.has(e.Dahan))).selectOrder().forEach((a=>e.doFearAction((async()=>{await a.damage(a.numberOf(e.Dahan))}),{land:a})),{noOptions:"No lands with <dahan> and <strife>."})}]}]},Ly={name:"Demoralized",set:gn.BranchAndClaw,levels:[{textArea:[.294,.334],text:"Defend 1 in all lands.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.DemoralizedI,[Pn.GlobalReminder]:()=>({icon:"Defend<br>1 to All"}),[Pn.DefendFromGame]:()=>1})}},{textArea:[.569,.609],text:"Defend 2 in all lands.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.DemoralizedII,[Pn.GlobalReminder]:()=>({icon:"Defend<br>2 to All"}),[Pn.DefendFromGame]:()=>2})}},{textArea:[.854,.894],text:"Defend 3 in all lands.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.DemoralizedIII,[Pn.GlobalReminder]:()=>({icon:"Defend<br>3 to All"}),[Pn.DefendFromGame]:()=>3})}}]},Fy={name:"Depart The DangerousLand",set:gn.BranchAndClaw,levels:[{textArea:[.269,.364],text:"Each player removes 1 <explorer> from a land with <beasts>, <disease>, or at least 2 <dahan>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.Explorer,(a=>a.hasOneOf(e.Beasts,e.Disease)||a.hasAtLeast(2,e.Dahan))).pickOne((async e=>{await e.remove()}),{noOptions:"No lands with <explorer> and <beasts>/<disease> or at least 2 <dahan>."})))))},{textArea:[.546,.633],text:"Each player removes 1 <explorer>/<town> from a land with <beasts>, <disease>, or at least 2 <dahan>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.ExplorerOrTown,(a=>a.hasOneOf(e.Beasts,e.Disease)||a.hasAtLeast(2,e.Dahan))).pickOne((async e=>{await e.remove()}),{noOptions:"No lands with <explorer>/<town> and <beasts>/<disease> or at least 2 <dahan>."})))))},{textArea:[.808,.939],text:"Each player removes up to 4 Health worth of Invaders from a land with <beasts>, <disease>, or at least 2 <dahan>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.inLandsWhere((a=>a.hasOneOf(e.Beasts,e.Disease)||a.hasAtLeast(2,e.Dahan))).pickOne((async e=>{await e.removeInvadersWorthOfHealthUpTo(4)}),{noOptions:"No lands with Invaders and <beasts>/<disease> or at least 2 <dahan>."})))))}]},Ry={name:"Explorers Are Reluctant",set:gn.BranchAndClaw,levels:[{textArea:[.252,.384],text:"During the next normal Explore, skip the lowest-numbered land matching the Invader Card on each board.",[Pn.Now]:async({$:e})=>{const a=[];await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.ExplorersAreReluctantI,[Pn.GlobalReminder]:()=>({icon:"Skip<br>Explore"}),[Pn.BeforeResolvingInvaderCard]:({invaderAction:t,card:n,normal:r})=>{if(r&&t===qr.Explore)for(const t of e.boards){const e=t.lowestNumberedLandMatching(n,qr.Explore);e&&a.push(e)}return Promise.resolve()},[Pn.PreventInvaderActionInLand]:({land:e})=>Promise.resolve(a.includes(e)),[Pn.AfterResolvingExploreCard]:()=>(e.removeThisEffect(),Promise.resolve())})}},{effects:[{textArea:[.529,.569],text:"Skip the next normal Explore.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.ExplorersAreReluctantII,[Pn.GlobalReminder]:()=>({icon:"Skip<br>Explore"}),[Pn.AdjustNumberOfExploreCards]:()=>-1,[Pn.SkipNextExploreCard]:()=>(e.removeThisEffect(),Promise.resolve(!0))})}},{textArea:[.529,.661],text:"During the next Invader Phase, draw an additional Explore Card.",[Pn.Now]:async({$:e})=>{const a=e.turn;await e.clickToContinue(),await e.addSubEffect({effectId:In.ExplorersAreReluctantII,highPriority:!0,[Pn.GlobalReminder]:()=>({icon:"Extra<br>Explore"}),[Pn.AdjustNumberOfExploreCards]:()=>e.turn===a+1?1:0,[Pn.AfterTheNormalExploreStep]:async()=>{e.turn===a+1&&(e.removeThisEffect(),await e.explore())}})}}]},{textArea:[.815,.946],text:"Skip the next normal Explore, but still reveal a card. (Perform the <escalation> if relevant.) Cards shift left as usual.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.ExplorersAreReluctantIII,[Pn.GlobalReminder]:()=>({icon:"Skip<br>Explore"}),[Pn.PreventInvaderActionInLand]:({invaderAction:e,normal:a})=>Promise.resolve(a&&e===qr.Explore),[Pn.AfterResolvingExploreCard]:()=>(e.removeThisEffect(),Promise.resolve())})}}]},My={name:"Flee The PestilentLand",set:gn.BranchAndClaw,levels:[{textArea:[.271,.358],text:"Each player removes 1 <explorer>/<town> from a land with <disease>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.ExplorerOrTown,(a=>a.has(e.Disease))).pickOne((async e=>{await e.remove()}),{noOptions:"No lands with <explorer>/<town> and <disease>."})))))},{textArea:[.534,.669],text:"Each player removes up to 3 Health of Invaders from a land with <disease> or 1 <explorer> from an Inland land.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.chooseBetween({noOptions:"No land with <disease> or Inland land with <explorer>.",effects:[{actionId:"RemoveFromDisease",textArea:[.534,.618],text:"Remove up to 3 Health of Invaders from a land with <disease>.",condition:()=>e.existLandWhere((a=>a.hasAllOf(e.Invader,e.Disease))),[Pn.Now]:()=>e.inLandsWithAllOf(e.Invader,e.Disease).pickOne((async e=>{await e.removeInvadersWorthOfHealthUpTo(3)}))},{actionId:"RemoveFromInland",textArea:[.624,.664],text:"Remove 1 <explorer> from an Inland land.",[Pn.Now]:()=>e.forPiecesThatIs(e.Explorer,(e=>e.isInland)).pickOne((async e=>{await e.remove()})),condition:()=>e.existLandWhere((a=>a.has(e.Explorer)&&a.isInland))}]})))))},{textArea:[.811,.949],text:"Each player removes up to 5 Health of Invaders from a land with <disease> or 1 <explorer>/<town> from an Inland land.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.chooseBetween({effects:[{actionId:"RemoveFromDisease",textArea:[.814,.9],text:"Remove up to 5 Health of Invaders from a land with <disease>.",condition:()=>e.existLandWhere((a=>a.hasInvaders&&a.has(e.Disease))),[Pn.Now]:()=>e.inLandsWhere((a=>a.hasInvaders&&a.has(e.Disease))).pickOne((async e=>{await e.removeInvadersWorthOfHealthUpTo(5)}))},{actionId:"RemoveFromInland",textArea:[.903,.943],text:"Remove 1 <explorer>/<town> from an Inland land.",[Pn.Now]:()=>e.forPiecesThatIs(e.ExplorerOrTown,(e=>e.isInland)).pickOne((async e=>{await e.remove()})),condition:()=>e.existLandWhere((a=>a.has(e.ExplorerOrTown)&&a.isInland))}]})))))}]},Ny={name:"Immigration Slows",set:gn.BranchAndClaw,levels:[{textArea:[.252,.384],text:"During the next normal Build, skip the lowest-numbered land matching the Invader Card on each board.",[Pn.Now]:async({$:e})=>{const a=[];await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.ImmigrationSlowsI,[Pn.GlobalReminder]:()=>({icon:"Skip<br>Build"}),[Pn.BeforeResolvingInvaderCard]:({invaderAction:t,card:n,normal:r})=>{if(r&&t===qr.Build)for(const t of e.boards){const e=t.lowestNumberedLandMatching(n,qr.Build);e&&a.push(e)}return Promise.resolve()},[Pn.PreventInvaderActionInLand]:({land:e})=>Promise.resolve(a.includes(e)),[Pn.AfterResolvingBuildCard]:()=>(e.removeThisEffect(),Promise.resolve())})}},{effects:[{textArea:[.555,.595],text:"Skip the next normal Build.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.ImmigrationSlowsII,[Pn.GlobalReminder]:()=>({text:"Skip the next normal Build.<br><br>The Build Card remains in place instead of shifting left.",icon:"Skip<br>Build"}),[Pn.SkipNextBuildCard]:()=>(e.removeThisEffect(),Promise.resolve(!0))})}},{textArea:[.555,.64],text:"The Build Card remains in place instead of shifting left.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.ImmigrationSlowsII,[Pn.BeforeAdvancingCards]:async()=>{await e.advanceCardsIn(ah.Explore).to(ah.Build),await e.advanceCardsIn(ah.Build).to(ah.Explore)}})}}]},{textArea:[.834,.919],text:"Skip the next normal Build. The Build Card shifts left as usual.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.ImmigrationSlowsIII,[Pn.GlobalReminder]:()=>({icon:"Skip<br>Build"}),[Pn.SkipNextBuildCard]:()=>(e.removeThisEffect(),Promise.resolve(!0))})}}]},Wy={name:"Panic",set:gn.BranchAndClaw,levels:[{textArea:[.271,.357],text:"Each player adds 1 <strife> in a land with <beasts>/<disease>/<dahan>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.Invader,(a=>a.hasOneOf(e.Beasts,e.Disease,e.Dahan))).pickOne((async e=>{await e.addStrife()}),{noOptions:"No lands with Invader and <beasts>/<disease>/<dahan>."})))))},{effects:[{textArea:[.513,.602],text:"Each player adds 1 <strife> in a land with <beasts>/<disease>/<dahan>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.Invader,(a=>a.hasOneOf(e.Beasts,e.Disease,e.Dahan))).pickOne((async e=>{await e.addStrife()}),{noOptions:"No lands with Invader and <beasts>/<disease>/<dahan>."})))))},{textArea:[.559,.689],text:"For the rest of this turn, Invaders have -1 Health per <strife> to a minimum of 1.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.invadersHaveMinusOneHealthPerStrife()}}]},{effects:[{textArea:[.819,.859],text:"Each player adds 1 <strife> to an Invader.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.Invader).pickOne((async e=>{await e.addStrife()}))))))},{textArea:[.863,.949],text:"For the rest of this turn, Invaders have -1 Health per <strife> to a minimum of 1.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.invadersHaveMinusOneHealthPerStrife()}}]}]},$y={name:"Panicked By Wild Beasts",set:gn.BranchAndClaw,levels:[{textArea:[.273,.361],text:"Each player adds 1 <strife> in a land with or adjacent to <beasts>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.Invader,(a=>a.hasOrIsAdjacentToLandsWith(e.Beasts))).pickOne((async e=>{await e.addStrife()}),{noOptions:"No lands with Invaders in or adjacent to a land with <beasts>."})))))},{effects:[{textArea:[.536,.62],text:"Each player adds 1 <strife> in a land with or adjacent to <beasts>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.forPiecesThatIs(e.Invader,(a=>a.hasOrIsAdjacentToLandsWith(e.Beasts))).pickOne((async e=>{await e.addStrife()}),{noOptions:"No lands with Invaders in or adjacent to a land with <beasts>."})))},{textArea:[.579,.666],text:"Invader skip their normal Explore and Build in lands with <beasts>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.PanickedByWildBeastsII,[Pn.GlobalReminder]:()=>({icon:"Skip<br><beasts>"}),[Pn.PreventInvaderActionInLand]:({land:a,invaderAction:t,normal:n})=>Promise.resolve(n&&[qr.Explore,qr.Build].includes(t)&&a.has(e.Beasts))})}}]},{effects:[{textArea:[.818,.903],text:"Each player adds 1 <strife> in a land with or adjacent to <beasts>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.Invader,(a=>a.hasOrIsAdjacentToLandsWith(e.Beasts))).pickOne((async e=>{await e.addStrife()}),{noOptions:"No lands with Invaders in or adjacent to a land with <beasts>."})))))},{textArea:[.864,.949],text:"Invader skip all normal Actions in lands with <beasts>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.PanickedByWildBeastsIII,[Pn.GlobalReminder]:()=>({icon:"Skip<br><beasts>"}),[Pn.PreventInvaderActionInLand]:({land:a,normal:t})=>Promise.resolve(t&&a.has(e.Beasts))})}}]}]},Gy={name:"Plan For Departure",set:gn.BranchAndClaw,levels:[{textArea:[.276,.361],text:"Each player may Gather 1 <town> into a Coastal land.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.inLandsWhere((a=>a.isCoastal&&a.hasAdjacentLandWithPiece(e.Town))).optionallyPickOne((async a=>{await a.gatherOne(e.Town)}),{noOptions:"No Coastal lands with adjacent <town>."})))))},{effects:[{textArea:[.534,.62],text:"Each player may Gather 1 <explorer>/<town> into a Coastal land.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.inLandsWhere((a=>a.isCoastal&&a.hasAdjacentLandWithPiece(e.ExplorerOrTown))).optionallyPickOne((async a=>{await a.gatherOne(e.ExplorerOrTown)}),{noOptions:"No Coastal lands with adjacent <explorer>/<town>."})))))},{textArea:[.579,.661],text:"Defend 2 in all Coastal lands.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.PlanForDepartureII,[Pn.GlobalReminder]:()=>({icon:"Defend<br>Coastal"}),[Pn.DefendFromGame]:({land:e})=>e.isCoastal?2:0})}}]},{effects:[{textArea:[.814,.899],text:"Each player may Gather 2 <explorer>/<town> into a Coastal land.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.inLandsWhere((a=>a.isCoastal&&a.hasAdjacentLandWithPiece(e.ExplorerOrTown))).optionallyPickOne((async a=>{await a.gatherUpTo(2,e.ExplorerOrTown)}),{noOptions:"No Coastal lands with adjacent <explorer>/<town>."})))))},{textArea:[.854,.946],text:"Defend 4 in all Coastal lands.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.PlanForDepartureIII,[Pn.GlobalReminder]:()=>({icon:"Defend<br>Coastal"}),[Pn.DefendFromGame]:({land:e})=>e.isCoastal?4:0})}}]}]},Uy={name:"Quarantine",set:gn.BranchAndClaw,levels:[{textArea:[.285,.325],text:"Explore does not affect Coastal lands.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.QuarantineI,[Pn.GlobalReminder]:()=>({icon:"Skip<br>Explore"}),[Pn.PreventInvaderActionInLand]:({land:e,invaderAction:a})=>Promise.resolve(a===qr.Explore&&e.isCoastal)})}},{effects:[{textArea:[.534,.574],text:"Explore does not affect Coastal lands.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.QuarantineII,[Pn.GlobalReminder]:()=>({icon:"Skip<br>Explore"}),[Pn.PreventInvaderActionInLand]:({land:e,invaderAction:a})=>Promise.resolve(a===qr.Explore&&e.isCoastal)})}},{textArea:[.572,.664],text:"Lands with <disease> are not a source of Invaders when Exploring.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.QuarantineII,[Pn.GlobalReminder]:()=>({icon:"<disease>"}),[Pn.PreventExploreSourceInLand]:({land:a})=>a.has(e.Disease)})}}]},{effects:[{textArea:[.837,.877],text:"Explore does not affect Coastal lands.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.QuarantineIII,[Pn.GlobalReminder]:()=>({icon:"Skip<br>Explore"}),[Pn.PreventInvaderActionInLand]:({land:e,invaderAction:a})=>Promise.resolve(a===qr.Explore&&e.isCoastal)})}},{textArea:[.883,.923],text:"Invaders do not act in lands with <disease>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.QuarantineIII,[Pn.GlobalReminder]:()=>({icon:"<disease>"}),[Pn.PreventInvaderActionInLand]:({land:a})=>Promise.resolve(a.has(e.Disease))})}}]}]},Hy={name:"Too Many Monsters",set:gn.BranchAndClaw,levels:[{textArea:[.278,.365],text:"Each player removes 1 <explorer>/<town> from a land with <beasts>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.ExplorerOrTown,(a=>a.has(e.Beasts))).pickOne((async e=>{await e.remove()}),{noOptions:"No lands with <explorer>/<town> and <beasts>."})))))},{textArea:[.532,.664],text:"Each player removes 1 <explorer> and 1 <town> from a land with <beasts> or 1 <explorer> from a land adjacent to <beasts>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesWhere((a=>a.isA(e.Explorer)&&(a.location.has(e.Beasts)||a.location.hasAdjacentLandWithPiece(e.Beasts))||a.isA(e.Town)&&a.location.has(e.Beasts))).pickOne((async a=>{const t=a.location,n=a.piece;await a.remove(),t.has(e.Beasts)&&await t.removeOne(n===Ln.Explorer?e.Town:e.Explorer)}),{noOptions:"No applicable lands."})))))},{textArea:[.814,.947],text:"Each player removes 2 <explorer> and 2 <town> from a land with <beasts> or 1 <explorer>/<town> from a land adjacent to <beasts>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.inLandsWhere((a=>a.hasAllOf(e.Beasts,e.ExplorerOrTown)||a.hasAdjacentLandWithPiece(e.Beasts)&&a.has(e.ExplorerOrTown))).pickOne((async a=>{a.has(e.Beasts)?(await a.remove({amount:2,pieces:e.Explorer}),await a.remove({amount:2,pieces:e.Town})):await a.removeOne(e.ExplorerOrTown)}),{noOptions:"No applicable lands."})))))}]},qy={name:"Tread Carefully",set:gn.BranchAndClaw,levels:[{textArea:[.252,.381],text:"Each player may choose a land with <dahan> or adjacent to at least 5 <dahan>. Invaders do not Ravage there this turn.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.inLandsWhere((a=>a.has(e.Dahan)||a.numberOfPiecesInAdjacentLands(e.Dahan)>=5)).pickOne((async e=>{await e.skipInvaderAction({text:"Invaders do not Ravage here this turn.",all:!0,filter:({invaderAction:e})=>e===qr.Ravage})}),{noOptions:"No lands with <dahan>."})))))},{textArea:[.529,.657],text:"Each player may choose a land with <dahan> or adjacent to at least 3 <dahan>. Invaders do not Ravage there this turn.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.inLandsWhere((a=>a.has(e.Dahan)||a.numberOfPiecesInAdjacentLands(e.Dahan)>=3)).pickOne((async e=>{await e.skipInvaderAction({text:"Invaders do not Ravage here this turn.",all:!0,filter:({invaderAction:e})=>e===qr.Ravage})}),{noOptions:"No lands with <dahan>."})))))},{textArea:[.812,.943],text:"Each player may choose a land with <dahan> or adjacent to <dahan>. Invaders do not Ravage there this turn.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.inLandsWithOrAdjacentTo(e.Dahan).pickOne((async e=>{await e.skipInvaderAction({text:"Invaders do not Ravage here this turn.",all:!0,filter:({invaderAction:e})=>e===qr.Ravage})}),{noOptions:"No lands with <dahan>."})))))}]},jy={name:"Unrest",set:gn.BranchAndClaw,levels:[{textArea:[.289,.329],text:"Each player adds 1 <strife> to a <town>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.Town).pickOne((async e=>{await e.addStrife()}),{noOptions:"No lands with <town>."})))))},{effects:[{textArea:[.536,.576],text:"Each player adds 1 <strife> to a <town>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.Town).pickOne((async e=>{await e.addStrife()}),{noOptions:"No lands with <town>."})))))},{textArea:[.577,.664],text:"For the rest of this turn, Invaders have -1 Health per <strife> to a minimum of 1.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.invadersHaveMinusOneHealthPerStrife()}}]},{effects:[{textArea:[.821,.861],text:"Each player adds 1 <strife> to an Invader.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.Invader).pickOne((async e=>{await e.addStrife()}),{noOptions:"No lands with Invaders."})))))},{textArea:[.865,.95],text:"For the rest of this turn, Invaders have -1 Health per <strife> to a minimum of 1.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.invadersHaveMinusOneHealthPerStrife()}}]}]},_y={name:"Angry Mobs",set:gn.FeatherAndFlame,levels:[{textArea:[.272,.363],text:"Each player may Replace 1 <town> with 2 <explorer>. 1 <fear> per player who does.",[Pn.Now]:({$:e})=>e.eachSpirit((async()=>{await e.doFearAction((async()=>{await e.forPiecesThatIs(e.Town).optionallyPickOne((async e=>{const a=e.location;await e.replace([Ln.Explorer,Ln.Explorer]),await a.fear(1)}),{noOptions:"No lands with <town>."})}))}))},{textArea:[.549,.643],text:"In each land with 2 or more <explorer>, Destroy 1 <explorer>/<town> per 2 <explorer>.",[Pn.Now]:({$:e})=>e.inLandsWhere((a=>a.hasAtLeast(2,e.Explorer))).selectOrder().forEach((a=>e.doFearAction((async()=>{await a.destroy({amount:a.forEvery(2,e.Explorer),pieces:e.ExplorerOrTown})}),{land:a})),{noOptions:"No lands with at least 2 <explorer>."})},{textArea:[.831,.916],text:"In each land with 2 or more <explorer>, Destroy 1 Invader per 2 <explorer>.",[Pn.Now]:({$:e})=>e.inLandsWhere((a=>a.hasAtLeast(2,e.Explorer))).selectOrder().forEach((a=>e.doFearAction((async()=>{await a.destroy({amount:a.forEvery(2,e.Explorer),pieces:e.Invader})}),{land:a})),{noOptions:"No lands with at least 2 <explorer>."})}]},Vy={name:"Communities In Disarray",set:gn.FeatherAndFlame,levels:[{effects:[{textArea:[.262,.302],text:"<city> each deal -1 Damage during Ravage.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.CommunitiesInDisarrayI,[Pn.GlobalReminder]:()=>({icon:"<city><br>-1 <damage>"}),[Pn.AdjustIndividualInvaderRavageDamage]:({piece:a})=>a.isA(e.City)?-1:0})}},{textArea:[.306,.387],text:"Invaders do not heal Damage at the end of this turn.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.CommunitiesInDisarrayI,[Pn.GlobalReminder]:()=>({icon:"Prevent<br>Heal"}),[Pn.PreventClearDamage]:({piece:e})=>e.isInvader})}}]},{effects:[{textArea:[.536,.621],text:"<town>/<city> each deal -1 Damage during Ravage.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.CommunitiesInDisarrayII,[Pn.GlobalReminder]:()=>({icon:"<town>/<city><br>-1 <damage>"}),[Pn.AdjustIndividualInvaderRavageDamage]:({piece:a})=>a.isA(e.TownOrCity)?-1:0})}},{textArea:[.579,.664],text:"Invaders do not heal Damage at the end of this turn.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.CommunitiesInDisarrayII,[Pn.GlobalReminder]:()=>({icon:"Prevent<br>Heal"}),[Pn.PreventClearDamage]:({piece:e})=>e.isInvader})}}]},{effects:[{textArea:[.821,.906],text:"<town>/<city> each deal -2 Damage during Ravage.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.CommunitiesInDisarrayIII,[Pn.GlobalReminder]:()=>({icon:"<town>/<city><br>-2 <damage>"}),[Pn.AdjustIndividualInvaderRavageDamage]:({piece:a})=>a.isA(e.TownOrCity)?-2:0})}},{textArea:[.867,.953],text:"Invaders do not heal Damage at the end of this turn.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.CommunitiesInDisarrayIII,[Pn.GlobalReminder]:()=>({icon:"Prevent<br>Heal"}),[Pn.PreventClearDamage]:({piece:e})=>e.isInvader})}}]}]},Jy={name:"Depopulation",set:gn.FeatherAndFlame,levels:[{textArea:[.296,.336],text:"On Each Board: Replace 1 <town> with 1 <explorer>.",[Pn.Now]:({$:e})=>e.onEachBoard((a=>e.doFearAction((()=>a.forPiecesThatIs(e.Town).pickOne((async e=>{await e.replace([Ln.Explorer])}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <town>.`})),{board:a})))},{textArea:[.572,.612],text:"On Each Board: Remove 1 <town>.",[Pn.Now]:({$:e})=>e.onEachBoard((a=>e.doFearAction((()=>a.forPiecesThatIs(e.Town).pickOne((async e=>{await e.remove()}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <town>.`})),{board:a})))},{textArea:[.841,.929],text:"On Each Board: Remove 1 <town>, or replace 1 <city> with <town>.",[Pn.Now]:({$:e})=>e.onEachBoard((a=>a.forPiecesThatIs(e.TownOrCity).pickOne((a=>e.doFearAction((async()=>{a.isA(e.Town)?await a.remove():await a.replace([Ln.Town])}))),{highlightBoards:[a],noOptions:`On board ${a.name}: No <town>/<city>.`})))}]},zy={name:"Discord",set:gn.FeatherAndFlame,levels:[{textArea:[.272,.355],text:"Each player adds 1 <strife> in a different land with at least 2 Invaders.",[Pn.Now]:({$:e})=>e.inLands().where((a=>a.hasAtLeast(2,e.Invader))).inDifferent((a=>e.eachSpirit((()=>e.doFearAction((()=>a((async e=>{await e.addStrife(1)}))))))),{noOptions:"No lands with at least 2 Invaders."})},{effects:[{textArea:[.534,.623],text:"Each player adds 1 <strife> in a different land with at least 2 Invaders.",[Pn.Now]:({$:e})=>e.inLands().where((a=>a.hasAtLeast(2,e.Invader))).inDifferent((a=>e.eachSpirit((()=>e.doFearAction((()=>a((async e=>{await e.addStrife(1)}))))))),{noOptions:"No lands with at least 2 Invaders."})},{textArea:[.577,.664],text:"Then, each Invader takes 1 Damage per <strife> it has.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.inLandsWithStrife().forEach((a=>e.doFearAction((()=>a.piecesWithStrife().forEach((async e=>{await e.damageOnlyThis(e.strife)}))),{land:a})),{noOptions:"No lands with <strife>."})}}]},{effects:[{textArea:[.801,.886],text:"Each player adds 1 <strife> in a different land with at least 2 Invaders.",[Pn.Now]:({$:e})=>e.inLands().where((a=>a.hasAtLeast(2,e.Invader))).inDifferent((a=>e.eachSpirit((()=>e.doFearAction((()=>a((async e=>{await e.addStrife(1)}))))))),{noOptions:"No lands with at least 2 Invaders."})},{textArea:[.842,.967],text:"Then, each Invader with <strife> deals Damage to other Invaders in its land.",[Pn.Now]:({$:e})=>e.inLandsWithStrife().selectOrder().forEach((a=>e.doFearAction((async()=>{await a.piecesWithStrifeDealsDamageToOtherInvaders()}),{land:a})),{noOptions:"No Invader with <strife>."})}]}]},Yy={name:"Mimic The Dahan",set:gn.FeatherAndFlame,levels:[{textArea:[.268,.357],text:"Each player Removes 1 <explorer>/<town> from a land with 2 or more <dahan>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.ExplorerOrTown,(a=>a.hasAtLeast(2,e.Dahan))).pickOne((async e=>{await e.remove()}),{noOptions:"No lands with <explorer>/<town> with 2 or more <dahan>."})))))},{textArea:[.554,.641],text:"Each player Replaces 1 <explorer>/<town> with 1 <dahan> in a land with 2 or more <dahan>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.ExplorerOrTown,(a=>a.hasAtLeast(2,e.Dahan))).pickOne((async e=>{await e.replace([Ln.Dahan])}),{noOptions:"No lands with <explorer>/<town> with 2 or more <dahan>."})))))},{textArea:[.818,.944],text:"Each player Replaces 1 <explorer>/<town> with 1 <dahan> in a land with <dahan>, or adjacent to 3 or more <dahan>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.ExplorerOrTown,(a=>a.has(e.Dahan)||a.numberOfPiecesInAdjacentLands(e.Dahan)>=3)).pickOne((async e=>{await e.replace([Ln.Dahan])}),{noOptions:"No lands with <explorer>/<town> with <dahan> or adjacent to 3 or more <dahan>."})))))}]},Ky={name:"Spreading Timidity",set:gn.FeatherAndFlame,levels:[{textArea:[.291,.331],text:"Each player chooses a land to Isolate.",[Pn.Now]:({$:e})=>e.inDifferentLands((a=>e.eachSpirit((()=>e.doFearAction((()=>a((async e=>{await e.isolate()}))))))))},{textArea:[.552,.637],text:"Each player chooses a different land to Isolate. Also, Defend 2 in those lands.",[Pn.Now]:({$:e})=>e.inDifferentLands((a=>e.eachSpirit((()=>e.doFearAction((()=>a((async e=>{await e.isolate(),await e.defend(2)}))))))))},{textArea:[.831,.923],text:"Each player chooses a different land to Isolate. Also, Defend 4 in those lands.",[Pn.Now]:({$:e})=>e.inDifferentLands((a=>e.eachSpirit((()=>e.doFearAction((()=>a((async e=>{await e.isolate(),await e.defend(4)}))))))))}]},Qy={name:"Beset By Many Troubles",set:gn.JaggedEarth,levels:[{textArea:[.278,.363],text:"In each land with <badlands>/<beasts>/<disease>/<wilds>/<strife>, Defend 3.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.BesetByManyTroublesI,[Pn.GlobalReminder]:()=>({icon:"Defend"}),[Pn.DefendFromGame]:({land:a})=>a.has(e.BadlandsBeastsDiseaseOrWilds)||a.hasStrife?3:0})}},{textArea:[.555,.641],text:"In each land with <badlands>/<beasts>/<disease>/<wilds>/<strife>, or adjacent to 3 or more such tokens, Defend 5.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.BesetByManyTroublesII,[Pn.GlobalReminder]:()=>({icon:"Defend"}),[Pn.DefendFromGame]:({land:a})=>a.has(e.BadlandsBeastsDiseaseOrWilds)||a.hasStrife||a.numberOfPiecesInAdjacentLands(e.BadlandsBeastsDiseaseOrWilds)+a.adjacentNumberOfStrife>=3?5:0})}},{textArea:[.831,.919],text:"Every <badlands>/<beasts>/<disease>/<wilds>/<strife> grants Defend 3 in its land and adjacent lands.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.BesetByManyTroublesIII,[Pn.GlobalReminder]:()=>({icon:"Defend"}),[Pn.DefendFromGame]:({land:a})=>3*(a.numberOf(e.BadlandsBeastsDiseaseOrWilds)+a.numberOfStrife+a.numberOfPiecesInAdjacentLands(e.BadlandsBeastsDiseaseOrWilds)+a.adjacentNumberOfStrife)})}}]},Xy={name:"Dahan Reclaim Fishing Grounds",set:gn.JaggedEarth,levels:[{textArea:[.255,.388],text:"Each player chooses a different Coastal land with <dahan>. In each: 1 Damage per <dahan>.",[Pn.Now]:({$:e})=>e.inCoastalLands().where((a=>a.has(e.Dahan))).inDifferent((a=>e.eachSpirit((()=>e.doFearAction((()=>a((async a=>{await a.damage(a.numberOf(e.Dahan))}))))))),{noOptions:"No Coastal lands with <dahan>."})},{textArea:[.534,.664],text:"Each player chooses a different Coastal land. In each: Gather up to 1 <dahan>. 1 Damage per <dahan>.",[Pn.Now]:({$:e})=>e.inCoastalLands().inDifferent((a=>e.eachSpirit((()=>e.doFearAction((()=>a((async a=>{await a.gatherUpTo(1,e.Dahan),await a.damage(a.numberOf(e.Dahan))}))))))))},{textArea:[.818,.952],text:"Each player chooses a different Coastal land. In each: Gather up to 1 <dahan>. 2 Damage per <dahan>.",[Pn.Now]:({$:e})=>e.inCoastalLands().inDifferent((a=>e.eachSpirit((()=>e.doFearAction((()=>a((async a=>{await a.gatherUpTo(1,e.Dahan),await a.damage(2*a.numberOf(e.Dahan))}))))))))}]},Zy={name:"Flee From Dangerous Lands",set:gn.JaggedEarth,levels:[{textArea:[.273,.365],text:"On Each Board: Push 1 <explorer>/<town> from a land with <badlands>/<wilds>/<dahan>.",[Pn.Now]:({$:e})=>e.onEachBoard((a=>e.doFearAction((()=>a.forPiecesThatIs(e.ExplorerOrTown,(a=>a.hasOneOf(e.Badlands,e.Wilds,e.Dahan))).pickOne((async e=>{await e.push()}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <explorer>/<town> in a land with <badlands>/<wilds>/<dahan>.`})),{board:a})))},{textArea:[.555,.641],text:"On Each Board: Remove 1 <explorer>/<town> from a land with <badlands>/<wilds>/<dahan>.",[Pn.Now]:({$:e})=>e.onEachBoard((a=>e.doFearAction((()=>a.forPiecesThatIs(e.ExplorerOrTown,(a=>a.hasOneOf(e.Badlands,e.Wilds,e.Dahan))).pickOne((async e=>{await e.remove()}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with <explorer>/<town> in a land with <badlands>/<wilds>/<dahan>.`})),{board:a})))},{textArea:[.814,.946],text:"On Each Board: Remove 1 <explorer>/<town> from any land, or Remove 1 <city> from a land with <badlands>/<wilds>/<dahan>.",[Pn.Now]:({$:e})=>e.onEachBoard((a=>e.doFearAction((()=>a.forPiecesWhere((a=>a.isA(e.ExplorerOrTown)||a.isA(e.City)&&a.location.hasOneOf(e.Badlands,e.Wilds,e.Dahan))).pickOne((async e=>{await e.remove()}),{highlightBoards:[a],noOptions:`On board ${a.name}: No applicable lands.`})),{board:a})))}]},ep={name:"Nerves Fray",set:gn.JaggedEarth,levels:[{textArea:[.276,.364],text:"Each player adds 1 <strife> in a land not matching a Ravage Card.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.Invader,(a=>!a.matchesInvaderCards(e.invaderCardsInVisibleSlot(ah.Ravage),qr.Ravage))).pickOne((async e=>{await e.addStrife()}),{noOptions:"No lands with Invaders not matching a Ravage Card."})))))},{textArea:[.558,.644],text:"Each player adds 2 <strife> in a single land not matching a Ravage Card.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.inLandsWith(e.Invader).where((a=>!a.matchesInvaderCards(e.invaderCardsInVisibleSlot(ah.Ravage),qr.Ravage))).pickOne((async e=>{await e.addStrife(2)}),{noOptions:"No lands with Invaders not matching a Ravage Card."})))))},{effects:[{textArea:[.817,.904],text:"Each player adds 2 <strife> in a single land not matching a Ravage Card.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.inLandsWith(e.Invader).where((a=>!a.matchesInvaderCards(e.invaderCardsInVisibleSlot(ah.Ravage),qr.Ravage))).pickOne((async e=>{await e.addStrife(2)}),{noOptions:"No lands with Invaders not matching a Ravage Card."})))))},{textArea:[.907,.947],text:"1 <fear> per player.",[Pn.Now]:async({$:e})=>{await e.clickToContinue({noOptions:`${e.spiritCount} player${e.spiritCount>1?"s":""} = ${e.spiritCount} <fear>.`}),await e.doFearAction((async()=>{await e.fear(e.spiritCount)}))}}]}]},ap={name:"Sense Of Dread",set:gn.JaggedEarth,levels:[{textArea:[.269,.367],text:"On Each Board: Remove 1 <explorer> from a land matching a Ravage Card.",[Pn.Now]:({$:e})=>e.onEachBoard((a=>e.doFearAction((()=>a.forPiecesThatIs(e.Explorer).where((a=>a.location.matchesInvaderCards(e.invaderCardsInVisibleSlot(ah.Ravage),qr.Ravage))).pickOne((async e=>{await e.remove()}),{highlightBoards:[a],noOptions:`On board ${a.name}: No land with <explorer> in a land matching a Ravage Card.`})),{board:a})))},{textArea:[.552,.641],text:"On Each Board: Remove 1 <explorer>/<town> from a land matching a Ravage Card.",[Pn.Now]:({$:e})=>e.onEachBoard((a=>e.doFearAction((()=>a.forPiecesThatIs(e.ExplorerOrTown).where((a=>a.location.matchesInvaderCards(e.invaderCardsInVisibleSlot(ah.Ravage),qr.Ravage))).pickOne((async e=>{await e.remove()}),{highlightBoards:[a],noOptions:`On board ${a.name}: No land with <explorer>/<town> in a land matching a Ravage Card.`})),{board:a})))},{textArea:[.831,.917],text:"On Each Board: Remove 1 Invader from a land matching a Ravage Card.",[Pn.Now]:({$:e})=>e.onEachBoard((a=>e.doFearAction((()=>a.forPiecesThatIs(e.Invader).where((a=>a.location.matchesInvaderCards(e.invaderCardsInVisibleSlot(ah.Ravage),qr.Ravage))).pickOne((async e=>{await e.remove()}),{highlightBoards:[a],noOptions:`On board ${a.name}: No land with Invader in a land matching a Ravage Card.`})),{board:a})))}]},tp={name:"Theological Strife",set:gn.JaggedEarth,levels:[{textArea:[.302,.342],text:"Each player adds 1 <strife> in a land with <presence>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.Invader,(a=>a.has(e.Presence))).pickOne((async e=>{await e.addStrife()}),{noOptions:"No Invaders in a land with <presence>."})))))},{effects:[{textArea:[.538,.578],text:"Each player adds 1 <strife> in a land with <presence>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.Invader,(a=>a.has(e.Presence))).pickOne((async e=>{await e.addStrife()}),{noOptions:"No Invaders in a land with <presence>."})))))},{textArea:[.582,.664],text:"Each Spirit gains 1 Energy per <sacred> they have in lands with Invaders.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.eachSpirit((a=>e.doFearAction((async()=>{await a.gainEnergy(a.inSacredSites().where((e=>e.hasInvaders)).count)}))))}}]},{effects:[{textArea:[.818,.858],text:"Each player adds 1 <strife> in a land with <presence>.",[Pn.Now]:({$:e})=>e.eachSpirit((()=>e.doFearAction((()=>e.forPiecesThatIs(e.Invader,(a=>a.has(e.Presence))).pickOne((async e=>{await e.addStrife()}),{noOptions:"No Invaders in a land with <presence>."})))))},{textArea:[.863,.95],text:"Then, each Invader with <strife> deals Damage to other Invaders in its land.",[Pn.Now]:({$:e})=>e.inLandsWithStrife().selectOrder().forEach((a=>e.doFearAction((async()=>{await a.piecesWithStrifeDealsDamageToOtherInvaders()}),{land:a})),{noOptions:"No Invader with <strife>"})}]}]},np=({$:e})=>e.onEachBoard((a=>e.doFearAction((()=>a.forPiecesThatIs(e.TownOrCity).where((a=>!a.location.matchesInvaderCards(e.invaderCardsInVisibleSlot(ah.Ravage),qr.Ravage))).pickOne((async e=>{await e.addStrife()}),{highlightBoards:[a],noOptions:`On board ${a.name}: No land with <town>/<city> in a land not matching a Ravage Card.`})),{board:a}))),rp=async({$:e})=>{await e.clickToContinue(),await e.inLandsWithStrife().forEach((a=>e.doFearAction((()=>a.piecesWithStrife().forEach((async e=>{await e.damageOnlyThis(e.strife)}))),{land:a})),{noOptions:"No lands with <strife>."})},ip={name:"Civil Unrest",set:gn.NatureIncarnate,levels:[{textArea:[.284,.373],text:"On Each Board: Add 1 <strife> to a <town>/<city> in a land not matching a Ravage Card.",[Pn.Now]:np},{effects:[{textArea:[.534,.629],text:"On Each Board: Add 1 <strife> to a <town>/<city> in a land not matching a Ravage Card.",[Pn.Now]:np},{textArea:[.632,.673],text:"Each Invader takes 1 Damage per <strife> it has.",[Pn.Now]:rp}]},{effects:[{textArea:[.826,.866],text:"On Each Board: Add 1 <strife>.",[Pn.Now]:({$:e})=>e.onEachBoard((a=>e.doFearAction((()=>a.forPiecesThatIs(e.Invader).pickOne((async e=>{await e.addStrife()}),{highlightBoards:[a],noOptions:`On board ${a.name}: No land with Invaders.`})),{board:a})))},{textArea:[.865,.905],text:"Each Invader takes 1 Damage per <strife> it has.",[Pn.Now]:rp}]}]},sp=(e,a)=>({$:t})=>t.inLandsWith(t.Dahan).inDifferent((n=>t.eachSpirit((r=>t.doFearAction((()=>n((async t=>{e>0&&await t.damage(e),await t.defend(a)}))),{spirit:r})))),{noOptions:"No lands with <dahan>."}),op={name:"Dahan Gain The Edge",set:gn.NatureIncarnate,levels:[{textArea:[.267,.354],text:"Each player chooses a different land with <dahan>. In Each: Defend 2.",[Pn.Now]:sp(0,2)},{textArea:[.546,.638],text:"Each player chooses a different land with <dahan>. In Each: 1 Damage and Defend 3.",[Pn.Now]:sp(1,3)},{textArea:[.829,.916],text:"Each player chooses a different land with <dahan>. In Each: 2 Damage and Defend 4.",[Pn.Now]:sp(2,4)}]},dp=async({$:e})=>{const a=e.inBoardsWhere((a=>a.hasOneLandWith(e.Invader)&&a.hasOneLandWith(e.Dahan))).count;await e.clickToContinue({noOptions:`${a} board${a>1?"s":""} = ${a} <fear>.`}),await e.doFearAction((async()=>{await e.fear(a)}))},lp=async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.DauntedByTheDahan,text:"Invaders do -6 Damage on their Ravage.",[Pn.GlobalReminder]:()=>({icon:"-6 <damage><br>to <dahan>"}),[Pn.AdjustCollectiveInvaderRavageDamage]:e=>!1===e.towardsLand?-6:0})},cp=async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.DauntedByTheDahan,[Pn.GlobalReminder]:()=>({icon:"Defend"}),[Pn.DefendFromGame]:({land:a})=>a.has(e.Dahan)?3:0})},hp={name:"Daunted By The Dahan",set:gn.NatureIncarnate,levels:[{effects:[{textArea:[.253,.293],text:"1 <fear> per board with both Invaders and <dahan>.",[Pn.Now]:dp},{textArea:[.298,.385],text:"Invaders do -6 Damage to <dahan> (per land) during Ravage.",[Pn.Now]:lp}]},{effects:[{textArea:[.531,.571],text:"1 <fear> per board with both Invaders and <dahan>.",[Pn.Now]:dp},{textArea:[.573,.613],text:"Lands with <dahan> have Defend 3.",[Pn.Now]:cp},{textArea:[.573,.66],text:"Invaders do -6 Damage to <dahan> (per land) during Ravage.",[Pn.Now]:lp}]},{effects:[{textArea:[.798,.838],text:"1 <fear> per board with both Invaders and <dahan>.",[Pn.Now]:dp},{textArea:[.845,.885],text:"Lands with <dahan> have Defend 3.",[Pn.Now]:cp},{textArea:[.837,.927],text:"Invaders do -6 Damage to <dahan> (per land) during Ravage.",[Pn.Now]:lp},{textArea:[.927,.967],text:"Isolate all lands with <dahan>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.DauntedByTheDahan,[Pn.GlobalReminder]:()=>({icon:"Isolate<br><dahan>"}),[Pn.Reminder]:a=>a.has(e.Dahan)?"Isolated Land.":void 0,[Pn.Isolated]:({land:a})=>a.has(e.Dahan)})}}]}]},up={name:"Distracted By Local Troubles",set:gn.NatureIncarnate,levels:[{textArea:[.279,.363],text:"On Each Board, in a land matching a Ravage Card: 1 Damage.",[Pn.Now]:({$:e})=>e.onEachBoard((a=>e.doFearAction((()=>a.forPiecesThatIs(e.Invader,(a=>a.matchesInvaderCards(e.invaderCardsInVisibleSlot(ah.Ravage),qr.Ravage))).pickOne((async a=>{await a.damageOnlyThis(1,e.Invader)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with invaders matching a Ravage Card.`})),{board:a})))},{effects:[{textArea:[.525,.604],text:"Invaders each do -1 Damage per Damage they have taken.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.DistractedByLocalTroublesII,[Pn.GlobalReminder]:()=>({icon:"Reduce<br><damage>"}),[Pn.AdjustDamage]:({piece:e})=>e.isInvader?-e.damage:0})}},{textArea:[.562,.688],text:"On Each Board, in a land matching a Ravage Card: 1 Damage each to up to 2 Invaders",[Pn.Now]:({$:e})=>e.onEachBoard((a=>e.doFearAction((()=>a.inLandsWhere((a=>a.hasInvaders&&a.matchesInvaderCards(e.invaderCardsInVisibleSlot(ah.Ravage),qr.Ravage))).pickOne((async a=>{await a.piecesWhere((e=>e.isInvader)).pickMultiple({amount:2,forPickedItem:async a=>{await a.damageOnlyThis(1,e.Invader)},optional:!0})}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with invaders matching a Ravage Card.`})),{board:a})))}]},{effects:[{textArea:[.806,.888],text:"Invaders each do -1 Damage per Damage they have taken.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffectUntilEndOfTurn({effectId:In.DistractedByLocalTroublesIII,[Pn.GlobalReminder]:()=>({icon:"Reduce<br><damage>"}),[Pn.AdjustDamage]:({piece:e})=>e.isInvader?-e.damage:0})}},{textArea:[.843,.963],text:"On Each Board, in two lands matching a Ravage Card: 2 Damage (per land).",[Pn.Now]:({$:e})=>e.onEachBoard((a=>e.doFearAction((()=>a.inLandsWhere((a=>a.hasInvaders&&a.matchesInvaderCards(e.invaderCardsInVisibleSlot(ah.Ravage),qr.Ravage))).pickMultiple({amount:2,forPickedItem:async e=>{await e.damage(2)},effect:{highlightBoards:[a],noOptions:`On board ${a.name}: No lands with invaders matching a Ravage Card.`}})),{board:a})))}]}]},gp=(e,a)=>({$:t})=>t.eachSpirit((n=>t.doFearAction((async()=>{let r=null;await t.forPiecesThatIs(t.ExplorerOrTown).where((e=>!e.location.matchesInvaderCards(t.invaderCardsInVisibleSlot(ah.Build),qr.Build))).pickMultiple({amount:a,optional:!0,where:e=>null===r||e.location===r,forPickedItem:async a=>{r=a.location,e?await a.push():await a.remove()},effect:{players:[n],noOptions:"No land with <town>/<city> in a land not matching a Build Card."}})}),{spirit:n}))),fp={name:"Restlessness",set:gn.NatureIncarnate,levels:[{textArea:[.276,.362],text:"Each player Pushes up to 1 <explorer>/<town> form a land not matching a Build card.",[Pn.Now]:gp(!0,1)},{textArea:[.551,.635],text:"Each player Pushes up to 3 <explorer>/<town> from a land not matching a Build card.",[Pn.Now]:gp(!0,3)},{textArea:[.818,.913],text:"Each player Removes up to 3 <explorer>/<town> from a land not matching a Build card.",[Pn.Now]:gp(!1,3)}]},yp=(e,a)=>({$:t})=>t.onEachBoard((n=>t.doFearAction((()=>n.inLandsWhere((e=>e.hasAtLeast(2,t.Invader))).pickOne((async t=>{await t.gather({quantifier:ur.UpTo,amount:e,pieces:a,single:!0})}),{prompt:"Pick a land to gather into.",noOptions:"No land with at least 2 Invaders."})),{board:n}))),pp={name:"Seek Company",set:gn.NatureIncarnate,levels:[{textArea:[.279,.363],text:"On Each Board: Gather up to 1 <explorer> into a land with 2 or more Invaders.",[Pn.Now]:yp(1,Xn.Explorer)},{textArea:[.537,.669],text:"On Each Board: Gather up to 3 <explorer>/<town> from a single land into a land with 2 or more Invaders.",[Pn.Now]:yp(3,Xn.ExplorerOrTown)},{textArea:[.837,.927],text:"On Each Board: Gather up to 4 <explorer>/<town> (total) into lands with 2 or more Invaders.",[Pn.Now]:({$:e})=>e.onEachBoard((a=>e.doFearAction((async()=>{const t=[];await a.inLandsWhere((a=>a.hasAtLeast(2,e.Invader))).pickMultiple({amount:4,repeatSame:!0,optional:!0,forPickedItem:async a=>{t.push(...await a.gather({amount:1,pieceFilter:e=>!t.some((a=>a.piece===e)),pieces:e.ExplorerOrTown}))}})}),{board:a})))}]},wp={name:"Struggles Over Farmland",set:gn.NatureIncarnate,levels:[{textArea:[.298,.339],text:"Each player Adds 1 <strife> in a land with <blight>.",[Pn.Now]:({$:e})=>e.eachSpirit((a=>e.doFearAction((()=>e.forPiecesThatIs(e.Invader,(a=>a.has(e.Blight))).pickOne((async e=>{await e.addStrife()}),{noOptions:"No Invaders in land with <blight>."})),{spirit:a})))},{textArea:[.554,.649],text:"Each player Adds 1 <strife> to a <town> or Adds 1 <strife> in a land with <blight>.",[Pn.Now]:({$:e})=>e.eachSpirit((a=>e.doFearAction((()=>e.forPiecesWhere((a=>a.isA(e.Town)||a.isInvader&&a.location.has(e.Blight))).pickOne((async e=>{await e.addStrife()}),{noOptions:"No <town> or Invaders in a land with <blight>."})),{spirit:a})))},{effects:[{textArea:[.823,.863],text:"Each player Adds 1 <strife>.",[Pn.Now]:({$:e})=>e.eachSpirit((a=>e.doFearAction((()=>e.forPiecesThatIs(e.Invader).pickOne((async e=>{await e.addStrife()}),{noOptions:"No Invaders."})),{spirit:a})))},{textArea:[.865,.949],text:"In each land with <strife>, 1 Invader with <strife> does Damage to other Invaders.",[Pn.Now]:({$:e})=>e.inLandsWithStrife().selectOrder().forEach((a=>e.doFearAction((async()=>{await a.piecesWithStrife().pickOne((e=>e.dealDamageToOtherInvaders()))}),{land:a})),{noOptions:"No Invader with <strife>"})}]}]},mp=(e,a)=>({$:t})=>t.onEachBoard((n=>t.doFearAction((()=>n.inLands().pickMultiple({amount:e,forPickedItem:async e=>{await e.isolate(),a&&e.has(t.TownOrCity)&&await e.skipInvaderAction({all:!0,filter:({invaderAction:e})=>e===qr.Build})}})),{board:n}))),vp={name:"Supply Chains Abandoned",set:gn.NatureIncarnate,levels:[{textArea:[.301,.342],text:"On Each Board: Isolate one land.",[Pn.Now]:mp(1,!1)},{textArea:[.54,.674],text:"On Each Board: Isolate one land.<br>If <town>/<city> are present, skip all Build Actions (in that land).",[Pn.Now]:mp(1,!0)},{textArea:[.796,.968],text:"On Each Board: Isolate two lands.<br>In Each of those lands, if <town>/<city> are present, skip all Build Actions (in that land).",[Pn.Now]:mp(2,!0)}]},xp=e=>({$:a})=>a.onEachBoard((t=>a.doFearAction((()=>t.inLandsWhere((e=>e.hasOneOf(a.Beasts,a.Dahan)||e.hasStrife)).pickOne((t=>e({$:a,land:t})),{noOptions:`On board: ${t.name}: No land with <beasts>/<strife>/<dahan>.`})),{board:t}))),bp=e=>xp((({$:a,land:t})=>a.chooseBetween({effects:[e?{actionId:"Downgrade",text:"Downgrade 1 <town>/<city> there.",[Pn.Now]:async()=>{await t.downgrade({pieces:a.TownOrCity})},condition:()=>t.has(a.TownOrCity)}:{actionId:"Remove",text:"Remove 1 <town>/<city> there.",[Pn.Now]:async()=>{await t.remove({pieces:a.TownOrCity})},condition:()=>t.has(a.TownOrCity)},{actionId:"SkipBuild",text:"Skip the next Build Action there.",[Pn.Now]:()=>t.skipInvaderAction({next:!0,filter:({invaderAction:e})=>e===qr.Build})}]}))),Tp={name:"Unsettled",set:gn.NatureIncarnate,levels:[{textArea:[.278,.371],text:"On Each Board: Choose a land with <beasts>/<strife>/<dahan>. Downgrade 1 <town>/<city> there.",[Pn.Now]:xp((({$:e,land:a})=>a.downgrade({pieces:e.TownOrCity})))},{textArea:[.534,.669],text:"On Each Board: Choose a land with <beasts>/<strife>/<dahan>. Downgrade 1 <town>/<city> there or skip the next Build Action there (this turn).",[Pn.Now]:bp(!0)},{textArea:[.826,.955],text:"On Each Board: Choose a land with <beasts>/<strife>/<dahan>. Remove 1 Invader there or skip the next Build Action there (this turn).",[Pn.Now]:bp(!1)}]};var Ap;!function(e){e.AngryMobs="AngryMobs",e.AvoidTheDahan="AvoidTheDahan",e.BeliefTakesRoot="BeliefTakesRoot",e.BesetByManyTroubles="BesetByManyTroubles",e.CivilUnrest="CivilUnrest",e.CommunitiesInDisarray="CommunitiesInDisarray",e.DahanAttack="DahanAttack",e.DahanEnheartened="DahanEnheartened",e.DahanGainTheEdge="DahanGainTheEdge",e.DahanOnTheirGuard="DahanOnTheirGuard",e.DahanRaid="DahanRaid",e.DahanReclaimFishingGrounds="DahanReclaimFishingGrounds",e.DahanThreaten="DahanThreaten",e.DauntedByTheDahan="DauntedByTheDahan",e.Demoralized="Demoralized",e.DepartTheDangerousLand="DepartTheDangerousLand",e.Depopulation="Depopulation",e.Discord="Discord",e.DistractedByLocalTroubles="DistractedByLocalTroubles",e.EmigrationAccelerates="EmigrationAccelerates",e.ExplorersAreReluctant="ExplorersAreReluctant",e.FearOfTheUnseen="FearOfTheUnseen",e.FleeFromDangerousLands="FleeFromDangerousLands",e.FleeThePestilentLand="FleeThePestilentLand",e.ImmigrationSlows="ImmigrationSlows",e.Isolation="Isolation",e.MimicTheDahan="MimicTheDahan",e.NervesFray="NervesFray",e.OverseasTradeSeemSafer="OverseasTradeSeemSafer",e.Panic="Panic",e.PanickedByWildBeasts="PanickedByWildBeasts",e.PlanForDeparture="PlanForDeparture",e.Restlessness="Restlessness",e.Quarantine="Quarantine",e.Retreat="Retreat",e.Scapegoats="Scapegoats",e.SeekCompany="SeekCompany",e.SeekSafety="SeekSafety",e.SenseOfDread="SenseOfDread",e.SpreadingTimidity="SpreadingTimidity",e.StrugglesOverFarmland="StrugglesOverFarmland",e.SupplyChainsAbandoned="SupplyChainsAbandoned",e.TallTalesOfSavagery="TallTalesOfSavagery",e.TheologicalStrife="TheologicalStrife",e.TooManyMonsters="TooManyMonsters",e.TradeSuffers="TradeSuffers",e.TreadCarefully="TreadCarefully",e.Unrest="Unrest",e.Unsettled="Unsettled",e.WaryOfTheInterior="WaryOfTheInterior"}(Ap||(Ap={}));const Ip={[Ap.AngryMobs]:_y,[Ap.AvoidTheDahan]:yy,[Ap.BeliefTakesRoot]:py,[Ap.BesetByManyTroubles]:Qy,[Ap.CivilUnrest]:ip,[Ap.CommunitiesInDisarray]:Vy,[Ap.DahanAttack]:Cy,[Ap.DahanEnheartened]:wy,[Ap.DahanGainTheEdge]:op,[Ap.DahanOnTheirGuard]:my,[Ap.DahanRaid]:vy,[Ap.DahanReclaimFishingGrounds]:Xy,[Ap.DahanThreaten]:By,[Ap.DauntedByTheDahan]:hp,[Ap.Demoralized]:Ly,[Ap.DepartTheDangerousLand]:Fy,[Ap.Depopulation]:Jy,[Ap.Discord]:zy,[Ap.DistractedByLocalTroubles]:up,[Ap.EmigrationAccelerates]:xy,[Ap.ExplorersAreReluctant]:Ry,[Ap.FearOfTheUnseen]:by,[Ap.FleeFromDangerousLands]:Zy,[Ap.FleeThePestilentLand]:My,[Ap.ImmigrationSlows]:Ny,[Ap.Isolation]:Ty,[Ap.MimicTheDahan]:Yy,[Ap.NervesFray]:ep,[Ap.OverseasTradeSeemSafer]:Ay,[Ap.Panic]:Wy,[Ap.PanickedByWildBeasts]:$y,[Ap.PlanForDeparture]:Gy,[Ap.Quarantine]:Uy,[Ap.Retreat]:Iy,[Ap.Restlessness]:fp,[Ap.Scapegoats]:Py,[Ap.SeekCompany]:pp,[Ap.SeekSafety]:Sy,[Ap.SenseOfDread]:ap,[Ap.SpreadingTimidity]:Ky,[Ap.StrugglesOverFarmland]:wp,[Ap.SupplyChainsAbandoned]:vp,[Ap.TallTalesOfSavagery]:Ey,[Ap.TheologicalStrife]:tp,[Ap.TooManyMonsters]:Hy,[Ap.TradeSuffers]:Oy,[Ap.TreadCarefully]:qy,[Ap.Unrest]:jy,[Ap.Unsettled]:Tp,[Ap.WaryOfTheInterior]:ky};var Pp;!function(e){e.CoastalLands="CoastalLands",e.SaltDeposits="SaltDeposits",e.Stage1Card="Stage1Card",e.Stage2CardIncludingCoastal="Stage2CardIncludingCoastal",e.Stage2CardExceptCoastalAndSaltDeposits="Stage2CardExceptCoastalAndSaltDeposits",e.Stage3Card="Stage3Card",e.WaveOfImmigration="WaveOfImmigration"}(Pp||(Pp={}));const Sp={[Pp.Stage1Card]:{cards:[Go.Jungles,Go.Mountains,Go.Sands,Go.Wetlands],stage:1},[Pp.Stage2CardIncludingCoastal]:{cards:[Go.JunglesEscalation,Go.MountainsEscalation,Go.SandsEscalation,Go.WetlandsEscalation,Go.CoastalLands],stage:2},[Pp.Stage2CardExceptCoastalAndSaltDeposits]:{cards:[Go.JunglesEscalation,Go.MountainsEscalation,Go.SandsEscalation,Go.WetlandsEscalation],stage:2},[Pp.CoastalLands]:{cards:[Go.CoastalLands],stage:2},[Pp.SaltDeposits]:{cards:[Go.SaltDeposits],stage:2},[Pp.Stage3Card]:{cards:[Go.JunglesAndSands,Go.JunglesAndWetlands,Go.MountainsAndJungles,Go.MountainsAndWetlands,Go.SandsAndMountains,Go.SandsAndWetlands],stage:3},[Pp.WaveOfImmigration]:{cards:[Go.WaveOfImmigration],stage:2}};var Ep,Op=function(e,a,t,n){var r,i=arguments.length,s=i<3?a:null===n?n=Object.getOwnPropertyDescriptor(a,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,a,t,n);else for(var o=e.length-1;o>=0;o--)(r=e[o])&&(s=(i<3?r(s):i>3?r(a,t,s):r(a,t))||s);return i>3&&s&&Object.defineProperty(a,t,s),s};class kp{fear=0;fearCardsDiscarded=[];fearCardsEarnedCount=0;fearCardsInDeck;fearCardsInLevelCount=[0,0,0];fearPool=0;hasResolvedFearCard=!1;invaderCardsInFearDeck=[];resolvingFearCard;terrorLevel=1;static allFearCards=Object.keys(Ip).filter((e=>!Ip[e].banned));$;constructor(e){ed.makeObservable(this),this.$=e;const{boards:a}=this.$.config,t=e.config.sets??Ig,n=a.filter((e=>void 0!==e.spirit)).length;this.fearCardsInDeck=new Ag(e,t.length===Ig.length?kp.allFearCards:kp.allFearCards.filter((e=>t.includes(Ip[e].set)))),this.fearPool=(a.length>n?5:4)*n}get fearCardsEarned(){const e=[];for(let a=0;a<this.fearCardsEarnedCount;a+=1)e.push(this.fearCardsInDeck.cardAt(a));return e}get fearCardsInLevel(){return e=>{let a=this.fearCardsEarnedCount;for(let t=0;t<e;t+=1)a+=this.fearCardsInLevelCount[t];const t=[];for(let n=0;n<this.fearCardsInLevelCount[e];n+=1)t.push(this.fearCardsInDeck.cardAt(a+n));return t}}get preventTerrorLevelAndResolveFearCards(){return this.$.someEffect(Pn.PreventTerrorLevelAndResolveFearCards)}get unusedFearCardsLeft(){return this.fearCardsInDeck.count-cg(this.fearCardsInLevelCount)+this.fearCardsEarnedCount}addFearCards(e){return{toLevel:async a=>{await Jr(e,(()=>{this.unusedFearCardsLeft>0&&(this.fearCardsInLevelCount[a-1]+=1,this.fearCardsInDeck.putBottomCardToTop())})),await this.moveInvaderCardsInFearDeck(e),await this.$.sendEvent({type:Tn.FearCardAdded,amount:e,level:a})}}}async addFearToPool(e){this.fearPool+=e,await this.$.sendEvent({type:Tn.FearAddedToPool,amount:e})}async discardEarnedFearCards(e){let a=e;for(;this.fearCardsEarnedCount>0&&a>0;){const e=await this.fearCardsInDeck.draw();await this.$.sendEvent({type:Tn.FearCardDiscarded,fearCard:e}),this.fearCardsDiscarded.push(e),this.fearCardsEarnedCount-=1,a-=1}}async discardTopFearCard(){let e=null;return this.terrorLevel<4&&(this.fearCardsInLevelCount[this.terrorLevel-1]-=1,e=await this.fearCardsInDeck.draw(this.fearCardsEarnedCount),await this.moveInvaderCardsInFearDeck(-1),this.fearCardsDiscarded.push(e),await this.$.doEffects(Pn.AfterFearDeckIsDecreasing),await this.updateTerrorLevel()),e}async earnFearCard(){this.terrorLevel<4&&this.fearCardsInLevelCount[this.terrorLevel-1]>0&&(this.fearCardsEarnedCount+=1,this.fearCardsInLevelCount[this.terrorLevel-1]-=1,await this.moveInvaderCardsInFearDeck(-1),await this.$.sendEvent({type:Tn.FearCardEarned}),await this.$.doEffects(Pn.AfterFearDeckIsDecreasing),await this.updateTerrorLevel())}async earnTerrorLevel(){this.terrorLevel+=1,await this.$.sendEvent({type:Tn.NewTerrorLevel,level:this.terrorLevel}),await this.$.doEffects(Pn.AfterReachingTerrorLevel,{terrorLevel:this.terrorLevel})}async generateFear(e){let a=e.amount;const{location:t,fromDestroyingBuildings:n}=e,r=()=>({amount:a,location:t,fromDestroyingBuildings:n});if(a>0)if(await this.$.oneEffectActivates(Pn.PreventFearGeneration,r()))a=0;else for(await this.$.waitForAnimationsToFinish(),this.fear+=a,await this.$.doEffects(Pn.AfterPowerGenerateFearInLand,e),await this.$.sendEvent({type:Tn.FearEarned,amount:a,location:t});this.fear>=this.fearPool;)this.fear-=this.fearPool,await this.earnFearCard();return r()}insertInvaderCardUnderFearCards(e,a){this.invaderCardsInFearDeck.push({card:e,position:a})}async loseFear(e){const a=Math.min(this.fear,e);this.fear-=a,a>0&&await this.$.sendEvent({type:Tn.FearLost,amount:a})}async pickAFaceDownFearCard(){const e=this.fearCardsEarnedCount+cg(this.fearCardsInLevelCount),a=e>0?[...Array(e).keys()].filter((e=>null===this.fearCardsInDeck.cardAt(e))):[];if(a.length>0){const e=await this.$.query({query:An.SelectFearCard,items:a,actionIds:a.map((e=>`FearCard-${e}`))});return a[e]}return await this.$.clickToContinue({noOptions:"No Fear Cards available"}),null}putAllFearCardsInDeckIntoLevel(e){this.fearCardsInLevelCount[e-1]+=this.unusedFearCardsLeft}putAllFearCardsIntoLevel(e){for(let a=0;a<3;a+=1)this.fearCardsInLevelCount[a]=a===e-1?this.fearCardsInDeck.count:0}async removeTopFearCard(){this.terrorLevel<4&&(this.fearCardsInLevelCount[this.terrorLevel-1]-=1,this.fearCardsInDeck.removeCard(0),await this.moveInvaderCardsInFearDeck(-1),await this.$.doEffects(Pn.AfterFearDeckIsDecreasing),await this.updateTerrorLevel())}async reshuffleFearDeck(){await this.$.sendEvent({type:Tn.GenericMain,text:"The Fear Deck was reshuffled from its discard."}),this.fearCardsInDeck=new Ag(this.$,this.fearCardsDiscarded),this.fearCardsDiscarded=[]}async resolveFearCards(){for(;this.fearCardsEarnedCount>0&&!this.$.gameEnded&&this.$.randomEventsEnabled&&(!this.preventTerrorLevelAndResolveFearCards||this.$.phase!==Gi.Fear);)await this.resolveNextFearCard()}async resolveNextFearCard(e={}){const{extraTerrorLevel:a=0}=e;this.fearCardsEarnedCount-=1,this.hasResolvedFearCard=!0,this.resolvingFearCard=await this.fearCardsInDeck.draw(),void 0===this.resolvingFearCard&&(await this.reshuffleFearDeck(),this.resolvingFearCard=await this.fearCardsInDeck.draw()),await this.$.sendEvent({type:Tn.FearCardResolved,fearCard:this.resolvingFearCard,terrorLevel:this.terrorLevel}),await this.$.query({query:An.ClickToContinueCard,items:[this.resolvingFearCard],actionIds:[this.resolvingFearCard]});const t=Ip[this.resolvingFearCard],n=t.levels[Math.min(this.terrorLevel+a,3)-1];await this.$.addEffectUntilEndOfTurn({name:t.name,...n,card:this.resolvingFearCard}),this.fearCardsDiscarded.push(this.resolvingFearCard),this.resolvingFearCard=void 0}revealFearCard(e,a){let t=this.fearCardsEarnedCount;for(let a=0;a<e;a+=1)t+=this.fearCardsInLevelCount[a];return t+=a,this.revealFearCardInDeck(t)}revealFearCardInDeck(e){return this.fearCardsInDeck.reveal(e)}revealTopFearCard(){return this.revealFearCard(this.terrorLevel-1,0)}async setupFearDeck(){const e=[3,3,3].map(((e,a)=>e+_o([this.$.adversaryLeading,this.$.adversarySupporting],(e=>e?e.levelData.fearCards[a]-3:0))));await this.addFearCards(e[0]).toLevel(1),await this.addFearCards(e[1]).toLevel(2),await this.addFearCards(e[2]).toLevel(3)}timePasses(){return this.hasResolvedFearCard=!1,Promise.resolve()}toString(){return Pg({fear:this.fear,fearPool:this.fearPool,terrorLevel:this.terrorLevel,fearCardsDiscarded:Yo(this.fearCardsDiscarded),fearCardsEarned:this.fearCardsEarnedCount,fearCardsInDeck:this.fearCardsInDeck.count,fearCardsInLevel:Yo(this.fearCardsInLevelCount),invaderCardsInFearDeck:Yo(this.invaderCardsInFearDeck,(e=>`${e.card} @ ${e.number}`))},2)}async moveInvaderCardsInFearDeck(e){if(this.invaderCardsInFearDeck.length>0&&(this.invaderCardsInFearDeck.forEach((a=>{a.position+=e})),0===this.invaderCardsInFearDeck[0].position)){const{card:e}=this.invaderCardsInFearDeck.shift(),a=Sp[e].cards.filter((e=>!this.$.invaderDeckInSlot(ah.Deck).hasRevealed(e))),t=await this.$.drawFrom(a,a.map((e=>Uo[e].text)));this.$.invaderDeckInSlot(ah.Deck).remove(t),this.$.invaderDeckInSlot(ah.Build).insertAtBottom(t)}}async updateTerrorLevel(){if(!this.preventTerrorLevelAndResolveFearCards)for(;this.terrorLevel<4&&0===this.fearCardsInLevelCount[this.terrorLevel-1];)await this.earnTerrorLevel()}}Op([De],kp.prototype,"fear",void 0),Op([De],kp.prototype,"fearCardsDiscarded",void 0),Op([De],kp.prototype,"fearCardsEarnedCount",void 0),Op([De],kp.prototype,"fearCardsInDeck",void 0),Op([De],kp.prototype,"fearCardsInLevelCount",void 0),Op([De],kp.prototype,"fearPool",void 0),Op([De],kp.prototype,"hasResolvedFearCard",void 0),Op([De],kp.prototype,"invaderCardsInFearDeck",void 0),Op([De],kp.prototype,"resolvingFearCard",void 0),Op([De],kp.prototype,"terrorLevel",void 0),function(e){e.DahanInsurrectionLevelThree="DahanInsurrectionLevelThree",e.DahanInsurrectionTooFewDahan="DahanInsurrectionTooFewDahan",e.GameError="GameError",e.GreatRiver="GreatRiver",e.GuardTheIslesHeart="GuardTheIslesHeart",e.HuntersSwarmTheIsland="HuntersSwarmTheIsland",e.IrreparableDamage="IrreparableDamage",e.LandStrippedBare="LandStrippedBare",e.ProudAndMightCapital="ProudAndMightCapital",e.RanOutOfBlight="RanOutOfBlight",e.RanOutOfInvaderCards="RanOutOfInvaderCards",e.RanOutOfPresence="RanOutOfPresence",e.SprawlingPlantation="SprawlingPlantation",e.TheEndlessDark="TheEndlessDark",e.TradeHub="TradeHub"}(Ep||(Ep={}));var Cp=function(e,a,t,n){var r,i=arguments.length,s=i<3?a:null===n?n=Object.getOwnPropertyDescriptor(a,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,a,t,n);else for(var o=e.length-1;o>=0;o--)(r=e[o])&&(s=(i<3?r(s):i>3?r(a,t,s):r(a,t))||s);return i>3&&s&&Object.defineProperty(a,t,s),s};class Dp{invaderCardsInSlot;$;escalatedInvaderCards=[];invaderCardIsSpecial=[];constructor(e){ed.makeObservable(this),this.$=e,this.invaderCardsInSlot={[ah.Discard]:new Ag(e),[ah.HighImmigration]:new Ag(e),[ah.Ravage]:new Ag(e),[ah.Build]:new Ag(e),[ah.Explore]:new Ag(e),[ah.Deck]:new Ag(e)}}get actualExploreCardIndex(){return e=>{let a=-1;for(let t=0;t<this.exploreDeck.count;t+=1){if(this.exploreDeck.cardAt(t)!==Go.WaveOfImmigration&&(a+=1,a===e))return t}return 0}}get exploreDeck(){return this.invaderCardsInSlot[ah.Deck]}get invaderCardAtIndexIsSpecial(){return e=>this.invaderCardIsSpecial[e]}get invaderCardsInExploreDeck(){return this.exploreDeck.cards}get invaderCardsVisible(){return[...this.invaderCardsInSlot[ah.HighImmigration].cards,...this.invaderCardsInSlot[ah.Ravage].cards,...this.invaderCardsInSlot[ah.Build].cards]}get lowestStageNumber(){return Math.min(...this.stageNumbers.filter((e=>e>0)))}get numberOfExploreCardsThisTurn(){return 1+this.$.sumEffects(Pn.AdjustNumberOfExploreCards)}get showingTerrainTypes(){const e=[];return this.invaderCardsVisible.forEach((a=>{Uo[a].terrains.forEach((a=>{e.includes(a)||e.push(a)}))})),e}get stage(){return this.stageNumbers.length>0?3===this.stageNumbers[0]&&this.invaderCardIsSpecial[0]?2:this.stageNumbers[0]>0?this.stageNumbers[0]:this.stageNumbers[1]:3}get stageNumbers(){return this.stageNumbersInSlot(ah.Deck)}get stageNumbersInSlot(){return e=>this.invaderCardsInSlot[e].possibleCards.map((e=>Uo[e[0]].stage))}get unusedInvaderCardOfStage(){return e=>Object.keys(Uo).filter((a=>Uo[a].stage===e&&!Object.values(this.invaderCardsInSlot).some((e=>e.includes(a)))))}async accelerateTheInvaderDeck(){const e=this.lowestStageNumber,a=this.stageNumbers.findIndex((a=>a===e));if(-1===a)return null;const t=await this.exploreDeck.reveal(a);return await this.removeCardFromExploreDeck(a),null!==t&&this.invaderCardsInSlot[ah.Discard].insert(t),t}async addExploreCardToTop(e,a=0){this.exploreDeck.insertOneOf(e,a),this.invaderCardIsSpecial.splice(a,0,!1),await this.$.doEffects(Pn.AfterChangingInvaderDeck)}advanceCardsIn(e){return{to:async a=>{for(;!this.invaderCardsInSlot[e].isEmpty;)this.invaderCardsInSlot[a].insertAtBottom(await this.invaderCardsInSlot[e].draw())}}}async advanceInvaderCards(){await this.$.doEffects(Pn.BeforeAdvancingCards),await this.advanceCardsIn(ah.Ravage).to(ah.Discard),await this.advanceCardsIn(ah.Build).to(ah.Ravage),await this.advanceCardsIn(ah.Explore).to(ah.Build),await this.$.doEffects(Pn.AfterAdvancingCards),await this.$.doEffects(Pn.AfterChangingInvaderDeck);for(const e of this.$.invaderCardsInVisibleSlot(ah.Build))await this.escalate(e,{afterAdvancingCards:!0})}async drawNextExploreCard(){if(this.exploreDeck.isEmpty)return this.$.loseGame(Ep.RanOutOfInvaderCards),null;{const e=await this.exploreDeck.draw();return Vr(this.escalatedInvaderCards,e),this.invaderCardIsSpecial.shift(),this.invaderCardsInSlot[ah.Explore].insertAtBottom(e),await this.$.sendEvent({type:Tn.InvadersExplore,invaderCard:e}),await this.$.doEffects(Pn.AfterChangingInvaderDeck),e}}async escalate(e,a={}){const{afterAdvancingCards:t=!1,afterExplore:n=!1,afterExploringLand:r,beforeBuilding:i=!1,beforeExplore:s=!1}=a;if(!this.escalatedInvaderCards.includes(e)){const a=Uo[e];if(a.escalation&&null!==this.$.adversaryLeading||3===a.stage&&null!==this.$.adversarySupporting){if(await this.$.oneEffectActivates(Pn.PreventEscalation,{card:e,normal:!0}))this.escalatedInvaderCards.push(e);else{const o=a.escalation?this.$.adversaryLeading.adversary:this.$.adversarySupporting.adversary;await this.$.oneEffectActivates(Pn.Escalation,{card:e,adversary:o,afterAdvancingCards:t,afterExplore:n,afterExploringLand:r,beforeBuilding:i,beforeExplore:s})&&this.escalatedInvaderCards.push(e)}}}}insertInvaderCard(e,a={}){const{isSpecial:t=!1}=a;return{justBelowCards:async a=>{this.exploreDeck.insertOneOf([...Sp[e].cards],a),this.invaderCardIsSpecial.splice(a,0,t),await this.$.sendEvent({type:Tn.InvaderCardAdded,amount:1,invaderCardType:e})},insteadOfNthCardOfStage:async(a,t)=>{let n=0;for(let r=0;r<this.stageNumbers.length;r+=1)if(this.stageNumbers[r]===t&&(n+=1,n===a)){await this.removeCardFromExploreDeck(r),this.exploreDeck.insertOneOf([...Sp[e].cards],r),await this.$.sendEvent({type:Tn.InvaderCardAdded,amount:1,invaderCardType:e});break}},justBelowBottomMostOfStage:async a=>{const n=rd(this.stageNumbers,(e=>e===a));this.exploreDeck.insertOneOf([...Sp[e].cards],n+1),this.invaderCardIsSpecial.splice(n+1,0,t),await this.$.sendEvent({type:Tn.InvaderCardAdded,amount:1,invaderCardType:e})},justBelowNthCardOfStage:async(a,n)=>{let r=0;for(let i=0;i<this.stageNumbers.length;i+=1)if(this.stageNumbers[i]===n&&(r+=1,r===a)){this.exploreDeck.insertOneOf([...Sp[e].cards],i+1),this.invaderCardIsSpecial.splice(i+1,0,t),await this.$.sendEvent({type:Tn.InvaderCardAdded,amount:1,invaderCardType:e});break}}}}async moveNthCardOfStageUpByOne(e,a){let t=0;for(let n=0;n<this.stageNumbers.length;n+=1)if(this.stageNumbers[n]===a&&(t+=1,t===e)){const e=await this.removeCardFromExploreDeck(n);this.invaderCardIsSpecial.splice(n,1),this.exploreDeck.insertOneOf(e,n-1),this.invaderCardIsSpecial.splice(n-1,0,!1);break}}nthCardOfStage(e,a){let t=0;for(let n=0;n<this.stageNumbers.length;n+=1)if(this.stageNumbers[n]===a&&(t+=1,t===e))return this.exploreDeck.possibleCardsAt(n);return[]}async putTopInvaderCardToBottom(){if(!this.exploreDeck.isEmpty){const e=await this.removeCardFromExploreDeck(0);this.invaderCardIsSpecial.shift(),this.exploreDeck.insertOneOf(e,this.exploreDeck.count),this.invaderCardIsSpecial.push(!1),await this.$.doEffects(Pn.AfterChangingInvaderDeck)}}async removeBottomMostInvaderCardOfStage(e){const a=rd(this.stageNumbers,(a=>a===e));await this.removeCardFromExploreDeck(a)}async removeCardFromExploreDeck(e,a={}){const{allCards:t=!1,swapping:n=!1}=a;if(e<0||e>=this.exploreDeck.count)return;const r=t?e:this.actualExploreCardIndex(e);this.invaderCardIsSpecial.splice(r,1);const i=this.stageNumbers[r],s=this.exploreDeck.removeCard(r);return void 0!==s&&(i>0&&await this.$.sendEvent({type:Tn.InvaderCardRemoved,amount:1,stage:i}),n||await this.$.doEffects(Pn.AfterChangingInvaderDeck)),s}async removeTopMostInvaderCardOfStage(e){const a=this.stageNumbers.findIndex((a=>a===e));await this.removeCardFromExploreDeck(a,{allCards:0===e})}async removeTopNonSpecialExploreCard(){const e=this.invaderCardIsSpecial.findIndex((e=>!1===e));await this.removeCardFromExploreDeck(e)}async revealTopInvaderCard(){const e=await this.exploreDeck.reveal(0);return null!==e&&await this.$.clickToContinue({card:e,text:`The top Invader Card is ${Uo[e].text}.`}),e}async setupInvaderDeck(){await this.addInvaderCards(3).ofType(Pp.Stage1Card),await this.addInvaderCards(4).ofType(Pp.Stage2CardIncludingCoastal),await this.addInvaderCards(5).ofType(Pp.Stage3Card)}async shuffleTopTwoInvaderCards(){if(this.exploreDeck.count>=2){const e=this.actualExploreCardIndex(0),a=this.actualExploreCardIndex(1);if(e>=this.stageNumbers.length||a>=this.stageNumbers.length)return;const t=this.stageNumbers[e],n=this.stageNumbers[e]===this.stageNumbers[a];await this.exploreDeck.shuffleTopNCards([e,a],n),n?(this.invaderCardIsSpecial[e]=!1,this.invaderCardIsSpecial[a]=!1):t!==this.stageNumbers[e]&&([this.invaderCardIsSpecial[e],this.invaderCardIsSpecial[a]]=[this.invaderCardIsSpecial[a],this.invaderCardIsSpecial[e]]),await this.$.doEffects(Pn.AfterChangingInvaderDeck)}}toString(){return Pg({invaderCardsInBuildStep:Yo(this.invaderCardsInSlot[ah.Build].cards),invaderCardsInDiscard:Yo(this.invaderCardsInSlot[ah.Discard].cards),invaderCardsInExploreDeck:Yo(this.invaderCardsInSlot[ah.Deck].cards),invaderCardsInExploreStep:Yo(this.invaderCardsInSlot[ah.Explore].cards),invaderCardsInHighImmigrationStep:Yo(this.invaderCardsInSlot[ah.HighImmigration].cards),invaderCardsInRavageStep:Yo(this.invaderCardsInSlot[ah.Ravage].cards)},2)}addInvaderCards(e){return{ofType:async a=>{await Jr(e,(()=>{this.exploreDeck.insertAtBottomOneOf([...Sp[a].cards]),this.invaderCardIsSpecial.push(!1)})),await this.$.sendEvent({type:Tn.InvaderCardAdded,amount:e,invaderCardType:a})}}}}Cp([De],Dp.prototype,"invaderCardsInSlot",void 0);var Bp,Lp=function(e,a,t,n){var r,i=arguments.length,s=i<3?a:null===n?n=Object.getOwnPropertyDescriptor(a,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,a,t,n);else for(var o=e.length-1;o>=0;o--)(r=e[o])&&(s=(i<3?r(s):i>3?r(a,t,s):r(a,t))||s);return i>3&&s&&Object.defineProperty(a,t,s),s};class Fp{powercardsInMajorDeck;powercardsInMajorDiscard=[];powercardsInMinorDeck;powercardsInMinorDiscard=[];static allMajorPowers=Object.keys(dg).filter((e=>!dg[e].banned&&dg[e].type===kn.Major));static allMinorPowers=Object.keys(dg).filter((e=>!dg[e].banned&&dg[e].type===kn.Minor));$;constructor(e){ed.makeObservable(this),this.$=e;const a=e.config.sets??Ig;this.powercardsInMinorDeck=new Ag(e,a.length===Ig.length?Fp.allMinorPowers:Fp.allMinorPowers.filter((e=>a.includes(dg[e].set)))),this.powercardsInMajorDeck=new Ag(e,a.length===Ig.length?Fp.allMajorPowers:Fp.allMajorPowers.filter((e=>a.includes(dg[e].set))))}discardPower(e){switch(dg[e].type){case kn.Major:this.powercardsInMajorDiscard.includes(e)||this.powercardsInMajorDiscard.push(e);break;case kn.Minor:this.powercardsInMinorDiscard.includes(e)||this.powercardsInMinorDiscard.push(e)}return Promise.resolve()}async drawAndDiscardPower(e){const a=await this.drawPower(e);return null!=a&&await this.discardPower(a),a}async drawPower(e,a={}){const{silent:t}=a;if(e===kn.Minor){let e=await this.powercardsInMinorDeck.draw();return void 0===e&&(await this.$.sendEvent({type:Tn.GenericMain,text:"The Minor Deck was reshuffled from its discard."}),this.powercardsInMinorDeck=new Ag(this.$,this.powercardsInMinorDiscard),this.powercardsInMinorDiscard=[],e=await this.powercardsInMinorDeck.draw()),void 0===e||t||await this.$.sendEvent({type:Tn.PowerCardDrawn,powerType:e}),e}if(e===kn.Major){let e=await this.powercardsInMajorDeck.draw();return void 0===e&&(await this.$.sendEvent({type:Tn.GenericMain,text:"The Major Deck was reshuffled from its discard."}),this.powercardsInMajorDeck=new Ag(this.$,this.powercardsInMajorDiscard),this.powercardsInMajorDiscard=[],e=await this.powercardsInMajorDeck.draw()),void 0===e||t||await this.$.sendEvent({type:Tn.PowerCardDrawn,powerType:e}),e}}removePowerCardFromDecks(e){this.powercardsInMinorDeck.remove(e),this.powercardsInMajorDeck.remove(e)}toString(){return Pg({powercardsInMajorDeck:this.powercardsInMajorDeck.count,powercardsInMajorDiscard:Yo(this.powercardsInMajorDiscard),powercardsInMinorDeck:this.powercardsInMinorDeck.count,powercardsInMinorDiscard:Yo(this.powercardsInMinorDiscard)},2)}}Lp([De],Fp.prototype,"powercardsInMajorDeck",void 0),Lp([De],Fp.prototype,"powercardsInMajorDiscard",void 0),Lp([De],Fp.prototype,"powercardsInMinorDeck",void 0),Lp([De],Fp.prototype,"powercardsInMinorDiscard",void 0),function(e){e.TerrorLevelOne="TerrorLevelOne",e.TerrorLevelTwo="TerrorLevelTwo",e.TerrorLevelThree="TerrorLevelThree",e.FearVictory="FearVictory",e.DahanInsurrectionLevelTwo="DahanInsurrectionLevelTwo",e.DahanInsurrectionLevelThree="DahanInsurrectionLevelThree",e.WardTheShores="WardTheShores"}(Bp||(Bp={}));var Rp=function(e,a,t,n){var r,i=arguments.length,s=i<3?a:null===n?n=Object.getOwnPropertyDescriptor(a,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,a,t,n);else for(var o=e.length-1;o>=0;o--)(r=e[o])&&(s=(i<3?r(s):i>3?r(a,t,s):r(a,t))||s);return i>3&&s&&Object.defineProperty(a,t,s),s};const Mp=Object.freeze(new Set(["expireAtEndOfTurn","expireAtEndOfTimePasses","expireAtEndOfAction","expireAtEndOfActionTree"]));class Np{effects=[];sortedEffects={expireAtEndOfTurn:[],expireAtEndOfTimePasses:[],expireAtEndOfAction:[],expireAtEndOfActionTree:[]};static effectsWithPriority=[Pn.AdjustNumberOfExploreCards,Pn.AfterMoving,Pn.AlterInvaderActionInLand,Pn.AfterTheNormalExploreStep];$;stack=[];nextId=0;constructor(e){ed.makeObservable(this),this.$=e}get currentStackEffect(){return this.stack.length>0?this.stack[this.stack.length-1]:void 0}get effectIds(){const e=[];for(const a of this.effects)a.effectId&&!e.includes(a.effectId)&&e.push(a.effectId);return e}get globalReminderEffects(){return this.effectsOfType(Pn.GlobalReminder)}get hasLostFromEffect(){return this.resultFromFirstEffectOfType(Pn.LossCondition)??null}get hasWonFromEffect(){return this.resultFromFirstEffectOfType(Pn.WinCondition)??null}get parentEffect(){return this.stack.length>1?this.stack[this.stack.length-2]:void 0}get reminderEffects(){return[...this.effectsOfType(Pn.Reminder),...this.effectsOfType(Pn.DefendFromGame).filter((e=>void 0===e[Pn.Reminder])),...this.effectsOfType(Pn.DefendFromSpirits).filter((e=>void 0===e[Pn.Reminder]&&void 0===e[Pn.DefendFromGame]))]}static enhanceParentEffectWithChild(e,a){return{name:e?.name,text:e?.text,prompt:e?.prompt,cancel:e?.cancel,card:e?.card,players:e?.players,spirit:e?.spirit,textArea:e?.textArea,scenario:e?.scenario,adversary:e?.adversary,adversaryLevel:e?.adversaryLevel,highlightBoards:e?.highlightBoards,highlightPieces:e?.highlightPieces,highlightLocations:e?.highlightLocations,highlightCorners:e?.highlightCorners,highlightPowers:e?.highlightPowers,...a}}async addEffect(e){if(e.effects){const{effects:a,...t}=e;for(const e of a)await this.addEffect({...t,...e})}else e[Pn.Now]?await this.doEffectWithContext(e,Pn.Now):this.addAndSortEffect(e)}async addEffectUntilEndOfAction(e){await this.addEffect({...e,expireAtEndOfAction:this.$.action})}async addEffectUntilEndOfActionTree(e){await this.addEffect({...e,expireAtEndOfActionTree:this.$.action})}async addEffectUntilEndOfTurn(e){await this.addEffect({...e,expireAtEndOfTurn:!0})}async addSubEffect(e){const a=this.enhanceEffectWithCurrentEffect(e);if(e.effects)for(const t of e.effects)await this.addSubEffect(Np.enhanceParentEffectWithChild(a,t));else e[Pn.Now]?await this.doEffectWithContext(a,Pn.Now):this.addAndSortEffect(a);return a}addSubEffectUntilEndOfAction(e){return this.addSubEffect({...e,expireAtEndOfAction:this.$.action})}addSubEffectUntilEndOfTimePasses(e){return this.addSubEffect({...e,expireAtEndOfTimePasses:!0})}addSubEffectUntilEndOfTurn(e){return this.addSubEffect({...e,expireAtEndOfTurn:!0})}async doEffect(e,a,t){this.stack.push(e),await(e[a]?.(t)),this.stack.pop(),(e[Pn.InTargetLand]||e[Pn.TargetSpirit])&&this.removeEffect(e)}async doEffectWithContext(e,a,t){this.stack.push(e),await(e[a]?.({$:this.$,effect:e,you:e.spirit,action:this.$.action,...t})),this.stack.pop(),(e[Pn.InTargetLand]||e[Pn.TargetSpirit])&&this.removeEffect(e)}async doEffects(e,a,t){for(const n of this.effectsOfType(e).slice())(void 0===t||t(n))&&await this.doEffect(n,e,a)}async doEffectsWithContext(e,a,t){for(const n of this.effectsOfType(e).slice())(void 0===t||t(n))&&await this.doEffectWithContext(n,e,a)}async doEffectsWithPriority(e,a){const t=this.effectsOfType(e).slice();if(Np.effectsWithPriority.includes(e))for(const n of t)n.highPriority&&n[e]&&await this.doEffect(n,e,a);for(const n of t)!n.highPriority&&n[e]&&await this.doEffect(n,e,a)}effectsMappedWithFilter(e,a){return this.effectsOfType(e).reduce(((t,n)=>{const r=n[e]?.(a);return r&&t.push(r),t}),[])}effectsOfType(e){return this.sortedEffects[e]??[]}enhanceEffectWithCurrentEffect(e){return void 0!==this.currentStackEffect?Np.enhanceParentEffectWithChild(this.currentStackEffect,e):e}existEffect(e){return this.effectsOfType(e).length>0}firstEffectOfType(e,a){for(const t of this.effectsOfType(e)){const n=t[e]?.(a);if(n)return t}}hasEffectNamed(e){return this.effects.some((a=>a.name===e&&a.id!==this.currentStackEffect?.id))}async oneEffectActivates(e,a){const t=this.effectsOfType(e),n=Np.effectsWithPriority.includes(e)?[!0,void 0]:[void 0],r=this.$.action;for(const i of n)for(const n of t)if(n.highPriority===i){const t=n[e];if(void 0!==t){this.stack.push(n);const e=await t({$:this.$,effect:n,you:n.spirit,action:r,...a});if(this.stack.pop(),!0===e)return!0}}return!1}removeCurrentEffect(){this.removeEffect(this.currentStackEffect)}removeEffect(e){Vr(this.effects,(a=>a.id===e.id));for(const a of Object.keys(e))if("function"==typeof e[a]||Mp.has(a)){const t=this.sortedEffects[a];void 0!==t&&Vr(t,(a=>a.id===e.id))}void 0!==e[Pn.Elements]&&this.$.spirits.forEach((e=>{e.invalidateEffectElementCache()}))}removeEffectsWithId(e){for(const a of this.effects.slice())a.effectId===e&&this.removeEffect(a)}removeEffectsWithName(e){for(const a of this.effects.slice())a.name===e&&this.removeEffect(a)}resultFromFirstEffectOfType(e,a){for(const t of this.effectsOfType(e)){const n=t[e];if(n){const e=n(a);if(void 0!==e)return e}}}async runEndOfActionEffects(e){if(this.sortedEffects.expireAtEndOfAction.length>0){const a=[],t=this.sortedEffects.expireAtEndOfAction.slice();for(const n of t)n.expireAtEndOfAction===e&&t.some((e=>e.id===n.id))&&(this.$.removeEffect(n),a.push(n));for(const e of a)await this.doEffect(e,Pn.ActionEnds)}await this.doEffects(Pn.AnyActionEnds)}async runEndOfActionTreeEffects(e){if(this.sortedEffects.expireAtEndOfActionTree.length>0){const a=[],t=this.sortedEffects.expireAtEndOfActionTree.slice();for(const n of t)n.expireAtEndOfActionTree===e&&t.some((e=>e.id===n.id))&&(this.$.removeEffect(n),a.push(n));for(const e of a)await this.doEffect(e,Pn.ActionEnds)}}someEffect(e,a){return this.sortedEffects[e]?.some((t=>t[e](a)))??!1}sumEffects(e,a){const t=this.sortedEffects[e];if(!t)return 0;let n=0;for(const r of t)n+=r[e]?.(a)??0;return n}async timePasses(){for(const e of this.sortedEffects.expireAtEndOfTurn.slice())e.expireAtEndOfTurn&&this.removeEffect(e);await this.doEffects(Pn.TimePasses)}timePassesLateExpiration(){for(const e of this.sortedEffects.expireAtEndOfTimePasses.slice())e.expireAtEndOfTimePasses&&this.removeEffect(e);return Promise.resolve()}addAndSortEffect(e){e.id=this.nextId,this.nextId+=1,this.effects.push(e);for(const a of Object.keys(e))("function"==typeof e[a]||Mp.has(a))&&(this.sortedEffects[a]||(this.sortedEffects[a]=[]),this.sortedEffects[a].push(e))}}Rp([De],Np.prototype,"sortedEffects",void 0);var Wp=function(e,a,t,n){var r,i=arguments.length,s=i<3?a:null===n?n=Object.getOwnPropertyDescriptor(a,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,a,t,n);else for(var o=e.length-1;o>=0;o--)(r=e[o])&&(s=(i<3?r(s):i>3?r(a,t,s):r(a,t))||s);return i>3&&s&&Object.defineProperty(a,t,s),s};class $p{currentAction={type:qo.GameAction,triggers:[],data:{},parentData:{},blackList:[],dontCountAs:new Set};$;actionStack=[this.currentAction];isDoublingActions=!1;triggerId=0;constructor(e){ed.makeObservable(this),this.$=e}get currentActionType(){return this.currentAction.type}get currentTriggers(){return this.currentAction.triggers}get hasRunningAction(){return this.actionStack.length>1}async addTrigger(e,a,t,n={}){const{movingAction:r,priority:i}=n;this.currentTriggers.some((a=>a.childEffect.triggerId===e.triggerId))||this.currentAction.blackList.some((a=>a.triggerId===e.triggerId))?this.currentAction.blackList.some((a=>a.triggerId===e.triggerId))&&await this.$.sendEvent({type:Tn.GenericSub,text:`${a.name} is not triggered because it cannot trigger itself.`}):i?this.currentTriggers.unshift({childEffect:e,parentEffect:a,parentAction:t,movingAction:r}):this.currentTriggers.push({childEffect:e,parentEffect:a,parentAction:t,movingAction:r})}checkIfEnded(){if(this.$.phase===Gi.Setup||this.$.phase===Gi.SetupPresence)return!1;const e=this.combinedLostReason;e&&this.$.loseGame(e);const a=this.combinedWinReason;return a&&this.$.winGame(a),this.$.gameEnded}async doAction(e,a,t={}){const{spirit:n,power:r,data:i,parentData:s,blackList:o,land:d,board:l}=t,c=this.numberOfActions(d,l);c>1&&(this.isDoublingActions=!0);for(let t=0;t<c;t+=1)if(!this.$.gameEnded){const t=o??this.currentAction.blackList;this.currentAction={type:e,spirit:n,power:r,triggers:[],data:i??{},parentData:s??{},blackList:t,dontCountAs:new Set},this.actionStack.push(this.currentAction),await this.$.doEffects(Pn.AnyActionStarts),await a(),await this.$.runEndOfActionEffects(this.currentAction);for(const e of this.currentTriggers){const{childEffect:a,parentEffect:n,movingAction:r}=e;this.currentAction.data.movingAction=r;const i=Np.enhanceParentEffectWithChild(n,a);await this.doAction(e.parentAction.type,(()=>this.$.addEffect(i)),{spirit:e.parentAction.spirit,power:e.parentAction.power,parentData:this.currentAction.data,blackList:[...t,a]})}const d=this.actionStack.pop();this.currentAction=this.actionStack.slice(-1)[0],1===this.actionStack.length&&(await this.checkForInvalidPieces(),this.checkIfEnded()),await this.$.runEndOfActionTreeEffects(d)}c>1&&(this.isDoublingActions=!1)}nextTriggerId(){const e=this.triggerId;return this.triggerId+=1,e}get combinedLostReason(){return this.$.hasLostFromEffect?this.$.hasLostFromEffect:this.someSpiritLacksPresence?Ep.RanOutOfPresence:this.ranOutOfBlight?Ep.RanOutOfBlight:null}get combinedWinReason(){return this.$.hasWonFromEffect?this.$.hasWonFromEffect:1!==this.$.terrorLevel||this.$.fearBasedVictoryIsRemoved||0!==(this.$.pieceCount[Ln.Explorer]||0)||0!==(this.$.pieceCount[Ln.Town]||0)||0!==(this.$.pieceCount[Ln.City]||0)?2!==this.$.terrorLevel||this.$.fearBasedVictoryIsRemoved||0!==(this.$.pieceCount[Ln.Town]||0)||0!==(this.$.pieceCount[Ln.City]||0)?3!==this.$.terrorLevel||this.$.fearBasedVictoryIsRemoved||0!==(this.$.pieceCount[Ln.City]||0)?4!==this.$.terrorLevel||this.$.fearBasedVictoryIsRemoved?null:Bp.FearVictory:Bp.TerrorLevelThree:Bp.TerrorLevelTwo:Bp.TerrorLevelOne}get numberOfActions(){return(e,a)=>{let t=1;const n={land:e,board:a};return this.isDoublingActions||(t+=this.$.sumEffects(Pn.AdjustNumberOfActions,n)),t}}get ranOutOfBlight(){return(this.$.blightStatus===lg.BlightedIsland||!this.$.config.blightCards)&&0===this.$.blightOnBlightCard}get someSpiritLacksPresence(){return this.$.spirits.some((e=>0===e.landsIncludingNonExisting.length))}async checkForInvalidPieces(){await this.$.inOceans().forEach((async e=>{e.hasSomeTerrain||!e.hasInvaders&&!e.hasDahan||await e.move({quantifier:ur.All,pieces:this.$.InvaderOrDahan,movement:Mr.Relocate,oceanIsAllowed:!0,pickDestinationEffect:{name:"Clean-up",text:"If <dahan> or Invaders winds up in a place its not allowed to be, they are cleaned up to the closest legal land."}})}))}}Wp([De],$p.prototype,"currentAction",void 0),Wp([De],$p.prototype,"actionStack",void 0);var Gp=function(e,a,t,n){var r,i=arguments.length,s=i<3?a:null===n?n=Object.getOwnPropertyDescriptor(a,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,a,t,n);else for(var o=e.length-1;o>=0;o--)(r=e[o])&&(s=(i<3?r(s):i>3?r(a,t,s):r(a,t))||s);return i>3&&s&&Object.defineProperty(a,t,s),s};class Up{lostReason;phase=Gi.Setup;reportedPhase=Gi.Setup;turn=0;winReason;$;constructor(e){ed.makeObservable(this),this.$=e}get gameEnded(){return this.gameLost||this.gameWon}get gameLost(){return void 0!==this.lostReason}get gameWon(){return void 0!==this.winReason}async doSteps(e){for(const a of e)this.gameEnded||await a()}loseGame(e){this.lostReason=e}async run(e){try{for(await this.doSteps([()=>this.setPhase(Gi.Setup),()=>this.$.setupFearDeck(),()=>this.$.setupInvaderDeck(),()=>this.$.forEachLand((e=>e.restoreToSetupSymbols())),()=>this.$.setupStartingTokens(),()=>this.$.setupScenario(),()=>this.$.setupAdversaries(),()=>this.$.setupCommandBeast(),()=>this.$.setupSpirits(),()=>e&&this.$.possiblyResolveHistoryFinished(),()=>this.$.gameStartQuery(),()=>this.$.doEffects(Pn.BeforeSetupPresence),()=>this.setPhase(Gi.SetupPresence),()=>this.$.setupPresence(),()=>this.$.doEffects(Pn.AfterSetupPresence),()=>this.$.doEffects(Pn.BeforeInitialExplore),()=>!this.$.config.skipInitialExplore&&this.setPhase(Gi.InitialExplore),()=>!this.$.config.skipInitialExplore&&this.$.explore(),()=>!this.$.config.skipInitialExplore&&this.$.doEffects(Pn.AfterInitialExplore),()=>!this.$.config.skipInitialExplore&&this.setPhase(Gi.AdvanceCards),()=>!this.$.config.skipInitialExplore&&this.$.advanceInvaderCards(),()=>this.$.doEffects(Pn.OnSetupAfterAddingInvaders),()=>!!this.$.config.extraGrowth&&this.growthPhase(),()=>!!this.$.config.extraGrowth&&this.timePasses(),()=>!this.$.config.extraGrowth&&this.nextTurn()]);!this.gameEnded;)await this.spiritPhase(),this.$.spiritSimulation?await this.$.scoreFromPowers():await this.doSteps([()=>this.fastPhase(),()=>this.$.doEffects(Pn.AfterFastPhase),()=>this.invaderPhase(),()=>this.$.doEffects(Pn.AfterInvaderPhase),()=>this.slowPhase(),()=>this.$.doEffects(Pn.AfterSlowPhase)]),this.gameEnded||await this.timePasses()}catch(e){console.error(e),this.loseGame(Ep.GameError)}await this.$.sendEvent({type:Tn.GameEnd,gameLost:this.gameLost,gameWon:this.gameWon,winReason:this.winReason,lostReason:this.lostReason});const a=this.winReason,t=this.lostReason;this.winReason=void 0,this.lostReason=void 0,await this.$.doEffects(Pn.AfterGameEnds,{winReason:a,lostReason:t}),this.winReason=a,this.lostReason=t,await this.$.possiblyResolveHistoryFinished()}setPhase(e){return this.phase=e,Promise.resolve()}toString(){return Pg({turn:this.turn},2)}updateReportedPhase(){this.reportedPhase=this.phase}winGame(e){this.winReason=e}async fastPhase(){await this.doSteps([()=>this.setPhase(Gi.FastPowers),()=>this.$.resolvePowers(sr.Fast)])}async growthPhase(){await this.doSteps([()=>this.setPhase(Gi.Grow),()=>this.$.doEffects(Pn.StartOfSpiritPhase),()=>this.$.growAndPlayTrackActions(),()=>this.$.doEffects(Pn.AfterGrowth)])}async invaderPhase(){await this.doSteps([()=>this.setPhase(Gi.BlightedIsland),()=>this.$.doEffects(Pn.BlightedIslandPhase),()=>!!this.$.config.events&&this.$.drawEventCard(),()=>this.$.doEffects(Pn.AfterEventPhase),()=>this.setPhase(Gi.Fear),()=>this.$.resolveFearCards(),()=>this.$.doEffects(Pn.HighImmigration),()=>this.$.doEffects(Pn.BeforeRavageStep),()=>this.setPhase(Gi.Ravage),()=>this.$.doEffects(Pn.StartOfRavageStep),()=>this.$.ravage(),()=>this.$.doEffects(Pn.AfterTheNormalRavageStep),()=>this.setPhase(Gi.Build),()=>this.$.build(),()=>this.$.doEffects(Pn.AfterTheNormalBuildStep),()=>this.setPhase(Gi.Explore),()=>this.$.explore(),()=>this.$.doEffectsWithPriority(Pn.AfterTheNormalExploreStep),()=>this.setPhase(Gi.AdvanceCards),()=>this.$.advanceInvaderCards()])}nextTurn(){return this.turn+=1,Promise.resolve()}async slowPhase(){await this.doSteps([()=>this.setPhase(Gi.SlowPowers),()=>this.$.doEffects(Pn.StartOfSlowPhase),()=>this.$.resolvePowers(sr.Slow)])}async spiritPhase(){await this.doSteps([()=>this.growthPhase(),()=>this.setPhase(Gi.GainEnergy),()=>this.$.gainEnergyFromTracks(),()=>this.$.doEffects(Pn.AfterGainingEnergyFromTracks),()=>this.$.playTrackActions(),()=>this.$.doEffects(Pn.BeforePlayPowers),()=>this.setPhase(Gi.PlayPowers),()=>this.$.playPowers(),()=>this.$.doEffects(Pn.AfterPlayPowers)])}async timePasses(){await this.doSteps([()=>this.setPhase(Gi.TimePasses),()=>this.$.doEffects(Pn.AtTimePassesBegin),()=>this.$.timePassesForSpirits(),()=>this.$.forEachLand((e=>e.timePasses())),()=>this.$.timePassesForFear(),()=>this.$.timePassesForEffects(),()=>this.$.doEffects(Pn.AtTimePassesEnds),()=>this.$.timePassesLateExpiration(),()=>this.$.globalHealthCheck(),()=>this.nextTurn()])}}Gp([De],Up.prototype,"lostReason",void 0),Gp([De],Up.prototype,"phase",void 0),Gp([De],Up.prototype,"reportedPhase",void 0),Gp([De],Up.prototype,"turn",void 0),Gp([De],Up.prototype,"winReason",void 0);const Hp={name:"The Kingdom of England",set:gn.Base,levels:[{difficulty:1,fearCards:[3,3,3],effect:{effects:[{name:"Proud & Might Capital",text:"If 7 or more <town>/<city> are ever in a single land, the Invaders win.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.ProudAndMightCapital,[Pn.LossCondition]:()=>e.existLandWhere((a=>a.hasAtLeast(7,e.TownOrCity)))?Ep.ProudAndMightCapital:null,[Pn.GlobalReminder]:()=>({icon:`<town>/<city><br>${e.capitalSize} / 7`,ongoing:!0,adversary:mg.England})})}},{name:"Stage II Escalation <escalation><br>Building Boom",text:"On each board with <town>/<city>, Build in the land with the most <town>/<city>.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.BuildingBoom,[Pn.Escalation]:async({adversary:a,beforeExplore:t,beforeBuilding:n})=>!(a!==mg.England||!t&&!n)&&(await e.doAdversaryActionOnEachBoard({where:a=>a.hasOneLandWith(e.TownOrCity),forEach:a=>a.inLandsWithMost((a=>a.numberOf(e.TownOrCity))).pickOne((e=>e.doExtraBuild())),effect:{noOptions:"No boards with <town>/<city>."}}),!0),[Pn.GlobalReminder]:()=>({icon:"<escalation><br><town>/<city>",ongoing:!0,visible:e.stage===(e.adversaryLeading?.adversary===mg.England?2:3),adversary:mg.England})})}}]}},{difficulty:3,fearCards:[3,4,3],effect:{name:"Indentured Servants Earn Land",text:"Invader Build actions affect lands without Invaders, if they are adjacent to at least 2 <town>/<city> before the Build Action.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.IndenturedServantsEarnLand,[Pn.BuildCardsAffectLandsWithoutInvaders]:({land:a})=>a.adjacentPiecesInLandsWhere((e=>!e.location.isIsolated)).hasAtLeast(2,(a=>a.isA(e.TownOrCity))),[Pn.GlobalReminder]:()=>({icon:"2+<br><town>/<city>",ongoing:!0,adversary:mg.England})})}}},{difficulty:4,fearCards:[4,4,3],effect:{name:"Criminals and Malcontents",text:"During Setup, on each board add 1 <city> to land #1 and 1 <town> to land #2.",[Pn.Now]:({$:e})=>e.onEachBoard((async a=>{a.ignoreInvaderAndBlightInSetup||(e.config.adversaryLeading?.adversary===mg.Scotland||e.config.adversarySupporting?.adversary===mg.Scotland?await e.addSubEffectUntilEndOfTurn({[Pn.BeforeSetupPresence]:async()=>{await a.inLandNumber(1).inAdjacentLandsWhere((e=>e.isInland)).pickOne((async a=>{await a.add(1,e.City)}),{name:"Combing the Kingdom of Scotland",text:"Criminals and Malcontents:<br>During Setup, on each board add 1 <city> to land #1.<br><br>If the other Adversary's Setup instructions would add <city> to a Coastal land other than land #2, instead add the <city> to an adjacent inland land."})}}):await a.inLandNumber(1).add(1,e.City),await a.inLandNumber(2).add(1,e.Town))}))}},{difficulty:6,fearCards:[4,5,4],effect:{name:"High Immigration (I)",text:"Put the 'High Immigration' tile on the Invader Board, to the left of 'Ravage'. The Invaders take this Build action each Invader Phase before Ravaging. Cards slide left from Ravage to it, and from it to the discard pile.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.HighImmigrationI,[Pn.HighImmigration]:async()=>{await e.setPhase(Gi.HighImmigration),await e.build(ah.HighImmigration)},[Pn.BeforeAdvancingCards]:async()=>{await e.advanceCardsIn(ah.HighImmigration).to(ah.Discard),await e.advanceCardsIn(ah.Ravage).to(ah.HighImmigration),!e.someEffect(Pn.PermanentHighImmigration)&&e.invaderCardsInVisibleSlot(ah.HighImmigration).some((e=>2===Uo[e].stage))&&(e.removeThisEffect(),await e.advanceCardsIn(ah.HighImmigration).to(ah.Discard))}})}}},{difficulty:7,fearCards:[4,5,5],effect:{name:"High Immigration Full",text:"The extra Build tile remains out the entire game.",effectId:In.HighImmigrationFull,[Pn.PermanentHighImmigration]:()=>!0}},{difficulty:9,fearCards:[4,5,5],effect:{name:"Local Autonomy",text:"<town>/<city> have +1 Health.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.LocalAutonomy,[Pn.AdjustHealth]:({piece:a})=>a.isA(e.TownOrCity)?1:0})}}},{difficulty:11,fearCards:[4,5,4],effect:{name:"Independent Resolve",effects:[{text:"During Setup, add an additional <fear> to the Fear Pool per player in the game.",[Pn.Now]:({$:e})=>e.addFearToPool(e.spiritCount)},{text:"During any Invader Phase where you resolve no Fear Cards, perform the Build from High immigration twice.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.IndependentResolve,[Pn.HighImmigration]:async()=>{e.hasResolvedFearCard||await e.build(ah.HighImmigration)},[Pn.GlobalReminder]:()=>({icon:"No <fear><br>x2",ongoing:!0,adversary:mg.England})})}}]}}]},qp={name:"The Kingdom of France (Plantation Colony)",set:gn.BranchAndClaw,levels:[{difficulty:2,fearCards:[3,3,3],effect:{effects:[{name:"Sprawling Plantation",effects:[{text:"Before Setup, return all but 7 <town> per player to the box. Invaders win if you ever cannot place a <town>.",[Pn.Now]:async({$:e})=>{const a=De.box(!1);await e.addSubEffect({effectId:In.SprawlingPlantation,[Pn.LossCondition]:()=>a.get()?Ep.SprawlingPlantation:null,[Pn.GlobalReminder]:()=>({icon:`<town><br>${e.townsCount} / ${e.maxTownsAllowed}`,ongoing:!0,adversary:mg.France}),[Pn.PreventReplacePiece]:async({piece:t,withPieces:n})=>{const r=t===Ln.Town?-1:0,i=zo(n,(e=>e===Ln.Town));return e.townsCount+r+i>e.maxTownsAllowed&&(await e.sendEvent({type:Tn.GenericSub,text:"There are no more <town> to add!"}),a.set(!0),!0)},[Pn.PreventAddPiece]:async({piece:t})=>t===Ln.Town&&e.townsCount===e.maxTownsAllowed&&(await e.sendEvent({type:Tn.GenericSub,text:"There are no more <town> to add!"}),a.set(!0),!0)})}}]},{name:"Stage II Escalation <escalation><br>Demand for New Cash Crops",effects:[{text:"After Exploring, on each board, pick a land of the shown terrain. If it has <town>/<city>, add 1 <blight>. Otherwise, add 1 <town>.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.DemandForNewCashCrops,[Pn.Escalation]:async({adversary:a,card:t,afterExplore:n,beforeBuilding:r})=>{if(a===mg.France&&(n||r)){const a=[...Uo[t].terrains],n=a.length>1;n&&await e.clickToContinue({text:"If the Escalation is specific to a terrain - as with France and Sweden - choose one of the terrain randomly."});const r=a.length>1?await e.drawFrom(a,a.map((e=>zg[e].text))):a[0];return n&&await e.clickToContinue({text:`If the Escalation is specific to a terrain - as with France and Sweden - choose one of the terrain randomly.<br><br>France Escalates in terrain ${zg[r].text}`}),await e.doAdversaryActionOnEachBoard({forEach:a=>a.inLandsWhere((e=>e.hasTerrain(r))).pickOne((async a=>{a.has(e.TownOrCity)?await a.addBlight(1):await a.add(1,e.Town)}))}),!0}return!1},[Pn.GlobalReminder]:()=>({icon:"<escalation><br>+<blight>/<town>",ongoing:!0,visible:e.stage===(e.adversaryLeading?.adversary===mg.France?2:3),adversary:mg.France})})}}]}]}},{difficulty:3,fearCards:[3,3,3],effect:{name:"Frontier Explorers",text:"Except during Setup: After Invaders successfully Explore into a land which had no <town>/<city>, add 1 <explorer> there.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.FrontierExplorers,[Pn.BeforeSuccessfulExplore]:({land:a})=>(a.has(e.TownOrCity)||e.phase===Gi.InitialExplore||(e.action.data.hadNoBuilding=!0),Promise.resolve()),[Pn.AfterSuccessfulExplore]:async({land:a})=>{e.action.data.hadNoBuilding&&(await e.sendEvent({type:Tn.GenericMain,text:"Invaders successfully Explored into a land which had no <town>/<city>."}),await a.add(1,e.Explorer))},[Pn.GlobalReminder]:()=>({icon:"<explorer><explorer>",ongoing:!0,adversary:mg.France})})}}},{difficulty:5,fearCards:[3,4,3],effect:{name:"Slave Labor",effects:[{text:"During Setup, put the 'Slave Rebellion' Event under the top 3 cards of the Event Deck.",[Pn.Now]:async({$:e})=>{if(e.config.events)e.config.thematicRebellion?(e.insertEventCard(nf.SlaveRebellion).underCards(0),await e.shuffleTopThreeEventCards(),e.putBottomEventCardToTop(),e.putBottomEventCardToTop()):e.insertEventCard(nf.SlaveRebellion).underCards(3);else{let a=e.config.thematicRebellion?3:4,t=e.config.thematicRebellion?[0,1,2]:[0];await e.addEffect({effectId:In.SlaveLabor,[Pn.AfterEventPhase]:async()=>{if(e.turn>=a&&0===await e.drawFrom(t,t.map((e=>0===e?"Rebellion now.":"Rebellion later.")))){const n=3===e.stage;e.insertEventCard(nf.SlaveRebellion).underCards(0),await e.drawEventCard(),a=e.turn+(e.config.thematicRebellion?3:4),t=e.config.thematicRebellion?[0,1,2]:[0],n&&(a=99)}}})}}},{text:"After Invaders Build in a land with 2 <explorer> or more, replace all but 1 <explorer> there with an equal number of <town>.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.SlaveLabor,[Pn.BeforeSuccessfulBuild]:({land:a})=>(a.hasAtLeast(2,e.Explorer)&&(e.action.data.hadAtLeastTwoExplorers=!0),Promise.resolve()),[Pn.AfterSuccessfulBuild]:async({land:a})=>{if(e.action.data.hadAtLeastTwoExplorers){const t=a.numberOf(e.Explorer)-1;await e.sendEvent({type:Tn.GenericMain,text:`Slave Labor converted ${t} <explorer>.`}),await a.replaceIndividually({amount:t,pieces:e.Explorer,withPiece:Ln.Town})}},[Pn.GlobalReminder]:()=>({icon:"<explorer><explorer><br>=<explorer><town>",ongoing:!0,adversary:mg.France})})}}]}},{difficulty:7,fearCards:[4,4,3],effect:{name:"Early Plantations",effects:[{text:"During Setup, on each board add 1 <town> to the highest-numbered land without <town>.",[Pn.Now]:async({$:e})=>{await e.onEachBoard((async a=>{if(!a.ignoreInvaderAndBlightInSetup){const t=a.highestNumberedLand((a=>!a.has(e.Town)));t&&await t.add(1,e.Town)}}))}},{text:"Add 1 <town> to land #1.",[Pn.Now]:async({$:e})=>{await e.onEachBoard((async a=>{a.ignoreInvaderAndBlightInSetup||await a.inLandNumber(1).add(1,e.Town)}))}}]}},{difficulty:8,fearCards:[4,4,4],effect:{name:"Triangle Trade",effects:[{text:"Whenever Invaders Build a Coastal <city>, add 1 <town> to the adjacent land with the fewest <town>.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.TriangleTrade,[Pn.AfterSuccessfulBuild]:async({land:a,additions:t})=>{t.some((t=>t.location.isCoastal&&t.piece.isA(e.City)&&!a.isIsolated))&&await e.doAdversaryAction((()=>a.inAdjacentLandsWhere((e=>!e.isIsolated)).withLeast((a=>a.numberOf(e.Town))).pickOne((async a=>{await e.sendEvent({type:Tn.GenericMain,text:"Invaders Built a Coastal <city>:"}),await a.add(1,e.Town)}))))},[Pn.GlobalReminder]:()=>({icon:"<city><br>+1 <town>",ongoing:!0,adversary:mg.France})})}}]}},{difficulty:9,fearCards:[4,5,4],effect:{name:"Slow-Healing Ecosystem",effects:[{text:"When you remove <blight> from the board, put it here instead of onto the Blight Card. As soon as you have 3 <blight> per player here, move it all back to the Blight Card.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.SlowHealingEcosystem,[Pn.PreventAddRemovedBlightToBlightCard]:async()=>(await e.addSlowHealingBlight(),!0),[Pn.AfterAddingSlowHealingBlight]:async()=>{for(;e.slowHealingBlight>=3;)await e.clickToContinue(),await e.removeSlowHealingBlight(3),await e.addBlightToBlightCard(3)},[Pn.GlobalReminder]:()=>({icon:"3 <blight>",ongoing:!0,adversary:mg.France})})}}]}},{difficulty:10,fearCards:[4,5,5],effect:{name:"Persistent Explorers",effects:[{text:"After the normal Explore, on each board add 1 <explorer> to a land without any.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.PersistentExplorers,[Pn.AfterResolvingExploreCard]:()=>e.doAdversaryActionOnEachBoard({forEach:async a=>{a.ignoreInvaderAndBlightInSetup||await a.inLandsWithout(e.Explorer).pickOne((async a=>{await a.add(1,e.Explorer)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands without <explorer>.`})}}),[Pn.GlobalReminder]:()=>({icon:"+1 <explorer>",ongoing:!0,adversary:mg.France})})}},{text:"Fear Card effects never remove <explorer>. If one would, you may instead Push that <explorer>.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.PersistentExplorers,[Pn.PreventRemovePiece]:async({piece:a,removement:t})=>!(e.action.type!==qo.FearAction||t!==Wn.Remove||!a.isA(e.Explorer))&&(await a.push({quantifier:ur.May}),!0),[Pn.GlobalReminder]:()=>({icon:"<fear><br>Push <explorer>",ongoing:!0,adversary:mg.France})})}}]}}]},jp={name:"The Habsburg Monarchy (Livestock Colony)",set:gn.JaggedEarth,levels:[{difficulty:2,fearCards:[3,3,3],effect:{effects:[{name:"Irreparable Damage",text:"Track how many <blight> come off the Blight Card during Ravages that do 8+ Damage to the land. If that number ever exceeds players, the Invaders win.",[Pn.Now]:async({$:e})=>{const a=De.box(0);await e.addSubEffect({effectId:In.IrreparableDamage,effects:[{[Pn.AfterRavagingDamageLand]:async({blightedLands:t,damageExceedingHealth:n})=>{n>=6&&t.length>0&&(a.set(a.get()+t.length),await e.sendEvent({type:Tn.GenericSub,text:`The Invaders did 8+ Damage to the land and caused ${t.length} Irreparable Damage.`}))},[Pn.LossCondition]:()=>a.get()>e.spiritCount?Ep.IrreparableDamage:null,[Pn.GlobalReminder]:()=>({icon:`<blight><br>${a.get()} / ${e.maxIrreparableDamage}`,ongoing:!0,adversary:mg.Habsburg})}]})}},{name:"Stage II Escalation <escalation><br>Seek Prime Territory",text:"After Exploring: On each board with 4 or fewer <blight>, add 1 <town> to a land without <town>/<blight>. On each board with 2 or fewer <blight>, do so again.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.SeekPrimeTerritory,[Pn.Escalation]:async({adversary:a,afterExplore:t,beforeBuilding:n})=>{if(a===mg.Habsburg&&(t||n)){for(const a of[4,2])await e.doAdversaryActionOnEachBoard({where:e=>e.numberOfBlight<=a,forEach:async t=>{await t.inLandsWithNoneOf(e.Town,e.Blight).pickOne((async a=>{await a.add(1,e.Town)}),{text:4===a?"On each board with 4 or fewer <blight>, add 1 <town> to a land without <town>/<blight>.":"On each board with 2 or fewer <blight>, do so again.",highlightBoards:[t],noOptions:`On board ${t.name}: No lands without <town>/<blight>.`})}});return!0}return!1},[Pn.GlobalReminder]:()=>({icon:"<escalation>",ongoing:!0,visible:e.stage===(e.adversaryLeading?.adversary===mg.Habsburg?2:3),adversary:mg.Habsburg})})}}]}},{difficulty:3,fearCards:[3,4,3],effect:{name:"Migratory Herders",text:"After the normal Build Step: In each land matching a Build Card, Gather 1 <town> from a land not matching a Build Card. (In board/land order.)",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.MigratoryHerders,[Pn.AfterTheNormalBuildStep]:()=>e.doAdversaryActionOnEachBoard({forEach:a=>a.inLandsWhere((a=>a.matchesInvaderCards(e.invaderCardsInVisibleSlot(ah.Build),qr.Build))).forEach((async a=>{a.isIsolated||await a.gather({amount:1,pieces:e.Town,filter:a=>!a.matchesInvaderCards(e.invaderCardsInVisibleSlot(ah.Build),qr.Build)&&!a.isIsolated,pickPiecesEffect:{noOptions:`Land ${a.coordinateLink} has no adjacent <town> not matching a Build Card.`}})}))}),[Pn.GlobalReminder]:()=>({icon:"Gather<br>1 <town>",ongoing:!0,adversary:mg.Habsburg})})}}},{difficulty:5,fearCards:[4,5,2],effect:{name:"More Rural than Urban",effects:[{text:"During Setup, on each board, add 1 <town> to land #2 and 1 <town> to the highest-numbered land without Setup symbols.",[Pn.Now]:({$:e})=>e.onEachBoard((async a=>{a.ignoreInvaderAndBlightInSetup||(await a.inLandNumber(2).add(1,e.Town),await(a.highestNumberedLand((e=>!e.hasSetupSymbols))??a.highestNumberedLand()).add(1,e.Town))}))},{text:"During Play, when Invaders would Build 1 <city> in an Inland land, they instead Build 2 <town>.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.MoreRuralThanUrban,[Pn.AlterInvaderActionInLand]:async({invaderAction:a,land:t})=>{if(a===qr.Build&&t.isInland&&t.buildPlans===e.City){await e.sendEvent({type:Tn.GenericSub,text:`Invaders would Build 1 <city> in the inland ${t.coordinateLink}, so they instead Build 2 <town>.`});const a=await t.add(2,e.Town);return await e.doEffects(Pn.AfterSuccessfulBuild,{land:t,additions:a}),!0}return!1},[Pn.GlobalReminder]:()=>({icon:"1 <city><br>=2 <town>",ongoing:!0,adversary:mg.Habsburg})})}}]}},{difficulty:6,fearCards:[4,5,3],effect:{name:"Fast Spread",text:"When making the Invader Deck, Remove 1 additional Stage I Card. (New deck order: 11-2222-33333)",[Pn.Now]:({$:e})=>e.removeTopMostInvaderCardOfStage(1)}},{difficulty:8,fearCards:[4,5,3],effect:{name:"Herds Thrive in Verdant Lands",text:"<town> in lands without <blight> are Durable: they have +2 Health, and 'Destroy <town>' effects instead deal 2 Damage (to <town> only) per <town> they could Destroy. ('Destroy all <town>' works normally.)",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.HerdsThriveInVerdantLands,[Pn.AdjustHealth]:({piece:e})=>e.isTown&&!e.location?.hasBlight?2:0,[Pn.AfterAddingPiece]:async({land:e,additions:a})=>{a.length>0&&a[0].piece.isBlight&&await e.healthCheck()},[Pn.AdjustRemovePiece]:async({piece:a,location:t,removement:n,removeAll:r})=>!(!a.isA(e.Town)||t.hasBlight||!1!==r||n!==Wn.DirectDestroy&&n!==Wn.Drown)&&(e.action.data.targetableTowns=e.action.data.targetableTowns??[],e.action.data.targetableTowns.push(a),await a.location.damage(2,e.Town,{filter:a=>e.action.data.targetableTowns.includes(a)}),!0)})}}},{difficulty:9,fearCards:[4,6,3],effect:{name:"Wave of Immigration",text:"Before the initial Explore, put the Habsburg Reminder Card under the top 5 Invader Cards. When revealed, on each board, add 1 <city> to a Coastal land without <city> and 1 <town> to the 3 Inland lands with the fewest <blight>.",card:Go.WaveOfImmigration,[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.WaveOfImmigration,[Pn.BeforeInitialExplore]:async()=>{await e.clickToContinue(),await e.insertInvaderCard(Pp.WaveOfImmigration,{isSpecial:!0}).justBelowCards(5)},[Pn.AfterChangingInvaderDeck]:async()=>{e.invaderCardsInExploreDeck.length>0&&e.invaderCardsInExploreDeck[0]===Go.WaveOfImmigration&&0===e.invaderCardsInSlot(ah.Explore).length&&(await e.sendEvent({type:Tn.WaveOfImmigration}),await e.doAdversaryActionOnEachBoard({forEach:async a=>{await a.inLandsWithout(e.City).where((e=>e.isCoastal)).pickOne((async a=>{await a.add(1,e.City)}),{textArea:[.579,.75],text:"Add 1 <city> to a Coastal land without <city>.",highlightBoards:[a],noOptions:`On board ${a.name}: No Coastal lands without <city>.`});const t=a.inInlandLands();await Jr(3,(a=>t.copy().withLeast((a=>a.numberOf(e.Blight))).pickOne((async a=>{t.remove(a),await a.add(1,e.Town)}),{textArea:[.686,.918],text:"Add 1 <town> to the 3 Inland lands with the fewest <blight>.",prompt:`Pick Inland land to add <town>. ${3-a} left.`})))}}),await e.removeTopMostInvaderCardOfStage(0))}})}}},{difficulty:10,fearCards:[5,6,3],effect:{name:"Far-Flung Herds",text:"Ravages do +2 Damage (total) if any adjacent lands have <town>. (This does not cause lands without Invaders to Ravage.)",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.FarFlungHerds,[Pn.AdjustCollectiveInvaderRavageDamage]:({land:a})=>!a.isIsolated&&a.hasAdjacentLandWhere((a=>a.participatingInvaders().where((a=>a.isA(e.Town))).count>0&&!a.isIsolated))?2:0,[Pn.GlobalReminder]:()=>({icon:"<range-1><br>+2 <damage>",ongoing:!0,adversary:mg.Habsburg})})}}}]},_p={name:"The Kingdom of Brandenburg-Prussia",set:gn.Base,levels:[{difficulty:1,fearCards:[3,3,3],effect:{name:"Stage II Escalation <escalation><br>Land Rush",text:"On each board with <town>/<city>, add 1 <town> to a land without <town>.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.LandRush,[Pn.Escalation]:async({beforeExplore:a,beforeBuilding:t,adversary:n})=>!(n!==mg.BrandenburgPrussia||!a&&!t)&&(await e.doAdversaryActionOnEachBoard({where:a=>a.hasOneLandWith(e.TownOrCity),forEach:a=>a.inLandsWithout(e.Town).pickOne((async a=>{await a.add(1,e.Town)}),{highlightBoards:[a],noOptions:`On board ${a.name}: No lands without <town>.`}),effect:{noOptions:"No boards with <town>/<city>."}}),!0),[Pn.GlobalReminder]:()=>({icon:"<escalation><br>+1 <town>",ongoing:!0,visible:e.stage===(e.adversaryLeading?.adversary===mg.BrandenburgPrussia?2:3),adversary:mg.BrandenburgPrussia})})}}},{fearCards:[3,3,3],difficulty:2,effect:{name:"Fast Start",text:"During Setup, on each board add 1 <town> to land #3.",[Pn.Now]:({$:e})=>e.onEachBoard((async a=>{a.ignoreInvaderAndBlightInSetup||await a.inLandNumber(3).add(1,e.Town)}))}},{difficulty:4,fearCards:[3,3,3],effect:{name:"Surge of Colonists",text:"When making the Invader Deck, put I of the stage III cards between Stage I and Stage II.",[Pn.Now]:async({$:e})=>{await e.removeBottomMostInvaderCardOfStage(3),await e.insertInvaderCard(Pp.Stage3Card,{isSpecial:!0}).justBelowBottomMostOfStage(1)}}},{difficulty:6,fearCards:[3,4,3],effect:{name:"Efficient",text:"When making the Invader Deck, remove and additional Stage I card.",[Pn.Now]:({$:e})=>e.removeTopMostInvaderCardOfStage(1)}},{difficulty:7,fearCards:[4,4,3],effect:{name:"Aggressive Timetable",text:"When making the Invader Deck, remove and additional Stage II card.",[Pn.Now]:({$:e})=>e.removeTopMostInvaderCardOfStage(2)}},{difficulty:9,fearCards:[4,4,3],effect:{name:"Ruthlessly Efficient",text:"When making the Invader Deck, remove an additional Stage I card.",[Pn.Now]:({$:e})=>e.removeTopMostInvaderCardOfStage(1)}},{difficulty:10,fearCards:[4,4,4],effect:{name:"Terrifyingly Efficient",text:"When making the Invader Deck, remove all Stage I cards.",[Pn.Now]:({$:e})=>e.removeTopMostInvaderCardOfStage(1)}}]},Vp={name:"The Tsardom of Russia",set:gn.JaggedEarth,levels:[{difficulty:1,fearCards:[3,3,3],effect:{effects:[{name:"Hunters Swarm the Island",text:"Put <beasts> Destroyed by Adversary rules on this panel. If there are ever more <beasts> on this panel than on the island, the Invaders win.",[Pn.Now]:async({$:e})=>{const a=De.box(0);await e.addSubEffect({effectId:In.HuntersSwarmTheIsland,[Pn.AfterRemovePiece]:({removement:t,piece:n})=>(n.isIgnoringCountAsA(e.Beasts)&&wr[t].isDestroyLike&&e.action.type===qo.AdversaryAction&&a.set(a.get()+1),Promise.resolve()),[Pn.LossCondition]:()=>a.get()>e.beastsOnIsland?Ep.HuntersSwarmTheIsland:null,[Pn.GlobalReminder]:()=>{return{icon:`<beasts><br>${a.get()} ${t=a.get(),n=e.beastsOnIsland,t<n?"<":t===n?"=":">"} ${e.beastsOnIsland}`,ongoing:!0,adversary:mg.Russia};var t,n}})}},{name:"Stage II Escalation <escalation><br>Stalk the Predators",text:"On each board: Add 2 <explorer> (total) among lands with <beasts>. If you can't instead add 2 <explorer> among lands with <beasts> on a different board.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.StalkThePredators,[Pn.Escalation]:async({adversary:a,beforeExplore:t,beforeBuilding:n})=>!(a!==mg.Russia||!t&&!n)&&(await e.doAdversaryActionOnEachBoard({forEach:async a=>{let t=e.countPieceOnlyIfHavingPiece(Ln.Beasts,(()=>a.inLandsWith(e.Beasts)));0===t.count&&(t=e.countPieceOnlyIfHavingPiece(Ln.Beasts,(()=>e.inLandsWith(e.Beasts))));let n=e.boards;await t.pickMultiple({amount:2,where:e=>e.boards().hasOneWhere((e=>n.includes(e))),forPickedItem:async a=>{n=a.boards().items,await a.add(1,e.Explorer)},repeatSame:!0,effect:{highlightBoards:[a]}})}}),!0),[Pn.GlobalReminder]:()=>({icon:"<escalation><br>+2 <explorer>",ongoing:!0,visible:e.stage===(e.adversaryLeading?.adversary===mg.Russia?2:3),adversary:mg.Russia})})}}]}},{difficulty:3,fearCards:[3,3,4],effect:{name:"Hunters Seek Shell and Hide",effects:[{text:"During Setup, on each board, add 1 <beasts> and 1 <explorer> to the highest-numbered land without <town>/<city>.",[Pn.Now]:({$:e})=>e.onEachBoard((async a=>{const t=a.highestNumberedLand((a=>a.doesntHave(e.TownOrCity)))??a.highestNumberedLand();await t.add(1,e.Beasts),a.ignoreInvaderAndBlightInSetup||await t.add(1,e.Explorer)}))},{text:"During Play, <explorer> do +1 Damage.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.HuntersSeekShellAndHide,[Pn.AdjustDamage]:({piece:a})=>a.isA(e.Explorer)?1:0,[Pn.GlobalReminder]:()=>({icon:"<explorer><br>+1 <damage>",ongoing:!0,adversary:mg.Russia})})}},{text:"When Ravage adds <blight> to a land (including cascades), Destroy 1 <beasts> in that land.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.HuntersSeekShellAndHide,[Pn.WhenAddingBlight]:async({blightedLands:a,fromRavage:t})=>{if(t)for(const t of Dr(a))await e.doAdversaryAction((async()=>{await t.possiblyDontCountPiecesAs(Ln.Beasts),await t.destroyOne(e.Beasts)}))},[Pn.GlobalReminder]:()=>({icon:"<blight><br>-1 <beasts>",ongoing:!0,adversary:mg.Russia})})}}]}},{difficulty:4,fearCards:[4,3,4],effect:{name:"A Sense for Impending Disaster",text:"The first time each Action would Destroy <explorer>: If possible, 1 of those <explorer> is instead Pushed; 1 <fear> when you do so.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.ASenseForImpendingDisaster,[Pn.PreventRemovePiece]:async({piece:a,location:t,removement:n})=>{if(a.isA(e.Explorer)&&wr[n].isDestroyLike&&e.action.type!==qo.GameAction&&!e.action.data.hasDestroyedExplorer){e.action.data.hasDestroyedExplorer=!0,a.damage=0,a.shadowDamage=0;return 0===(await a.push({amount:1,pieces:e.Explorer})).length?await a.destroy():await t.fear(1),!0}return!1},[Pn.OrderOfRemoveAllMightMatter]:()=>!0,[Pn.GlobalReminder]:()=>({icon:"Push <explorer><br>+1 <fear>",ongoing:!0,adversary:mg.Russia})})}}},{difficulty:6,fearCards:[4,4,3],effect:{name:"Competition Among Hunters",text:"Ravage Cards also match lands with 3 or more <explorer>. (If the land already matched the Ravage Card, it still Ravages just once.)",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.CompetitionAmongHunters,[Pn.OverrideMatchesInvaderCard]:({land:a,invaderAction:t})=>a.participatingInvaders().where((a=>a.isA(e.Explorer))).count>=3&&t===qr.Ravage||void 0,[Pn.GlobalReminder]:()=>({icon:"<explorer><explorer><explorer>",ongoing:!0,adversary:mg.Russia})})}}},{difficulty:7,fearCards:[4,4,4],effect:{name:"Accelerated Exploitation",text:"When making the Invader Deck, put 1 Stage III Card after each Stage II Card. (New Deck Order: 111-2-3-2-3-2-3-2-33).",[Pn.Now]:async({$:e})=>{for(let a=1;a<=4;a+=1)await e.removeBottomMostInvaderCardOfStage(3),await e.insertInvaderCard(Pp.Stage3Card,{isSpecial:!0}).justBelowNthCardOfStage(a,2)}}},{difficulty:9,fearCards:[4,5,4],effect:{name:"Entrench in the Face of Fear",text:"Put an unused Stage II Invader Card under the top 3 Fear Cards, and an unused Stage III Card under the top 7 Fear Cards. When one is revealed, immediately, place it in the Build space (face-up).",[Pn.Now]:({$:e})=>(e.insertInvaderCardUnderFearCards(Pp.Stage2CardIncludingCoastal,3),e.insertInvaderCardUnderFearCards(Pp.Stage3Card,7),Promise.resolve())}},{difficulty:11,fearCards:[5,5,4],effect:{name:"Pressure for Fast Profit",text:"After the Ravage Step of turn 2+, on each board where it added no <blight>: In the land with the most <explorer> (min. 1), add 1 <explorer> and 1 <town>.",[Pn.Now]:async({$:e})=>{let a=[];await e.addSubEffect({effectId:In.PressureForFastProfit,[Pn.StartOfRavageStep]:()=>(a=e.boards.map((a=>a.numberOf(e.Blight))),Promise.resolve()),[Pn.AfterTheNormalRavageStep]:()=>e.doAdversaryActionOnEachBoard({forEach:async t=>{e.turn>=2&&(t.numberOf(e.Blight)<=a[t.boardIndex]?await t.inLandsWithMostMinimumOne(e.Explorer).pickOne((async a=>{await a.add(1,e.Explorer),await a.add(1,e.Town)}),{highlightBoards:[t],noOptions:`On board ${t.name}: No lands with <explorer>.`}):await e.clickToContinue({highlightBoards:[t],noOptions:`On board ${t.name}: The Ravage added <blight>.`}))}}),[Pn.GlobalReminder]:()=>({icon:"No <blight><br><explorer>+<town>",ongoing:!0,adversary:mg.Russia})})}}}]},Jp={name:"Habsburg Mining Expedition",set:gn.NatureIncarnate,levels:[{difficulty:1,fearCards:[3,3,3],effect:{effects:[{name:"Land Stripped Bare",text:"At the end of the <fast> Phase, the Invaders win if any land has at least 8 total Invaders/<blight> (combined).",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.LandStrippedBare,[Pn.AfterFastPhase]:()=>(e.existLocationIncludingNonExistingWhere((a=>a.numberOf(e.Blight)+a.numberOf(e.Invader)>=8))&&e.loseGame(Ep.LandStrippedBare),Promise.resolve()),[Pn.ShowLossCondition]:()=>e.strippedLandSize>=8?Ep.LandStrippedBare:null,[Pn.GlobalReminder]:()=>({icon:`<fast><br>${e.strippedLandSize} / 8`,ongoing:!0,adversary:mg.Saltburg})})}},{name:"Stage II Escalation <escalation><br>Mining Tunnels",text:"After Advancing Invader Cards: On each board, Explore in 2 lands whose terrains don't match a Ravage or Build Card (no source required).",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.MiningTunnels,[Pn.Escalation]:async({adversary:a,afterAdvancingCards:t,beforeBuilding:n})=>!(a!==mg.Saltburg||!t&&!n)&&(await e.doAdversaryActionOnEachBoard({forEach:async a=>{await a.inLandsWhere((a=>!a.terrainsMatchesInvaderCards([...e.invaderCardsInVisibleSlot(ah.Ravage),...e.invaderCardsInVisibleSlot(ah.Build),...e.invaderCardsInVisibleSlot(ah.HighImmigration)]))).pickMultiple({amount:2,forPickedItem:async e=>{await e.doExtraExplore()}})}}),!0),[Pn.GlobalReminder]:()=>({icon:"<escalation><br>Explore",ongoing:!0,visible:e.stage===(e.adversaryLeading?.adversary===mg.Saltburg?2:3),adversary:mg.Saltburg})})}}]}},{difficulty:3,fearCards:[3,3,3],effect:{effects:[{name:"Avarice Rewarded",text:"When <blight> added by a Ravage Action would cascade, instead Upgrade 1 <explorer>/<town> (before <dahan> counterattack).",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.AvariceRewarded,[Pn.PreventCascade]:async({location:a,fromRavage:t})=>!!t&&(await a.upgrade({amount:1,pieces:e.ExplorerOrTown}),!0),[Pn.GlobalReminder]:()=>({icon:"2+ <blight><br>Upgrade",ongoing:!0,adversary:mg.Saltburg})})}},{name:"Ceaseless Mining",text:"Lands with 3 or more Invaders are Mining Lands. In Mining lands:<br><br><disease> and modifiers to <disease> affect Ravage Actions as though they were Build Actions.<br><br>During the Build Step, Build Cards cause Ravage Actions (instead of Build Actions).",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.CeaselessMining,[Pn.PreventInvaderActionInLand]:async({land:a,invaderAction:t})=>!(!a.isMiningLand||t!==qr.Ravage||!a.has(e.Disease)||await e.oneEffectActivates(Pn.PreventDiseasePreventingBuilds,{location:a}))&&(await a.removeOne(e.Disease),!0),[Pn.MiningLandsCauseRavageActions]:()=>!0,[Pn.BuildOrderMatters]:()=>!0,[Pn.GlobalReminder]:()=>({icon:"Build =<br>Ravage",ongoing:!0,adversary:mg.Saltburg})})}}]}},{difficulty:4,fearCards:[3,3,4],effect:{name:"Miners Come From Far and Wide",effects:[{text:"Setup: Add 1 <explorer> in each land with no <dahan>.",[Pn.Now]:async({$:e})=>{await e.inLandsWithout(e.Dahan).forEach((async a=>{a.board.ignoreInvaderAndBlightInSetup||await a.add(1,e.Explorer)}))}},{text:"Add 1 <disease> and 1 <city> in the highest-numbered land with a <town> Setup symbol.",[Pn.Now]:async({$:e})=>{await e.onEachBoard((async a=>{const t=a.highestNumberedLand((e=>e.setupSymbols.includes(Ln.Town)))??a.highestNumberedLand();await t.add(1,e.Disease),a.ignoreInvaderAndBlightInSetup||await t.add(1,e.City)}))}}]}},{difficulty:5,fearCards:[3,4,4],effect:{name:"Mining Boom (I)",text:"After the Build Step, on each board: Choose a land with <explorer>: Upgrade 1 <explorer> there.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.MiningBoomI,[Pn.AfterTheNormalBuildStep]:()=>e.doAdversaryActionOnEachBoard({forEach:a=>a.inLandsWith(e.Explorer).pickOne((async a=>{await a.upgrade({amount:1,pieces:e.Explorer})}),{highlightBoards:[a]})}),[Pn.GlobalReminder]:()=>({icon:"Upgrade<br>1 <explorer>",ongoing:!0,adversary:mg.Saltburg})})}}},{difficulty:7,fearCards:[4,4,4],effect:{name:"Untapped Salt Deposits",effects:[{text:"Setup: Remove the Stage II Coastal Lands card before randomly choosing Stage II cards. Place the 'Salt Deposits' card in place of the 2nd Stage II card. (New Deck Order: 111-2S22-33333, where S is the Salt Deposits card. <escalation> ignores S.)",[Pn.Now]:async({$:e})=>{for(let a=1;a<=4;a+=1){1!==e.nthCardOfStage(a,2).length&&await e.insertInvaderCard(2===a?Pp.SaltDeposits:Pp.Stage2CardExceptCoastalAndSaltDeposits,{isSpecial:3===a}).insteadOfNthCardOfStage(a,2)}await e.addSubEffect({effectId:In.UntappedSaltDeposits,[Pn.AfterAdvancingCards]:()=>(e.invaderDeckInSlot(ah.Discard).includes(Go.SaltDeposits)&&(e.invaderDeckInSlot(ah.Discard).remove(Go.SaltDeposits),e.invaderDeckInSlot(ah.Ravage).insert(Go.SaltDeposits)),Promise.resolve())})}}]}},{difficulty:9,fearCards:[4,5,4],effect:{name:"Mining Boom (II)",text:"Instead of Mining Boom (I), after the Build Step, on each board: Choose a land with <explorer>: Build there, then Upgrade 1 <explorer>. (Build normally in a Mining land.)",[Pn.Now]:async({$:e})=>{e.removeEffectsWithId(In.MiningBoomI),await e.addSubEffect({effectId:In.MiningBoomII,[Pn.AfterTheNormalBuildStep]:()=>e.doAdversaryActionOnEachBoard({forEach:a=>a.inLandsWith(e.Explorer).pickOne((async a=>{await a.doExtraBuild(),await a.upgrade({amount:1,pieces:e.Explorer})}),{highlightBoards:[a]})}),[Pn.GlobalReminder]:()=>({icon:"Build &<br>Upgrade",ongoing:!0,adversary:mg.Saltburg})})}}},{difficulty:10,fearCards:[4,5,4],effect:{name:"The Empire Ascendant",text:"Setup and During the Explore Step: On boards with 3 or fewer <blight>, Add +1 <explorer> in each land successfully explored. (Max. 2 lands per board per Explore Card.)",[Pn.Now]:async({$:e})=>{let a=e.boards.map((()=>0));await e.addSubEffect({effectId:In.TheEmpireAscendant,effects:[{[Pn.BeforeResolvingInvaderCard]:()=>(a=e.boards.map((()=>0)),Promise.resolve()),[Pn.AfterSuccessfulExplore]:async({land:t})=>{if(e.phase===Gi.InitialExplore||e.phase===Gi.Explore){const n=t.boards().where((t=>t.numberOf(e.Blight)<=3&&a[t.boardIndex]<2));if(n.count>0){for(const e of n.items)a[e.boardIndex]+=1;await t.add(1,e.Explorer)}}},[Pn.ExploreOrderMatters]:({card:a})=>e.turn>0&&Uo[a].coastal||Uo[a].terrains.length>1||Uo[a].saltDeposits,[Pn.GlobalReminder]:()=>({icon:"0-3 <blight><br>+1 <explorer>",ongoing:!0,adversary:mg.Saltburg})}]})}}}]},zp={name:"The Kingdom of Scotland",set:gn.FeatherAndFlame,levels:[{difficulty:1,fearCards:[3,3,3],effect:{effects:[{name:"Trade Hub",text:"If the number of Coastal lands with <city> is ever greater than (2 x # of boards), the Invaders win.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.TradeHub,[Pn.LossCondition]:()=>e.coastalLandsWithCities>=e.maxCoastalLandsWithCities?Ep.TradeHub:null,[Pn.GlobalReminder]:()=>({icon:`<city><br>${e.coastalLandsWithCities} / ${e.maxCoastalLandsWithCities}`,ongoing:!0,adversary:mg.Scotland})})}},{name:"Stage II Escalation <escalation><br>Ports Sprawl Outward",text:"On the single board with the most Coastal <town>/<city>, add 1 <town> to the N lands with the fewest <town> (N = # of players.)",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.PortsSprawlOutward,[Pn.Escalation]:async({adversary:a,beforeExplore:t,beforeBuilding:n})=>!(a!==mg.Scotland||!t&&!n)&&(await e.doAdversaryAction((()=>e.inBoards().withMost((a=>a.forPiecesThatIs(e.TownOrCity).where((e=>e.location.isCoastal)).count)).pickOne((async a=>{const t=a.inLands();await Jr(e.spiritCount,(a=>t.copy().withLeast((a=>a.numberOf(e.Town))).pickOne((async a=>{t.remove(a),await a.add(1,e.Town)}),{prompt:`Pick land to add <town>. ${e.spiritCount-a} left.`})))})))),!0),[Pn.GlobalReminder]:()=>({icon:`<escalation><br>+${e.spiritCount} <town>`,ongoing:!0,visible:e.stage===(e.adversaryLeading?.adversary===mg.Scotland?2:3),adversary:mg.Scotland})})}}]}},{difficulty:3,fearCards:[3,4,3],effect:{name:"Trading Port",text:'After Setup, in Coastal lands, Explore Cards add 1 <town> instead of 1 <explorer>. "Coastal Lands" Invader Cards do this for maximum 2 lands per board.',[Pn.Now]:async({$:e})=>{let a=e.boards.map((()=>0));await e.addSubEffect({effectId:In.TradingPort,[Pn.BeforeResolvingInvaderCard]:()=>(a=e.boards.map((()=>0)),Promise.resolve()),[Pn.AlterInvaderActionInLand]:async({invaderAction:t,land:n})=>{if(t===qr.Explore&&n.isCoastal&&e.turn>0){const t=n.boards().where((e=>a[e.boardIndex]<2));if(t.count>0){for(const e of t.items)a[e.boardIndex]+=1;return await n.add(1,e.Town),!0}}return!1},[Pn.ExploreOrderMatters]:({card:a})=>e.turn>0&&Uo[a].coastal||Uo[a].terrains.length>1||Uo[a].saltDeposits,[Pn.GlobalReminder]:()=>({icon:"<explorer>/<town>",ongoing:!0,adversary:mg.Scotland})})}}},{difficulty:4,fearCards:[4,4,3],effect:{name:"Seize Opportunity",effects:[{text:"During Setup, add 1 <city> to land #2.",[Pn.Now]:({$:e})=>e.onEachBoard((async a=>{a.ignoreInvaderAndBlightInSetup||await a.inLandNumber(2).add(1,e.City)}))},{text:'Place "Coastal Lands" as the 3rd Stage II Card, and move the two Stage II Cards above it up by one. (New Deck Order: 11-22-1-C2-33333, where C is the Stage II Coastal Lands Card.)',[Pn.Now]:async({$:e})=>{for(let a=1;a<=4;a+=1){1!==e.nthCardOfStage(a,2).length&&await e.insertInvaderCard(3===a?Pp.CoastalLands:Pp.Stage2CardExceptCoastalAndSaltDeposits,{isSpecial:3===a}).insteadOfNthCardOfStage(a,2)}await e.moveNthCardOfStageUpByOne(1,2),await e.moveNthCardOfStageUpByOne(2,2)}}]}},{difficulty:6,fearCards:[4,5,4],effect:{name:"Chart the Coastline",text:"In Coastal lands, Build Cards affect lands without Invaders, so long as there is an adjacent <city>.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.ChartTheCoastline,[Pn.BuildCardsAffectLandsWithoutInvaders]:({land:a})=>a.isCoastal&&!a.isIsolated&&a.piecesInAdjacentLands().hasAtLeast(1,(a=>a.isA(e.City)&&!a.location.isIsolated)),[Pn.GlobalReminder]:()=>({icon:"<city>",ongoing:!0,adversary:mg.Scotland})})}}},{difficulty:7,fearCards:[5,5,4],effect:{name:"Ambition of a Minor Nation",text:"During Setup, replace the bottom Stage I Card with the bottom Stage III Card. (New Deck Order: 11-22-3-C2-3333)",[Pn.Now]:async({$:e})=>{await e.removeBottomMostInvaderCardOfStage(3),await e.insertInvaderCard(Pp.Stage3Card,{isSpecial:!0}).justBelowBottomMostOfStage(1),await e.removeBottomMostInvaderCardOfStage(1)}}},{difficulty:8,fearCards:[5,6,4],effect:{name:"Runoff and Bilgewater",[Pn.Now]:async({$:e,effect:a,...t})=>{const n={triggerId:e.nextTriggerId(),[Pn.Now]:async({action:a})=>{await e.sendEvent({type:Tn.GenericSub,text:"Runoff and Bilgewater caused a <blight> to be added to the Ocean."}),await e.doAdversaryAction((async()=>{await a.parentData.runoffOceanBoards.pickOne((async e=>{await e.ocean.addBlight(1,{mayCascade:!1})}))}))}};await e.addSubEffect({effectId:In.RunoffAndBilgewater,effects:[{text:"After a Ravage Action adds <blight> to a Coastal land, add 1 <blight> to that board's Ocean (without cascading).",[Pn.AfterRavagingDamageLand]:async({blightedLands:r})=>{const i=r.filter((e=>e.isCoastal));i.length>0&&(e.action.data.runoffOceanBoards=nd.createCollection(e,Dr(i.flatMap((e=>e.boards().items)))),await e.addTrigger(n,a,t.action))},[Pn.GlobalReminder]:()=>({icon:"+1 <blight>",ongoing:!0,adversary:mg.Scotland})},{text:"Treat the Ocean as a Coastal Wetland for this rule and for <blight> removal/movement.",[Pn.OceanIsLandForBlight]:()=>!0}]})}}},{difficulty:10,fearCards:[6,6,4],effect:{name:"Exports Fuel Inward Growth",text:"After the Ravage Step, add 1 <town> to each Inland land that matches a Ravage Card and is within <range-1> of <town>/<city>.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.ExportsFuelInwardGrowth,[Pn.AfterTheNormalRavageStep]:async()=>{if(e.invaderCardsInVisibleSlot(ah.Ravage).length>0){const a=[];await e.doAdversaryActionOnEachBoard({withoutAction:!0,forEach:e=>(a.push(e),Promise.resolve())});const t=e.inInlandLands().where((t=>!t.boards().hasOneWhere((e=>!a.includes(e)))&&t.matchesInvaderCards(e.invaderCardsInVisibleSlot(ah.Ravage),qr.Ravage)&&(t.has(e.TownOrCity)||!t.isIsolated)&&t.inLandsWithin(1).hasOneWhere((a=>a.has(e.TownOrCity)&&!a.isIsolated))));await e.clickToContinue({highlightLocations:t.items}),await t.forEach((a=>e.doAdversaryAction((async()=>{await a.add(1,e.Town)}),{land:a})),{noOptions:"No Inland land that matches a Ravage Card is within <range-1> of <town>/<city>."})}},[Pn.GlobalReminder]:()=>({icon:"<range-1><br>+1 <town>",ongoing:!0,adversary:mg.Scotland})})}}}]},Yp={name:"The Kingdom of Sweden",set:gn.Base,levels:[{difficulty:1,fearCards:[3,3,3],effect:{name:"Stage II Escalation <escalation><br>Swayed by the Invaders",text:"After Invaders Explore into each land this Phase, if that land has at least as many Invaders as <dahan>, replace 1 <dahan> with <town>.",[Pn.Now]:async({$:e})=>{let a=null;await e.addSubEffect({effectId:In.SwayedByTheInvaders,[Pn.Escalation]:async({card:t,adversary:n,afterExplore:r,beforeExplore:i,afterExploringLand:s})=>{if(n===mg.Sweden){if(i){const n=[...Uo[t].terrains],r=n.length>1;r&&await e.clickToContinue({text:"If the Escalation is specific to a terrain - as with France and Sweden - choose one of the terrain randomly."}),a=n.length>1?await e.drawFrom(n,n.map((e=>zg[e].text))):n[0],r&&await e.clickToContinue({text:`If the Escalation is specific to a terrain - as with France and Sweden - choose one of the terrain randomly.<br><br>Sweden Escalates in terrain ${zg[a].text}`})}if(s&&s.terrain===a&&s.the(e.Invader).isAtLeastAsManyAs(e.Dahan)&&await e.doAdversaryAction((async()=>{await s.replaceOne({pieces:e.Dahan,withPiece:Ln.Town})})),r)return!0}return!1},[Pn.GlobalReminder]:()=>({icon:"<escalation><br><dahan>=<town>",ongoing:!0,visible:e.stage===(e.adversaryLeading?.adversary===mg.Sweden?2:3),adversary:mg.Sweden})})}}},{difficulty:2,fearCards:[3,3,3],effect:{name:"Heavy Mining",text:"If the Invaders do at least 6 Damage to the land during Ravage, add an extra <blight>. The additional <blight> does not destroy <presence> or cause cascade.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.HeavyMining,[Pn.ExtraBlightFromDamage]:({damageExceedingHealth:e})=>e>=4?1:0,[Pn.GlobalReminder]:()=>({icon:"6+ <damage><br>+1 <blight>",ongoing:!0,adversary:mg.Sweden})})}}},{difficulty:3,fearCards:[3,4,3],effect:{name:"Population Pressure at Home",text:"During Setup, on each board add 1 <city> to land #4. On boards where land #4 starts with <blight>, put that <blight> in land #5 instead.",[Pn.Now]:async({$:e})=>{await e.onEachBoard((async a=>{const t=a.inLandNumber(4);a.ignoreInvaderAndBlightInSetup||await t.add(1,e.City),t.has(e.Blight)&&await t.move({pieces:e.Blight,movement:Mr.Relocate,locations:{target:zn.ToThisLocation,location:a.inLandNumber(5)}})}))}}},{difficulty:5,fearCards:[3,4,3],effect:{name:"Fine Steel for Tools and Guns",text:"<town> deal 3 Damage. <city> deal 5 Damage.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.FineSteelForToolsAndGuns,[Pn.AdjustDamage]:({piece:a})=>(a.isA(e.Town)?1:0)+(a.isA(e.City)?2:0),[Pn.GlobalReminder]:()=>({icon:"<town>=3<br><city>=5",ongoing:!0,adversary:mg.Sweden})})}}},{difficulty:6,fearCards:[3,4,4],effect:{name:"Royal Backing",text:"During Setup, after adding all other Invaders, discard the top card of the Invader Deck. On each board, add 1 <town> to the land of that terrain with the fewest Invaders.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.RoyalBacking,[Pn.OnSetupAfterAddingInvaders]:async()=>{await e.setPhase(Gi.RoyalBacking);const a=await e.accelerateTheInvaderDeck();await e.onEachBoard((async t=>{t.ignoreInvaderAndBlightInSetup||await t.inLandsWhere((e=>e.matchesInvaderCard(a,qr.Explore))).withLeast((a=>a.numberOf(e.Invader))).pickOne((async a=>{await a.add(1,e.Town)}),{highlightBoards:[t],card:a})})),e.removeThisEffect()}})}}},{difficulty:7,fearCards:[4,4,4],effect:{name:"Mining Rush",text:"When Ravaging adds at least 1 <blight> to a land, also add 1 <town> to an adjacent land without <town>/<city>. Cascading <blight> does not cause this effect.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.MiningRush,[Pn.WhenAddingBlight]:async({land:a,blightedLands:t,isCascade:n,fromRavage:r})=>{r&&!n&&t.length>0&&!a.isIsolated&&a.hasAdjacentLandWhere((a=>a.doesntHave(e.TownOrCity)&&!a.isIsolated))&&await e.doAdversaryAction((()=>a.inAdjacentLandsWhere((a=>a.doesntHave(e.TownOrCity))).pickOne((async a=>{await a.add(1,e.Town)}),{noOptions:"No adjacent lands without <town>/<city>."})))},[Pn.GlobalReminder]:()=>({icon:"<blight><br>+1 <town>",ongoing:!0,adversary:mg.Sweden})})}}},{difficulty:8,fearCards:[4,4,5],effect:{name:"Prospecting Outpost",text:"During Setup, on each board add 1 <town> and 1 <blight> to land #8. The <blight> comes from the box, not the Blight Card.",[Pn.Now]:({$:e})=>e.onEachBoard((async a=>{a.ignoreInvaderAndBlightInSetup||(await a.inLandNumber(8).add(1,e.Town),await e.oneEffectActivates(Pn.PreventAddBlightInSetup)||await a.inLandNumber(8).add(1,e.Blight))}))}}]},Kp={[mg.BrandenburgPrussia]:_p,[mg.Sweden]:Yp,[mg.England]:Hp,[mg.France]:qp,[mg.Scotland]:zp,[mg.Habsburg]:jp,[mg.Russia]:Vp,[mg.Saltburg]:Jp},Qp={name:"Blitz",set:gn.Base,difficulty:0,rules:[{name:"Blitz",effects:[{text:"All Powers are <fast>.",[Pn.Now]:async({$:e})=>{e.eventCardsInDeck.remove(nf.Outpaced),e.eventCardsInDeck.remove(nf.InvestigationOfDangers),e.eventCardsInDeck.remove(nf.SprawlContainedByTheWilds),await e.addSubEffect({effectId:In.Blitz,[Pn.GlobalReminder]:()=>({text:"All Powers are <fast>.<br><br>Powers which were already <fast> (or made <fast>) cost 1 less Energy. (For Innate Powers and Power Cards costing 0, instead gain 1 Energy.)",icon:"Powers<br><fast>",ongoing:!0,scenario:Nd.Blitz}),[Pn.MayChangeSpeedOfPower]:({power:e})=>e.isSlow,[Pn.ChangeSpeedOfPower]:async({power:e})=>{await e.makeFast()},[Pn.PreventSlowPowers]:()=>!0,[Pn.AfterChangingSpeed]:async({power:a,speed:t,effect:n})=>{t===sr.Fast&&"Blitz"!==n?.name&&(await e.sendEvent({type:Tn.GenericSub,text:`${a.owner.nameLink} gained 1 Energy for making a Power fast.`}),await a.owner.gainEnergy(1))},[Pn.BeforeResolvingInnate]:async({power:a})=>{a.data.speed===sr.Fast&&(await e.sendEvent({type:Tn.GenericSub,text:`${a.owner.nameLink} gained 1 Energy for playing a fast innate.`}),await a.owner.gainEnergy(1))}})}},{text:"When Exploring, once per board, add an additional <explorer>.",[Pn.Now]:async({$:e})=>{let a=e.boards.map((()=>0));await e.addSubEffect({effectId:In.Blitz,[Pn.GlobalReminder]:()=>({icon:"+1 <explorer>",ongoing:!0,scenario:Nd.Blitz}),[Pn.AfterSuccessfulExplore]:async({land:t})=>{const n=t.boards().where((e=>a[e.boardIndex]<1));if(n.count>0){for(const e of n.items)a[e.boardIndex]+=1;await t.add(1,e.Explorer)}},[Pn.AfterResolvingExploreCard]:()=>(a=e.boards.map((()=>0)),Promise.resolve()),[Pn.ExploreOrderMatters]:()=>!0})}},{text:'If the Island becomes "Blighted", put 1 less <blight> per player on the Blight Card.',[Pn.Now]:async({$:e})=>{e.config.blightCards&&await e.addSubEffect({effectId:In.Blitz,[Pn.BeforeRevealingBlightCard]:async()=>{e.blightStatus===lg.BlightedIsland&&await e.removeBlightFromBlightCard(e.boardCount)},[Pn.AfterDrawingBlightCard]:()=>(e.blightStatus===lg.BlightedIsland&&e.removeThisEffect(),Promise.resolve())})}},{text:"Put an additional <blight> per player on the Blight Card.",[Pn.Now]:async({$:e})=>{await e.addSubEffectUntilEndOfTurn({[Pn.BeforeSetupPresence]:async()=>{await e.clickToContinue(),await e.addBlightToBlightCard(e.boardCount)}})}},{text:"The Invaders get an additional set of actions at the end of Setup. (So they will Explore, then Build and Explore.)",[Pn.Now]:async({$:e})=>{await e.addSubEffectUntilEndOfTurn({[Pn.OnSetupAfterAddingInvaders]:async()=>{await e.clickToContinue(),await e.build(),await e.doEffects(Pn.AfterTheNormalBuildStep),await e.explore(),await e.advanceInvaderCards()}})}}]}]},Xp={name:"Dahan Insurrection",set:gn.Base,difficulty:4,rules:[{effects:[{name:"Constant Raiding",text:"Whenever <dahan> move from one land to another, each <dahan> that moved does 1 Damage in their land. (Damage happens after fully resolving the Power or other effect which moved them. If a Power moves a <dahan> multiple times, it only does damage in the land where it ends up.)",[Pn.Now]:async({$:e,...a})=>{const t={triggerId:e.nextTriggerId(),[Pn.Now]:async({action:a})=>{const t=a.parentData.movedDahan;await od.createCollection(e,Dr(t.filter((e=>e.isAlive&&void 0!==e.location)).map((e=>e.location)))).selectOrder().forEach((async a=>{await e.doScenarioAction((async()=>{await a.damage(t.filter((e=>e.location===a)).length)}))}),{autoPlayOneOption:!0})}};await e.addSubEffect({effectId:In.DahanInsurrection,[Pn.GlobalReminder]:()=>({icon:"<dahan><br>1 <damage>",scenario:Nd.DahanInsurrection,ongoing:!0}),[Pn.AfterMoving]:async n=>{n.piece.isA(e.Dahan)&&n.destination!==n.source&&n.movement!==Mr.Relocate&&(e.action.data.movedDahan=e.action.data.movedDahan??[],e.action.data.movedDahan.includes(n.piece)||e.action.data.movedDahan.push(n.piece),await e.addTrigger(t,a.effect,a.action,{priority:!0,movingAction:e.action}))}})}},{name:"Military Response",text:"Whenever a <city> is destroyed, add 1 <town> to the nearest land with <dahan>.<br>Whenever a <town> is destroyed, add 1 <explorer> to the nearest land with <dahan>.<br><br>(Add the new Invaders after fully resolving the Power or effect which destroyed the old one.)",[Pn.Now]:async({$:e,...a})=>{const t={triggerId:e.nextTriggerId(),[Pn.Now]:async({action:a})=>{const t=a.parentData.destroyedInvaders;await e.doScenarioAction((async()=>{for(const a of t)await e.inLandsWith(e.Dahan).withLeast((e=>e.distanceToLocation(a.location))).pickOne((async t=>{await t.add(1,a.piece.isA(e.City)?e.Town:e.Explorer)}))}))}};await e.addSubEffect({effectId:In.DahanInsurrection,[Pn.GlobalReminder]:()=>({icon:"+1 <explorer>/<town>",scenario:Nd.DahanInsurrection,ongoing:!0}),[Pn.AfterRemovePiece]:async n=>{n.piece.isA(e.TownOrCity)&&wr[n.removement].isDestroyLike&&(e.action.data.destroyedInvaders=e.action.data.destroyedInvaders??[],e.action.data.destroyedInvaders.push(n),await e.addTrigger(t,a.effect,a.action))}})}}]},{name:"Coordinated Insurrection",effects:[{text:'If you reach Terror Level "Victory", <dahan> immediately Damage Invaders in every land of the board, as if they were fighting back after a Ravage. If this doesn\'t fulfill the Victory condition on this card, you lose.',[Pn.Now]:async({$:e,...a})=>{const t={triggerId:e.nextTriggerId(),[Pn.Now]:async()=>{await e.inLandsWith(e.Dahan).selectOrder().forEach((a=>e.doScenarioAction((async()=>{const e=a.participatingDahan().sum((e=>e.strengthDuringRavage));if(e>0){const t=e+a.sumAdjustedCollectiveDahanRavageDamage;await a.damage(t,Xn.Invader)}}))))}};await e.addSubEffect({effectId:In.DahanInsurrection,[Pn.AfterReachingTerrorLevel]:async({terrorLevel:n})=>{4===n&&await e.addTrigger(t,a.effect,a.action)}})}}]},{name:"Victory",effects:[{text:"The normal Fear-based Victory is not available.<br><br>Terror 2 Victory: There are no lands where <town>/<city> outnumber <dahan><br>Terror 3+ Victory: There is fewer than 1 land per player where <town>/<city> outnumber <dahan>.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.DahanInsurrection,[Pn.GlobalReminder]:()=>({icon:`<town>/<city><br>${e.landCountWhereTownsAndCitiesOutnumberDahan} / ${e.terrorLevel<3?0:e.spiritCount-1}`,scenario:Nd.DahanInsurrection,ongoing:!0}),[Pn.RemoveFearBasedVictory]:()=>!0,[Pn.WinCondition]:()=>{if(2===e.terrorLevel){if(0===e.landCountWhereTownsAndCitiesOutnumberDahan)return Bp.DahanInsurrectionLevelTwo}else if(e.terrorLevel>=3&&e.landCountWhereTownsAndCitiesOutnumberDahan<e.spiritCount)return Bp.DahanInsurrectionLevelThree;return null},[Pn.LossCondition]:()=>4===e.terrorLevel&&e.landCountWhereTownsAndCitiesOutnumberDahan>=e.spiritCount?Ep.DahanInsurrectionLevelThree:null})}}]},{name:"Additional Loss Condition",effects:[{name:"Dahan Insurrection",text:"Invaders win if there are ever fewer than 2 <dahan> per player left alive.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.DahanInsurrection,[Pn.LossCondition]:()=>e.dahanCount<2*e.spiritCount?Ep.DahanInsurrectionTooFewDahan:null,[Pn.GlobalReminder]:()=>({icon:`<dahan><br>${e.dahanCount} / ${2*e.spiritCount-1}`,scenario:Nd.DahanInsurrection,ongoing:!0})})}}]}]},Zp={name:"Guard the Isle's Heart",set:gn.Base,difficulty:0,rules:[{name:"Inner Lands",effects:[{text:"There is 1 Inner land on each board.",[Pn.Now]:async({$:e})=>{await e.addSubEffectUntilEndOfTurn({[Pn.OnSetupAfterAddingInvaders]:async()=>{await e.addSubEffect({text:"After all other Setup: Remove all <town>.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.forPiecesThatIs(e.Town).forEach((async e=>{await e.remove(Wn.Silent)}))}}),await e.onEachBoard((async a=>{const t=e.spiritCount<=2?a.inLandsWhere((e=>e.hasNumber(7))):a.inInlandLands();await t.autoPickOne((async t=>{await e.addEffect({[Pn.LossCondition]:()=>e.turn>1&&t.has(e.TownOrCity)?Ep.GuardTheIslesHeart:null,[Pn.Reminder]:e=>e===t?"Anytime after Turn 1: Invaders win if there is a <town>/<city> in an Inner land.":void 0,[Pn.StartOfSpiritPhase]:()=>(e.checkIfEnded(),Promise.resolve())}),await e.addSubEffect({effectId:In.GuardTheIslesHeart,text:"After all other Setup: In each Inner land (see left side), add 1 <explorer> and 1 <presence> from the player starting on that board. If this is illegal, as for Ocean's Hungry Grasp, add the <presence> in the nearest legal land on that board.)",[Pn.Now]:async()=>{await t.add(1,e.Explorer),await e.spiritsWhich((e=>e.startingBoard===a)).forEach((async n=>{e.someEffect(Pn.PreventAddPresence,{spirit:n,location:t,ignoreLandType:!1})?await a.inCoastalLands().withLeast((e=>e.distanceToLocation(t))).autoPickOne((async e=>{await n.addPresence({locations:zn.AnyLands,filter:a=>a===e,forcedFromTrack:!0,autoPlayOneOption:!0})})):await n.addPresence({locations:zn.AnyLands,filter:e=>e===t,forcedFromTrack:!0,autoPlayOneOption:!0})}))}})}),{highlightBoards:[a],prompt:`In Board: ${a.name}: Pick inner land.`})}))}})}}]},{name:"Setup Changes",effects:[{text:"Each Spirit starts with 2 additional Power Cards by drawing a single card from each of the Power Decks.",[Pn.Now]:async({$:e})=>{await e.addSubEffectUntilEndOfTurn({effectId:In.GuardTheIslesHeart,[Pn.OnSetupAfterAddingInvaders]:async()=>{await e.eachSpirit((async a=>{await e.doScenarioAction((async()=>{await a.gainPowerCard({powerType:kn.Minor,drawAmount:1,taken:!0}),await a.gainPowerCard({powerType:kn.Major,withoutForgetting:!0,drawAmount:1,taken:!0})}))}))}})}}]}]},ew={name:"Rituals of Terror",set:gn.Base,difficulty:3,rules:[{name:"Rituals of Terror",effects:[{text:"Terror Levels are not earned via <fear>, but by the Ritual of Terror.<br>Do not resolve earned Fear Cards during the Invader Phase.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.RitualsOfTerror,[Pn.PreventTerrorLevelAndResolveFearCards]:()=>!0,[Pn.GlobalReminder]:()=>({icon:"Terror<br>Levels",scenario:Nd.RitualsOfTerror,ongoing:!0})})}},{text:"During either the <fast> or <slow> Phase, the Spirits may perform the Ritual of Terror if:<br><bullet> There is a land with at least 1 <presence> from each Spirit.<br><bullet> That land has at least 3 <dahan> per player.<br><bullet> The Spirits collectively spend 3 Energy total and destroy 3 <presence> total in that land.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.RitualsOfTerror,[Pn.GlobalReminder]:()=>({icon:"Ritual<br>Terror",scenario:Nd.RitualsOfTerror,ongoing:!0}),[Pn.ExtraAction]:()=>{const a=e.inLandsWhere((a=>a.spiritsWithPresence().count===e.spiritCount&&a.numberOf(e.Presence)>=3&&a.numberOf(e.Dahan)>=3*e.spiritCount&&e.playersCanJointlyPayEnergyAidedBy({energy:3})));return(e.phase===Gi.FastPowers||e.phase===Gi.SlowPowers)&&a.count>0?{actionId:"RitualOfTerror",name:"Ritual of Terror",text:"When the Ritual of Terror is performed:<br><bullet> Earn the next Terror Level. (This may be VICTORY on your third Ritual.)<br><bullet> Resolve all earned Fear Cards (at the new Terror Level).<br><bullet> Push all <dahan> from the land where the Ritual was performed, distributing them as evenly as possible among all adjacent lands.",scenario:Nd.RitualsOfTerror,[Pn.Now]:async()=>{await a.pickOne((async a=>{await e.doSpiritAction((async()=>{await e.addSubEffect({effects:[{text:"The Spirits collectively spend 3 Energy total.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.payEnergyJointlyAidedBy({energy:3*e.spiritCount})}},{text:"Destroy 3 <presence> total in that land.",[Pn.Now]:async()=>{await a.destroy({amount:3,pieces:Xn.Presence})}},{text:"Earn the next Terror Level. (This may be VICTORY on your third Ritual.)",[Pn.Now]:async()=>{await e.clickToContinue(),await e.earnTerrorLevel(),e.terrorLevel<=3&&e.putAllFearCardsIntoLevel(e.terrorLevel)}},{text:"Push all <dahan> from the land where the Ritual was performed, distributing them as evenly as possible among all adjacent lands.",[Pn.Now]:async()=>{await a.push({pieces:e.Dahan,quantifier:ur.All,evenly:!0})}}]})}))}),{prompt:"Pick a land to perform Ritual of Terror"})}}:null}})}},{text:"Resolve all earned Fear Cards (at the new Terror Level).",[Pn.Now]:async({$:e})=>{await e.addSubEffect({[Pn.AfterReachingTerrorLevel]:async()=>{await e.resolveFearCards()}})}},{text:"Put all Fear Cards into the Fear Deck. If you run out, earn no more Fear Cards.",[Pn.Now]:({$:e})=>(e.putAllFearCardsIntoLevel(1),Promise.resolve())}]}]},aw={name:"Bronze Loop",actionId:"BronzeLoop",description:"A loop of twisted bronze set with deep red stones",icon:"Bronze<br>Loop",invaderBenefit:[{text:"For purposes of Explore and Build, Invaders in any Sands are considered to be in all Sands.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffect({effectId:In.BronzeLoopInvader,[Pn.GlobalReminder]:()=>({icon:"<sands>",ongoing:!0,scenario:Nd.PowersLongForgotten}),[Pn.BuildOrderMatters]:()=>!0,[Pn.LandIsExploringSource]:({land:a})=>a.isSands&&e.inLandsWhere((e=>e.isSands)).hasOneWhere((a=>a.has(e.TownOrCity))),[Pn.BuildCardsAffectLandsWithoutInvaders]:({land:a})=>a.isSands&&e.inLandsWhere((e=>e.isSands)).hasOneWhere((e=>e.hasInvaders)),[Pn.AdjustBuildPlans]:({land:a})=>{if(a.isSands){return e.forPiecesThatIs(e.Town).where((e=>e.location.isSands)).count>e.forPiecesThatIs(e.City).where((e=>e.location.isSands)).count?e.City:e.Town}return!1}})}}],spiritBenefit:[{text:"Spirits may shift their <presence> from a Sands to another at any time.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.BronzeLoopSpirit,[Pn.GlobalReminder]:()=>({icon:"<presence><br><sands>",ongoing:!0,scenario:Nd.PowersLongForgotten}),[Pn.ExtraAction]:()=>({actionId:"BronzeLoop",name:"Bronze Loop",text:"Spirits may shift their <presence> from a Sands to another at any time.",scenario:Nd.PowersLongForgotten,[Pn.Now]:async()=>{await e.forPiecesThatIs(e.Presence).where((e=>e.location.isSands)).pickOne((async a=>{await e.doScenarioAction((async()=>{await a.move({locations:{target:zn.AnyLands},destinationFilter:e=>e.isSands,movement:Mr.Relocate})}))}),{prompt:"Pick <presence> to Relocate."})}})})}}]},tw={name:"Glowing Ember",actionId:"GlowingEmber",description:"A fist-sized ember, glowing steadily",icon:"Glowing<br>Ember",invaderBenefit:[{text:"Whenever a <town>/<city> is added to a Jungle or Wetland without <town>/<city>, also add 1 <blight>.",[Pn.Now]:async({$:e})=>{await e.clickToContinue(),await e.addSubEffect({effectId:In.GlowingEmberInvader,[Pn.GlobalReminder]:()=>({icon:"<jungles-wetlands><br>+1 <blight>",ongoing:!0,scenario:Nd.PowersLongForgotten}),[Pn.AfterAddingPiece]:async({land:a,additions:t})=>{a.isJungleOrWetlands&&a.hasExactly(1,e.TownOrCity)&&t.some((a=>a.piece.isA(e.TownOrCity)))&&(await e.clickToContinue({highlightLocations:[a]}),await e.doScenarioAction((async()=>{await a.addBlight(1)})))}})}}],spiritBenefit:[{text:"Spirits do not need to Forget when gaining a Major Power.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.GlowingEmberSpirit,[Pn.GlobalReminder]:()=>({icon:"Skip<br>Forget",ongoing:!0,scenario:Nd.PowersLongForgotten}),[Pn.PreventForgetPowercard]:async a=>{if(a.duringPowerGain){return!await e.may({card:a.power.power,prompt:`Forget ${a.power.powerLink}?`})}return!1}})}}]},nw={name:"Jagged Tooth",actionId:"JaggedTooth",description:"An enormous jagged tooth, dripping water",icon:"Jagged<br>Tooth",invaderBenefit:[{text:"Whenever Invaders Explore into Wetlands they immediately Build there.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.JaggedToothInvader,[Pn.GlobalReminder]:()=>({icon:"<wetlands><br>Build",ongoing:!0,scenario:Nd.PowersLongForgotten}),[Pn.AfterSuccessfulExplore]:async({land:e})=>{e.isWetlands&&await e.doExtraBuild()}})}}],spiritBenefit:[{text:"Each Spirit gains +2 Energy during any Spirit Phase that they do not Reclaim any cards.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.JaggedToothSpirit,[Pn.GlobalReminder]:()=>({icon:"Extra<br>Energy",ongoing:!0,scenario:Nd.PowersLongForgotten}),[Pn.BeforePlayPowers]:async()=>{await e.eachSpirit((async a=>{a.hasReclaimedACardDuringSpiritPhase||(await e.sendEvent({type:Tn.GenericMain,text:`${a.nameLink} did not Reclaim any cards during the Spirit Phase.`}),await e.doScenarioAction((async()=>{await a.gainEnergy(2)})))}))}})}}]},rw={name:"Leather Sack",actionId:"LeatherSack",description:"A leather sack with its mouth sewn shut",icon:"Leather<br>Sack",invaderBenefit:[{text:"Leave the token in the land where it was found. This land cannot be targeted by Powers for the rest of the game.",[Pn.Now]:async({$:e})=>{const a=e.forPiecesThatIs(e.HiddenLocation).where((e=>8===e.scenarioNumber)).anyOne.location;await e.clickToContinue(),await e.addSubEffect({[Pn.Reminder]:e=>e===a?"This land cannot be targeted by Powers for the rest of the game.":void 0,[Pn.PreventTargetLand]:({land:e})=>e===a})}}],spiritBenefit:[{text:"Now: Choose 1 land. Remove everything in it from the game.",[Pn.Now]:async({$:e})=>{await e.inLands().pickOne((async a=>{await e.doScenarioAction((async()=>{await a.remove({quantifier:ur.All,pieces:Xn.AllPieces,removement:Wn.RemoveFromGame})}))}))}}]},iw={name:"A lizard's scale",actionId:"LizardsScale",description:"A lizard's scale, perpetually burning",icon:"Lizard's<br>Scale",invaderBenefit:[{text:"Powers granting <fire> don't Damage/Destroy Invaders unless the Spirit spends an additional Energy. (Per Power)",[Pn.Now]:async({$:e})=>{const a=De.box(!1),t=async()=>!(void 0===e.action.power||void 0===e.action.spirit||void 0===dg[e.action.power.power].elements||!dg[e.action.power.power].elements.includes(ir.Fire)||a.get())&&(0===e.action.spirit.energy||!await e.may({text:"Pay 1 Energy to Damage/Destroy Invaders using a Power granting <fire>?"})||(await e.action.spirit.payEnergy(1),a.set(!0),await e.addEffectUntilEndOfAction({[Pn.ActionEnds]:()=>(a.set(!1),Promise.resolve())}),!1));await e.addSubEffect({effectId:In.LizardsScaleInvader,[Pn.GlobalReminder]:()=>({icon:"<fire><br>No <damage>",ongoing:!0,scenario:Nd.PowersLongForgotten}),[Pn.PreventRemovePiece]:({piece:e,removement:a})=>wr[a].isDestroyLike&&e.isInvader?t():Promise.resolve(!1),[Pn.PreventDamagingPiece]:({piece:e})=>e.isInvader?t():Promise.resolve(!1)})}}],spiritBenefit:[{text:"Damage-dealing Powers granting <fire> do +1 Damage. (Total bonus per Power.)",[Pn.Now]:async({$:e})=>{await e.gainDamageBoost({effectId:In.LizardScaleSpirit,amount:1,permanent:!0,scenario:Nd.PowersLongForgotten,filter:()=>void 0!==e.action?.power&&void 0!==dg[e.action.power.power].elements&&dg[e.action.power.power].elements.includes(ir.Fire)})}}]},sw={name:"Pillar of Sunlight",actionId:"PillarOfSunlight",description:"A spear-like pillar of sunlight too hot to approach",icon:"Pillar<br>Sunlight",invaderBenefit:[{text:"Now: On each board, in the land with the most <town>/<city> (minimum 1): Destroy all <dahan> and Spirit tokens. Add 1 <blight>.",[Pn.Now]:async({$:e})=>{await e.doScenarioActionOnEachBoard((async a=>{await a.inLandsWithMostMinimumOne(e.TownOrCity).pickOne((async a=>{await e.doScenarioAction((async()=>{await a.destroyAll(e.Dahan),await a.destroyAll(e.BadlandsBeastsDiseaseOrWilds),await a.destroyAll(e.Quake),await a.destroyAll(e.Vitality),await a.destroyAll(e.Deeps),await a.removeAllStrife(),await a.addBlight(1)}))}),{noOptions:`On board ${a.name}: No lands with <town>/<city>.`})}),{selectOrder:!0})}}],spiritBenefit:[{text:"Now: Earn 2 Fear Cards. <dahan> in 1 land deal Damage.",[Pn.Now]:async({$:e})=>{await e.doScenarioAction((async()=>{await e.earnFearCard(),await e.earnFearCard(),await e.inLandsWithAllOf(e.Dahan,e.Invader).pickOne((async a=>{const t=a.piecesThatAre(e.Dahan).sum((e=>e.strengthOutOfRavage));await a.damage(t)}))}))}}]},ow={1:iw,2:aw,3:nw,4:{name:"Rib-bone",actionId:"RibBone",description:"A rib-bone crusted with unmelting ice",icon:"Rib<br>bone",invaderBenefit:[{text:"Next turn: Spirits get only 1 Card Play.",[Pn.Now]:async({$:e})=>{const a=e.turn+1;await e.addSubEffect({effectId:In.RibBoneInvader,[Pn.GlobalReminder]:()=>({icon:"1 Card<br>Play",scenario:Nd.PowersLongForgotten}),[Pn.AdjustCardPlays]:()=>e.turn===a?1:0,[Pn.TimePasses]:()=>(e.turn>=a&&e.removeThisEffect(),Promise.resolve())})}}],spiritBenefit:[{text:"During the next normal Ravage: Invaders do -3 Damage per land.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.RibBoneSpirit,[Pn.AdjustCollectiveInvaderRavageDamage]:({normal:e})=>e?-3:0,[Pn.AfterResolvingRavageCard]:()=>(e.removeThisEffect(),Promise.resolve()),[Pn.GlobalReminder]:()=>({icon:"Ravage<br>-3 <damage>",scenario:Nd.PowersLongForgotten})})}}]},5:tw,6:{name:"Wind-woven Rope",actionId:"WindWovenRope",description:"A rope woven out of the wind",icon:"Wind<br>Rope",invaderBenefit:[{text:"Powers do not Gather/Push Invaders unless the Spirit spends an extra Energy. (Per Power)",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.WindWovenRopeInvader,[Pn.GlobalReminder]:()=>({icon:"Gather<br>Push",ongoing:!0,scenario:Nd.PowersLongForgotten}),[Pn.PreventMovePiece]:({piece:a,movement:t})=>!e.action.data.paidForPushing&&a.isInvader&&(t===Mr.Push||t===Mr.Gather),[Pn.AfterTargetingLands]:async()=>{!e.action.data.paidForPushing&&void 0!==e.action.spirit&&void 0!==e.action.power&&dg[e.action.power.power].hasPushOrGather&&e.action.spirit.energy>0&&await e.may({text:"Pay 1 Energy to possibly Gather/Push Invaders using this Power?"})&&(await e.action.spirit.payEnergy(1),e.action.data.paidForPushing=!0)}})}}],spiritBenefit:[{text:"All Powers have <range+1>.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.WindWovenRopeSpirit,[Pn.GlobalReminder]:()=>({icon:"<range+1>",ongoing:!0,scenario:Nd.PowersLongForgotten}),[Pn.ExtraRange]:()=>void 0!==e.action.power?1:0})}}]},7:sw,8:rw},dw={name:"Powers Long Forgotten",set:gn.BranchAndClaw,difficulty:1,rules:[{text:"Whenever a land has 3 <dahan> or more in it, the players search it.<br>Whenever a land has 2 Invaders or more, the Invaders search it.",[Pn.Now]:async({$:e})=>{const a=[1,2,3,4,5,6,7,8];let t=Math.min(e.boardCount+1,8),n=4*e.boardCount-t;const r=e.adversaryLeading?.adversary===mg.France||e.adversarySupporting?.adversary===mg.France?3:2,i=async i=>{i.has(e.HiddenLocation)&&await i.piecesThatAre(e.HiddenLocation).forEach((async s=>{if(void 0===s.scenarioNumber){const o=i.hasAtLeast(3,e.Dahan),d=i.hasAtLeast(r,e.Invader);if(o||d){const r=[...[...Array(n).keys()].map((()=>"Blank")),...[...Array(t).keys()].map((()=>"Number"))];if("Number"===await e.drawFrom(r,r)){t-=1;const n=await e.drawFrom(a,a.map((e=>`${e}`))),r=ow[n];if(s.scenarioNumber=n,s.placeInGroup(),await e.clickToContinue({highlightPieces:[s],text:`The ${o?"Dahan":"Invaders"} searched the Hidden Location and found a Source of Power!<br><br>${r.description}.`}),o){const a=`${r.description}.<br><br>When used:<br>${r.spiritBenefit[0].text}<br><br>If never used:<br>+2 Points`;await e.addSubEffect({name:r.name,text:a,[Pn.GlobalReminder]:()=>({icon:r.icon,ongoing:!0,scenario:Nd.PowersLongForgotten}),[Pn.ExtraAction]:({effect:a})=>({actionId:r.actionId,name:r.name,[Pn.Now]:async()=>{e.removeEffect(a),await e.addSubEffect({effects:r.spiritBenefit})}}),[Pn.ExtraScore]:()=>2})}else await e.addSubEffect({name:r.name,effects:r.invaderBenefit});await s.remove()}else n-=1,s.scenarioNumber=0,s.placeInGroup(),await e.clickToContinue({highlightPieces:[s],text:`The ${o?"Dahan":"Invaders"} searched the Hidden Location but found no Source of Power.`}),await s.remove()}}}))};await e.addSubEffect({effectId:In.PowersLongForgotten,[Pn.OnSetupAfterAddingInvaders]:async()=>{await e.onEachBoard((async a=>{await a.inLandsWhere((a=>a.doesntHave(e.Dahan))).pickMultiple({amount:4,autoplayIfPickingAll:!0,forPickedItem:async a=>{await a.add(1,e.HiddenLocation),await i(a)}})}))},[Pn.AfterMoving]:async({piece:a,source:t,destination:n})=>(a.isOneOf(e.Dahan,e.Invader)&&(await i(t),await i(n)),Promise.resolve()),[Pn.AfterAddingPiece]:async({additions:a})=>{if(a.some((a=>a.piece.isOneOf(e.Dahan,e.Invader))))for(const e of Dr(a.map((e=>e.location))))await i(e);return Promise.resolve()}})}}]},lw=async({$:e,piece:a})=>{if(a.isInvader&&e.action.type!==qo.GameAction&&!a.location.forPiecesWithin(1,null,{mayIncrease:!1}).hasOneWhere((a=>a.isA(e.FlameMarker)))&&!e.action.data.hasPaidForDestruction){if(void 0!==e.action.spirit&&e.action.spirit.energy>=2){if(!e.action.data.hasDeniedPayingForDestruction&&await e.may({highlightLocations:[a.location],prompt:"Pay 2 Energy to do Damage/Destruction in this land?"}))return await e.action.spirit.payEnergy(2),e.action.data.hasPaidForDestruction=!0,!1;e.action.data.hasDeniedPayingForDestruction=!0}else await e.clickToContinue();return!0}return!1},cw={name:"Rituals Of The Destroying Flame",set:gn.BranchAndClaw,difficulty:3,rules:[{name:"Invader Immunity",effects:[{text:"Whenever anything would Damage or Destroy Invaders, ignore that Damage/Destruction unless either:<br><br>There is a Flame Marker within <range-1>.<or>The Spirit using the Power or ability pays 2 Energy.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.RitualsOfTheDestroyingFlame,[Pn.GlobalReminder]:()=>({icon:"Invader<br>Immunity",ongoing:!0,scenario:Nd.RitualsOfTheDestroyingFlame}),[Pn.PreventDamagingPiece]:({piece:a})=>lw({$:e,piece:a}),[Pn.PreventRemovePiece]:({piece:a,removement:t})=>Promise.resolve(wr[t].isDestroyLike&&lw({$:e,piece:a}))})}},{name:"Ritual of the Destroying Flame",text:"Each turn, after all Growth is done, one or more Spirits may perform the Ritual of the Destroying Flame.<br><br>(See Scenario Card for details.)",[Pn.Now]:async({$:e})=>{await e.eachSpirit((async a=>{await a.addExtraAction({actionId:`RitualOfTheDestroyingFlame${a.spirit}`,icon:"Ritual",enabled:()=>e.phase===Gi.GainEnergy&&a.powersWhere((e=>e.data.elements?.includes(ir.Fire)??!1)).count>0,onActivate:async()=>{await e.addSubEffect({effects:[{text:"Each Spirit performing the Ritual Forgets a Power Card that grants <fire>.",[Pn.Now]:async()=>{await a.forgetPowers({filter:e=>e.data.elements?.includes(ir.Fire)??!1})}},{text:"Each Spirit performing the Ritual chooses a land where they have <presence>. Add a Flame Marker and 1 <blight> to that land. (This destroys <presence> normally.)",[Pn.Now]:async()=>{await a.inLands().pickOne((async t=>{await a.doSpiritAction((async()=>{await t.add(1,e.FlameMarker),await t.addBlight(1),await e.addSubEffect({effects:[{text:"Gain Energy equal to the current Invader Stage.",[Pn.Now]:async()=>{await e.clickToContinue({noOptions:`Stage ${e.stage} = ${e.stage} Energy.`}),await a.gainEnergy(e.stage)}},{text:"If there are Invaders in that land, do <fear> equal to the current Invader Stage, and 1 Damage per <dahan> present.",[Pn.Now]:async()=>{t.hasInvaders?(await e.clickToContinue({noOptions:`Stage ${e.stage} = ${e.stage} <fear>.`}),await t.fear(e.stage),await t.damage(t.numberOf(e.Dahan))):await e.clickToContinue({noOptions:"No Invaders present in land."})}}]})}))}),{prompt:"Pick a land where to add a Flame Marker."})}}]})}})}))}}]}]},hw={name:"Bringer of Dreams and Nightmares",set:gn.Base,aspects:[Qo.Enticing,Qo.Violence],specialRules:[{name:"To Dream a Thousand Deaths",text:"Your Powers never cause Damage, nor can they Destroy anything other than your own <presence>.<br><br>When a Power of yours would Destroy (or deal enough Damage to Destroy) <explorer>/<town>/<city>, generate 0/2/5 <fear> instead. The Power Pushes all <explorer>/<town> it would Destroy.<br><br>Notes: A single Power cannot Destroy a given Invader more than once. Powers which cause Damage via <dahan> are affected just like others. All effects other than Damage/Destroy work as usual.",effects:[{[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Bringer,[Pn.PreventRemoveBoard]:({removement:t})=>Promise.resolve(e.action.spirit===a&&t===Wn.DirectDestroy)})}},{text:"Your Powers never cause Damage, nor can they Destroy anything other than your own <presence>.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Bringer,[Pn.GlobalReminder]:()=>({icon:"Powers<br>No <damage>",ongoing:!0,spirit:a,players:[a]}),[Pn.PreventDamagingPiece]:async({piece:t,damage:n})=>e.action.spirit===a&&(await e.waitForAnimationsToFinish(),t.shadowDamage+=n,await e.sendEvent({type:Tn.PieceDamaged,amount:n,shadow:!0,location:t.location??void 0,piece:t,pieceType:t.piece}),t.isAlive||await t.destroy(),await e.addEffectUntilEndOfAction({[Pn.ActionEnds]:()=>(t.shadowDamage=0,Promise.resolve())}),!0)})}},{[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Bringer,text:`When a Power of yours would Destroy (or deal enough Damage to Destroy) <explorer>/<town>/<city>, generate ${a.aspect===Qo.Violence?"1/3/5":"0/2/5"} <fear> instead. The Power Pushes all <explorer>/<town> it would Destroy.`,[Pn.GlobalReminder]:()=>({icon:"<fear><br>Push",ongoing:!0,spirit:a,players:[a]}),[Pn.PreventRemovePiece]:async({piece:t,removement:n})=>!(e.action.spirit!==a||!wr[n].isDestroyLike||n===Wn.DestroyByHealthChange||t.isAPresenceOf(a))&&(t.shadowDamage=0,t.isA(e.Explorer)?(a.aspect===Qo.Violence&&await(t.location?.fear(1)),await t.push()):t.isA(e.Town)?(await(t.location?.fear(a.aspect===Qo.Violence?3:2)),await t.push()):t.isA(e.City)&&await(t.location?.fear(5)),!0)})}}]}],pickOptions:[[0,1,2,3]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}}]},{effects:[{text:"Reclaim One",[Pn.Now]:async({you:e})=>{await e.reclaim(1)}},{text:"Add a <presence> in <range-0>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(0)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1)}}]},{effects:[{text:"Add a <presence> to Land with Dahan or Invaders",[Pn.Now]:async({you:e,$:a})=>{await e.addPresenceInRange(4,{filter:e=>e.has(a.Dahan)||e.hasInvaders})}},{text:"Gain +2 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(2)}}]}],tracks:[{energy:2,name:"Top-track: 2 Energy"},{requires:0,elements:[ir.Air],name:"Top-track: Air"},{requires:1,energy:3,name:"Top-track: 3 Energy"},{requires:2,elements:[ir.Moon],name:"Top-track: Moon"},{requires:3,energy:4,name:"Top-track: 4 Energy"},{requires:4,elements:[ir.Any],name:"Top-track: Any"},{requires:5,energy:5,name:"Top-track: 5 Energy"},{cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:7,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:8,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:9,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:10,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:11,elements:[ir.Any],name:"Bottom-track: Any"}],setup:[{text:"Put 2 <presence> on your starting board in the highest-numbered Sands.",[Pn.Now]:async({you:e})=>{await e.startingBoard.highestNumberedTerrain(Io.Sands).putPresence(2,e)}}],uniquePowers:[Ui.CallOnMidnightsDream,Ui.DreadApparitions,Ui.DreamsOfTheDahan,Ui.PredatoryNightmares],innatePowers:[Ui.SpiritsMayYetDream,Ui.NightTerrors],lore:"When the moon is bright, and the leaves overhead are thin enough to let stray beams fall to earth, the Bringer of Dreams and Nightmares may sometimes be spied, an apparition of pale light and deep shadow. Seen this way, it will neither stop nor acknowledge attempts to communicate with it, whether by Dahan or Spirit. It might not even be there at all: perhaps it's a reflection of a self somewhere else entirely; the realm of the The Pathmaker, or some strange road that borders it.<br>But beings which dream hear from the Bringer frequently, even if they rarely remember it. Certain patterns may even call its attention, if drawn with sand and scatters with breath before sleep. Since the Invaders came, it has tended towards more terrifying forms, even well before the current conflict arose.",playStyle:"With most Spirits, Terror Victories are a backup plan if the main push against the Invaders stalls out for too long, but Bringer turns Fear into a more viable primary strategy. Its transformation of damage & destruction into Fear can turn Major Powers into tremendous sources of terror and panic. However, the only real offense Bringer has is the Dahan fighting back. While it does have some defensive ability, it is fundamentally poor at clearing areas of Invaders.",complexity:"High"},uw={name:"Vital Strength of the Earth",set:gn.Base,aspects:[Qo.Resilience,Qo.Might,Qo.Nourishing],specialRules:[{name:"Earth's Vitality",text:"Defend 3 in every land where you have <sacred>.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Earth,[Pn.GlobalReminder]:()=>({icon:"Defend<br><sacred>",ongoing:!0,spirit:a,players:[a]}),[Pn.DefendFromSpirits]:({land:e})=>e.hasSacredSiteOf(a)?3:0})}}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Add a <presence> in <range-2>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(2)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-0>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(0)}}]},{effects:[{text:"Add a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1)}},{text:"Gain +2 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(2)}}]}],tracks:[{energy:2,name:"Top-track: 2 Energy"},{requires:0,energy:3,name:"Top-track: 3 Energy"},{requires:1,energy:4,name:"Top-track: 4 Energy"},{requires:2,energy:6,name:"Top-track: 6 Energy"},{requires:3,energy:7,name:"Top-track: 7 Energy"},{requires:4,energy:8,name:"Top-track: 8 Energy"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:6,cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:7,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:8,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:9,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:10,cardPlays:4,name:"Bottom-track: 4 Card Plays"}],setup:[{text:"Put 3 <presence> on your starting board: 2 in the highest-numbered Mountain, 1 in the highest-numbered Jungle.",[Pn.Now]:async({you:e})=>{await e.startingBoard.highestNumberedTerrain(Io.Mountains).putPresence(2,e),await e.startingBoard.highestNumberedTerrain(Io.Jungles).putPresence(1,e)}}],uniquePowers:[Ui.AYearOfPerfectStillness,Ui.DrawOfTheFruitfulEarth,Ui.GuardTheHealingLand,Ui.RitualsOfDestruction],progression:[Ui.RouseTheTreesAndStones,Ui.CallToMigrate,Ui.PoisonedLand,Ui.DevouringAnts,Ui.VigorOfTheBreakingDawn,Ui.VoraciousGrowth,Ui.SavageMawbeasts],innatePowers:[Ui.GiftOfStrength],lore:"A spirit of great and unhurried power. The life that earth yields up to roots, the ground supporting the life that lives upon it. The patience of seasons and of stone.<br>It is not usually a direct benefactor of the Dahan - rather than giving blessings it prefers to work in concert with them, lending power to joint undertakings.<br>Currently it is trying to rouse itself to fight against the Invaders, but this swift and direct action runs somewhat counter to its nature.",playStyle:"Powerful but slow: has potent Power Cards and an excellent Energy income, but starts wtih only one card play per turn, and Growth is limited to adding one Presence per turn.<br>Also slow to change: learning new Powers carries slightly more cost than reclaiming played Power Cards.",complexity:"Low"},gw={name:"A Spread of Rampant Green",set:gn.Base,aspects:[Qo.Tangles,Qo.Regrowth],specialRules:[{name:"Choke the Land with Green",text:"Whenever Invaders would Ravage or Build in a land with your <sacred>, you may prevent it by destroying one of your <presence> in that land.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.GreenChokeTheLandWithGreen,[Pn.GlobalReminder]:()=>({icon:"Skip<br><sacred>",ongoing:!0,spirit:a,players:[a]}),[Pn.PreventInvaderActionInLand]:async({land:t,invaderAction:n})=>{let r=!1;return n!==qr.Ravage&&n!==qr.Build||!t.hasSacredSiteOf(a)||await e.chooseBetween({highlightLocations:[t],effects:[{actionId:"DestroyPresence",text:"Destroy <presence> to prevent build.",[Pn.Now]:async()=>{r=!0,await e.sendEvent({type:Tn.GenericMain,text:`Choke the Land with Green used to prevent ${n} in ${t.coordinateLink}.`}),await t.destroy({pieces:e.Presence,owner:a})}},{actionId:"KeepPresence",text:"Keep <presence>."}]}),r}})}},{name:"Steady Regeneration",text:"When adding <presence> to the board via Growth, you may optionally use your destroyed <presence>. If the island is Healthy, do so freely. If the island is Blighted, doing so cost 1 Energy per destroyed <presence> you add.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.GreenSteadyRegeneration,[Pn.GlobalReminder]:()=>({icon:"<broken>",ongoing:!0,spirit:a,players:[a]}),[Pn.MayGrowWithDestroyedPresence]:async()=>{let t=!1;return await e.chooseBetween({effects:[{actionId:"Broken",label:"Use <broken>.",[Pn.Now]:async()=>{t=!0,await e.sendEvent({type:Tn.GenericMain,text:"Steady Regeneration used to add <broken>."}),e.blightStatus===lg.BlightedIsland&&await a.payEnergy(1)},condition:()=>a.destroyedPresence>0&&(a.energy>0||e.blightStatus===lg.HealthyIsland)},{actionId:"Tracks",label:"Use <presence> from tracks."}],autoPlayOneOption:!0}),t}})}}],pickOptions:[[0],[1,2,3]],growthOptions:[{effects:[{text:"Add a <presence> to Jungle or Wetland",[Pn.Now]:async({$:e,you:a})=>{const t=await e.oneEffectActivates(Pn.MayGrowWithDestroyedPresence);await a.addPresenceInRange(2,{filter:e=>e.isJungleOrWetlands,destroyed:t})}}]},{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}}]},{effects:[{text:"Add a <presence> in <range-1>",[Pn.Now]:async({$:e,you:a})=>{const t=await e.oneEffectActivates(Pn.MayGrowWithDestroyedPresence);await a.addPresence({locations:zn.WithinRange,range:1,destroyed:t})}},{text:"+1 Card Play This Turn",[Pn.Now]:async({you:e})=>{await e.gainCardPlays(1)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Gain +3 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(3)}}]}],tracks:[{energy:0,name:"Top-track: 0 Energy"},{requires:0,energy:1,name:"Top-track: 1 Energy"},{requires:1,elements:[ir.Plant],name:"Top-track: Plant"},{requires:2,energy:2,name:"Top-track: 2 Energy"},{requires:3,energy:2,name:"Top-track: 2 Energy"},{requires:4,elements:[ir.Plant],name:"Top-track: Plant"},{requires:5,energy:3,name:"Top-track: 3 Energy"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:7,cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:8,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:9,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:10,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:11,cardPlays:4,name:"Bottom-track: 4 Card Plays"}],setup:[{text:"Put 2 <presence> on your starting board: 1 in the highest-numbered Wetland, and 1 in the Jungle without any <dahan>.",[Pn.Now]:async({$:e,you:a})=>{await a.startingBoard.highestNumberedTerrain(Io.Wetlands).putPresence(1,a),await a.startingBoard.inLandsFilteredByAllInPriority((e=>e.isJungle),(a=>a.doesntHave(e.Dahan))).autoPickOne((async e=>{await e.putPresence(1,a)}))}}],uniquePowers:[Ui.FieldsChokedWithGrowth,Ui.GiftOfProliferation,Ui.OvergrowInANight,Ui.StemTheFlowOfFreshWater],innatePowers:[Ui.CreepersTearIntoMortar,Ui.AllEnvelopingGreen],lore:"One of the older spirits on the island, though it's even more wild and exuberant these days than when it was young. Contrary to some stories, it does think things through - it's just far more concerned with the process of life than with things like 'consequences'.<br>It's not unfriendly to the Dahan, but its idea of a good time is to smother their buildings in all manner of inconvenient greenery, and its notion of \"help\" transforms careful cultivated areas into overgrown thickets. Entire villages have been known to move to fresh planting-sites years early if a spirit-speaker suspects that Rampant Green is going to stay in the area for too long.",playStyle:"Fairly good at dealing with Towns, but terrible at handling Explorers (who are unfazed by prolific foliage). Can get Presence onto the board faster than most other Spirits. Extra Presence is good for targeting and especially for 'Choke the Land with Green', which can be extremely effective at slowing down invaders. Just be careful not to destroy Sacred Sites needed for Power use.",complexity:"Moderate"},fw={name:"Lightning's Swift Strike",set:gn.Base,aspects:[Qo.Pandemonium,Qo.Wind,Qo.Immense,Qo.Sparking],specialRules:[{name:"Swiftness of Lightning",text:"For every <air> you have, you may use 1 <slow> Power as if it were <fast>. (Power Cards or your Innate Powers.)",[Pn.Now]:async({$:e,you:a})=>{const t=De.box(0);await e.addSubEffect({effectId:In.Lightning,[Pn.GlobalReminder]:()=>({icon:`<fast><br>${t.get()} / ${a.maxElementsWithConvert(ir.Air)}`,ongoing:!0,spirit:a,players:[a]}),[Pn.MayChangeSpeedOfPower]:({power:e})=>e.isSlow&&e.owner===a&&a.hasElementsWithConvert({[ir.Air]:t.get()+1}),[Pn.ChangeSpeedOfPower]:async({power:a})=>{await a.makeFast(),t.set(t.get()+1),await a.owner.convertElements({[ir.Air]:t.get()}),await e.sendEvent({type:Tn.GenericMain,text:`Lightning's Swift Strike used Swiftness of Lightning to make ${a.powerLink} fast.`})},[Pn.TimePasses]:()=>(t.set(0),Promise.resolve())})}}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Gain +1 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}]},{effects:[{text:"Add a <presence> in <range-2>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(2)}},{text:"Add a <presence> in <range-0>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(0)}}]},{effects:[{text:"Add a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1)}},{text:"Gain +3 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(3)}}]}],tracks:[{energy:1,name:"Top-track: 1 Energy"},{requires:0,energy:1,name:"Top-track: 1 Energy"},{requires:1,energy:2,name:"Top-track: 2 Energy"},{requires:2,energy:2,name:"Top-track: 2 Energy"},{requires:3,energy:3,name:"Top-track: 3 Energy"},{requires:4,energy:4,name:"Top-track: 4 Energy"},{requires:5,energy:4,name:"Top-track: 4 Energy"},{requires:6,energy:5,name:"Top-track: 5 Energy"},{cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:8,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:9,cardPlays:4,name:"Bottom-track: 4 Card Plays"},{requires:10,cardPlays:5,name:"Bottom-track: 5 Card Plays"},{requires:11,cardPlays:6,name:"Bottom-track: 6 Card Plays"}],setup:[{text:"Put 2 <presence> on your starting board in the highest-numbered Sands.",[Pn.Now]:async({you:e})=>{await e.startingBoard.highestNumberedTerrain(Io.Sands).putPresence(2,e)}}],uniquePowers:[Ui.HarbingersOfTheLightning,Ui.LightningsBoon,Ui.RagingStorm,Ui.ShatterHomesteads],progression:[Ui.DelusionsOfDanger,Ui.CallToBloodshed,Ui.Powerstorm,Ui.PurifyingFlame,Ui.PillarOfLivingFlame,Ui.EntrancingApparitions,Ui.CallToIsolation],innatePowers:[Ui.ThunderingDestruction],lore:"The child of a passing storm-spirit, Lightning's Swift Strike danced off the shores of the island many ages ago, and liked it enough to stay. It spends much of its time resting and quiet, waking up to dance through the sky when the winds blow strong.<br>It only concerns itself occasionally with the Dahan, usually appearing out of nowhere to send them off on some obscure errand. The Dahan cooperate - partly out of wary respect for Lightning's power, but as much for the sake of the Thunderspeaker - Lightning's child - who is a patron and ally of their people.",playStyle:"Virtually all offense to start with: without a more defensive teammate, Blight may become a problem. Excellent at destroying buildings, less good at containing Explorers. Using Thundering Destruction tends to be a burst affair: a turn or two of position and build up Energy, followed by a really big turn.<br>Starting Powers are extremely focused on Air and Fire: good for Thundering Destruction, bad for Major Power versatility.",complexity:"Low"},yw={name:"Ocean's Hungry Grasp",set:gn.Base,aspects:[Qo.Deeps],specialRules:[{name:"Ocean in Play",text:"You may add/move <presence> into Oceans, but may not add/move <presence> into Inland lands.<br><br>On boards with your <presence>, treat Oceans as Coastal Wetlands for Powers and <blight>.<br><br>You Drown any Invaders or <dahan> moved to those oceans.",effects:[{text:"You may add/move <presence> into Oceans, but may not add/move <presence> into Inland lands.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Ocean,[Pn.GlobalReminder]:()=>({text:"You may add/move <presence> into Oceans, but may not add/move <presence> into Inland lands.<br><br>On boards with your <presence>, treat Oceans as Coastal Wetlands for Powers and <blight>.<br><br>You Drown any Invaders or <dahan> moved to those oceans.",icon:"Oceans<br><wetlands>",ongoing:!0,spirit:a}),[Pn.PreventAddPresence]:({spirit:e,location:t,ignoreLandType:n})=>e===a&&t.isInland&&!n,[Pn.PreventMovePiece]:({piece:e,destination:t})=>e.isAPresenceOf(a)&&t.isInland})}},{[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Ocean,text:"On boards with your <presence>, treat Oceans as Coastal Wetlands for Powers and <blight>.",[Pn.OceanIsLand]:({location:t})=>e.currentActionType===qo.PowerAction&&t.boardsHasPresenceOf(a),[Pn.OceanIsLandForBlight]:({location:e})=>e?.boardsHasPresenceOf(a)??!1,[Pn.LocationIsTerrain]:({location:e,terrain:a})=>a===Io.Wetlands&&e.isOceanAndLand,[Pn.AfterRemovePiece]:async({piece:t,location:n})=>{e.currentActionType===qo.PowerAction&&t.isAPresenceOf(a)&&!n.boardsHasPresenceOf(a)&&await e.addEffectUntilEndOfActionTree({[Pn.OceanIsLand]:e=>n.boards().items.map((e=>e.ocean)).includes(e.location),[Pn.OceanIsLandForBlight]:e=>void 0!==e.location&&n.boards().items.map((e=>e.ocean)).includes(e.location)})}})}},{text:"You Drown any Invaders or <dahan> moved to those oceans.",[Pn.Now]:async({$:e,...a})=>{const t={triggerId:e.nextTriggerId(),[Pn.Now]:async({action:e})=>{for(const a of e.parentData.invadersToDrown)a.isAlive&&a.location?.type===jo.Ocean&&await a.drown()}};await e.addSubEffect({effectId:In.Ocean,[Pn.AfterMoving]:async({destination:n,piece:r,movement:i})=>{n.type===jo.Ocean&&r.location===n&&r.isA(e.InvaderOrDahan)&&i!==Mr.Relocate&&(void 0===e.action.data.invadersToDrown&&(e.action.data.invadersToDrown=[]),e.action.data.invadersToDrown.push(r),await e.addTrigger(t,a.effect,a.action,{movingAction:e.action}))}})}}]},{name:"Drowning",text:"Destroys Drowned pieces, placing Drowned Invaders on your Spirit board.<br><br>At any time you may exchange (X) Health of these Invaders for 1 Energy, where X = number of players. (Ignore modifiers to Invader Health.)",effects:[{text:"Destroys Drowned pieces, placing Drowned Invaders here.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Ocean,[Pn.GlobalReminder]:()=>({text:`Destroys Drowned pieces, placing Drowned Invaders on your Spirit board.<br><br>At any time you may exchange ${e.spiritCount} Health of these Invaders for 1 Energy. (Ignore modifiers to Invader Health.)`,icon:"Drowning",ongoing:!0,spirit:a,players:[a]}),[Pn.AfterRemovePiece]:({piece:e,removement:t})=>(t===Wn.Drown&&(e.piece!==Ln.Explorer&&e.piece!==Ln.Town&&e.piece!==Ln.City||(a.panelPieces[e.piece]+=1)),Promise.resolve())})}},{text:"At any time you may exchange (X) Health of these Invaders for 1 Energy, where X = number of players. (Ignore modifiers to Invader Health.)",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Ocean,[Pn.BeforePayEnergy]:async({spirit:t,amount:n})=>{let r=n;for(;t===a&&r>t.innateEnergy;){const n=Math.floor(a.healthWorthOfDrownedInvaders/e.spiritCount),i=Math.min(r-t.innateEnergy,n),s=i*e.spiritCount;for(;a.panelPieces[Ln.Explorer]<s;)if(a.panelPieces[Ln.City]>0)a.panelPieces[Ln.City]-=1,a.panelPieces[Ln.Explorer]+=3;else{if(!(a.panelPieces[Ln.Town]>0))throw new Error("Unable to pay for Ocean energy. This should never happen.");a.panelPieces[Ln.Town]-=1,a.panelPieces[Ln.Explorer]+=2}a.panelPieces[Ln.Explorer]-=s,await e.sendEvent({type:Tn.GenericSub,text:`Ocean consumed ${s} health worth of Invaders.`});r-=(await a.gainEnergy(i)).amount}}})}}]}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Gather 1 Presence into EACH Ocean",[Pn.Now]:({you:e,$:a})=>a.onEachBoard((async t=>{await t.ocean.gather({amount:1,pieces:a.Presence,owner:e,oceanIsAllowed:!0})}))},{text:"Gain +2 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(2)}}]},{effects:[{text:"Add a <presence> in any Ocean",[Pn.Now]:async({you:e})=>{await e.addPresenceInAnyOcean()}},{text:"Add a <presence> in any Ocean",[Pn.Now]:async({you:e})=>{await e.addPresenceInAnyOcean()}},{text:"Gain +1 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Push 1 Presence from EACH Ocean",[Pn.Now]:({you:e,$:a})=>a.onEachBoard((async t=>{await t.ocean.push({amount:1,pieces:a.Presence,owner:e,oceanIsAllowed:!0})}))},{text:"Add a <presence> to Coastal Land",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1,{filter:e=>e.isCoastal})}}]}],tracks:[{energy:0,name:"Top-track: 0 Energy"},{requires:0,elements:[ir.Moon],name:"Top-track: Moon"},{requires:1,elements:[ir.Water],name:"Top-track: Water"},{requires:2,energy:1,name:"Top-track: 1 Energy"},{requires:3,elements:[ir.Earth],name:"Top-track: Earth"},{requires:4,elements:[ir.Water],name:"Top-track: Water"},{requires:5,energy:2,name:"Top-track: 2 Energy"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:7,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:8,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:9,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:10,cardPlays:4,name:"Bottom-track: 4 Card Plays"},{requires:11,cardPlays:5,name:"Bottom-track: 5 Card Plays"}],setup:[{text:"Put 2 <presence> on your starting board: 1 in the Ocean, and 1 in a Coastal land of your choice.",[Pn.Now]:async({you:e})=>{await e.startingBoard.ocean.putPresence(1,e),await e.startingBoard.inCoastalLands().pickOne((async a=>{await a.putPresence(1,e)}))}}],uniquePowers:[Ui.CallOfTheDeeps,Ui.GraspingTide,Ui.SwallowTheLanddwellers,Ui.TidalBoon],innatePowers:[Ui.PoundShipsToSplinters,Ui.OceanBreaksTheShore],lore:"The hunger of the ocean runs deep and powerful, sometimes patient, sometimes tempestuous and angry. It slowly wears away at rocky shores, or devours half an island during a hurricane. It lures humans out onto the water with its sire call, then consumes ship and crew alike unless the proper offerings are made.<br>The ocean's voraciousness keeps the Dahan from frequent sea travel, though they still manage a trading expedition every decade or so. These trading-trips take the cooperation of several families, and always involve at least two spirit-speakers. That way, even if one perishes abroad, the expedition will still be able to get home.",playStyle:"Extremely good at assaulting the coasts where the Invaders start out strong, but quite weak island - the ocean is not accustomed to affecting events so far ashore. Its Presence shifts in and out like the tide, which can be tricky to manage, but permits re-positioning and tactical retreats or offensives in the hands of a skillful player. Has fairly inexpensive Unique Powers, but the energy gained from drowning Invaders can be necessary in stepping up to more potent Powers.",complexity:"High"},pw={name:"River Surges in Sunlight",set:gn.Base,aspects:[Qo.Sunshine,Qo.Travel,Qo.Haven],specialRules:[{name:"River's Domain",text:"Your <presence> in Wetlands count as <sacred>.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.River,[Pn.GlobalReminder]:()=>({icon:"<wetlands><br><sacred>",ongoing:!0,spirit:a,players:[a]}),[Pn.HasSacredSiteOf]:({land:e,spirit:t,helpers:n})=>t===a&&e.hasTerrain(Io.Wetlands,!0)&&e.hasPresenceOf(a,n)})}}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Gain +1 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}]},{effects:[{text:"Add a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1)}},{text:"Add a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-2>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(2)}}]}],tracks:[{energy:1,name:"Top-track: 1 Energy"},{requires:0,energy:2,name:"Top-track: 2 Energy"},{requires:1,energy:2,name:"Top-track: 2 Energy"},{requires:2,energy:3,name:"Top-track: 3 Energy"},{requires:3,energy:4,name:"Top-track: 4 Energy"},{requires:4,energy:4,name:"Top-track: 4 Energy"},{requires:5,energy:5,name:"Top-track: 5 Energy"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:7,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:8,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:9,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:10,effect:{actionId:"ReclaimOne",text:"Reclaim One",[Pn.Now]:async({you:e})=>{await e.reclaim(1)}},effectRequires:({you:e})=>e.hasReclaimableCards,name:"Bottom-track: Reclaim One"},{requires:11,cardPlays:4,name:"Bottom-track: 4 Card Plays"},{requires:12,cardPlays:5,name:"Bottom-track: 5 Card Plays"}],setup:[{text:"Put 1 <presence> on your starting board in the highest-numbered Wetlands.",[Pn.Now]:async({you:e})=>{await e.startingBoard.highestNumberedTerrain(Io.Wetlands).putPresence(1,e)}}],uniquePowers:[Ui.BoonOfVigor,Ui.FlashFloods,Ui.RiversBounty,Ui.WashAway],progression:[Ui.UncannyMelting,Ui.NaturesResilience,Ui.PullBeneathTheHungryEarth,Ui.AcceleratedRot,Ui.SongOfSanctity,Ui.Tsunami,Ui.EncompassingWard],innatePowers:[Ui.MassiveFlooding],lore:"On most of Spirit Island, the rivers run high during the rainy season, as one would expect. There is one exception: the lingering remains of an ancient curse keep a high ridge shrouded in ice, and when the sun beats down, it feeds a single river with abundant meltwater.<br>River Surges in Sunlight is a spirit of rushing water, inundation, and bounty out of season.<br>It gets along well with the Dahan who farm along its banks; they reap the benefit of good harvests, and tend to the health of the river in its drier times. Both gain.",playStyle:"While capable of some direct offense, River Surges in Sunlight is best at flooding out Explorers and Towns, displacing them from lands where they might Build or Ravage.<br>The ability to get free Sacred Sites makes a wide range of Powers more useful.",complexity:"Low"},ww={name:"Shadows Flicker like Flame",set:gn.Base,aspects:[Qo.Madness,Qo.Reach,Qo.Amorphous,Qo.Foreboding,Qo.DarkFire],specialRules:[{name:"Shadows of the Dahan",text:"Whenever you use a Power, you may pay 1 Energy to target a land with <dahan> regardless of the Power's range. (Power Cards or your Innate Powers.)",uses:1,[Pn.Now]:async({$:e,you:a})=>{const t=[];await e.addSubEffect({effectId:In.Shadows,[Pn.GlobalReminder]:()=>({icon:"Ignore<br>Range",ongoing:!0,spirit:a,players:[a]}),[Pn.MayIgnoreRangeWhenTargetingLand]:({land:n,power:r,afterTargeting:i})=>!e.action.data.disableIgnoreRange&&(r.owner.energy>0||!0===i||t.includes(r))&&r.owner===a&&n.has(e.Dahan),[Pn.AfterTargetingLand]:async({targetIndex:n,land:r,power:i})=>{i.owner===a&&(e.action.data.disableIgnoreRange=!0,t.includes(i)||i.validLandTargets({targetIndex:n}).has(r)||(await e.sendEvent({type:Tn.GenericMain,text:`Shadows Flicker like Flame used Shadows of the Dahan to target ${r.coordinateLink}.`}),await a.payEnergy(1),t.push(i)),e.action.data.disableIgnoreRange=!1)},[Pn.AfterPowerLeavesPlay]:({power:e})=>(Vr(t,e),Promise.resolve())})}}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1)}}]},{effects:[{text:"Add a <presence> in <range-3>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(3)}},{text:"Gain +3 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(3)}}]}],tracks:[{energy:0,name:"Top-track: 0 Energy"},{requires:0,energy:1,name:"Top-track: 1 Energy"},{requires:1,energy:3,name:"Top-track: 3 Energy"},{requires:2,energy:4,name:"Top-track: 4 Energy"},{requires:3,energy:5,name:"Top-track: 5 Energy"},{requires:4,energy:6,name:"Top-track: 6 Energy"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:6,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:7,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:8,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:9,cardPlays:4,name:"Bottom-track: 4 Card Plays"},{requires:10,cardPlays:5,name:"Bottom-track: 5 Card Plays"}],setup:[{text:"Put 3 <presence> on your starting board: 2 in the highest-numbered Jungle and 1 in land #5.",[Pn.Now]:async({you:e})=>{await e.startingBoard.highestNumberedTerrain(Io.Jungles).putPresence(2,e),await e.startingBoard.inLandNumber(5).putPresence(1,e)}}],uniquePowers:[Ui.ConcealingShadows,Ui.CropsWitherAndFade,Ui.FavorsCalledDue,Ui.MantleOfDread],progression:[Ui.DarkAndTangledWoods,Ui.ShadowsOfTheBurningForest,Ui.TheJungleHungers,Ui.LandOfHauntsAndEmbers,Ui.TerrifyingNightmares,Ui.CallOfTheDahanWays,Ui.VisionsOfFieryDoom],innatePowers:[Ui.DarknessSwallowsTheUnwary],lore:"The Dahan say, \"If the long shadows of sunset stretching beside you begin to shift and flicker like tongues of hungry fire, do not run. That will only feed your fear, and whet the shadows' appetite.\"<br>This spirit invokes an instinctive fear in humans, perhaps because it doesn't think at all like humans do - it's more alien-minded than most. Until a few generations ago, the Dahan carefully propitiated it only at a distance, steering as clear as they could. But during the Years of The Relentless Sun, it shaded large swaths of the Island, averting catastrophe; since then, many Dahan have been willing to carefully - and cautiously - heed its words, feeling they have a debt they ought to try to repay.<br>",playStyle:"Good at causing Fear and picking off lone Explorers and Towns, containing the Invaders. Not so good at massive damage - may need to rely on allies to handle thoroughly colonized lands.<br>The ability to boost Range gives more flexibility to Range 0 Powers, and can be important in larger games.",complexity:"Low"},mw={name:"Thunderspeaker",set:gn.Base,aspects:[Qo.Tactician,Qo.Warrior],specialRules:[{name:"Ally of the Dahan",text:"Your <presence> may move with <dahan>. (Whenever a <dahan> moves from 1 of your lands to another land, you may move 1 <presence> along with it.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Thunderspeaker,[Pn.GlobalReminder]:()=>({icon:"Ally<br><dahan>",ongoing:!0,spirit:a,players:[a]}),[Pn.BeforeMoving]:async({destination:t,source:n,piece:r,movement:i})=>{r.isA(e.Dahan)&&n.hasPresenceOf(a)&&i!==Mr.Relocate&&await e.chooseBetween({highlightLocations:[n],effects:[{actionId:"Move",text:"Move 1 <presence> with <dahan>.",[Pn.Now]:async()=>{await n.presenceOf(a).autoPickOne((async e=>{await e.move({locations:{target:zn.ToThisLocation,location:t},movement:Mr.Bring,withoutWait:!0})}))}},{actionId:"Stay",text:"Stay with <presence>."}]})}})}},{name:"Sworn to Victory",text:"For Each <dahan> destroyed by Invaders Ravaging a land, destroy 1 of your <presence> within <range-1>. (After losing <presence> to <blight>, if relevant.)",[Pn.Now]:async({$:e,you:a,...t})=>{const n={triggerId:e.nextTriggerId(),[Pn.Now]:async({action:t})=>{await e.sendEvent({type:Tn.GenericMain,text:`Sworn to Victory triggered in ${t.parentData.ravagedLand.coordinateLink}.`}),await Jr(t.parentData.dahanDestroyedInRavage,(async e=>{await t.parentData.ravagedLand.forPiecesWithin(1,a).where((e=>e.isAPresenceOf(a))).pickOne((async e=>{await e.destroy()}),{noOptions:"No land within <range-1> with your <presence>.",prompt:`Pick a land to destroy a <presence>. ${t.parentData.dahanDestroyedInRavage-e} left.`})}))}};await e.addSubEffect({effectId:In.Thunderspeaker,[Pn.GlobalReminder]:()=>({icon:"Sworn<br><broken>",ongoing:!0,spirit:a,players:[a]}),[Pn.AfterDahanDestroyedInRavage]:async({land:a,amount:r})=>{e.action.data.dahanDestroyedInRavage=e.action.data.dahanDestroyedInRavage??0+r,e.action.data.ravagedLand=a,await e.addTrigger(n,t.effect,t.action)}})}}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}}]},{effects:[{text:"Add a <presence> in <range-2> to Land with Dahan ",[Pn.Now]:async({you:e,$:a})=>{await e.addPresenceInRange(2,{filter:e=>e.has(a.Dahan)})}},{text:"Add a <presence> in <range-1> to Land with Dahan",[Pn.Now]:async({you:e,$:a})=>{await e.addPresenceInRange(1,{filter:e=>e.has(a.Dahan)})}}]},{effects:[{text:"Add a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1)}},{text:"Gain +4 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(4)}}]}],tracks:[{energy:1,name:"Top-track: 1 Energy"},{requires:0,elements:[ir.Air],name:"Top-track: Air"},{requires:1,energy:2,name:"Top-track: 2 Energy"},{requires:2,elements:[ir.Fire],name:"Top-track: Fire"},{requires:3,elements:[ir.Sun],name:"Top-track: Sun"},{requires:4,energy:3,name:"Top-track: 3 Energy"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:6,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:7,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:8,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:9,effect:{actionId:"ReclaimOne",text:"Reclaim One",[Pn.Now]:async({you:e})=>{await e.reclaim(1)}},effectRequires:({you:e})=>e.hasReclaimableCards,name:"Bottom-track: Reclaim One"},{requires:10,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:11,cardPlays:4,name:"Bottom-track: 4 Card Plays"}],setup:[{text:"Put 2 <presence> on your starting board: 1 in each of the 2 lands with the most <dahan>.",[Pn.Now]:async({$:e,you:a})=>{const t=a.startingBoard.inLandsWithMost((a=>a.numberOf(e.Dahan)));let n=null;2===t.count?n=t.anyOne:await t.autoPickOne((e=>(n=e,Promise.resolve()))),await n.putPresence(1,a),await a.startingBoard.inLandsWithMost((a=>a===n?0:a.numberOf(e.Dahan))).autoPickOne((async e=>{await e.putPresence(1,a)}))}}],uniquePowers:[Ui.ManifestationOfPowerAndGlory,Ui.SuddenAmbush,Ui.VoiceOfThunder,Ui.WordsOfWarning],innatePowers:[Ui.GatherTheWarriors,Ui.LeadTheFuriousAssault],lore:"Child of the Lightning, once known as Bright Thunder Roars in the days when it tore across the land as an avalanche of sound and chaos. It lost that form when the Stalker of Hidden Secrets imprisoned it in a canyon, binding it to echo perpetually back and forth until its thunder died out or the stones of the island wore away.<br>The Dahan freed it from that imprisonment. Weakened but grateful, Bright Thunder Roars bound itself to aid the Dahan until a generation had passed for every year of its imprisonment, and in so binding changed its nature, becoming both less and more than it had been. It often takes human form, now, and with centuries' practice wears it with ease.<br>Chiefs call on the Thunderspeaker only in times of great need; it has not been much seen since the destruction of the Servant Cults.",playStyle:"Has a keen interest in where the Dahan are - partly because so many of its starting powers work through them partly because its Presence can move along with them. When picking new Power Cards, it will often want to take good Dahan-centric Powers, but it can also branch out into other areas.",complexity:"Moderate"},vw={name:"Sharp Fangs Behind the Leaves",set:gn.BranchAndClaw,aspects:[Qo.Encircle,Qo.Unconstrained],specialRules:[{name:"Ally of the Beasts",text:"Your <presence> may move with <beasts>. (Whenever a <beasts> moves from 1 <presence> along with it.)",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.FangsAllyOfTheBeasts,[Pn.GlobalReminder]:()=>({icon:"Ally<br><beasts>",ongoing:!0,spirit:a,players:[a]}),[Pn.BeforeMoving]:async({destination:t,source:n,piece:r,movement:i})=>{r.isA(e.Beasts)&&n.hasPresenceOf(a)&&i!==Mr.Relocate&&await e.chooseBetween({effects:[{actionId:"Move",text:"Move 1 <presence> with <beasts>.",[Pn.Now]:async()=>{await n.presenceOf(a).autoPickOne((async e=>{await e.move({locations:{target:zn.ToThisLocation,location:t},withoutWait:!0})}))}},{actionId:"Stay",text:"Stay with <presence>."}]})}})}},{name:"Call Forth Predators",text:"During each Spirit Phase, you may replace 1 of your <presence> with 1 <beasts>. The replaced <presence> leaves the game. (It was not destroyed, so things which return destroyed <presence> cannot bring it back.).",[Pn.Now]:async({$:e,you:a})=>{await a.addExtraAction({effectId:In.FangsCallForthPredators,actionId:"CallForthPredators",icon:"+1 <beasts>",enabled:()=>e.phase===Gi.Grow||e.phase===Gi.GainEnergy,onActivate:async()=>{await a.presence().pickOne((async a=>{const t=a.location;await a.remove(Wn.RemoveFromGame),await t.add(1,e.Beasts)}),{text:"Replace 1 of your <presence> with 1 <beasts>."})}})}}],pickOptions:[[0,1,2,3],[0,1,2,3]],growthOptions:[{cost:1,effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}}]},{effects:[{text:"Add a <presence> in <range-3>",[Pn.Now]:async({you:e,$:a})=>{await e.addPresenceInRange(3,{filter:e=>e.isJungle||e.has(a.Beasts)})}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Gain +1 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}]},{effects:[{text:"Gain +3 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(3)}}]}],tracks:[{energy:1,name:"Top-track: 1 Energy"},{requires:0,elements:[ir.Animal],name:"Top-track: Animal"},{requires:1,elements:[ir.Plant],name:"Top-track: Plant"},{requires:2,energy:2,name:"Top-track: 2 Energy"},{requires:3,elements:[ir.Animal],name:"Top-track: Animal"},{requires:4,energy:3,name:"Top-track: 3 Energy"},{requires:5,energy:4,name:"Top-track: 4 Energy"},{cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:7,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:8,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:9,effect:{actionId:"ReclaimOne1",text:"Reclaim One",[Pn.Now]:async({you:e})=>{await e.reclaim(1)}},effectRequires:({you:e})=>e.hasReclaimableCards,name:"Bottom-track: Reclaim One"},{requires:10,cardPlays:4,name:"Bottom-track: 4 Card Plays"},{requires:11,cardPlays:5,effect:{actionId:"ReclaimOne2",text:"Reclaim One",[Pn.Now]:async({you:e})=>{await e.reclaim(1)}},effectRequires:({you:e})=>e.hasReclaimableCards,name:"Bottom-track: 5 Card Plays, Reclaim One"}],setup:[{text:"Put 1 <presence> and 1 <beasts> on your starting board in the highest-numbered Jungle.",[Pn.Now]:async({you:e,$:a})=>{const t=e.startingBoard.highestNumberedTerrain(Io.Jungles);await t.putPresence(1,e),await t.add(1,a.Beasts)}},{text:"Put 1 <presence> in a land of your choice with <beasts> anywhere on the island.",[Pn.Now]:async({you:e,$:a})=>{await a.inLandsWith(a.Beasts).autoPickOne((async a=>{await a.putPresence(1,e)}))}}],uniquePowers:[Ui.PreyOnTheBuilders,Ui.TeethGleamFromDarkness,Ui.TerrifyingChase,Ui.TooNearTheJungle],innatePowers:[Ui.RangingHunt,Ui.FrenziedAssault],lore:"A predator-spirit of the jungles, a stalker and hunter of animal and human alike. Wherever it lives, savage beasts emerge to hunt, and the jungle grows dark and ominous.<br>Sharp Fangs doesn't bother talking to the Dahan. Sometimes it will hunt them, or run them off, but for the most part it ignores them. The Dahan's legends tell of a time when Sharp Fangs hunted them more actively, until a pair of warriors - twins, sister and brother - drove it off with traps and guile, then turned the tables and hunted it down. Since then, it has seen the Dahan as not-entirely-prey, which, for it, is something akin to respect.",playStyle:'All about Beasts and Jungles. Can be very fast out of the gate, but doesn\'t have the late-game power that some spirits do, and is likely to have some difficulty with Blighted areas. "Ranging Hunt" is a critical Innate ability, particularly in early-game: it simultaneously gives Beasts mobility and permits picking off a stray Explorers or Towns on most turns.',complexity:"Moderate"},xw={name:"Keeper of the Forbidden Wilds",set:gn.BranchAndClaw,aspects:[Qo.SpreadingHostility],specialRules:[{name:"Forbidden Ground",text:"Any time you create a <sacred>, Push all <dahan> from that land.<br><br>Dahan Events never move <dahan> to your <sacred>, but Powers can do so.",effects:[{text:"Any time you create a <sacred>, Push all <dahan> from that land.",[Pn.Now]:async({$:e,you:a,...t})=>{const n={triggerId:e.nextTriggerId(),[Pn.Now]:async({action:a})=>{for(const t of a.parentData.landBecameSacredSite)await t.pushAll(e.Dahan)}};await e.addSubEffect({effectId:In.Keeper,[Pn.GlobalReminder]:()=>({text:"Any time you create a <sacred>, Push all <dahan> from that land.<br><br>Dahan Events never move <dahan> to your <sacred>, but Powers can do so.",icon:"<sacred>",ongoing:!0,spirit:a,players:[a]}),[Pn.AfterLandChangesAmountOfPresence]:async({land:r,spirit:i,amountBefore:s,amountAfter:o})=>{o>=2&&s<2&&i===a&&(void 0===e.action.data.landBecameSacredSite&&(e.action.data.landBecameSacredSite=[]),e.action.data.landBecameSacredSite.includes(r)||e.action.data.landBecameSacredSite.push(r),await e.addTrigger(n,t.effect,t.action))}})}},{text:"Dahan Events never move <dahan> to your <sacred>, but Powers can do so.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Keeper,[Pn.PreventMovePiece]:({piece:t,destination:n,movement:r})=>e.action.type===qo.DahanEventAction&&t.isA(e.Dahan)&&r!==Mr.Relocate&&n.hasSacredSiteOf(a)})}}]}],pickOptions:[[0,1,2,3],[0,1,2,3]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain +1 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}}]},{effects:[{text:"Add a <presence> in <range-3> to Land with Wilds or Your Presence",[Pn.Now]:async({you:e,$:a})=>{await e.addPresenceInRange(3,{filter:t=>t.has(a.Wilds)||t.hasPresenceOf(e)})}},{text:"Gain +1 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}]},{cost:3,effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-3> to Land without Blight",[Pn.Now]:async({you:e,$:a})=>{await e.addPresenceInRange(3,{filter:e=>!e.has(a.Blight)})}}]}],tracks:[{energy:2,name:"Top-track: 2 Energy"},{requires:0,elements:[ir.Sun],name:"Top-track: Sun"},{requires:1,energy:4,name:"Top-track: 4 Energy"},{requires:2,energy:5,name:"Top-track: 5 Energy"},{requires:3,elements:[ir.Plant],name:"Top-track: Plant"},{requires:4,energy:7,name:"Top-track: 7 Energy"},{requires:5,energy:8,name:"Top-track: 8 Energy"},{requires:6,energy:9,name:"Top-track: 9 Energy"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:8,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:9,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:10,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:11,cardPlays:4,name:"Bottom-track: 4 Card Plays"},{requires:12,cardPlays:5,effect:{actionId:"ReclaimOne",text:"Reclaim One",[Pn.Now]:async({you:e})=>{await e.reclaim(1)}},effectRequires:({you:e})=>e.hasReclaimableCards,name:"Bottom-track: 5 Card Plays, Reclaim One"}],setup:[{text:"Put 1 <presence> and 1 <wilds> on your starting board in the highest-numbered Jungle.",[Pn.Now]:async({you:e,$:a})=>{const t=e.startingBoard.highestNumberedTerrain(Io.Jungles);await t.putPresence(1,e),await t.add(1,a.Wilds)}}],uniquePowers:[Ui.BoonOfGrowingPower,Ui.RegrowFromRoots,Ui.SacrosanctWilderness,Ui.ToweringWrath],innatePowers:[Ui.PunishThoseWhoTrespass,Ui.SpreadingWilds],lore:"Spread throughout Spirit Island are pockets of deep wilderness, untouched by human hands. A few have a spirit of sanctity about them. The leaves there whisper words of forbiddance, of warnings, of wrath for those who trespass. The Dahan know how to listen, and stay well away.<br>A few spirit-seekers claim that these wild-spirits (powerful as they are) are merely custodians and wardens for other more powerful, spirits of ancient trees and deep roots who wake neither frequently nor easily. Nobody much cares to test the truth of the matter.",playStyle:"A slowly growing wall - expanding can sometimes be difficult, but the Invaders will have an equally difficult time penetrating wherever the Keeper plants itself.<br>In larger games, it may be useful to spread to one of the two far-distant lands early on, to have multiple points from which to slowly grow.",complexity:"Moderate"},bw={name:"Downpour Drenches the World",set:gn.FeatherAndFlame,aspects:[],specialRules:[{name:"Drench the Landscape",text:"Spirit Actions and Special Rules treat your <sacred> as Wetlands in addition to the printed terrain.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Downpour,[Pn.GlobalReminder]:()=>({icon:"<sacred><br>= <wetlands>",ongoing:!0,spirit:a,players:[a]}),[Pn.LocationIsTerrain]:({location:t,terrain:n,isSpecialRule:r})=>n===Io.Wetlands&&t.hasSacredSiteOf(a)&&([qo.SpiritAction,qo.PowerAction].includes(e.action.type)||r)})}},{name:"Pour Down Power Across the Island",text:"For each 2 <water> you have: during the <fast>/<slow> phase you may either:<br><br>Gain 1 Energy<or>Repeat one of your land-targeting Power Cards by paying its cost again. (It need not target the same land.)<br><br>(Max. 5 times per turn, no matter how much <water> you have.)",[Pn.Now]:async({$:e,you:a})=>{await a.addExtraAction({actionId:"PourDownPower",icon:"<water>",maxUses:()=>Math.min(a.numberOfElementCombos({[ir.Water]:2}),5),enabled:()=>e.phase===Gi.FastPowers||e.phase===Gi.SlowPowers,onActivate:async()=>{await e.chooseBetween({effects:[{actionId:"Energy",text:"Gain 1 Energy",[Pn.Now]:async()=>{await a.gainEnergy(1)}},{actionId:"Repeat",text:"Repeat one of your land-targeting Power Cards by paying its cost again.",[Pn.Now]:async()=>{await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({icon:"Repeat<br>Power",players:[a]}),[Pn.MayRepeatPowercard]:({power:e,speed:t})=>e.owner===a&&e.costToPlay<=a.energy&&e.data.type!==kn.Innate&&e.data.target===or.Land&&e.possibleToRepeatAtSpeed(t),[Pn.RepeatPowerCard]:async({power:a,speed:t})=>{e.removeThisEffect(),await a.payForPlay(),await a.replay(t)}})}}]})}})}}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Move a <presence> in <range-2>",[Pn.Now]:async({you:e})=>{await e.movePresence(2)}}]},{effects:[{text:"Add a <presence> in <range-2>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(2)}},{text:"Add a <presence> in <range-2>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(2)}},{text:"Gain 2 Water",[Pn.Now]:async({you:e})=>{await e.gainElementsUntilEndOfTurn({[ir.Water]:2})}},{text:"Discard 2 Power Cards",[Pn.Now]:async({you:e})=>{await e.discardPowerCards(2)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-3>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(3)}},{text:"Gain +1 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}]}],tracks:[{energy:1,name:"Top-track: 1 Energy"},{requires:0,elements:[ir.Water],name:"Top-track: Water"},{requires:1,elements:[ir.Plant],name:"Top-track: Plant"},{requires:2,elements:[ir.Water],name:"Top-track: Water"},{requires:3,energy:2,elements:[ir.Air],name:"Top-track: 2 Energy, Air"},{requires:4,elements:[ir.Water],name:"Top-track: Water"},{requires:5,elements:[ir.Earth],name:"Top-track: Earth"},{requires:6,elements:[ir.Water,ir.Water],name:"Top-track: 2 Energy"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:8,effect:{actionId:"MovePresence1",text:"Move a <presence> 1",[Pn.Now]:async({you:e})=>{await e.movePresence(1)}},name:"Bottom-track: Move a Presence 1"},{requires:9,elements:[ir.Water],name:"Bottom-track: Water"},{requires:10,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:11,effect:{actionId:"MovePresence2",text:"Move a <presence> 1",[Pn.Now]:async({you:e})=>{await e.movePresence(1)}},name:"Bottom-track: Move a Presence 1"},{requires:12,cardPlays:3,name:"Bottom-track: 3 Card Plays"}],setup:[{text:"Put 1 <presence> on your starting board in the lowest-numbered Wetland.",[Pn.Now]:async({you:e})=>{await e.startingBoard.lowestNumberedTerrain(Io.Wetlands).putPresence(1,e)}}],uniquePowers:[Ui.DarkSkiesLooseAStingingRain,Ui.FoundationsSinkIntoMud,Ui.GiftOfAbundance,Ui.UnbearableDeluge],innatePowers:[Ui.RainAndMudSuppressConflict,Ui.WaterNourishesLifesGrowth],lore:'The deluge. As the Dahan say, "When the very air turns to water and the sound of rainfall drowns out all but the loudest of thunder, at that moment when it could not conceivably pour any more - and then suddenly, impossibly, it is raining twice as much - that is the downpour."<br>A Spirit of the high skies bridging to the earth below with a cascading torrent of water, rain blowing on the wind and soaking the ground. Flies back and forth across the boundary between water which brings life and growth, and water which overwhelms everything save the plants and soil entwined in each other\'s protection.',playStyle:'Cares about the question "How useful is this Power in the current context?" even more than most Spirits; it rarely plays all its Power Cards in any given Reclaim cycle (some get discarded to Growth), and for those it does play, it often has the option of using them multiple times.<br>Benefits even more than most Spirits from having lots of Presence on the board, both for Rain and Mud Suppress Conflict and to facilitate its Unique Powers (by making more lands Wetlands).',complexity:"High"},Tw={name:"Finder of Paths Unseen",set:gn.FeatherAndFlame,aspects:[],specialRules:[{name:"Responsibilities to the Dead",text:"After one of your Actions Destroys 1 or more <dahan>/Invaders, or directly triggers their Destruction by moving them, Destroy 1 of your <presence> and lose 1 Energy. If you have no Energy to lose, Destroy another <presence>.",[Pn.Now]:async({$:e,you:a,...t})=>{const n={triggerId:e.nextTriggerId(),[Pn.Now]:async()=>{await e.sendEvent({type:Tn.GenericMain,text:`${a.nameLink} paid responsibilities to the Dead.`}),await a.destroyPresence(1),a.energy>=1?await a.loseEnergy(1):await a.destroyPresence(1)}};await e.addSubEffect({effectId:In.Finder,[Pn.GlobalReminder]:()=>({icon:"<broken>",ongoing:!0,spirit:a,players:[a]}),[Pn.AfterRemovePiece]:async({piece:r,removement:i})=>{r.isA(e.InvaderOrDahan)&&wr[i].isDestroyLike&&(e.action.spirit===a||e.action.data.movingAction?.spirit===a)&&await e.addTrigger(n,t.effect,t.action)}})}},{name:"Open the Ways",text:"You may make up to two of your lands adjacent at a time. You may change which lands are adjacent once between Actions.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Finder,[Pn.GlobalReminder]:()=>({text:"Your lands are adjacent to each other, except for Invader and Adversary Actions.<br><br>(House Rule Variant)",icon:"Open<br>Ways",ongoing:!0,spirit:a,players:[a]}),[Pn.StartOfRavageStep]:()=>(e.setupAdjacencies(),Promise.resolve()),[Pn.StartOfSlowPhase]:()=>(e.setupAdjacencies(),Promise.resolve()),[Pn.AfterLandChangesAmountOfPresence]:async({amountBefore:t,amountAfter:n,spirit:r})=>{r===a&&e.phase!==Gi.SetupPresence&&(t>0&&0===n||0===t&&n>0)&&await e.addSubEffectUntilEndOfAction({[Pn.ActionEnds]:()=>(e.setupAdjacencies(),Promise.resolve())})},[Pn.ExtraAdjacency]:()=>{const t=[];if(![Gi.HighImmigration,Gi.Ravage,Gi.Build,Gi.Explore].includes(e.phase))for(const e of a.lands)for(const n of a.lands)e!==n&&t.push({land1:e,land2:n});return t}})}}],pickOptions:[[0,1,2,3]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"You may ignore Range this turn",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({icon:"Ignore<br>Range",players:[a]}),[Pn.ExtraRange]:e=>e.spirit===a?99:0})}}]},{effects:[{text:"Add a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1)}},{text:"+1 Card Play this turn",[Pn.Now]:async({you:e})=>{await e.gainCardPlays(1)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-2>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(2)}}]},{effects:[{text:"Add a <presence> in any Land",[Pn.Now]:async({you:e})=>{await e.addPresence({locations:zn.AnyLands})}},{text:"Gain +2 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(2)}}]}],tracks:[{energy:0,name:"Top-track: 0 Energy"},{requires:0,elements:[ir.Sun],name:"Top-track: Sun"},{requiresAny:[1,3,5],energy:2,elements:[ir.Water],name:"Top-track: 2 Energy, Water"},{requiresAny:[2,4,6,7],extraEnergy:2,name:"Top-track: +2 Energy"},{requiresAny:[3,7],extraEnergy:1,elements:[ir.Any],name:"Top-track: +1 Energy, Any"},{requiresAny:[1,9],energy:1,elements:[ir.Moon],name:"Middle-track: 1 Energy, Moon"},{requiresAny:[3,5,11],effect:{actionId:"MovePresence",text:"Move Presence 1",[Pn.Now]:async({you:e})=>{await e.movePresence(1)}},elements:[ir.Air],name:"Middle-track: Move Presence 1, Air"},{requiresAny:[3,4,11,12],extraEnergy:1,extraRange:1,name:"Middle-track: +1 Energy, +1 Range"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:8,elements:[ir.Earth],name:"Bottom-track: Earth"},{requiresAny:[9,11],extraCardPlays:1,name:"Bottom-track: +1 Card Plays"},{requiresAny:[6,7,10,12],extraCardPlays:1,name:"Bottom-track: +1 Card Plays"},{requiresAny:[7,11],effect:{actionId:"Push",text:"Push 1 <town>/<city> from 1 of your lands.",[Pn.Now]:({you:e,$:a})=>e.forPiecesThatIs(a.TownOrCity).pickOne((async e=>{await e.push()}),{noOptions:"None of your lands have <town>/<city>."})},name:"Bottom-track: Push 1 Town/City"}],setup:[{text:"Put 1 <presence> on your starting board in land #3.",[Pn.Now]:async({you:e})=>{await e.startingBoard.inLandNumber(3).putPresence(1,e)}},{text:"Put 1 <presence> on any board in land #1.",[Pn.Now]:async({you:e,$:a})=>{await a.inLandsWhere((e=>e.hasNumber(1))).autoPickOne((async a=>{await a.putPresence(1,e)})),a.setupAdjacencies()}}],uniquePowers:[Ui.ACircuitousAndWendingJourney,Ui.AidFromTheSpiritspeakers,Ui.OfferPassageBetweenWorlds,Ui.PathsTiedByNature,Ui.TravelersBoon,Ui.WaysOfShoreAndHeartland],innatePowers:[Ui.LayPathsTheyCannotHelpButWalk,Ui.CloseTheWays],lore:"Finder of Paths Unseen is well known to the Dahan: it traverses the island with ease, and most spirit-speakers have met it at least once or twice. It communicates more straightforwardly than most Spirits, layering thought-sendings over its high-pitched trills. And it - or its assistants - sometimes help soulforms of dead Dahan move swiftly on, eluding those Spirits that seek to devour them.<br>It is almost commonplace... but also deeply enigmatic, even to those clans who call it Pathfinder. Does it locate paths, or make them? Is the other-space it moves through a realm, or a state of being? While it is occasionally willing to answer, its thoughts do not always translate well to words.",playStyle:'All about moving the Invaders - and Dahan/Presence/Beasts from time to time. Good at creating Invader-free "safe-zones," due to its many movement Powers and its capacity to Isolate. Can\'t afford to Destroy Invaders too often without a way to re-add Destroyed Presence, so either needs a big-hammer Major Power or to rely on its teammates for offense.<br>Changes the topology of the board, which increases complexity for all players - particularly in larger games!',complexity:"Very High"},Aw={name:"Serpent Slumbering Beneath the Island",set:gn.FeatherAndFlame,aspects:[Qo.Locus],specialRules:[{name:"Deep Slumber",text:'You start off limited to 5 <presence> on the island. Raise this with your "Absorb Essence" Power Card. Each use covers the lowest revealed number; your <presence> limit is the lowest uncovered number.<br>Numbers: 5, 7, 8, 10, 11, 12, 13.',[Pn.Now]:async({$:e,you:a})=>{const t=e=>[5,7,8,10,11,12,13][Math.min(e.absorbedPresence.length,6)];await e.addSubEffect({effectId:In.Serpent,[Pn.GlobalReminder]:()=>({icon:`<presence><br>${Math.max(a.numberOfPresenceInLands+(null!=a.incarna?-1:0),0)}/${t(a)}`,ongoing:!0,spirit:a,players:[a]}),[Pn.PreventAddAnyPresence]:({spirit:e})=>e===a&&a.numberOfPresenceInLands+(null!=a.incarna?-1:0)>=t(a)})}}],pickOptions:[[0,1,2,3],[0,1,2,3]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Move a <presence>",[Pn.Now]:async({you:e})=>{await e.movePresence(1)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Gain +1 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}]},{effects:[{text:"Gain +4 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(4)}}]},{effects:[{text:"Add a <presence> in <range-3> to Land without Blight",[Pn.Now]:async({you:e,$:a})=>{await e.addPresenceInRange(3,{filter:e=>!e.has(a.Blight)})}}]}],tracks:[{energy:1,name:"Top-track: 1 Energy"},{requires:0,elements:[ir.Fire],name:"Top-track: Fire"},{requires:1,elements:[ir.Any],name:"Top-track: Any"},{requires:2,effect:{actionId:"ReclaimOne1",text:"Reclaim One",[Pn.Now]:async({you:e})=>{await e.reclaim(1)}},name:"Top-track: Reclaim One"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:4,elements:[ir.Moon],name:"Bottom-track: Moon"},{requires:5,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:6,elements:[ir.Water],name:"Bottom-track: Water"},{requiresAll:[3,7],elements:[ir.Earth],name:"Middle-track: Earth"},{requires:8,energy:6,name:"Top-track: 6 Energy"},{requires:9,elements:[ir.Any],name:"Top-track: Any"},{requires:10,energy:12,name:"Top-track: 12 Energy"},{requires:8,cardPlays:4,name:"Bottom-track: 4 Card Plays"},{requires:12,cardPlays:5,effect:{actionId:"ReclaimOne2",text:"Reclaim One",[Pn.Now]:async({you:e})=>{await e.reclaim(1)}},effectRequires:({you:e})=>e.hasReclaimableCards,name:"Bottom-track: 5 Card Plays, Reclaim One"}],setup:[{text:"Put 1 <presence> on your starting board in land #5.",[Pn.Now]:async({you:e})=>{await e.startingBoard.inLandNumber(5).putPresence(1,e)}}],uniquePowers:[Ui.AbsorbEssence,Ui.ElementalAegis,Ui.GiftOfFlowingPower,Ui.GiftOfThePrimordialDeeps],innatePowers:[Ui.SerpentWakesInPower,Ui.SerpentRousesInAnger],lore:"Long ago in an earlier age, there was only water where islands now lie. One day - for there were day and night by then, though humans did not yet exist - a great serpent grew tired of swimming and decided to rest. It drew the earth up around itself, and so the island was born. Other stories say different things - in particular, Volcano Looming High has its own account - but stories do not need to agree for them to be true. Regardless, many spirits can sense the immense serpent deep below. It is mostly asleep, and its influence on the land above is limited, but the Invaders' Blight already begins to sting it towards greater wakefulness.",playStyle:"There are several ways to play the Serpent, but all require patience: early game involves slowly building up Powers and Presence. It's not helpless during this time, but it isn't as effective as anyone else. It becomes incredibly powerful after awakening, but getting there requires a lot of time.<br>Make sure to Absorb Essence before you run up against your Presence cap - and to get other players' buy-in before using Absorb Essence on their Presence.",complexity:"High"},Iw={name:"Heart of the Wildfire",set:gn.FeatherAndFlame,aspects:[Qo.Transforming],specialRules:[{name:"Blazing Presence",text:"After you add or move <presence> after Setup, in the land it goes to:<br><br><bullet> For each <fire> showing on your <presence> Tracks, do 1 Damage.<br><br><bullet> If 2 <fire> or more are showing on your <presence> Tracks, add 1 <blight>.<br><br><bullet> Push all <beasts> and any number of <dahan>.<br><br>If you add multiple <presence> into a land at the same time, only do the above effects once.",[Pn.Now]:async({$:e,you:a,...t})=>{await e.afterPiecesAreAddedOrMovedAddTrigger({reminder:!1,permanent:!0,globalReminder:()=>({icon:`<presence><br>${a.elementsFromTracks[ir.Fire]} <fire>`,ongoing:!0,spirit:a,players:[a]}),trigger:{triggerId:e.nextTriggerId(),[Pn.Now]:async({action:t})=>{const n=t.parentData.piecesAddedOrMoved.map((e=>e.location)).filter((e=>null!==e));await od.createCollection(e,Dr(n)).autoPickOne((async t=>{await e.addSubEffect({effectId:In.Wildfire,effects:[{text:"For each <fire> showing on your <presence> Tracks, do 1 Damage.",[Pn.Now]:async()=>{await t.damage(a.elementsFromTracks[ir.Fire])}},{text:"If 2 <fire> or more are showing on your <presence> Tracks, add 1 <blight>.",[Pn.Now]:async()=>{a.elementsFromTracks[ir.Fire]>=2&&await t.addBlight(1)}},{text:"Push all <beasts>.",[Pn.Now]:async()=>{await t.possiblyDontCountPiecesAs(Ln.Beasts),await t.pushAll(e.Beasts)}},{text:"Push any number of <dahan>.",[Pn.Now]:async()=>{await t.push({quantifier:ur.Any,pieces:e.Dahan})}}]})}))}},pieces:e.Presence,owner:a,effect:t.effect,action:t.action})}},{name:"Destructive Nature",text:"<blight> added due to Spirit effects (Powers, Special Rules, Scenario-based Rituals, etc) does not destroy your <presence>. (This includes cascades.)",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Wildfire,[Pn.PreventBlightDestroyingPresence]:t=>t.spirit===a&&(e.action.type===qo.PowerAction||e.action.type===qo.SpiritAction)})}}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Gain +1 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-3>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(3)}}]},{effects:[{text:"Add a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1)}},{text:"Gain +2 Energy and +1 more per Fire Showing",[Pn.Now]:async({you:e})=>{await e.gainEnergy(2+e.elementsFromTracks[ir.Fire])}}]}],tracks:[{energy:0,name:"Top-track: 0 Energy"},{requires:0,elements:[ir.Fire],name:"Top-track: Fire"},{requires:1,energy:1,name:"Top-track: 1 Energy"},{requires:2,energy:2,name:"Top-track: 2 Energy"},{requires:3,elements:[ir.Fire,ir.Plant],name:"Top-track: Fire and Plant"},{requires:4,energy:3,name:"Top-track: 3 Energy"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:6,elements:[ir.Fire],name:"Bottom-track: Fire"},{requires:7,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:8,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:9,elements:[ir.Fire],name:"Bottom-track: Fire"},{requires:10,cardPlays:4,name:"Bottom-track: 4 Card Plays"}],setup:[{text:"Put 3 <presence> and 2 <blight> on your starting board in the highest-numbered Sands.",[Pn.Now]:async({you:e,$:a})=>{const t=e.startingBoard.highestNumberedTerrain(Io.Sands);await t.putPresence(3,e),await t.add(2,a.Blight)}}],uniquePowers:[Ui.AsphyxiatingSmoke,Ui.FlamesFury,Ui.Flashfires,Ui.ThreateningFlames],innatePowers:[Ui.Firestorm,Ui.TheBurnedLandRegrows],lore:"A spirit of natural destruction... and renewal after destruction, though those whose lands have been scoured by flame don't usually much appreciate the latter. Thrives near human habitations, glorying in their fires and sparks, but has existed on the island since long before the Dahan arrived, a child of the Volcano and the Green. The Wildfire is a long-standing friend of the Dahan: the early slash-and-burn agriculture which turned most Spirits against them gave it the best decades it had had in centuries. It later supported the Dahan during the Second Reckoning, backing their threats of reprisal. It doesn't interact with the Dahan often these years, but spares their villages as best it can, and fights the Invaders in large part for them.",playStyle:'Starts with good offense and gets better from there, but lays down Blight as it grows. The smaller the game, the more restraint is needed to prevent tipping the island over into being completely Blighted. The Wildfire can heal the land where it is, but may benefit from other Blight removal Powers so it can add Presence to problem lands without triggering Blight cascade. Removing Blight from its own lands limits its "Firestorm" innate power, however.',complexity:"High"},Pw={name:"Eyes Watch from the Trees",set:gn.HorizonsOfSpiritIsland,aspects:[],specialRules:[{name:"Dahan Trust the Watchers",text:'After one of your Powers adds Defend to a single land, Gather up to 1 <dahan> into that land.<br><br>("Power" includes both your innate Power and your Power Cards. Can be used with any number of Defend Powers each turn.)',[Pn.Now]:async({$:e,you:a,...t})=>{const n={triggerId:e.nextTriggerId(),[Pn.Now]:async({action:a})=>{await a.parentData.landWhichGotDefense.gatherUpTo(1,e.Dahan)}};await e.addSubEffect({effectId:In.Eyes,[Pn.GlobalReminder]:()=>({icon:"Defend<br>Gather",ongoing:!0,spirit:a,players:[a]}),[Pn.AfterPowerAddsDefense]:async({land:r,spirit:i,singleLand:s})=>{i===a&&s&&(e.action.data.landWhichGotDefense=r,await e.addTrigger(n,t.effect,t.action))}})}}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Gain +1 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}]},{effects:[{text:"Add a <presence> in <range-2>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(2)}},{text:"Add a <presence> in <range-0>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(0)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-3>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(3)}},{text:"Gain +1 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}]}],tracks:[{energy:1,name:"Top-track: 1 Energy"},{requires:0,energy:1,name:"Top-track: 1 Energy"},{requires:1,energy:2,name:"Top-track: 2 Energy"},{requires:2,elements:[ir.Plant],name:"Top-track: Plant"},{requires:3,energy:3,name:"Top-track: 3 Energy"},{requires:4,elements:[ir.Moon],name:"Top-track: Moon"},{requires:5,energy:4,name:"Top-track: 4 Energy"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:7,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:8,elements:[ir.Air],name:"Bottom-track: Air"},{requires:9,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:10,elements:[ir.Plant],name:"Bottom-track: Plant"},{requires:11,cardPlays:4,name:"Bottom-track: 4 Card Plays"}],setup:[{text:"Put 2 <presence> on your starting board, in the highest-numbered Jungle.",[Pn.Now]:async({you:e})=>{await e.startingBoard.highestNumberedTerrain(Io.Jungles).putPresence(2,e)}}],uniquePowers:[Ui.BoonOfWatchfulGuarding,Ui.EerieNoisesAndMovingTrees,Ui.MysteriousAbductions,Ui.WhisperedGuidanceThroughTheNight],innatePowers:[Ui.MischiefAndSabotage],lore:"Even after centuries, the Dahan find many things about Eyes Watch From the Trees somewhat enigmatic. Is it a Spirit of the trees themselves, or a Spirit which inhabits trees as its home? Is it one Spirit, or many, or a sort of collective-Spirit?<br>Despite these uncertainties, most Dahan trust the Spirit: it warns of danger, helps those lost or injured in the forest, and only works mischief on aggressors and the arrogant. Back in the days of the First Reckoning, its faint whispers were a source of dread, but to current generations they're a familiar and expected part of the island.",playStyle:"Good at Defending against Ravages, and at steadily earning Fear.<br>Its ability to Gather Dahan to fight back when Defending can make a huge difference, changing a stalling tactic into a blow against the Invaders.",complexity:"Low"},Sw={name:"Rising Heat of Stone and Sand",set:gn.HorizonsOfSpiritIsland,aspects:[],specialRules:[{name:"Blistering Heat",text:"At your <sacred>, Invaders have -1 Health (min. 1).",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Heat,[Pn.GlobalReminder]:()=>({icon:"<sacred><br>-1 HP",ongoing:!0,spirit:a,players:[a]}),[Pn.AdjustHealth]:({piece:e})=>e.isInvader&&e.location?.hasSacredSiteOf(a)?-1:0,[Pn.AfterLandChangesAmountOfPresence]:async({amountBefore:e,amountAfter:t,land:n,spirit:r})=>{e<2&&t>=2&&r===a&&await n.healthCheck()}})}}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Gain +1 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}]},{effects:[{text:"Add a <presence> in <range-3> to Sands or Mountain",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(3,{filter:e=>e.isMountainsOrSands})}},{text:"Add a <presence> in <range-3> to Sands or Mountain",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(3,{filter:e=>e.isMountainsOrSands})}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1)}},{text:"Gain +2 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(2)}}]}],tracks:[{energy:1,name:"Top-track: 1 Energy"},{requires:0,elements:[ir.Earth],name:"Top-track: Earth"},{requires:1,energy:2,name:"Top-track: 2 Energy"},{requires:2,energy:3,name:"Top-track: 3 Energy"},{requires:3,elements:[ir.Fire],name:"Top-track: Fire"},{requires:4,energy:4,name:"Top-track: 4 Energy"},{requires:5,energy:5,name:"Top-track: 5 Energy"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:7,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:8,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:9,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:10,cardPlays:4,name:"Bottom-track: 4 Card Plays"},{requires:11,cardPlays:5,elements:[ir.Fire],name:"Bottom-track: 5 Card Plays, Fire"}],setup:[{text:"Put 2 <presence> on your starting board, in the highest-numbered Sands.",[Pn.Now]:async({you:e})=>{await e.startingBoard.highestNumberedTerrain(Io.Sands).putPresence(2,e)}}],uniquePowers:[Ui.CallOnHerdersForAid,Ui.GiftOfSearingHeat,Ui.StingingSandstorm,Ui.SwelteringExhaustion],innatePowers:[Ui.ScorchWithWavesOfHeat],lore:"Dahan herders are very familiar with Rising Heat of Stone and Sand: the signs of its presence are passed down from generation to generation, so it can be acknowledged and thanked for safe passage across its scorching domain. Even after centuries, the Spirit remains a bit unclear on why living things get so unhappy about fatal desiccation, but the Dahan make such pleasant patterns across its sands that it's happy to forbear.<br>It is mostly found in sandy and rocky lands with sparse vegetation, but may also reside in volcanic areas, or even stretches of gravel or sand amidst wetter climates, radiating an intense and unusual heat all around.",playStyle:"Weaken-and-Destroy. Likes having Sacred Site where there's Town/City, as it makes all Spirits' Damage more effective there.<br>Has an easier time setting up Sacred Site in Sands and Mountains, but can do so in any terrain with a bit more time.",complexity:"Low"},Ew={name:"Fathomless Mud of the Swamp",set:gn.HorizonsOfSpiritIsland,aspects:[],specialRules:[{name:"Offer no Firm Foundations",text:"At your <sacred>, Build actions add <explorer> instead of <town>/<city>.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Mud,[Pn.GlobalReminder]:()=>({icon:"Build<br><explorer>",ongoing:!0,spirit:a,players:[a]}),highPriority:!0,[Pn.AlterInvaderActionInLand]:async({invaderAction:t,land:n})=>{if(t===qr.Build&&n.hasSacredSiteOf(a)){const a=await n.add(1,e.Explorer);return await e.doEffects(Pn.AfterSuccessfulBuild,{land:n,additions:a}),!0}return!1}})}}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Add a <presence> in <range-0>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(0)}}]},{effects:[{text:"Add a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1)}},{text:"Add a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-2>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(2)}},{text:"Gain +2 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(2)}}]}],tracks:[{energy:1,name:"Top-track: 1 Energy"},{requires:0,elements:[ir.Plant],name:"Top-track: Plant"},{requires:1,energy:2,name:"Top-track: 2 Energy"},{requires:2,energy:3,name:"Top-track: 3 Energy"},{requires:3,elements:[ir.Water],name:"Top-track: Water"},{requires:4,energy:4,name:"Top-track: 4 Energy"},{requires:5,energy:5,name:"Top-track: 5 Energy"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:7,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:8,elements:[ir.Earth],name:"Bottom-track: Earth"},{requires:9,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:10,elements:[ir.Moon],name:"Bottom-track: Moon"},{requires:11,cardPlays:4,name:"Bottom-track: 4 Card Plays"}],setup:[{text:"Put 2 <presence> on your starting board, in the lowest-numbered Wetland.",[Pn.Now]:async({you:e})=>{await e.startingBoard.lowestNumberedTerrain(Io.Wetlands).putPresence(2,e)}}],uniquePowers:[Ui.ExaltationOfTangledGrowth,Ui.FoulVaporsAndFetidMuck,Ui.IntractableThicketsAndThorns,Ui.OpenShiftingWaterways],innatePowers:[Ui.SpreadingAndDreadfulMire],lore:"The Island has many swampy deltas along its coasts. Some are fairly navigatable, while others are mazes of murky water, tangled trees, and land that isn't nearly so solid as it appears. Fathomless Mud of the Swamp is one of these latter sorts, with a penchant for spreading - it likes getting everywhere, slowly turning solid ground into muck and mire.<br>Some Dahan villages have struck fruitful bargains with it: easy passage and useful plants in exchange for tasks more easily done by human hands. Most, however, will move on to new living-grounds years early should they notice the sodden signs of it moving into their area.",playStyle:"Likes having Sacred Site where Invaders will Build, but may need to re-create those Sacred Site after oozing outwards with its Innate Power. In smaller games, might be able to cut off the most Inland lands from Explore actions by Destroying Inland Town/City and stopping new ones from being built.<br>Causes a fair bit of Fear, much of which represents unpleasantness, hardship, and disgust.",complexity:"Low"},Ow={name:"Devouring Teeth Lurk Underfoot",set:gn.HorizonsOfSpiritIsland,aspects:[],specialRules:[{name:"Territorial Aggression",text:'Your Damage-Dealing Powers do +1 Damage.<br><br>(This adds +1 Damage total for the Power, even if the Power Damages multiple invaders or "each Invader". It can boost Minor / Major Power Cards, too, not just your Uniques + Innate.)',[Pn.Now]:async({you:e})=>{await e.gainDamageBoost({effectId:In.Teeth,amount:1,source:e,permanent:!0})}}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Add a <presence> in <range-0>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(0)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1)}}]},{effects:[{text:"Add a <presence> in <range-2>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(2)}},{text:"Gain +3 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(3)}}]}],tracks:[{energy:2,name:"Top-track: 2 Energy"},{requires:0,elements:[ir.Fire],name:"Top-track: Fire"},{requires:1,energy:3,name:"Top-track: 3 Energy"},{requires:2,energy:4,name:"Top-track: 4 Energy"},{requires:3,elements:[ir.Animal],name:"Top-track: Animal"},{requires:4,energy:6,name:"Top-track: 6 Energy"},{requires:5,energy:7,name:"Top-track: 7 Energy"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:7,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:8,elements:[ir.Animal],name:"Bottom-track: Animal"},{requires:9,elements:[ir.Fire],name:"Bottom-track: Fire"},{requires:10,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:11,elements:[ir.Earth],name:"Bottom-track: Earth"},{requires:12,cardPlays:4,name:"Bottom-track: 4 Card Plays"}],setup:[{text:"Put 1 <presence> on your starting board, in land #5.",[Pn.Now]:async({you:e})=>{await e.startingBoard.inLandNumber(5).putPresence(1,e)}}],uniquePowers:[Ui.FerociousRampage,Ui.GiftOfFuriousMight,Ui.HerdTowardsTheLurkingMaw,Ui.MarkTerritoryWithScarsAndTeeth],innatePowers:[Ui.DeathApproachesFromBeneathTheSurface],lore:"Long ago, the being which would become Devouring Teeth Lurk Underfood was a small, territorial Spirit of the sand-by-water. It waited patiently for small prey to approach, then frightened them towards its waiting maw; when fresh prey was scarce it would scavenge.<br>Most such Spirits stay tiny, but this one happened to take a bite out of Ember-Eyed Behemoth. It slowly grew larger and more mobile, slithering below the land's surface in a way impossible for normal animals.<br>It has learned to avoid conflict with the Dahan, who grew wise to its ways long ago, and has even formed a peace of sorts with them. The Invaders do not have that benefit.",playStyle:"Likes being in the same lands as Invaders, so it can use Range 0 offensive and defensive Powers. The first of its Innate Power can give some mobility, if needed.<br>Has a poor Plays track and potent but expensive Unique Powers, so can be better at handling fewer large threats than lots of little ones.",complexity:"Low"},kw={name:"Sun-Bright Whirlwind",set:gn.HorizonsOfSpiritIsland,aspects:[],specialRules:[{name:"A Stiff Wind at their Backs",text:"After you Add <presence> during Growth, Push up to 1 <explorer>/<dahan> from that land.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Whirlwind,[Pn.GlobalReminder]:()=>({icon:"<presence><br><explorer>/<dahan>",ongoing:!0,spirit:a,players:[a]}),[Pn.AfterAddingPiece]:async({land:t,additions:n})=>{for(const r of n){const{piece:n}=r;e.phase===Gi.Grow&&n.isAPresenceOf(a)&&e.action.spirit===a&&await t.pushUpTo(1,e.ExplorerOrDahan)}}})}}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Gain +1 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}]},{effects:[{text:"Add a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1)}},{text:"Gain +4 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(4)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-4>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(4)}}]}],tracks:[{energy:1,name:"Top-track: 1 Energy"},{requires:0,energy:2,name:"Top-track: 2 Energy"},{requires:1,elements:[ir.Sun],name:"Top-track: Sun"},{requires:2,energy:3,name:"Top-track: 3 Energy"},{requires:3,energy:4,elements:[ir.Air],name:"Top-track: 4 Energy, Air"},{requires:4,energy:6,name:"Top-track: 6 Energy"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:6,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:7,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:8,elements:[ir.Air],name:"Bottom-track: Air"},{requires:9,cardPlays:4,name:"Bottom-track: 4 Card Plays"},{requires:10,cardPlays:5,elements:[ir.Sun],name:"Bottom-track: 5 Card Plays, Sun"}],setup:[{text:"Put 3 <presence> on your starting board: 1 in the highest-numbered Sands, 2 in the lowest-numbered Mountain.",[Pn.Now]:async({you:e})=>{await e.startingBoard.highestNumberedTerrain(Io.Sands).putPresence(1,e),await e.startingBoard.lowestNumberedTerrain(Io.Mountains).putPresence(2,e)}}],uniquePowers:[Ui.GiftOfTheSunlitAir,Ui.GiftOfWindspedSteps,Ui.ScatterToTheWinds,Ui.TempestOfLeavesAndBranches],innatePowers:[Ui.ViolentWindstorms],lore:"Sun-Bright Whirlwind is a Spirit of sun-warmed and gusting air. It spins leaves and dust into miniature cyclones, playfully snatches at small unsecured objects, and sometimes - when joyful, or upset, or full of the vigor of nature - howls across the island, bending trees and abrading the landscape with pebbles, twigs, shells, and the occasional bird nest.<br>Some Dahan take its appearance as a good sign for travel, and others have tried asking it to help bring messages to those far away - with mixed success, as it tends to lightly prank the recipients by mixing the messages' words all about.",playStyle:"Incredibly good at handling Explorer, clearing newly-Explored lands of Invaders so they don't Build there. Not nearly so good at dealing with Town/City.<br>Can focus on Energy and largely forego its Innate Power, focus on Plays to aim for mid-to-high Innate thresholds, or strike a more balanced path. Adds at most 1 Presence per turn, so there won't be time to do it all.",complexity:"Low"},Cw={name:"Fractured Days Split the Sky",set:gn.JaggedEarth,aspects:[],specialRules:[{name:"Fragments of Shattered Time",text:"Each <presence> on this ability represent 1 Time. Many of your Powers require Time as an additional cost. Spend it when you Resolve the Power. (Not when you play it.)<br><br>When you Gain 1 Time, put 1 of your <presence> here from your <presence> track (or, optionally, the island). When you Spend 1 Time, return it to a <presence> track - or if you have no free spaces, Destroy it.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Fractured,[Pn.GlobalReminder]:()=>({icon:"Time<br><presence>",ongoing:!0,spirit:a,players:[a]})})}},{name:"Days that Never Were",text:"Your 3rd Growth option lets you gain any one Power Card from a special set you create during Setup. When you gain a Power Card any other way, you may add one unchosen card to this set.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Fractured,[Pn.GlobalReminder]:()=>({icon:"Days",ongoing:!0,spirit:a,players:[a]}),[Pn.AfterGainingPowers]:async({powerGain:t,spirit:n})=>{if(n===a&&!t.gifted&&!t.taken){let n=Math.min(t.chosen.length,t.notChosen.length);for(;n>0;){const r=t.notChosen[await e.query({text:"Choose a Power to add to Days that Never Were.",query:An.SelectPowerToGain,items:t.notChosen,actionIds:t.notChosen,players:[a]})];Vr(t.notChosen,r),a.daysPowers.push(r),a.destinyPowers.includes(r)&&Vr(a.destinyPowers,r),n-=1}}}})}}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Gain Air",[Pn.Now]:async({you:e})=>{await e.gainElementsUntilEndOfTurn({[ir.Air]:1})}},{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain up to 2 Time",[Pn.Now]:async({you:e})=>{await e.gainTimeUpTo(2)}}]},{effects:[{text:"Gain Moon",[Pn.Now]:async({you:e})=>{await e.gainElementsUntilEndOfTurn({[ir.Moon]:1})}},{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-2>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(2)}},{text:"x2: Gain 1 Time or +2 Card Plays",[Pn.Now]:async({$:e,you:a})=>{await Jr(2,(async t=>{await e.chooseBetween({text:`Gain 1 Time or +2 Card Plays. (${2-t} left.)`,effects:[{actionId:"Time",text:"Gain 1 Time",[Pn.Now]:async()=>{await a.gainTime(1)}},{actionId:"CardPlays",text:"+2 Card Plays",[Pn.Now]:async()=>{await a.gainCardPlays(2)}}]})}))}}]},{effects:[{text:"Gain Sun",[Pn.Now]:async({you:e})=>{await e.gainElementsUntilEndOfTurn({[ir.Sun]:1})}},{text:"Move a <presence> in <range-4>.",[Pn.Now]:async({you:e})=>{await e.movePresence(4)}},{text:"Gain Power Card from Days That Never Were",[Pn.Now]:async({$:e,you:a})=>{const t=a.daysPowers[await e.query({text:"Choose a Power from Days that Never Were.",query:An.SelectPowerToGain,items:a.daysPowers,actionIds:a.daysPowers,players:[a]})];Vr(a.daysPowers,t),await a.gainPower(t),dg[t].type===kn.Major&&await a.forgetPowers({duringPowerGain:!0})}},{text:"x3: Gain 1 Time or Gain 2 Energy",[Pn.Now]:async({$:e,you:a})=>{await Jr(3,(async t=>{await e.chooseBetween({text:`Gain 1 Time or Gain 2 Energy. (${3-t} left.)`,effects:[{actionId:"Time",text:"Gain 1 Time",[Pn.Now]:async()=>{await a.gainTime(1)}},{actionId:"Energy",text:"+2 Energy",[Pn.Now]:async()=>{await a.gainEnergy(2)}}]})}))}}]}],tracks:[{energy:1,name:"Top-track: 1 Energy"},{requires:0,energy:1,name:"Top-track: 1 Energy"},{requires:1,energy:2,name:"Top-track: 2 Energy"},{requires:2,energy:2,name:"Top-track: 2 Energy"},{requires:3,energy:2,name:"Top-track: 2 Energy"},{requires:4,energy:3,name:"Top-track: 3 Energy"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:6,cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:7,cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:8,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:9,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:10,cardPlays:3,name:"Bottom-track: 3 Card Plays"}],setup:[{text:"Put 3 <presence> on your starting board: 1 in the lowest-numbered land with 1 <dahan>, and 2 in the highest-numbered land without <dahan>.",[Pn.Now]:async({$:e,you:a})=>{await a.startingBoard.inLandsFilteredByAllInPriority((a=>a.has(e.Dahan))).withLeast((a=>a.numberOf(e.Dahan))).withLeast((e=>e.landNumber)).anyOne.putPresence(1,a),await(a.startingBoard.highestNumberedLand((a=>!a.has(e.Dahan)))??a.startingBoard.highestNumberedLand()).putPresence(2,a)}},{text:"Deal 4 Minor and 4 Major Powers face-up as your initial Days That Never Were cards; in a 1 or 2-player game, instead deal 6 of each.",[Pn.Now]:async({$:e,you:a})=>{const t=e.spiritCount<=2?6:4;for(const n of[kn.Minor,kn.Major])for(let r=0;r<t;r+=1){const t=await e.drawPower(n);t&&a.daysPowers.push(t)}}},{text:"In a 1-board game, gain 1 Time.",[Pn.Now]:async({$:e,you:a})=>{1===e.boardCount&&await a.gainTime(1)}}],uniquePowers:[Ui.AbsoluteStasis,Ui.BlurTheArcOfYears,Ui.PourTimeSideways,Ui.ThePastReturnsAgain],innatePowers:[Ui.SlipTheFlowOfTime,Ui.VisionsOfAShiftingFuture],lore:"The sun and moon are short-term timekeepers of Spirit Island, measuring days and months with their rise and set, wax and wane. When they meet in a solar eclipse, time collides with time, sending jagged pieces of Was, Will-Be, and Might-Have-Been tearing through the weave of seasons and years. Gleaming vision-shards of future or past events may shimmer across the sky, but often those futures or pasts do not match what others know.<br>Fractured Days Split the Sky exists mostly in the high reaches of the heavens, but touches the island now and then, time and possibility flowing around it like a wind-blown mantle.",playStyle:"Excellent at support and sweeping indirect effects, but starts off very limited otherwise. Several of its Unique Powers need setup to use well; it's entirely possible 1 or 2 of them may see no play in a given game.<br>Has a hard time getting lots of Presence onto the board. This can make targeting tricky, and may be quite dangerous if a Blighted Island effect Destroys Presence.",complexity:"Very High"},Dw={name:"Lure of the Deep Wilderness",set:gn.JaggedEarth,aspects:[Qo.Lair],specialRules:[{name:"Home of the Island's Heart",text:"Your <presence> may only be added or moved to lands that are Inland.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.LureHomeOfTheIslandsHeart,[Pn.GlobalReminder]:()=>({icon:"<presence><br>Inland",ongoing:!0,spirit:a,players:[a]}),[Pn.PreventAddPresence]:({spirit:e,location:t,ignoreLandType:n})=>e===a&&!t.isInland&&!n,[Pn.PreventMovePiece]:({piece:e,destination:t})=>e.isAPresenceOf(a)&&!t.isInland})}},{name:"Enthrall the Foreign Explorers",text:"For each of your <presence> in a land, ignore up to 2 <explorer> during the Ravage Step and any Ravage Actions.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.LureEnthrallTheForeignExplorers,[Pn.DoesNotParticipateInRavage]:async({location:t})=>{await t.doNotParticipateInRavage({quantifier:ur.UpTo,amount:2*t.numberOfPresenceOf(a),pieces:e.Explorer})}})}}],pickOptions:[[0,1],[2,3]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain +1 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}]},{effects:[{text:"Add a <presence> to inland Land",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(4,{filter:e=>e.isInland})}}]},{effects:[{text:"Gain Moon, Air, or Plant",[Pn.Now]:async({you:e})=>{await e.gainElements({elements:[ir.Moon,ir.Air,ir.Plant]})}},{text:"Gain +2 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(2)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}}]}],tracks:[{energy:1,name:"Top-track: 1 Energy"},{requires:0,energy:2,name:"Top-track: 2 Energy"},{requires:1,elements:[ir.Moon],name:"Top-track: Moon"},{requires:2,energy:3,elements:[ir.Plant],name:"Top-track: 3 Energy, Plant"},{requires:3,energy:4,elements:[ir.Air],name:"Top-track: 4 Energy, Air"},{requires:4,energy:5,effect:{actionId:"ReclaimOne1",text:"Reclaim One",[Pn.Now]:async({you:e})=>{await e.reclaim(1)}},effectRequires:({you:e})=>e.hasReclaimableCards,name:"Top-track: 5 Energy, Reclaim One"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:6,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:7,elements:[ir.Animal],name:"Bottom-track: Animal"},{requires:8,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:9,cardPlays:4,name:"Bottom-track: 4 Card Plays"},{requires:10,cardPlays:5,effect:{actionId:"ReclaimOne2",text:"Reclaim One",[Pn.Now]:async({you:e})=>{await e.reclaim(1)}},name:"Bottom-track: 5 Card Plays, Reclaim One"}],setup:[{text:"Put 3 <presence> on your starting board: 2 in land #8, and 1 in land #7. Add 1 <beasts> to land #8.",[Pn.Now]:async({you:e,$:a})=>{const t=e.startingBoard.inLandNumber(8);await t.putPresence(2,e),await t.add(1,a.Beasts),await e.startingBoard.inLandNumber(7).putPresence(1,e)}}],uniquePowers:[Ui.GiftOfTheUntamedWild,Ui.PerilsOfTheDeepestIsland,Ui.SoftlyBeckonEverInward,Ui.SwallowedByTheWilderness],innatePowers:[Ui.ForsakeSocietyToChaseAfterDreams,Ui.NeverHeardFromAgain],lore:"Most early Dahan settlements clustered along the coasts. From time to time, a handful of residents would get a distant look in their eyes and stride off into the heart of the island, no pleading or reason dissuading them from seeking some distant call only they could hear.<br>Many of these involuntary wanderers survived and settles together in time. This may have hastened the First Reckoning, as they relied much more on agriculture than did their fishing bretheren along the coast.<br>A few wanderers spoke of finding the Spirit which called them ever-further inward, in voices of wonder mingled with fear. But most never even saw it, only felt its distant beckoning.",playStyle:'Very focused on the interior - its best options for coastal lands are "draw the Invaders inland" or "turn Town/City into Explorer, then draw them inland". Likes the interior to be dangerous, full of Badlands, Beasts, Disease, and Wilds, ideally where its Presence is.<br>Has better-than-average potential for containing Invaders and setting up a zone safe from Explores, but the coasts may get messy while doing so.',complexity:"Moderate"},Bw={name:"Many Minds Move as One",set:gn.JaggedEarth,aspects:[],specialRules:[{name:"Fly fast as thought",text:"When you Gather or Push <beasts>, they may come from or go to lands up to 2 distant (rather than adjacent only).",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.ManyMinds,[Pn.GlobalReminder]:()=>({icon:"<beasts><br><range-2>",ongoing:!0,spirit:a,players:[a]}),[Pn.ExtraBeastAdjacency]:()=>(e.action.type===qo.PowerAction||e.action.type===qo.SpiritAction)&&e.action.spirit===a})}},{name:"A Joining of Swarms and Flocks",text:"Your <sacred> may also count as <beasts>. (Note: You never have more than 1 <sacred> in a land, no matter how many <presence> you have there.)<br><br>(If something changes a <beasts> that is your <sacred>, it affects 2 of your <presence> there - e.g., Push 1 <beasts> will Push 2 of your <presence> together.)",[Pn.Now]:async({you:e})=>{await e.yourSacredSitesMayAlsoCountAs(Ln.Beasts)}}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}}]},{effects:[{text:"Add a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1)}},{text:"Add a <presence> in <range-0>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(0)}}]},{effects:[{text:"Add a <presence> and a Beasts",[Pn.Now]:async({you:e,$:a})=>{const t=await e.addPresenceInRange(3);t.length>0&&await t[0].location.add(1,a.Beasts)}},{text:"Gain +1 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}},{text:"Gather up to 1 Beasts into a Land",[Pn.Now]:({you:e,$:a})=>e.inLandsWithinRange(2).optionallyPickOne((async e=>{await e.gatherUpTo(1,a.Beasts)}))}]}],tracks:[{energy:0,name:"Top-track: 0 Energy"},{requires:0,energy:1,name:"Top-track: 1 Energy"},{requires:1,elements:[ir.Air],name:"Top-track: Air"},{requires:2,energy:2,name:"Top-track: 2 Energy"},{requires:3,elements:[ir.Animal],name:"Top-track: Animal"},{requires:4,energy:3,name:"Top-track: 3 Energy"},{requires:5,energy:4,name:"Top-track: 4 Energy"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:7,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:8,effect:{actionId:"GainPowerCard",text:"Pay 2 to Gain Powercard",[Pn.Now]:async({you:e})=>{await e.payEnergy(2),await e.gainPowerCard()}},effectRequires:({you:e})=>e.energy>=2,name:"Bottom-track: Pay 2 to Gain Powercard"},{requires:9,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:10,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:11,cardPlays:4,name:"Bottom-track: 4 Card Plays"},{requires:12,cardPlays:5,name:"Bottom-track: 5 Card Plays"}],setup:[{text:"Put 1 <presence> and 1 <beasts> on your starting board, in a land with <beasts>.",[Pn.Now]:async({you:e,$:a})=>{await e.startingBoard.inLandsFilteredByAllInPriority((e=>e.has(a.Beasts))).autoPickOne((async t=>{await t.putPresence(1,e),await t.add(1,a.Beasts)}))}}],uniquePowers:[Ui.ADreadfulTideOfScurryingFlesh,Ui.BoonOfSwarmingBedevilment,Ui.EvermultiplyingSwarm,Ui.GuideTheWayOnFeatheredWings,Ui.PursueWithScratchesPecksAndStings],innatePowers:[Ui.TheTeemingHostArrives,Ui.BesetAndConfoundTheInvaders],lore:"A Spirit of flocks, swarms, schools, and packs, where the whole moves together in concert to accomplish what the individuals in it could not do alone. Unlike Weaves a Web of Souls, its nature leans towards smaller and simpler creatures, and it regards other sorts of animals - including humans - as bizarrely alien in their individuality; while it will communicate with the Dahan, it has shown no ability (or inclination) to integrate them into itself.<br>While it is willing to sacrifice individuals to protect the whole, it is not a Spirit of sacrifice per se - that is a tactic it employs, not the essence of its nature.",playStyle:"Requires heavy spatial thought for Beasts movement, due to its improved Push/Gather and large numbers of Beasts.<br>Has no offense to start with, but an excellent stalling defense combined with Fear generation; outright Fear victories may be plausible in smaller games. Both Fear Cards and Beasts events are unpredictable, however, so swings of fortune are apt to be more relevant than usual.",complexity:"Moderate"},Lw={name:"Shifting Memory of Ages",set:gn.JaggedEarth,aspects:[Qo.Intensify,Qo.Mentor],specialRules:[{name:"Long Ages of Knowledge and Forgetfulness",text:"When you would Forget a Power Card from your hand, you may instead discard it. (Max. once per Action.)",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.MemoryKnowledge,[Pn.GlobalReminder]:()=>({icon:"No<br>Forget",ongoing:!0,spirit:a,players:[a]}),[Pn.PreventForgetPowercard]:async({power:t})=>!(e.action.type===qo.GameAction||e.action.data.hasUsedLongAges||!t.isInHand||t.owner!==a||!await e.may({card:t.power,prompt:"Discard power instead of Forgetting it?"}))&&(e.action.data.hasUsedLongAges=!0,await t.discard(),!0)})}},{name:"Insights into the World's Nature",text:"Some of your Actions let you Prepare Element Markers, which are kept here until used. Choose the Elements freely. (I.e., you are not limited to Elements you have at the time.)<br><br>Each Element Marker spent grants 1 of that Element for a single Action. (E.g., one Power use.)",effects:[{text:"Each Element Marker spent grants 1 of that Element for a single Action. (E.g., one Power use.)",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.MemoryInsight,[Pn.GlobalReminder]:()=>({icon:"Elements",ongoing:!0,spirit:a,players:[a]})})}}]}],pickOptions:[[0,1,2,3]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Add a <presence> in <range-0>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(0)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-2>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(2)}}]},{effects:[{text:"Add a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1)}},{text:"Gain +2 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(2)}}]},{effects:[{text:"Gain +9 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(9)}}]}],tracks:[{energy:0,name:"Top-track: 0 Energy"},{requires:0,energy:1,name:"Top-track: 1 Energy"},{requires:1,energy:2,name:"Top-track: 2 Energy"},{requires:2,energy:3,effect:{actionId:"Prepare1",text:"Prepare 1 Element",[Pn.Now]:async({you:e})=>{await e.prepareElement()}},name:"Top-track: 3 Energy, Prepare 1"},{requires:3,energy:4,name:"Top-track: 4 Energy"},{requires:4,effect:{actionId:"ReclaimOne",text:"Reclaim One",[Pn.Now]:async({you:e})=>{await e.reclaim(1)}},effectRequires:({you:e})=>e.hasReclaimableCards,name:"Top-track: Reclaim One"},{requires:5,energy:5,name:"Top-track: 5 Energy"},{requires:6,energy:6,effect:{actionId:"Prepare2",text:"Prepare 1 Element",[Pn.Now]:async({you:e})=>{await e.prepareElement()}},name:"Top-track: 6 Energy, Prepare 1"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:8,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:9,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:10,effect:{actionId:"Discard",text:"Discard 2 Elements for +1 Card Play",[Pn.Now]:async({you:e})=>{await e.discardElements(2),await e.gainCardPlays(1)}},effectRequires:({you:e})=>e.numberOfPreparedElements>=2,name:"Bottom-track: Discard 2 Elements for +1 Card Play"},{requires:11,cardPlays:3,name:"Bottom-track: 3 Card Plays"}],setup:[{text:"Put 2 <presence> on your starting board in the highest-numbered land that is Sands or Mountain.",[Pn.Now]:async({you:e})=>{await e.startingBoard.highestNumberedLand((e=>e.isMountainsOrSands)).putPresence(2,e)}},{text:"Get out the element markers. Prepare 1 <moon>, 1 <air> and 1 <earth> marker (put them by your Special Rules).",[Pn.Now]:({you:e})=>(e.preparedElements[ir.Moon]=1,e.preparedElements[ir.Air]=1,e.preparedElements[ir.Earth]=1,Promise.resolve())}],uniquePowers:[Ui.BoonOfAncientMemories,Ui.ElementalTeachings,Ui.ShareSecretsOfSurvival,Ui.StudyTheInvadersFears],innatePowers:[Ui.LearnTheInvadersTactics,Ui.ObserveTheEverChangingWorld],lore:"An immensely old Spirit that has ascended to great power countless times over the ages - and then destroyed that power each time, severing huge pieces of itself to become small once again. It does this in part for the thrill of learning anew, but also for the delight of perceiving the living world on the short timescales that larger Spirits grow beyond.<br>The Invaders' arrival has pushed it to grow much more quickly that it usually would, re-learning lessons and powers from its deep past in order to fight more effectively. After the fight is won, there will be time to forget, to diminish, and to renew itself once more.",playStyle:"Starts with little ability to influence the board - most of what it does in that regard will come from new Power Cards.<br>Extremely good with Major Powers and usually wants to take them early and often. Can either try sprinting towards victory with its phenomenal Energy Growth or build up towards becoming a late-game powerhouse.",complexity:"Moderate"},Fw={name:"Shroud of Silent Mist",set:gn.JaggedEarth,aspects:[Qo.Stranded],specialRules:[{name:"Gather Power from the Cool and Dark",text:"Once per turn, when you gain a Power Card without <fire>, gain 1 Energy.",[Pn.Now]:async({$:e,you:a})=>{const t=De.box(0);await e.addSubEffect({effectId:In.ShroudGatherPowerFromTheCoolAndDark,[Pn.GlobalReminder]:()=>({icon:`Energy<br>${t.get()}/1`,ongoing:!0,spirit:a,players:[a]}),[Pn.AfterGainingPowers]:async({spirit:n,powerGain:r})=>{n!==a||r.gifted||r.taken||0!==t.get()||!r.chosen.some((e=>e.owner===a&&!e.data.elements.includes(ir.Fire)))||(await e.sendEvent({type:Tn.GenericSub,text:`${n.nameLink} gained a Power Card without <fire>.`}),t.set(t.get()+1),await a.gainEnergy(1))},[Pn.TimePasses]:()=>(t.set(0),Promise.resolve())})}},{name:"Mists Shift and Flow",text:"When targeting a land with a Power, you may Gather 1 of your <presence> into the target or an adjacent land. This can enable you to meet Range and targeting requirements.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.ShroudMistsShiftAndFlow,[Pn.GlobalReminder]:()=>({icon:"Gather<br><presence>",ongoing:!0,spirit:a,players:[a]}),[Pn.MayShift]:({spirit:e})=>e===a,[Pn.AfterTargetingSource]:async({power:a,land:t})=>{if(!a.assisted&&(e.action.data.source=t,e.action.data.shiftedPresence=[],!a.validOriginSites.has(t))){const n=t.numberOfPresenceOf(a.owner,a.helpers),r=Math.max(2-n,0);r>0&&e.action.data.shiftedPresence.push(...(await t.gather({amount:r,pieces:e.Presence,pieceFilter:e=>null!==e.owner&&a.availablePresenceForTargeting.includes(e)})).map((e=>e.piece))),2===e.action.data.shiftedPresence.length&&(e.action.data.mustTargetAdjacent=!0)}},[Pn.AfterTargetingLand]:async({targetIndex:a,power:t,land:n})=>{if(t.assisted)return;const r=t.range(a);void 0===e.action.data.shiftedPresence&&(e.action.data.shiftedPresence=[]);const{source:i}=e.action.data;if(t.validLandTargetsWithoutShift({targetIndex:a,source:i}).has(n)){if(e.action.data.shiftedPresence.length<a+1){const a=void 0===i?t.validOriginsGivenTargetLand(n):od.createCollection(e,[i]);let s=null,o=null;1===a.count&&(s=a.items[0],void 0!==i?2===s.numberOfPresenceOf(t.owner,t.helpers)&&(o=od.createCollection(e,[])):void 0!==t.data.sourceFilter&&t.data.sourceFilter.includes(dr.SacredSite)?2===s.numberOfPresenceOf(t.owner,t.helpers)&&(o=s.inAdjacentLandsWhere((e=>e.hasPresenceOf(t.owner,t.helpers)&&(null===r||e.landsWithin(r,t.owner,{targetingLands:!0}).includes(n))))):void 0===i&&1===s.numberOfPresenceOf(t.owner,t.helpers)&&(o=s.inAdjacentLandsWhere((e=>t.sourceFilter(e)&&(null===r||e.landsWithin(r,t.owner,{targetingLands:!0}).includes(n))))));const d=a=>n=>n.isPresence&&null!==n.owner&&!e.action.data.shiftedPresence.includes(n)&&t.availablePresenceForTargeting.includes(n)&&(n.location!==s||null===o||o.has(a));await n.inThisAndAdjacentLands().where((e=>e.hasAdjacentLandWhere((e=>e.hasOnePieceWhere(d(e)))))).optionallyPickOne((async a=>{e.action.data.shiftedPresence.push(...(await a.gather({pieces:e.Presence,pieceFilter:d(a)})).map((e=>e.piece)))}),{prompt:"Pick a land to Gather <presence> into."})}}else await t.landsWhichCanBeShiftedIntoToEnableTarget({targetLocation:n,range:t.range(a)}).autoPickOne((async a=>{await a.gather({pieces:e.Presence,pieceFilter:e=>null!==e.owner&&t.availablePresenceForTargeting.includes(e)})}))}})}},{name:"Slow and Silent Death",text:"Invaders and <dahan> in your lands don't heal Damage.<br>During Time Passes: 1 <fear> (max. 5) per land of yours with Damaged Invaders. Gain 1 Energy per 3 lands of yours with Damaged Invaders.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.SlowAndSilentDeath,text:"Invaders and <dahan> in your lands don't heal Damage.",[Pn.PreventClearDamage]:({piece:t})=>t.isA(e.InvaderOrDahan)&&!0===t.location?.hasPresenceOf(a)}),await e.addSubEffect({effectId:In.SlowAndSilentDeath,text:"During Time Passes: 1 <fear> (max. 5) per land of yours with Damaged Invaders. Gain 1 Energy per 3 lands of yours with Damaged Invaders.",[Pn.TimePasses]:async()=>{const t=a.inLandsWith(e.Invader).where((e=>e.hasOnePieceWhere((e=>e.damage>0)))).count;await e.fear(Math.min(t,5)),await a.gainEnergy(Math.floor(t/3))}})}}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}}]},{effects:[{text:"Add a <presence> in <range-0>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(0)}},{text:"Add a <presence> in <range-0>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(0)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-3> to Mountain or Wetland",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(3,{filter:e=>e.isMountainsOrWetlands})}}]}],tracks:[{energy:0,name:"Top-track: 0 Energy"},{requires:0,energy:1,name:"Top-track: 1 Energy"},{requires:1,elements:[ir.Water],name:"Top-track: Water"},{requires:2,energy:2,name:"Top-track: 2 Energy"},{requires:3,elements:[ir.Air],name:"Top-track: Air"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:5,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:6,effect:{actionId:"MovePresence",text:"Move a <presence> 1",[Pn.Now]:async({you:e})=>{await e.movePresence(1)}},name:"Bottom-track: Move a Presence 1"},{requires:7,elements:[ir.Moon],name:"Bottom-track: Moon"},{requires:8,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:9,cardPlays:4,name:"Bottom-track: 4 Card Plays"},{requires:10,effect:{actionId:"ReclaimOne",text:"Reclaim One",[Pn.Now]:async({you:e})=>{await e.reclaim(1)}},effectRequires:({you:e})=>e.hasReclaimableCards,name:"Bottom-track: Reclaim One"},{requires:11,cardPlays:5,name:"Bottom-track: 5 Card Plays"}],setup:[{text:"Put 2 <presence> on your starting board: 1 in the highest-numbered Wetland and 1 in the highest-numbered Mountain.",[Pn.Now]:async({you:e})=>{await e.startingBoard.highestNumberedTerrain(Io.Wetlands).putPresence(1,e),await e.startingBoard.highestNumberedTerrain(Io.Mountains).putPresence(1,e)}}],uniquePowers:[Ui.DissolvingVapors,Ui.FlowingAndSilentFormsDartBy,Ui.TheFogClosesIn,Ui.UnnervingPall],innatePowers:[Ui.SuffocatingShroud,Ui.LostInTheSwirlingHaze],lore:"A spirit of dissolution and the cold silence of death, creeping quietly down from the hills and across the open waters. Its trail is adorned with dew-covered leaves and the bones of small animals.<br>Some legends say Shroud of Silent Mist came from the final breath of a Dahan spirit-speaker who spoke too freely of secrets entrusted to him, for which his soulform was afflicted with a death-bringing curse. Others claim it was born from the legends and tales rather than from any actual person, for the story of Kadura shows that human and Spirit do not so readily transform into each other.",playStyle:"Constantly shifting and moving its Presence around the board. Hurt more than most by Presence loss due to its desire to surround and envelop the Invaders.<br>Can (slowly) clear the most built-up of lands, but its real strength is the free Fear from Slow and Silent Death.<br>Extremely limited Energy income, but can stretch to Major Powers if it manages to gather enough Energy from its Special Rules.",complexity:"High"};var Rw;!function(e){e.Available="Available",e.Chosen="Chosen",e.NotChosen="NotChosen",e.Unavailable="Unavailable",e.Inactive="Inactive"}(Rw||(Rw={}));const Mw=(e,a)=>({[Pn.Now]:({you:t})=>(e.forEach((e=>{t.growthStatus[e]=Rw.Available})),a.forEach((e=>{t.growthStatus[e]=Rw.Unavailable})),Promise.resolve())}),Nw={name:"Starlight Seeks Its Form",set:gn.JaggedEarth,aspects:[],specialRules:[{name:"Growth Begets Growth",text:"You have 6 <presence> tracks. (As usual, you may add <presence> from any track.) 4 of the <presence> tracks are next to rows of Growth choices: these choices start unavailable.<br><br>Upon emptying a Growth track, pick one of its two Growth choices to be immediately available. The other stays unavailable for the rest of the game (cover with a spare piece).<br>After you add <presence> from a space marked +1, gain 1 Energy.",effects:[{text:"You have 6 <presence> tracks. (As usual, you may add <presence> from any track.) 4 of the <presence> tracks are next to rows of Growth choices: these choices start unavailable.<br><br>Upon emptying a Growth track, pick one of its two Growth choices to be immediately available. The other stays unavailable for the rest of the game.",[Pn.Now]:async({$:e,you:a})=>{a.growthStatus.forEach(((e,t)=>{a.growthStatus[t]=t>3?Rw.Inactive:Rw.Available})),await e.addSubEffect({effectId:In.Starlight,[Pn.GlobalReminder]:()=>({icon:"Tracks",ongoing:!0,spirit:a,players:[a]})})}}]},{name:"Slowly Coalescing Nature",text:"After revealing an star, place 1 Element Marker of your choice on it. The Element is permanent and is constantly available (as if pre-printed on the <presence> track)."}],pickOptions:[[0,1,2,3,4,5,6,7,8,9,10,11],[0,1,2,3,4,5,6,7,8,9,10,11],[0,1,2,3,4,5,6,7,8,9,10,11]],growthOptions:[{effects:[{text:"Reclaim One",[Pn.Now]:async({you:e})=>{await e.reclaim(1)}}]},{effects:[{text:"Add a <presence> in <range-0>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(0)}}]},{effects:[{text:"Gain +1 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}]},{effects:[{text:"Move a <presence> in <range-3>",[Pn.Now]:async({you:e})=>{await e.movePresence(3)}}]},{requiresTrackSpot:0,effects:[{text:"Reclaim half (round up)",[Pn.Now]:async({you:e})=>{await e.reclaim(Math.ceil(e.powersWhere((e=>e.isInDiscard)).count/2))}}]},{requiresTrackSpot:0,effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Move a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.movePresence(1)}}]},{requiresTrackSpot:1,effects:[{text:"Gain +3 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(3)}}]},{requiresTrackSpot:1,effects:[{text:"+1 Card Play this turn",[Pn.Now]:async({you:e})=>{await e.gainCardPlays(1)}},{text:"Move a <presence> in <range-2>",[Pn.Now]:async({you:e})=>{await e.movePresence(2)}}]},{requiresTrackSpot:3,effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}}]},{requiresTrackSpot:3,effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Gain +1 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}]},{requiresTrackSpot:5,effects:[{text:"2 Damage at <range-0>",[Pn.Now]:async({you:e})=>{await e.inLandsWithinRange(0).pickOne((async e=>{await e.damage(2)}))}}]},{requiresTrackSpot:5,effects:[{text:"+1 Card Play this turn",[Pn.Now]:async({you:e})=>{await e.gainCardPlays(1)}},{text:"One of your Powers is Fast",[Pn.Now]:async({you:e})=>{await e.gainMakeFastBuff()}}]},{effects:[Mw([4],[5,6]),Mw([5,6],[4]),Mw([7],[8,9]),Mw([8,9],[7]),Mw([10],[11,12]),Mw([11,12],[10]),Mw([13],[14,15]),Mw([14,15],[13])]}],tracks:[{name:"Track 1: Unlocks Growth Options 5 or 6.",covered:!0,uncoverEffect:{text:"Upon emptying a Growth track, pick on of its two Growth choices to be immediately available",[Pn.Now]:async({you:e})=>{e.growthStatus[4]===Rw.Inactive&&await e.selectBetweenGrowthOptions(16,17)}}},{name:"Track 2: Unlocks Growth Options 7 or 8.",covered:!0,uncoverEffect:{text:"Upon emptying a Growth track, pick on of its two Growth choices to be immediately available",[Pn.Now]:async({you:e})=>{e.growthStatus[7]===Rw.Inactive&&await e.selectBetweenGrowthOptions(18,19)}}},{name:"Track 3: Gain 1 Energy",covered:!0,uncoverEffect:{[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}},{requires:2,name:"Track 3: Gain 1 Energy, Element. Unlocks Growth Options 9 or 10.",uncoverEffect:{text:"Upon emptying a Growth track, pick on of its two Growth choices to be immediately available",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1),e.growthStatus[10]===Rw.Inactive&&await e.selectBetweenGrowthOptions(20,21),await e.addExtraTrackElement(3)}}},{name:"Track 4: Gain 1 Energy",covered:!0,uncoverEffect:{[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}},{requires:4,name:"Track 4: Gain 1 Energy. Unlocks Growth Options 11 or 12.",uncoverEffect:{text:"Upon emptying a Growth track, pick on of its two Growth choices to be immediately available",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1),e.growthStatus[13]===Rw.Inactive&&await e.selectBetweenGrowthOptions(22,23)}}},{energy:1,name:"Track 5: 1 Energy"},{requires:6,energy:2,name:"Track 5: 2 Energy"},{requires:7,name:"Track 5: Element",uncoverEffect:{text:"After revealing an star, place 1 Element Marker of your choice on it. The Element is permanent and is constantly available",[Pn.Now]:async({you:e})=>{await e.addExtraTrackElement(8)}}},{requires:8,energy:4,name:"Track 5: 4 Energy"},{cardPlays:2,name:"Track 6: 2 Card Plays"},{requires:10,name:"Track 6: Element",uncoverEffect:{text:"After revealing an star, place 1 Element Marker of your choice on it. The Element is permanent and is constantly available",[Pn.Now]:async({you:e})=>{await e.addExtraTrackElement(11)}}},{requires:11,name:"Track 6: Element",uncoverEffect:{text:"After revealing an star, place 1 Element Marker of your choice on it. The Element is permanent and is constantly available",[Pn.Now]:async({you:e})=>{await e.addExtraTrackElement(12)}}},{requires:12,cardPlays:3,name:"Track 6: 3 Card Plays"}],setup:[{text:"Put 1 <presence> on your starting board, in a land with <blight>.",[Pn.Now]:async({you:e,$:a})=>{await e.startingBoard.inLandsFilteredByAllInPriority((e=>e.has(a.Blight))).autoPickOne((async a=>{await a.putPresence(1,e)}))}}],uniquePowers:[Ui.BoonOfReimagining,Ui.GatherTheScatteredLightOfStars,Ui.PeaceOfTheNighttimeSky,Ui.ShapeTheSelfAnew],innatePowers:[Ui.AirMovesEarthEndures,Ui.FireBurnsWaterSoothes,Ui.WoodSeeksGrowthHumansSeekFreedom,Ui.SiderealGuidance,Ui.StarsBlazeInTheDaytimeSky],lore:"Every once and again, where starlight falls to ground there arises a new Spirit. Its essence is initially that of the stars and nighttime sky, but from the moment it touches the island it begins to change, adapting and reimagining itself for its new home. Only a few of the island's Spirits came to be in this fashion, but many of them have been memorable.<br>This one arrived after the Invaders started to spread, striking the earth where they had cleared land for farming. Fragile and new, it was saved from dissolution by Stone's Unyielding Defiance, and in gratitude fights the Invaders even as it seeks to define itself.",playStyle:"A build-your-own-Spirit, capable of going in many different directions based on Elements picked, Growth choices selected, and Power Cards kept. Has a very high personal/visual complexity and a huge number of early-game options, but doesn't alter play much for other players at the table.<br>As it commits to choices, it loses versatility - not all paths will be good (or even possible) at all things. It especially wants a measure of adaptation to early Power Cards, rather than trying to pre-select a strategy.",complexity:"Very High"},Ww={name:"Stone's Unyielding Defiance",set:gn.JaggedEarth,aspects:[],specialRules:[{name:"Bestow the Endurance of Bedrock",text:"When <blight> is added to one of your lands, unless the <blight> then outnumbers your <presence>, it does not cascade or Destroy <presence> (yours or others').",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Stone,[Pn.GlobalReminder]:()=>({icon:"<blight><br><presence>",ongoing:!0,spirit:a,players:[a]}),[Pn.PreventBlightDestroyingPresence]:({location:t})=>t.numberOf(e.Blight)<=t.numberOfPresenceOf(a),[Pn.PreventCascade]:({location:t})=>Promise.resolve(t.numberOf(e.Blight)<=t.numberOfPresenceOf(a))})}},{name:"Deep Layers Exposed to the Surface",text:'The first time you uncover each of your "+1 Card Play" <presence> spaces gain a Minor Power.',[Pn.Now]:async({$:e,you:a,...t})=>{const n=[],r={triggerId:e.nextTriggerId(),[Pn.Now]:async()=>{await e.doSpiritAction((async()=>{await a.gainPowerCard({powerType:kn.Minor})}),{spirit:a})}};await e.addSubEffect({effectId:In.Stone,[Pn.AfterUncoveringTrack]:async({spirit:i,trackIndex:s})=>{i===a&&!n.includes(s)&&[2,4,6].includes(s)&&(n.push(s),await e.addTrigger(r,t.effect,t.action))}})}}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain 2 Earth",[Pn.Now]:async({you:e})=>{await e.gainElementsUntilEndOfTurn({[ir.Earth]:2})}},{text:"Add a <presence> in <range-3>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(3,{filter:a=>a.isMountains||a.hasPresenceOf(e)})}}]},{effects:[{text:"Add a <presence> in <range-2>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(2)}},{text:"Gain +3 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(3)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1)}}]}],tracks:[{energy:2,name:"Top-track: 2 Energy"},{requires:0,energy:3,name:"Top-track: 3 Energy"},{requires:1,extraCardPlays:1,name:"Top-track: +1 Card Play"},{requires:2,energy:4,name:"Top-track: 4 Energy"},{requires:3,extraCardPlays:1,name:"Top-track: +1 Card Play"},{requires:4,energy:6,name:"Top-track: 6 Energy"},{requires:5,extraCardPlays:1,name:"Top-track: +1 Card Play"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:7,elements:[ir.Earth],name:"Bottom-track: Earth"},{requires:8,elements:[ir.Earth],name:"Bottom-track: Earth"},{requires:9,elements:[ir.Earth],effect:{actionId:"ReclaimOne",text:"Reclaim One",[Pn.Now]:async({you:e})=>{await e.reclaim(1)}},effectRequires:({you:e})=>e.hasReclaimableCards,name:"Bottom-track: Earth, Reclaim One"},{requires:10,elements:[ir.Earth,ir.Any],name:"Bottom-track: Earth, Any"},{requires:11,cardPlays:2,elements:[ir.Earth],name:"Bottom-track: 2 Card Plays, Earth"}],setup:[{text:"Put 2 <presence> on your starting board: 1 in the lowest-numbered Mountain without <dahan>; 1 in an adjacent land that has <blight> (if possible) or is Sands (if not).",[Pn.Now]:async({you:e,$:a})=>{const t=e.startingBoard.inLandsFilteredByAllInPriority((e=>e.isMountains),(e=>!e.has(a.Dahan))).withLeast((e=>e.landNumber)).anyOne;await t.putPresence(1,e),await t.inAdjacentLandsWhere((a=>a.board===e.startingBoard)).filteredByAnyInPriority((e=>e.has(a.Blight)),(e=>e.isSands)).autoPickOne((async a=>{await a.putPresence(1,e)}))}}],uniquePowers:[Ui.JaggedShardsPushFromTheEarth,Ui.PlowsShatterOnRockyGround,Ui.ScarredAndStonyLand,Ui.StubbornSolidity],innatePowers:[Ui.HoldTheIslandFastWithABulwarkOfWill,Ui.LetThemBreakThemselvesAgainstTheStone],lore:"Some things refuse to break.<br>Underneath the soil and sand of the island lies rock, layer upon layer built up over the ages. Some stones weather quickly once exposed to the elements, while others are sterner and harder. Stone's Unyielding Defiance is a Spirit of that stone which resists being shattered, moved, or shaped to the will of another.<br>It is capable of tremendous feats of resilience and obstinacy, particularly when confronted head-on in a belligerent fashion. It's not unfriendly to other Spirits or the Dahan, but it works with them on its own terms.",playStyle:"Most of its special rules and innates require being where the Invaders are - particularly in the worst, most-overrun lands, so it can mitigate incoming Blight and (eventually) destroy the Invaders with their own Ravages.<br>Does best with the patience to build up a position over time, and the temperance to hold some Energy in reserve so it can take advantage of Hold the Island Fast With a Bulwark of Will.",complexity:"Moderate"},$w={name:"Grinning Trickster Stirs Up Trouble",set:gn.JaggedEarth,aspects:[],specialRules:[{name:"A Real Flair for Discord",text:"After one of your Powers add <strife> in a land, you may pay 1 Energy to add <strife> within <range-1> of that land.",[Pn.Now]:async({$:e,you:a,...t})=>{const n={triggerId:e.nextTriggerId(),[Pn.Now]:async({action:t})=>{a.energy>=1&&await e.inLandsWhere((e=>{for(const n of t.parentData.landsWithAddedStrife)if(n.landsWithin(1,a).includes(e))return!0;return!1})).optionallyPickOne((async e=>{await a.payEnergy(1),await e.addStrife(1)}),{prompt:"Pick a land to pay 1 energy to add <strife>."})}};await e.addSubEffect({effectId:In.Trickster,[Pn.GlobalReminder]:()=>({icon:"<range-1><br><strife>",ongoing:!0,spirit:a,players:[a]}),[Pn.AfterAddingStrife]:async({piece:r})=>{e.action.type===qo.PowerAction&&e.action.spirit===a&&(void 0===e.action.data.landsWithAddedStrife&&(e.action.data.landsWithAddedStrife=[]),e.action.data.landsWithAddedStrife.push(r.location),await e.addTrigger(n,t.effect,t.action))}})}},{name:"Cleaning up Messes is a Drag",text:"After one of your Power Removes <blight>, Destroy 1 of your <presence>. Ignore this rule for Let's See What Happens.",[Pn.Now]:async({$:e,you:a,...t})=>{const n={triggerId:e.nextTriggerId(),[Pn.Now]:async()=>{await a.destroyPresence(1)}};await e.addSubEffect({effectId:In.Trickster,[Pn.GlobalReminder]:()=>({icon:"<broken>",ongoing:!0,spirit:a,players:[a]}),[Pn.AfterRemovePiece]:async({piece:r,removement:i})=>{r.isA(e.Blight)&&e.action.type===qo.PowerAction&&e.action.power.power!==Ui.LetsSeeWhatHappens&&e.action.spirit===a&&i===Wn.Remove&&await e.addTrigger(n,t.effect,t.action)}})}}],pickOptions:[[0,1,2,3],[0,1,2,3]],growthOptions:[{cost:1,effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Move a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.movePresence(1)}}]},{effects:[{text:"Add a <presence> in <range-2>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(2)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}}]},{effects:[{text:"Gain Energy equal to Card Plays",[Pn.Now]:async({you:e})=>{await e.gainEnergy(e.baseCardPlays)}}]}],tracks:[{energy:1,name:"Top-track: 1 Energy"},{requires:0,elements:[ir.Moon],name:"Top-track: Moon"},{requires:1,energy:2,name:"Top-track: 2 Energy"},{requires:2,elements:[ir.Any],name:"Top-track: Any"},{requires:3,elements:[ir.Fire],name:"Top-track: Fire"},{requires:4,energy:3,name:"Top-track: 3 Energy"},{cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:6,effect:{actionId:"PushDahan",text:"Push 1 Dahan from one of your Lands",[Pn.Now]:({you:e,$:a})=>e.forPiecesThatIs(a.Dahan).pickOne((async e=>{await e.push()}))},name:"Bottom-track: Push 1 Dahan"},{requires:7,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:8,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:9,cardPlays:4,name:"Bottom-track: 4 Card Plays"},{requires:10,elements:[ir.Air],name:"Bottom-track: Air"},{requires:11,cardPlays:5,name:"Bottom-track: 5 Card Plays"}],setup:[{text:"Put 2 <presence> on your starting board: 1 in the highest-numbered land with <dahan>, and 1 in land #4.",[Pn.Now]:async({you:e,$:a})=>{await e.startingBoard.inLandsFilteredByAllInPriority((e=>e.has(a.Dahan))).withMost((e=>e.landNumber)).anyOne.putPresence(1,e),await e.startingBoard.inLandNumber(4).putPresence(1,e)}}],uniquePowers:[Ui.ImpersonateAuthority,Ui.InciteTheMob,Ui.OverenthusiasticArson,Ui.UnexpectedTigers],innatePowers:[Ui.LetsSeeWhatHappens,Ui.WhyDontYouAndThemFight],lore:"There are many trickster Spirits, but this one is the most infamous due to its part in instigating the Second Great Reckoning between the Dahan and the Spirits. It wears any form it pleases - perhaps a tree, perhaps a canoe, perhaps a prominent clan-chief - but can always be distinguished by its multitude of eyes, though they may be subtle or concealed.<br>Despite its knack for stirring up trouble, it's neither unfriendly nor motivated by malice - it just has a driving curiosity to see what will happen when it messes around with things. Of course, this may involve putting Spirits, people, and animals alike into suddenly precarious situations, so the Dahan appreciate its shenanigans best at a healthy distance.",playStyle:"Requires some comfort with risk: both Overenthusiastic Arson and Let's See What Will Happen involve uncertainty about how the Fast Powers phase will pan out.<br>Can be effective from the get-go, but benefits greatly from not working too hard, instead improving its capacity for mischief by adding Presence and gaining Power Cards. Bonus Energy from Let's See What Will Happen can be extremely helpful in avoiding the distraction of gaining Energy elsewhere.",complexity:"Moderate"},Gw={name:"Vengeance as a Burning Plague",set:gn.JaggedEarth,aspects:[],specialRules:[{name:"The Terror of a Slowly Unfolding Plague",text:"When <disease> would prevent a Build on a board with your <presence>, you may let the Build happen (Removing no <disease>). If you do, 1 <fear>.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Vengeance,[Pn.GlobalReminder]:()=>({icon:"<disease><br>= <fear>",ongoing:!0,spirit:a,players:[a]}),[Pn.PreventDiseasePreventingBuilds]:async({location:t})=>!(!t.boards().hasOneWhere((e=>e.hasOneLandWhere((e=>e.hasPresenceOf(a)))))||!await e.may({prompt:"Let the Build happen? (Removing no <disease>). If you do, 1 <fear>.",highlightLocations:[t]}))&&(await t.fear(1),!0)})}},{name:"Lingering Pestilence",text:"When your <presence> is Destroyed by anything except a Spirit Action, add 1 <disease> where each Destroyed <presence> was.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Vengeance,[Pn.GlobalReminder]:()=>({icon:"<broken><br>= <disease>",ongoing:!0,spirit:a,players:[a]}),[Pn.AfterRemovePiece]:async({piece:t,location:n,removement:r})=>{t.isAPresenceOf(a)&&wr[r].isDestroyLike&&e.action.type!==qo.SpiritAction&&e.action.type!==qo.PowerAction&&await n.add(1,e.Disease)}})}},{name:"Wreak Vengeance for the Land's Corruption",text:"Your Actions treat <blight> on the island as also being <badlands>.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Vengeance,[Pn.GlobalReminder]:()=>({icon:"<blight><br>= <badlands>",ongoing:!0,spirit:a,players:[a]})})}}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Gain +1 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}]},{effects:[{text:"Add a <presence> in <range-2> to a Land with Town/City/Blight",[Pn.Now]:async({you:e,$:a})=>{await e.addPresenceInRange(2,{filter:e=>e.has(a.TownOrCity)||e.has(a.Blight)})}},{text:"Add a <presence> in <range-2> to a Land with Town/City/Blight",[Pn.Now]:async({you:e,$:a})=>{await e.addPresenceInRange(2,{filter:e=>e.has(a.TownOrCity)||e.has(a.Blight)})}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> or Disease in <range-1>",[Pn.Now]:async({you:e,$:a})=>{await a.chooseBetween({effects:[{actionId:"Presence",text:"Add a <presence>.",[Pn.Now]:async()=>{await e.addPresenceInRange(1)}},{actionId:"Disease",text:"Add a <disease>.",[Pn.Now]:()=>e.inLandsWithinRange(1).pickOne((async e=>{await e.add(1,a.Disease)}))}]})}},{text:"Gain +1 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}]}],tracks:[{energy:1,name:"Top-track: 1 Energy"},{requires:0,energy:2,name:"Top-track: 2 Energy"},{requires:1,elements:[ir.Animal],name:"Top-track: Animal"},{requires:2,energy:3,name:"Top-track: 3 Energy"},{requires:3,energy:4,name:"Top-track: 4 Energy"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:5,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:6,elements:[ir.Fire],name:"Bottom-track: Fire"},{requires:7,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:8,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:9,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:10,cardPlays:4,name:"Bottom-track: 4 Card Plays"}],setup:[{text:"1 of your <presence> starts the game already destroyed.",[Pn.Now]:({you:e})=>(e.destroyedPresence=1,Promise.resolve())},{text:"Put 2 <presence> on your starting board: 1 in a land with <blight>, 1 in a Wetland without <dahan>.",[Pn.Now]:async({you:e,$:a})=>{await e.startingBoard.inLandsFilteredByAllInPriority((e=>e.has(a.Blight))).autoPickOne((async a=>{await a.putPresence(1,e)}),{prompt:"Pick a land with <blight>."}),await e.startingBoard.inLandsFilteredByAllInPriority((e=>e.isWetlands),(e=>!e.has(a.Dahan))).autoPickOne((async a=>{await a.putPresence(1,e)}),{prompt:"Pick a <wetlands>."})}}],uniquePowers:[Ui.FetidBreathSpreadsInfection,Ui.FieryVengeance,Ui.Plaguebearers,Ui.StrikeLowWithSuddenFevers],innatePowers:[Ui.EpidemicsRunRampant,Ui.SavageRevenge],lore:"A Spirit of vengeance, anger, and retribution. In its incarnation as a Burning Plague, it slumbers in a simmering volcanic pool, awakening at unpredictable intervals.... or when roused through supplication by one wronged. Most Dahan consider this foolhardy, for it vents its wrath on entire communities, and its pestilence may spread anywhere. Clans with a close relationship to Hearth-Vigil have less to fear, but still deem it wise - and humane - not to push their luck.<br>It is unclear whether its recent waking is due directly to the ravaging of the Invaders or to some Spirit's pleas.",playStyle:"Not so powerful early, but can be a late-game juggernaut, especially if things are going badly: Blight adds to its Damage and its Presence being Destroyed adds Disease. It may even want to engineer these situations, which can make other Spirits nervous (and be risky if things go poorly).",complexity:"High"},Uw={name:"Volcano Looming High",set:gn.JaggedEarth,aspects:[],specialRules:[{name:"Mountain Home",text:"Your <presence> may only be added or moved into Mountains.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Volcano,[Pn.GlobalReminder]:()=>({icon:"<presence><br><mountains>",ongoing:!0,spirit:a,players:[a]}),[Pn.PreventAddPresence]:({spirit:e,location:t,ignoreLandType:n})=>e===a&&!t.isMountains&&!n,[Pn.PreventMovePiece]:({piece:e,destination:t})=>e.isAPresenceOf(a)&&!t.isMountains})}},{name:"Collapse in a blast of Lava and Steam",text:"When your <presence> is Destroyed, in that land, deal 1 Damage per Destroyed <presence> to both Invaders and to <dahan>.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Volcano,[Pn.GlobalReminder]:()=>({icon:"<broken><br>= 1 <damage>",ongoing:!0,spirit:a,players:[a]}),[Pn.AfterRemovePiece]:async({piece:t,location:n,removement:r})=>{t.isAPresenceOf(a)&&wr[r].isDestroyLike&&(await n.damage(1,e.Invader),await n.damage(1,e.Dahan))}})}},{name:"Volcanic Peaks Tower over the Landscape",text:"Your Power Cards gain <range+1> if you have 3 or more <presence> in the origin land.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Volcano,[Pn.ExtraRange]:({spirit:t,location:n})=>t===a&&n.numberOfPresenceOf(a)>=3&&e.action.power?.isA(En.AnyCard)?1:0})}}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Gain +3 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(3)}}]},{effects:[{text:"Add a <presence> in <range-0>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(0)}},{text:"Add a <presence> in <range-0>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(0)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-4>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(4)}},{text:"+1 Card Play this turn",[Pn.Now]:async({you:e})=>{await e.gainCardPlays(1)}},{text:"Gain +2 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(2)}}]}],tracks:[{energy:1,name:"Top-track: 1 Energy"},{requires:0,energy:2,name:"Top-track: 2 Energy"},{requires:1,elements:[ir.Earth],name:"Top-track: Earth"},{requires:2,energy:3,name:"Top-track: 3 Energy"},{requires:3,energy:4,name:"Top-track: 4 Energy"},{requires:4,energy:5,name:"Top-track: 5 Energy"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:6,elements:[ir.Fire],name:"Bottom-track: Fire"},{requires:7,elements:[ir.Earth],name:"Bottom-track: Earth"},{requires:8,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:9,elements:[ir.Air],name:"Bottom-track: Air"},{requires:10,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:11,elements:[ir.Fire],name:"Bottom-track: Fire"},{requires:12,cardPlays:4,name:"Bottom-track: 4 Card Plays"}],setup:[{text:"Put 1 <presence> and 1 <badlands> on your starting board in a Mountain of your choice. Push all <dahan> from that land.",[Pn.Now]:async({you:e,$:a})=>{await e.startingBoard.inMountains().pickOne((async t=>{await t.putPresence(1,e),await t.add(1,a.Badlands),await t.pushAll(a.Dahan)}))}}],uniquePowers:[Ui.ExaltationOfMoltenStone,Ui.LavaFlows,Ui.PyroclasticBombardment,Ui.RainOfAsh],innatePowers:[Ui.ExplosiveEruption,Ui.PoweredByTheFurnaceOfTheEarth],lore:"A spirit of fire and earth stretching upwards to the sky, casting a long and dangerous shadow across the land. The deeper Spirits of vulcanism are too powerful and slow, too removed to respond to the Invaders - but not so this one.<br>It doesn't dislike humans per se, but neither does it have much use for them, so the Dahan tend to keep away from it as much as possible and will not quarry stone in its shadow. Of course, larger eruptions can impact a good chunk of the island, so they sometimes end up dealing with its temper whether they want to or not.",playStyle:"Benefits more than most Spirits from getting Presence onto the board; in addition to the usual benefits, it can fuel an Explosive Eruption. This can result in a huge turn, but if overdone the following turn or two may be very constrained.<br>Bigger eruptions are extremely powerful, but cause Blight, and the Invaders may not provide the luxury of enough time to build up the desired pressure - judging the timing of when to erupt and for how much is a key part of playing this Spirit.",complexity:"Moderate"},Hw={name:"Ember-Eyed Behemoth",set:gn.NatureIncarnate,aspects:[],specialRules:[{name:"The Behemoth Rises",text:"You have an Incarna. Once per turn, during the Spirit, <fast>, or <slow> phase, you may either: <br><bullet> Push <incarna-behemoth>; or<br><bullet> Add or Move <incarna-behemoth> to any of your <sacred> on the island.",[Pn.Now]:async({$:e,you:a})=>{await a.addExtraAction({actionId:"TheBehemothRises",icon:"<incarna-behemoth>",maxUses:()=>e.hasEffectNamed("Extra Behemoth Rises")?2:1,enabled:()=>[Gi.Grow,Gi.GainEnergy,Gi.FastPowers,Gi.SlowPowers].includes(e.phase),onActivate:async()=>{await e.chooseBetween({text:"You may:<br>Push <incarna-behemoth>.<or>Add or Move <incarna-behemoth> to any of your <sacred> on the island.",effects:[{actionId:"Push",text:"Push <incarna-behemoth>",[Pn.Now]:async()=>{await a.incarna.push()},condition:()=>a.hasIncarna},{actionId:"Add",text:"Add <incarna-behemoth> to any of your <sacred> on the island.",label:"Add <incarna-behemoth>.",[Pn.Now]:async()=>{await a.addIncarna(Ln.IncarnaBehemoth,(e=>e.hasSacredSiteOf(a)))},condition:()=>!a.hasIncarna},{actionId:"Move",text:"Move <incarna-behemoth> to any of your <sacred> on the island.",label:"Move <incarna-behemoth>.",[Pn.Now]:async()=>{await a.incarna.move({locations:{target:zn.AnyLands},destinationFilter:e=>e.hasSacredSiteOf(a)})},condition:()=>a.hasIncarna}]},{orChoice:!1})}})}},{name:"Unrelenting Strides",text:"On any turn that you don't use Innate Powers, you may use the Behemoth Rises an additional time.",[Pn.Now]:async({$:e,you:a})=>{await a.addExtraAction({actionId:"UnrelentingStrides",icon:"Strides",enabled:()=>[Gi.Grow,Gi.GainEnergy,Gi.FastPowers,Gi.SlowPowers].includes(e.phase)&&!a.innatePowers.some((e=>e.isResolved)),onActivate:async()=>{for(const e of a.innatePowers)await e.setResolved();await e.addSubEffectUntilEndOfTurn({name:"Extra Behemoth Rises"})}})}},{name:"Incarna",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Behemoth,text:"<incarna-behemoth> may count as <presence>.<br><br>When empowered it may also count as <sacred>.",[Pn.GlobalReminder]:()=>({icon:"<incarna-behemoth> =<br><presence>"+(a.hasEmpoweredIncarna?"/<sacred>":""),ongoing:!0,spirit:a,players:[a]}),[Pn.HasSacredSiteOf]:({land:e,spirit:t})=>t===a&&a.hasEmpoweredIncarna&&e.pieces.some((e=>e.piece===Ln.IncarnaBehemoth))})}}],pickOptions:[[0,1,2,3]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}}]},{effects:[{text:"Add a <presence> in <range-3>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(3,{filter:a=>a.isJungle||a.hasPresenceOf(e)})}},{text:"Add a <presence> in <range-0>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(0)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1)}},{text:"Gain +3 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(3)}},{text:"Discard a Power Card with <fire>",[Pn.Now]:async({you:e})=>{await e.discardPowerCards(1,(e=>dg[e.power].elements.includes(ir.Fire)))}}]},{oncePerGame:!0,effects:[{text:"Reclaim All Cards with Fire",[Pn.Now]:async({you:e})=>{await e.reclaimCards({filter:e=>e.isInDiscard&&dg[e.power].elements.includes(ir.Fire)})}},{text:"Empower Incarna",[Pn.Now]:async({you:e})=>{await e.empowerIncarna()}},{text:"Move Incarna",[Pn.Now]:async({you:e})=>{await(e.incarna?.move({owner:e,locations:{target:zn.WithinRange,range:1,spirit:e}}))}}]}],tracks:[{energy:0,name:"Top-track: 0 Energy"},{requires:0,energy:1,name:"Top-track: 1 Energy"},{requires:1,energy:2,elements:[ir.Fire],name:"Top-track: 2 Energy, Fire"},{requires:2,energy:3,name:"Top-track: 3 Energy"},{requires:3,elements:[ir.Earth],name:"Top-track: Earth"},{requires:4,energy:4,elements:[ir.Plant],name:"Top-track: 4 Energy, Plant"},{requires:5,energy:5,elements:[ir.Fire],name:"Top-track: 5 Energy, Fire"},{cardPlays:1,name:"Bottom-track: 1 Card Plays"},{requires:7,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:8,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:9,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:10,elements:[ir.Fire],name:"Bottom-track: Fire"},{requires:11,cardPlays:4,name:"Bottom-track: 4 Card Plays"}],setup:[{text:"Put 2 <presence> and <incarna-behemoth> in the highest-numbered Wetland on your starting board that is adjacent to any Jungle.",[Pn.Now]:async({you:e})=>{await e.startingBoard.inLandsFilteredByAllInPriority((e=>e.isWetlands),(e=>e.hasAdjacentLandWhere((e=>e.isJungle)))).withMost((e=>e.landNumber)).autoPickOne((async a=>{await a.putPresence(2,e),await a.putIncarna(Ln.IncarnaBehemoth,e)}))}}],uniquePowers:[Ui.BlazingIntimidation,Ui.ExaltationOfGraspingRoots,Ui.SurgingLahar,Ui.TerrifyingRampage],innatePowers:[Ui.SmashStompAndFlatten],lore:"Amidst the boggier jungles, one might find a tree-covered hill - somewhat rocky - rising upwards from the dank and the damp. One might climb it to scout the lay of the land, or camp there for respite from the water-snakes and warm muck below.<br>But do not settle there, nor quarry that stone, for the hill is a Spirit, immense and incarnate. It might be a living scale of the great Serpent; or a dream given waking form; or a Spirit wrapped around a great curse, enfolding it and containing it from spilling outwards. If you bother it, fire will kindle in its eyes, and it will rise and smash its way across the landscape.",playStyle:"Slowly but consistently stomps its Incarna around the island, smashing Invaders. (Dahan can keep clear, unless it really gets going.)<br>Benefits from spread-out Sacred Site, both for targeting Powers and for moving its Incarna long distances. Adding Presence at its Incarna (which can count as Presence) can make it easier to get Presence into new lands, particularly non-Jungles.",complexity:"Moderate"},qw={name:"Breath of Darkness Down your Spine",set:gn.NatureIncarnate,aspects:[],specialRules:[{name:"Terror Stalks the Land",text:"You have an Incarna (<incarna-darkness>). Empower <incarna-darkness> after uncovering the Empower Incarna Presence space.<br>You may Abduct 1 <explorer>/<town> at empowered <incarna-darkness> each <fast> Phase.<br>To Abduct a piece, Move it to The Endless Dark (<endless-dark>). When pieces Escape, Move them to non-Ocean lands with your <presence>/<incarna-darkness>; if they have no legal land to move to, you lose.<br>When your Powers would directly damage or directly destroy the only Invader in a land, instead Abduct it.<br><br>(Check if it is alone at the start of the damage/destroy instruction. <endless-dark> is not a land.)",effects:[{text:"You may Abduct 1 <explorer>/<town> at empowered <incarna-darkness> each <fast> Phase.",[Pn.Now]:async({$:e,you:a})=>{await a.addExtraAction({actionId:"TerrorStalks",icon:"Abduct",visible:()=>a.hasEmpoweredIncarna&&null!=a.incarna,enabled:()=>null!=a.incarna&&a.hasEmpoweredIncarna&&e.phase===Gi.FastPowers,onActivate:async()=>{await(a.incarna.location?.abduct(1,e.ExplorerOrTown))}})}},{text:"To Abduct a piece, Move it to The Endless Dark (<endless-dark>). When pieces Escape, Move them to non-Ocean lands with your <presence>/<incarna-darkness>; if they have no legal land to move to, you lose.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Darkness,[Pn.GlobalReminder]:()=>({icon:"Abduct<br>Escape",ongoing:!0,spirit:a,players:[a]})})}},{text:"When your Powers would directly damage or directly destroy the only Invader in a land, instead Abduct it.<br><br>(Check if it is alone at the start of the damage/destroy instruction. <endless-dark> is not a land.)",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Darkness,[Pn.GlobalReminder]:()=>({icon:"<damage> =<br>Abduct",ongoing:!0,spirit:a,players:[a]}),[Pn.PreventDamagingPiece]:async({piece:t})=>!(e.hasAttemptedDamagingInvaderThisInstruction||e.action.spirit!==a||!t.isInvader||!t.location.isLand||1!==t.location.numberOf(e.Invader))&&(await t.abduct(),!0),[Pn.PreventRemovePiece]:async({piece:t,removement:n})=>!(e.hasAttemptedDestroyingInvaderThisInstruction||e.action.spirit!==a||!wr[n].isDestroyLike||n===Wn.DestroyByHealthChange||!t.isInvader||!t.location.isLand||1!==t.location.numberOf(e.Invader))&&(await t.abduct(),!0)})}}]},{name:"Shadow-Touched Realm",text:"Your land-targeting Powers can target <endless-dark> as if it were a land, ignoring Range. (<endless-dark> is Inland and has no terrain.)",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Darkness,[Pn.GlobalReminder]:()=>({icon:"Target<br>ED",ongoing:!0,spirit:a,players:[a]}),[Pn.MayTargetTheEndlessDark]:()=>e.currentActionType===qo.PowerAction&&e.action.spirit===a,[Pn.MayIgnoreRangeWhenTargetingLand]:({power:t,land:n})=>t.owner===a&&n===e.theEndlessDark})}},{name:"Trapped in The Endless Dark",text:"Fear Cards and Token Events affect pieces here as if this were an Inland land but can't remove Invaders here - when they would, instead 1 <fear> per Invader they would have removed.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Darkness,[Pn.GlobalReminder]:()=>({icon:"Fear<br>Events",ongoing:!0,spirit:a,players:[a]}),[Pn.PreventRemovePiece]:async({piece:a,removement:t})=>!(e.action.type!==qo.FearAction&&e.action.type!==qo.TokenEventAction||!a.isInvader||!a.location.isTheEndlessDark||t!==Wn.Remove)&&(await a.location.fear(1),!0)})}},{name:"A Space of Strange and Infinite Darkness",text:"The Endless Dark (<endless-dark>) is on the island, but isn't a land and isn't on any board.<br><br><bullet> This can't be a <sacred>.<br><bullet> Spirits can't target this even if they have <presence> here.<br><bullet> Adding <blight> here doesn't destroy <presence>.<br><bullet> Special rules that affect lands do nothing here.<br><bullet> Invaders can't take Actions here.<br><bullet> Pieces here are on the island when checking for Victory/Defeat.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Darkness,[Pn.GlobalReminder]:()=>({icon:"<endless-dark>",ongoing:!0,spirit:a,players:[a]})})}},{name:"Incarna",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Darkness,text:"<incarna-darkness> may count as <presence>/<beasts>.",[Pn.GlobalReminder]:()=>({icon:"<incarna-darkness> =<br><presence>/<beasts>",ongoing:!0,spirit:a,players:[a]})})}}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Move Incarna to Any Land",[Pn.Now]:async({you:e})=>{await(e.incarna?.location.move({pieces:Xn.IncarnaDarkness,owner:e,locations:{target:zn.AnyLands}}))}},{text:"All Pieces Escape",[Pn.Now]:async({you:e})=>{await e.escapePieces()}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-3>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(3)}},{text:"Two Pieces Escape",[Pn.Now]:async({you:e})=>{await e.escapePieces(2)}}]},{effects:[{text:"Add a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1)}},{text:"Add/Move <incarna-darkness> to Land with Your Presence",[Pn.Now]:async({you:e})=>{await e.addOrMoveIncarnaToLandWithPresence(Ln.IncarnaDarkness)}},{text:"One Piece Escapes",[Pn.Now]:async({you:e})=>{await e.escapePieces(1)}},{text:"Gain Energy equal to Card Plays",[Pn.Now]:async({you:e})=>{await e.gainEnergy(e.baseCardPlays)}}]}],tracks:[{energy:1,name:"Top-track: 1 Energy"},{requires:0,energy:2,name:"Top-track: 2 Energy"},{requires:1,elements:[ir.Moon],name:"Top-track: Moon"},{requires:2,energy:3,name:"Top-track: 3 Energy"},{requires:3,name:"Empower Incarna",uncoverEffect:{text:"Empower Incarna",[Pn.Now]:async({you:e})=>{await e.empowerIncarna()}}},{requires:4,energy:4,elements:[ir.Animal],name:"Top-track: 4 Energy, Animal"},{requires:5,energy:5,elements:[ir.Air],name:"Top-track: 5 Energy, Air"},{cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:7,effect:{actionId:"MovePresence",text:"Move a <presence> 1",[Pn.Now]:async({you:e})=>{await e.movePresence(1)}},name:"Bottom-track: Move a Presence 1"},{requires:8,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:9,elements:[ir.Moon],name:"Bottom-track: Moon"},{requires:10,effect:{actionId:"ReclaimOne",text:"Reclaim One",[Pn.Now]:async({you:e})=>{await e.reclaim(1)}},effectRequires:({you:e})=>e.hasReclaimableCards,name:"Bottom-track: Reclaim One"},{requires:11,cardPlays:4,elements:[ir.Air],name:"Bottom-track: 4 Card Plays, Air"}],setup:[{text:"Put 2 <presence> and your Incarna (<incarna-darkness>) on your starting board: 1 <presence> and <incarna-darkness> in the lowest-numbered Jungle and 1 in the highest-numbered Jungle.",[Pn.Now]:async({you:e})=>{const a=e.startingBoard.lowestNumberedTerrain(Io.Jungles);await a.putPresence(1,e),await a.putIncarna(Ln.IncarnaDarkness,e),await e.startingBoard.highestNumberedTerrain(Io.Jungles).putPresence(1,e)}},{text:"Set The Endless Dark (<endless-dark>) tile next to the island with 1 <explorer> on it.",[Pn.Now]:async({$:e})=>{await e.theEndlessDark.add(1,e.Explorer)}}],uniquePowers:[Ui.EmergeFromTheDreadNightWind,Ui.ReachFromTheInfiniteDarkness,Ui.SwallowedByTheEndlessDark,Ui.TerrorOfTheHunted],innatePowers:[Ui.LeaveATrailOfDeathlySilence,Ui.LostInTheEndlessDark],lore:"In the open spaces of Spirit Island, the night sky, when clear, blazes with light from the moon and stars - but not all of this light reaches the earth. From time to time an ever-shifting shadow writhes across the land, bringing a darkness deeper than found under any jungle canopy. It seeks out those who are isolated and alone, and swallows compatriots and communities alike into its lightless void. Some return, others do not.<br>Many Dahan suspect this may be another form of Shadows Flicker Like Flame - its whispery voice crackles like fire, among other signs - but keep cautiously clear of it, as it has made no requests of them.",playStyle:"Abducts lone Invaders to gain Fear and keep them off the board for a time; its mobile Incarna is particularly useful for this. Reclaiming permits the Invaders to escape its void en masse, so can be quite painful.<br>Has trouble with built-up lands, and may need to scatter Invaders or take a Major Power to deal with them.",complexity:"High"},jw={name:"Dances Up Earthquakes",set:gn.NatureIncarnate,aspects:[],specialRules:[{name:"Begin a Dance of Decades",text:"Whenever you would play a Power Card, you may instead pay any amount of Energy onto the card to make it an impending card (<impending>), setting it aside out of play for use on a future turn. (It doesn't provide Elements. It's still your Power Card, so it can be Forgotten while it's impending.)",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Earthquakes,[Pn.GlobalReminder]:()=>({icon:"Dance<br>Decades",ongoing:!0,spirit:a,players:[a]}),[Pn.CanPlayCardsWithoutCost]:({spirit:e})=>e===a,[Pn.AdjustPlayPower]:async({power:t})=>{let n=!1;return t.owner===a&&t.isA(En.AnyCard)&&await e.chooseBetween({effects:[{actionId:`Play${t.power}`,text:"Play Power.",[Pn.Now]:()=>Promise.resolve(),condition:()=>a.energy>=t.costToPlay&&a.usedCardPlays-a.cardsMadeImpendingThisTurn.length<=a.cardPlays-a.impendingCardPlays},...[...Array(Math.max(t.data.energy??0,1)).keys()].map((r=>({actionId:`Impend${r}${t.power}`,text:`Impend with ${r} energy.`,[Pn.Now]:async()=>{n=!0,await e.sendEvent({type:Tn.PowerCardImpended,spirit:t.owner,power:t,energy:r}),await t.setImpending(r),await a.payEnergy(r)},condition:()=>a.energy>=r})))]}),n}})}},{name:"Rhythmic Power Builds to a Cataclysmic Crescendo",text:"When you gain Energy from your Presence Track, also gain Energy onto each Power Card made <impending> on a previous turn. If any <impending> now have Energy on them at least equal to their cost, discard that Energy and play them. (This cost no card plays.)",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Earthquakes,[Pn.GlobalReminder]:()=>({icon:"Rhythmic<br>Power",ongoing:!0,spirit:a,players:[a]}),[Pn.AfterGainingEnergyFromTracks]:async()=>{for(const e of a.powers)e.isImpending&&(e.impendingEnergy+=a.impendingEnergy,e.impendingEnergy>=(e.data.energy??0)&&(e.impendingEnergy=0,await e.play({withoutPaying:!0,withoutUsingCardPlays:!0,withoutImpending:!0})))}})}}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Add a <presence>.<or>Gain Major Power without Forgetting.",[Pn.Now]:({you:e,$:a})=>a.chooseBetween({effects:[{actionId:"Presence",text:"Add a <presence> in <range-2>.",[Pn.Now]:async()=>{await e.addPresenceInRange(2)}},{actionId:"MajorPower",text:"Gain Major Power without Forgetting.",[Pn.Now]:async()=>{await e.gainPowerCard({powerType:kn.Major,withoutForgetting:!0})}}]})}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1)}}]},{effects:[{text:"Add a <presence> in <range-3>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(3)}},{text:"This Turn, Gain +1/-1 Energy on up to 2 Impending Power Cards",[Pn.Now]:async({$:e,you:a})=>{await a.powersWhere((e=>e.isImpending)).pickMultiple({amount:2,optional:!0,forPickedItem:async a=>{await e.chooseBetween({highlightPowers:[a],effects:[{actionId:"AddEnergy",text:"Add 1 Impending Energy",[Pn.Now]:()=>(a.impendingEnergy+=1,Promise.resolve())},{actionId:"RemoveEnergy",text:"Remove 1 Impending Energy",[Pn.Now]:()=>(a.impendingEnergy-=1,Promise.resolve())}]})}})}},{text:"Reclaim One",[Pn.Now]:async({you:e})=>{await e.reclaim(1)}}]}],tracks:[{energy:1,impendingEnergy:1,name:"Top-track: 1 Energy, 1 Energy on each impending card"},{requires:0,effect:{actionId:"MovePresence",text:"Move a <presence> 1",[Pn.Now]:async({you:e})=>{await e.movePresence(1)}},name:"Top-track: Move a Presence 1"},{requires:1,energy:2,name:"Top-track: 2 Energy"},{requires:2,impendingCardPlays:1,name:"Top-track: +1 Play for Impending Only"},{requires:3,energy:3,name:"Top-track: 3 Energy"},{requires:4,impendingEnergy:1,name:"Top-track: 2 Energy/Turn on Impending card"},{requires:5,energy:4,elements:[ir.Any],name:"Top-track: 4 Energy, Any"},{cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:7,effect:{actionId:"GatherDahan",text:"Gather 1 Dahan into 1 of your Lands",[Pn.Now]:({you:e,$:a})=>e.inLandsWhere((e=>e.hasAdjacentLandWithPiece(a.Dahan))).pickOne((async e=>{await e.gatherOne(a.Dahan)}),{noOptions:"None of your lands have an adjacent <dahan>."})},name:"Bottom-track: Gather 1 Dahan into 1 of your Lands"},{requires:8,elements:[ir.Moon,ir.Fire],name:"Bottom-track: Moon, Fire"},{requires:9,impendingCardPlays:1,name:"Bottom-track: +1 Play for Impending Only"},{requires:10,elements:[ir.Earth],name:"Bottom-track: Earth"},{requires:11,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:12,cardPlays:4,name:"Bottom-track: 4 Card Plays"}],setup:[{text:"Put 1 <presence> on your starting board in the highest-numbered land with <dahan>.",[Pn.Now]:async({you:e,$:a})=>{await e.startingBoard.inLandsFilteredByAllInPriority((e=>e.has(a.Dahan))).withMost((e=>e.landNumber)).autoPickOne((async a=>{await a.putPresence(1,e)}))}}],uniquePowers:[Ui.ExaltationOfEchoedSteps,Ui.GiftOfSeismicEnergy,Ui.InspireAWindingDance,Ui.RadiatingTremors,Ui.ResoundingFootfallsSowDismay,Ui.RumblingsPortendAGreaterQuake],innatePowers:[Ui.LandCreaksWithTension,Ui.EarthShuddersBuildingsFall],lore:"A traveling Spirit of movement and movement's deep power, circling a bright leap of flame, dancing atop dark mysteries of night and earth. It roams the island as its visions and will to motion bid, dancing with and among whomever it finds: the waves on the shore, the animals of the jungle, the Spirits, the trees, the Dahan, and - especially - the earth itself.<br>The Dahan learned long ago that if the land-dancer was aware of them, village-wrecking earthquakes became much rarer. Through this, they found that many Spirits appreciate - and gain power from - various patterns of dance and rhythm, in addition to those of line, shape, and word.",playStyle:"Very much about tempo and timing: Can play high-cost Powers extremely easily, but they won't take effect until later in the game. Faces a constant tension between solving problems now and carefully planning ahead for big turns in the future - neglecting either one can be disastrous.<br>Despite starting with 6 Unique Powers, benefits greatly from gaining more.",complexity:"Very High"},_w={name:"Relentless Gaze of the Sun",set:gn.NatureIncarnate,aspects:[],specialRules:[{name:"Relentless Punishment",text:"After using a Power Card, if you had at least 3 <presence> in the origin land, you may Repeat it any number of times on the same target land(s) (ignoring origin, Range, and target requirements) by paying both:<br><br><bullet> the Energy cost of the Power, and<br><br><bullet> 1 Energy per previous use of the Power this turn each time you repeat the Power.<br><br>(You may repeat each Power Card multiple times, but its 1st repeat costs 1 extra, its 2nd repeat costs 2 extra, etc. Check if the origin has at least 3 <presence> when you target it the first time.)",[Pn.Now]:async({$:e,you:a,...t})=>{const n={triggerId:e.nextTriggerId(),[Pn.Now]:async({action:t})=>{const{gazePower:n,gazeLands:r}=t.parentData;let i=n.costToPlay+1;for(;a.energy>=i&&await e.may({prompt:`Repeat ${n.data.name} by paying ${i} energy?`});)await a.payEnergy(i),await n.repeatInLocations(r,!1),i+=1}};await e.addSubEffect({effectId:In.Gaze,[Pn.GlobalReminder]:()=>({icon:"Repeat<br>3 <presence>",ongoing:!0,spirit:a,players:[a]}),[Pn.AfterTargetingLands]:async({power:r,lands:i,isRepeat:s})=>{r.owner===a&&!s&&r.isA(En.AnyCard)&&r.validOriginSites.hasOneWhere((e=>e.numberOfPresenceOf(a)>=3))&&(e.action.data.gazeLands=i,e.action.data.gazePower=r,await e.addTrigger(n,t.effect,t.action))}})}}],pickOptions:[[0],[1,2,3]],growthOptions:[{effects:[{text:"Add a <presence> in <range-2>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(2)}}]},{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Add up to 3 <broken> together",[Pn.Now]:async({you:e,$:a})=>{e.destroyedPresence>0&&await e.inLandsWithinRange(1).optionallyPickOne((async t=>{await a.chooseBetween({prompt:"How many <broken> do you want to add?",effects:[1,2,3].map((a=>({actionId:`BrokenAmount${a}`,text:`${a} <broken>`,[Pn.Now]:async()=>{for(let n=0;n<a;n+=1)await t.addPresence(e,{destroyed:!0})},condition:()=>e.destroyedPresence>=a})))})}))}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}}]},{effects:[{text:"Gain Energy an Additional Time",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffectUntilEndOfTurn({[Pn.AfterGainingEnergyFromTracks]:async()=>{await a.gainEnergyFromTracks()}})}},{text:"Move up to 3 Presence Together in <range-3>",[Pn.Now]:async({you:e,$:a})=>{await e.inLands().pickOne((async t=>{await t.move({quantifier:ur.UpTo,amount:3,together:!0,pieces:a.Presence,owner:e,locations:{target:zn.WithinRange,range:3,spirit:e}})}),{prompt:"Pick a land with your <presence>."})}}]}],tracks:[{energy:1,name:"Top-track: 1 Energy"},{requires:0,energy:2,elements:[ir.Sun],name:"Top-track: 2 Energy, Sun"},{requires:1,energy:3,elements:[ir.Fire],name:"Top-track: 3 Energy, Fire"},{requires:2,elements:[ir.Sun],name:"Top-track: Sun"},{requires:3,energy:4,elements:[ir.Any],name:"Top-track: 4 Energy, Any"},{requires:4,energy:5,name:"Top-track: 5 Energy"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:6,cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:7,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:8,elements:[ir.Sun],name:"Bottom-track: Sun"},{requires:9,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:10,effect:{actionId:"ReclaimOne",text:"Reclaim One",[Pn.Now]:async({you:e})=>{await e.reclaim(1)}},effectRequires:({you:e})=>e.hasReclaimableCards,name:"Bottom-track: Reclaim One"},{requires:11,cardPlays:4,name:"Bottom-track: 4 Card Plays"}],setup:[{text:"Put 2 <presence> and 1 <badlands> on your starting board, in the lowest-numbered Sands.",[Pn.Now]:async({you:e,$:a})=>{const t=e.startingBoard.lowestNumberedTerrain(Io.Sands);await t.putPresence(2,e),await t.add(1,a.Badlands)}}],uniquePowers:[Ui.BlindingGlare,Ui.FocusTheSunsRays,Ui.UnbearableGaze,Ui.WitherBodiesScarStones],innatePowers:[Ui.ScorchingConvergence,Ui.ConsiderAHarmoniousNature],lore:"Relentless Gaze of the Sun is an imperious Spirit, brimming with wrathful power that scorches the land barren beneath its focused regard. For long centuries, it viewed all others as beneath it, unworthy of consideration.<br>Yet since being thwarted during the Years of the Relentless Sun, it wonders if its pride deceives it - perhaps it should work with some Spirits and humans, rather than indulging in indiscriminate destruction?<br>It is still considering this idea. Regardless, the Invaders offend it by making the land fragile, forcing it into the intolerable choice between dimming its majesty and unintentionally scorching the land.",playStyle:"Uses stacks of 3 Presence and high Energy income to hammer the same lands with repeated Power Cards. Because of its single-mindedness, is better at dealing with large problems than smaller ones.<br>Harms the land and Dahan while smiting Invaders unless it successfully changes its nature (by expanding into new Elements), which may mean partially foregoing the Sun and Fire that form the core of its initial strength.",complexity:"High"},Vw={name:"Hearth-Vigil",set:gn.NatureIncarnate,aspects:[],specialRules:[{name:"Rooted in the Community",text:"<blight> added in your lands does not destroy your <presence> if <dahan> are present. (Ravage Actions destroy <dahan> before added <blight> destroys <presence> and cascades.)",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.HearthVigil,[Pn.GlobalReminder]:()=>({icon:"<blight><br><broken>",ongoing:!0,spirit:a,players:[a]}),[Pn.PreventBlightDestroyingPresence]:({location:t,spirit:n})=>t.has(e.Dahan)&&n===a})}},{name:"Fortify Heart and Hearth",text:"<dahan> have +4 Health (each) while in your lands. Event and Blight Card Actions don't damage, destroy, or replace <dahan> in your lands.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.HearthVigil,[Pn.GlobalReminder]:()=>({icon:"<dahan><br>+4 HP",ongoing:!0,spirit:a,players:[a]}),[Pn.AdjustHealth]:({piece:t})=>t.isA(e.Dahan)&&void 0!==t.location&&t.location?.hasPresenceOf(a)?4:0,[Pn.AfterRemovePiece]:async({location:t,piece:n})=>{n.owner===a&&t.has(e.Dahan)&&await t.healthCheck()},[Pn.PreventRemovePiece]:async({piece:t,location:n,removement:r})=>!(!(t.isA(e.Dahan)&&n.hasPresenceOf(a)&&[qo.MainEventAction,qo.BlightCardAction,qo.DahanEventAction,qo.TokenEventAction].includes(e.action.type))||!wr[r].isDestroyLike&&r!==Wn.Replace)&&(await e.sendEvent({type:Tn.GenericSub,text:`Fortify Heart and Hearth prevented Dahan from being ${wr[r].textPast}.`}),!0),[Pn.PreventDamagingPiece]:async({piece:t})=>!!(t.isA(e.Dahan)&&void 0!==t.location&&t.location.hasPresenceOf(a)&&[qo.MainEventAction,qo.BlightCardAction,qo.DahanEventAction,qo.TokenEventAction].includes(e.action.type))&&(await e.sendEvent({type:Tn.GenericSub,text:"Fortify Heart and Hearth prevented Dahan from being damaged."}),!0)})}},{name:"Loyal Guardian",text:"When all <dahan> leave one of your lands, your <presence> may Move with those <dahan>. (Each <dahan> can Bring any number of <presence>.)",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.HearthVigil,[Pn.AfterMoving]:async({movement:t,source:n,piece:r})=>{if((e.movedDahanThisInstruction.length??0)>0&&t!==Mr.Relocate&&n.hasPresenceOf(a)&&r.isA(e.Dahan)){const t=e.movedDahanThisInstruction.filter((a=>a.source===n&&0===a.source.piecesThatAre(e.Dahan).where((a=>!e.movedDahanThisInstruction.some((e=>e.piece===a)))).count));if(t.length>0){const n=t[0].source,r=Dr(t.map((e=>e.destination)));await n.move({quantifier:ur.Any,pieces:e.Presence,pieceFilter:a=>!(e.movedPresenceThisInstruction??[]).some((e=>e.piece===a)),owner:a,movement:Mr.Bring,locations:{target:zn.AnyLocations},pickPiecesEffect:{highlightLocations:r},pickDestinationEffect:{autoPlayOneOption:!0},destinationFilter:e=>r.includes(e)})}}}})}}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Add a <presence> in <range-0>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(0)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-3> to a land with <dahan>.",[Pn.Now]:async({you:e,$:a})=>{await e.addPresenceInRange(3,{filter:e=>e.has(a.Dahan)})}}]},{effects:[{text:"Add a <presence> in <range-2>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(2)}},{text:"Gain +3 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(3)}}]}],tracks:[{effect:{actionId:"GatherDahan",text:"Gather 1 Dahan into 1 of your Lands",[Pn.Now]:({you:e,$:a})=>e.inLandsWhere((e=>e.hasAdjacentLandWithPiece(a.Dahan))).pickOne((async e=>{await e.gatherOne(a.Dahan)}),{noOptions:"None of your lands have an adjacent <dahan>."})},name:"Bonus: Gather 1 Dahan into 1 of your Lands"},{energy:0,name:"Top-track: 0 Energy"},{requires:1,energy:1,elements:[ir.Sun],name:"Top-track: 1 Energy, Sun"},{requires:2,energy:2,name:"Top-track: 2 Energy"},{requires:3,energy:3,elements:[ir.Animal],name:"Top-track: 3 Energy, Animal"},{requires:4,energy:4,name:"Top-track: 4 Energy"},{requires:5,energy:5,elements:[ir.Sun],name:"Top-track: 5 Energy, Sun"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:7,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:8,elements:[ir.Air],name:"Bottom-track: Air"},{requires:9,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:10,elements:[ir.Animal],name:"Bottom-track: Animal"},{requires:11,cardPlays:4,name:"Bottom-track: 4 Card Plays"}],setup:[{text:"Put 3 <presence> on your starting board: 1 in the highest-numbered land with <dahan> and 2 in the lowest-numbered land with at least 2 <dahan>. Add 1 <dahan> in each of those lands.",[Pn.Now]:async({you:e,$:a})=>{const t=[];await e.startingBoard.inLandsFilteredByAllInPriority((e=>e.has(a.Dahan))).withMost((e=>e.landNumber)).autoPickOne((async a=>{t.push(a),await a.putPresence(1,e)})),await e.startingBoard.inLandsFilteredByAnyInPriority((e=>e.hasAtLeast(2,a.Dahan)),(e=>e.has(a.Dahan))).withLeast((e=>e.landNumber)).autoPickOne((async a=>{t.push(a),await a.putPresence(2,e)}));for(const e of t)await e.add(1,a.Dahan)}},{text:"You start with your 4 unique Power Cards and 1 Energy.",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}],uniquePowers:[Ui.CallToVigilance,Ui.CoordinatedRaid,Ui.FavorsOfStoryAndSeason,Ui.SurroundedByTheDahan],innatePowers:[Ui.WarnOfImpendingConflict,Ui.KeepWatchForNewIncursions],lore:"Hearth-Vigil is a Spirit of neither fire nor cooking - it is a watcher and guardian, a protector who keeps vigil over common-hearths. In the dry season, it smothers rogue blazes; in the wet season, it fortifies the health of older Dahan suffering from wheezelung; in all season, it intensifies the hearth's powers of wellness and community-strength. It's friendly to speak to, though most grown Dahan don't usually distract it without cause.<br>Historically, its aid was first sought during the bloody conflicts of the Servant Cults, due to the threat of mass poisonings. As those agreements affected its nature, it became able to offer more than simple vigilance.",playStyle:"Very good at protecting Dahan in its lands, not so great at stopping Blight. In keeping with its nature, largely brings Dahan to its Presence (or vice versa); getting Dahan elsewhere may require a bit of forethought with Keep Watch for New Incursions.<br>Very reactive, with reliable ways to deal with Invaders as they Ravage and Build, but has trouble handling established City that aren't Ravaging.",complexity:"Moderate"},Jw={name:"Towering Roots of the Jungle",set:gn.NatureIncarnate,aspects:[],specialRules:[{name:"Enduring Vitality",text:"Some of your Actions Add Vitality Tokens (<vitality>). (Each <vitality> in a land with no <blight> prevents 1 <blight> from being added, then is Removed.)",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Roots,[Pn.GlobalReminder]:()=>({icon:"<vitality>",ongoing:!0,spirit:a,players:[a]})})}},{name:"Heart-tree Guards the Land",text:"You have an Incarna.<br><bullet> Your Powers get <range+1> if <incarna-roots> is in the origin land.<br><bullet> Invaders/<dahan>/<beasts> can't be damaged or destroyed at <incarna-roots>.<br><bullet> Empower <incarna-roots> the first time it's in a land with 3 or more <vitality>.<br><bullet> Skip all Build Actions at Empowered <incarna-roots>.",effects:[{text:"Your Powers get <range+1> if <incarna-roots> is in the origin land.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Roots,[Pn.GlobalReminder]:()=>({icon:"<range+1><br><incarna-roots>",ongoing:!0,spirit:a,players:[a]}),[Pn.ExtraRange]:({spirit:t,location:n})=>t===a&&n.has(e.IncarnaRoots)&&void 0!==e.action.power?1:0})}},{text:"Invaders/<dahan>/<beasts> can't be damaged or destroyed at <incarna-roots>.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Roots,[Pn.GlobalReminder]:()=>({icon:"<incarna-roots><br>No <damage>",ongoing:!0,spirit:a,players:[a]}),[Pn.PreventRemovePiece]:({piece:a,location:t,removement:n})=>Promise.resolve(a.isOneOf(e.Invader,e.Dahan,e.Beasts)&&t.has(e.IncarnaRoots)&&wr[n].isDestroyLike),[Pn.PreventDamagingPiece]:({piece:a})=>Promise.resolve(a.isOneOf(e.Invader,e.Dahan,e.Beasts)&&!0===a.location?.has(e.IncarnaRoots))})}},{text:"Empower <incarna-roots> the first time it's in a land with 3 or more <vitality>.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Roots,[Pn.GlobalReminder]:()=>({icon:"Empower<br>3 <vitality>",ongoing:!0,visible:!a.hasEmpoweredIncarna,spirit:a,players:[a]}),[Pn.AfterAddingPiece]:async({land:t})=>{t.hasAtLeast(3,e.Vitality)&&t.has(e.IncarnaRoots)&&await a.empowerIncarna()},[Pn.AfterMoving]:async({destination:t})=>{t.hasAtLeast(3,e.Vitality)&&t.has(e.IncarnaRoots)&&await a.empowerIncarna()}})}},{text:"Skip all Build Actions at Empowered <incarna-roots>.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Roots,[Pn.GlobalReminder]:()=>({icon:"Skip<br>Build",ongoing:!0,visible:a.hasEmpoweredIncarna,spirit:a,players:[a]}),[Pn.PreventInvaderActionInLand]:({land:t,invaderAction:n})=>Promise.resolve(n===qr.Build&&t.has(e.IncarnaRoots)&&a.hasEmpoweredIncarna)})}}]},{name:"Incarna",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Roots,text:"<incarna-roots> may count as <presence>.",[Pn.GlobalReminder]:()=>({icon:"<incarna-roots> =<br><presence>",ongoing:!0,spirit:a,players:[a]})})}}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Add a <presence> in <range-0>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(0)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1)}},{text:"Add a Vitality at your Incarna",[Pn.Now]:async({you:e,$:a})=>{await(e.incarna?.location?.add(1,a.Vitality))}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-3>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(3)}},{text:"You may Replace 1 Presence with Your Incarna",[Pn.Now]:async({you:e})=>{await e.presence().optionallyPickOne((async a=>{const t=a.location;await a.remove(Wn.Replace),e.hasIncarna?await e.incarna.moveTo({location:t,movement:Mr.Relocate,pieceFilter:Xn.IncarnaRoots}):await e.addIncarna(Ln.IncarnaRoots,(e=>e===t))}))}},{text:"Gain +1 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}]}],tracks:[{energy:1,name:"Top-track: 1 Energy"},{requires:0,energy:2,name:"Top-track: 2 Energy"},{requires:1,elements:[ir.Earth],name:"Top-track: Earth"},{requires:2,energy:4,name:"Top-track: 4 Energy"},{requires:3,elements:[ir.Plant],name:"Top-track: Plant"},{requires:4,energy:6,name:"Top-track: 6 Energy"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:6,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:7,elements:[ir.Sun],name:"Bottom-track: Sun"},{requires:8,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:9,elements:[ir.Plant],name:"Bottom-track: Plant"},{requires:10,cardPlays:4,name:"Bottom-track: 4 Card Plays"}],setup:[{text:"Put 3 <presence> on your starting board: 1 in the highest-numbered Jungle without <blight>, 1 in the highest-numbered Mountain, and 1 in the highest-numbered Wetland. Put <incarna-roots> in the Jungle with your <presence>.",[Pn.Now]:async({you:e,$:a})=>{await e.startingBoard.inLandsFilteredByAllInPriority((e=>e.isJungle),(e=>!e.has(a.Blight))).withMost((e=>e.landNumber)).autoPickOne((async a=>{await a.putPresence(1,e),await a.putIncarna(Ln.IncarnaRoots,e)})),await e.startingBoard.highestNumberedTerrain(Io.Mountains).putPresence(1,e),await e.startingBoard.highestNumberedTerrain(Io.Wetlands).putPresence(1,e)}}],uniquePowers:[Ui.BloomingOfTheRocksAndTrees,Ui.BoonOfResilientPower,Ui.EntwineTheFatesOfAll,Ui.RadiantAndHallowedGrove],innatePowers:[Ui.ShelterUnderToweringBranches,Ui.RevokeSanctuaryAndCastOut],lore:"Towering Roots of the Jungle is a massive, sprawling tree, mighty and ancient. It predates the Dahan, but its history has entwined with theirs ever since they arrived: as part of the terms of the First Reckoning, it served as one place where Dahan might settle freely. It protected the land from any accidental damage done by the Dahan, and the Dahan from Spirits that wished them ill.<br>It has never before felt the need to reach out through its offshoots and descendants around the island, but the threat of the Invaders and their heedless destruction has motivated it to grow and change in this new way.",playStyle:"Incredibly good at protecting everything at its Towering Roots of the Jungle - and can draw Invaders towards there - but is constrained in when and where it can move its Towering Roots of the Jungle. Has some ability to Remove Invaders (driving them from the island), but starts off vastly better at guarding the land than at smashing things.",complexity:"Moderate"},zw={name:"Wandering Voice Keens Delirium",set:gn.NatureIncarnate,aspects:[],specialRules:[{name:"A Clarion Voice Given Form",text:"You have an Incarna (<incarna-voice>). If empowered, it Isolates its land.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Voice,[Pn.GlobalReminder]:()=>({icon:"Isolate<br><incarna-voice>",ongoing:!0,visible:a.hasEmpoweredIncarna,spirit:a,players:[a]}),[Pn.Isolated]:({land:t})=>t.has(e.IncarnaVoice)&&a.hasEmpoweredIncarna})}},{name:"Spread Tumult and Delusion",text:"When your Actions add/move <incarna-voice> to a land with Invaders, Add 1 <strife> in the destination land.<br>In lands with or adjacent to <incarna-voice>, if <strife> is present, <dahan> do not participate in Ravage. (They do not take Damage or counterattack. Isolate has no effect on <incarna-voice> and <dahan> being adjacent.)",effects:[{text:"When your Actions add/move <incarna-voice> to a land with Invaders, Add 1 <strife> in the destination land.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Voice,[Pn.GlobalReminder]:()=>({icon:"Move<br>= <strife>",ongoing:!0,spirit:a,players:[a]}),[Pn.AfterAddingPiece]:async({land:t,additions:n})=>{e.action.spirit===a&&n.some((({piece:t})=>t.isA(e.IncarnaVoice)&&t.owner===a))&&await t.addStrife(1)},[Pn.AfterMoving]:async({piece:t,destination:n})=>{e.action.spirit===a&&t.isA(e.IncarnaVoice)&&t.owner===a&&await n.addStrife(1)}})}},{text:"In lands with or adjacent to <incarna-voice>, if <strife> is present, <dahan> do not participate in Ravage. (They do not take Damage or counterattack. Isolate has no effect on <incarna-voice> and <dahan> being adjacent.)",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Voice,[Pn.GlobalReminder]:()=>({icon:"<dahan><br>DNPIR",ongoing:!0,spirit:a,players:[a]}),[Pn.DoesNotParticipateInRavage]:async({location:t})=>{t.numberOfPiecesInThisOrAdjacentLands(e.IncarnaVoice,a)>=1&&t.has(e.Strife)&&await t.doNotParticipateInRavage({pieces:e.Dahan})}})}}]},{name:"Senseless Roaming",text:"When your Actions Add <strife> to an <explorer>/<town>, you may Push it.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Voice,[Pn.GlobalReminder]:()=>({icon:"<strife> =<br>Push",ongoing:!0,spirit:a,players:[a]}),[Pn.AfterAddingStrife]:async({piece:t})=>{e.action.type!==qo.SpiritAction&&e.action.type!==qo.PowerAction||e.action.spirit!==a||!t.isA(e.ExplorerOrTown)||await t.push({quantifier:ur.May})}})}},{name:"Incarna",[Pn.Now]:async({you:e,$:a})=>{await a.addSubEffect({effectId:In.Voice,text:"<incarna-voice> may count as <presence>/<sacred>.",[Pn.GlobalReminder]:()=>({icon:"<incarna-voice> =<br><presence>/<sacred>",ongoing:!0,spirit:e,players:[e]}),[Pn.HasSacredSiteOf]:({land:a,spirit:t})=>t===e&&a.pieces.some((e=>e.piece===Ln.IncarnaVoice))})}}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Add/Move <incarna-voice> to Land with Your Presence",[Pn.Now]:async({you:e})=>{await e.addOrMoveIncarnaToLandWithPresence(Ln.IncarnaVoice)}},{text:"Gain +1 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}]},{effects:[{text:"Add a <presence> in <range-3>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(3)}},{text:"Add a <presence> in <range-1>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-2>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(2)}},{text:"Gain +1 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}},{text:"Gain Air",[Pn.Now]:async({you:e})=>{await e.gainElementsUntilEndOfTurn({[ir.Air]:1})}}]}],tracks:[{energy:0,name:"Top-track: 0 Energy"},{requires:0,energy:1,name:"Top-track: 1 Energy"},{requires:1,elements:[ir.SunOrMoon],name:"Top-track: Sun OR Moon"},{requires:2,energy:2,name:"Top-track: 2 Energy"},{requires:3,elements:[ir.Air],name:"Top-track: Air"},{requires:4,energy:4,name:"Top-track: 4 Energy"},{requires:5,effect:{actionId:"PushIncarna",text:"Push Your Incarna",[Pn.Now]:async({you:e})=>{await e.incarna.location.push({pieces:Xn.IncarnaVoice,owner:e})}},effectRequires:({you:e})=>e.hasIncarna,name:"Top-track: Push your Incarna"},{cardPlays:1,name:"Bottom-track: 1 Card Play"},{requires:7,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:8,cardPlays:2,name:"Bottom-track: 2 Card Plays"},{requires:9,cardPlays:3,name:"Bottom-track: 3 Card Plays"},{requires:10,effect:{actionId:"ReclaimOne",text:"Reclaim One",[Pn.Now]:async({you:e})=>{await e.reclaim(1)}},effectRequires:({you:e})=>e.hasReclaimableCards,name:"Bottom-track: Reclaim One"},{requires:11,cardPlays:4,name:"Bottom-track: 4 Card Plays"}],setup:[{text:"Put 2 <presence> on your starting board: 1 in land #6 and 1 in land #7. Put <incarna-voice> on your starting board in land #6.",[Pn.Now]:async({you:e})=>{const a=e.startingBoard.inLandNumber(6);await a.putPresence(1,e),await a.putIncarna(Ln.IncarnaVoice,e),await e.startingBoard.inLandNumber(7).putPresence(1,e)}}],uniquePowers:[Ui.ExhaleConfusionAndDelirium,Ui.FrightfulKeening,Ui.TurmoilsTouch,Ui.TwistPerceptions],innatePowers:[Ui.InscrutableJourneying,Ui.MindShatteringSong],lore:"Ages ago, Calls All Living Things to Die was a great and respected Spirit, until it decided to test the limits of its power - accounts disagree as to why - and devastated a portion of the island with a vast swath of death. Matters would have gone even worse but for three Spirits who cleverly sundered the great Spirit's voice and bound it to wander, never returning to its owner.<br>Wandering Voice Keens Delirium only occasionally brings death with its song, now, more usually causing derangement, obsession and folly in those it touches. The Dahan have learned a variety of tricks to avoid the worst of its influence, but are occasionally affected nonetheless.",playStyle:"Very positional; has a highly mobile Incarna (particularly with lots of Air) that adds Strife and chases Explorer/Town around as it roams the island.<br>Has a harder time setting up Dahan counterattacks, but can use Mind-Shattering Song to more directly harm Invaders with Strife - and earn a fair bit of Fear in the process.",complexity:"High"},Yw={[ir.Sun]:{name:"Sun",text:"<sun>",elements:[ir.Sun]},[ir.Moon]:{name:"Moon",text:"<moon>",elements:[ir.Moon]},[ir.Fire]:{name:"Fire",text:"<fire>",elements:[ir.Fire]},[ir.DarkFire]:{name:"Dark Fire",text:"<darkfire>",elements:[ir.DarkFire]},[ir.Air]:{name:"Air",text:"<air>",elements:[ir.Air]},[ir.Water]:{name:"Water",text:"<water>",elements:[ir.Water]},[ir.Earth]:{name:"Earth",text:"<earth>",elements:[ir.Earth]},[ir.Plant]:{name:"Plant",text:"<plant>",elements:[ir.Plant]},[ir.Animal]:{name:"Animal",text:"<animal>",elements:[ir.Animal]},[ir.Any]:{name:"Any",text:"<any>",elements:kd},[ir.SunOrMoon]:{name:"Sun OR Moon",text:"<sun-moon>",elements:[ir.Sun,ir.Moon]},[ir.WaterOrAnimal]:{name:"Water OR Animal",text:"<water-animal>",elements:[ir.Water,ir.Animal]},[ir.FireOrPlant]:{name:"Fire OR Plant",text:"<fire-plant>",elements:[ir.Fire,ir.Plant]}};var Kw;!function(e){e.RoilingWaters="RoilingWater",e.SereneWaters="SereneWaters",e.WatersRenew="WatersRenew",e.WatersTasteOfRuin="WatersTasteOfRuin"}(Kw||(Kw={}));const Qw={name:"Roiling Waters",set:gn.NatureIncarnate,effects:[{name:"Lands of Blood and Savagery",text:"When your Powers add or move <beasts> into a land, you may do 1 Damage there per added or moved <beasts>.<br><br>When your Powers add or move any number of <dahan> into a land, you may do 1 Damage there (max. once per Power).",card:Kw.RoilingWaters,textArea:[.201,.477],[Pn.Now]:async({$:e,you:a})=>{await e.clickToContinue(),await e.addSubEffect({effectId:In.RoilingWaters,effects:[{[Pn.GlobalReminder]:()=>({icon:"<beasts><br>1 <damage>",ongoing:!0,spirit:a,players:[a]}),textArea:[.204,.324],text:"When your Powers add or move <beasts> into a land, you may do 1 Damage there per added or moved <beasts>.",[Pn.AfterAddingPiece]:async({additions:t})=>{if(e.action.power&&e.action.spirit===a){const a=Dr(t.filter((a=>a.piece.isA(e.Beasts))).map((e=>e.location)));for(const n of a){const a=t.filter((a=>a.piece.isA(e.Beasts)&&a.location===n)).length;await n.damage(a)}}},[Pn.AfterMoving]:async({piece:t,destination:n,movement:r})=>{e.action.power&&e.action.spirit===a&&t.isA(e.Beasts)&&r!==Mr.Relocate&&await n.damage(1)}},{[Pn.GlobalReminder]:()=>({icon:"<dahan><br>1 <damage>",ongoing:!0,spirit:a,players:[a]}),textArea:[.342,.471],text:"When your Powers add or move any number of <dahan> into a land, you may do 1 Damage there (max. once per Power).",[Pn.AfterAddingPiece]:async({additions:t})=>{if(e.action.power&&e.action.spirit===a&&!e.action.data.hasUsedRoilingWaters){const a=Dr(t.filter((a=>a.piece.isA(e.Dahan))).map((e=>e.location)));await od.createCollection(e,a).autoPickOne((async a=>{e.action.data.hasUsedRoilingWaters=!0,await a.damage(1)}))}},[Pn.AfterMoving]:async({piece:t,destination:n,movement:r})=>{!e.action.data.hasUsedRoilingWaters&&e.action.power&&e.action.spirit===a&&t.isA(e.Dahan)&&r!==Mr.Relocate&&(e.action.data.hasUsedRoilingWaters=!0,await n.damage(1))}}]})}}],requirement:({spirit:e})=>e.numberOfHealingMarkers>=3&&e.numberOfHealingAnimalMarkers>=2&&0===e.healingCards.length},Xw={name:"Serene Waters",set:gn.NatureIncarnate,effects:[{name:"Lands of Peace and Harmony",text:"When your Powers move any number of Invaders into your lands, you may Downgrade 1 of those Invaders (max. once per Power).<br><br>When your Powers add or move any number of <dahan> into one of your lands, you may Downgrade 1 Invader there (max. once per Power).<br><br>(If you do both, you can pick the same Invader twice.)",textArea:[.198,.609],card:Kw.SereneWaters,[Pn.Now]:async({$:e,you:a})=>{await e.clickToContinue(),await e.addSubEffect({effectId:In.SereneWaters,textArea:[.192,.606],effects:[{[Pn.GlobalReminder]:()=>({icon:"Move<br><explorer><town><city>",ongoing:!0,spirit:a,players:[a]}),textArea:[.195,.31],text:"When your Powers move any number of Invaders into your lands, you may Downgrade 1 of those Invaders (max. once per Power).",[Pn.AfterAddingPiece]:async({additions:t})=>{if(e.action.power&&e.action.spirit===a&&!e.action.data.hasUsedSereneWatersFirst){const n=Dr(t.filter((e=>e.piece.isInvader&&e.location.hasPresenceOf(a))).map((e=>e.piece)));await td.createCollection(e,n).optionallyPickOne((async a=>{e.action.data.hasUsedSereneWatersFirst=!0,await a.downgrade()}))}},[Pn.AfterMoving]:async({piece:t,destination:n,movement:r})=>{e.action.power&&e.action.spirit===a&&t.isInvader&&n.hasPresenceOf(a)&&!e.action.data.hasUsedSereneWatersFirst&&r!==Mr.Relocate&&await e.may({prompt:`Downgrade ${Zn[t.piece].text}?`})&&(e.action.data.hasUsedSereneWatersFirst=!0,await t.downgrade())}},{textArea:[.333,.503],text:"When your Powers add or move any number of <dahan> into one of your lands, you may Downgrade 1 Invader there (max. once per Power).",[Pn.GlobalReminder]:()=>({icon:"Move<br><dahan>",ongoing:!0,spirit:a,players:[a]}),[Pn.AfterAddingPiece]:async({additions:t})=>{if(!e.action.data.hasUsedSereneWatersSecond&&e.action.power&&e.action.spirit===a){const n=Dr(t.filter((t=>t.piece.isA(e.Dahan)&&t.location.hasPresenceOf(a))).map((e=>e.location)));await a.forPiecesThatIs(e.Invader).where((e=>n.includes(e.location))).optionallyPickOne((async a=>{e.action.data.hasUsedSereneWatersSecond=!0,await a.downgrade()}))}},[Pn.AfterMoving]:async({piece:t,movement:n,destination:r})=>{!e.action.data.hasUsedSereneWatersSecond&&e.action.power&&e.action.spirit===a&&t.isA(e.Dahan)&&r.hasPresenceOf(a)&&n!==Mr.Relocate&&await r.piecesThatAre(e.Invader).optionallyPickOne((async a=>{e.action.data.hasUsedSereneWatersSecond=!0,await a.downgrade()}))}}]})}}],requirement:({spirit:e})=>e.numberOfHealingMarkers>=3&&e.numberOfHealingWaterMarkers>=2&&0===e.healingCards.length},Zw={name:"Waters Renew",set:gn.NatureIncarnate,effects:[{text:"Lose Innate Power: Sanguinary Taint.",[Pn.Now]:async({you:e})=>{await e.forgetPower(Ui.SanguinaryTaint)}},{text:"Lose Special Rule: Seeking a Path towards Healing.",[Pn.Now]:({$:e})=>(e.removeEffectsWithId(In.WoundedSeekingAPathTowardsHealing),Promise.resolve())},{text:"Gain Call to Fastness of Renewal",[Pn.Now]:async({you:e})=>{const a=await e.gainPower(Ui.CallToAFastnessOfRenewal);await a.play()}}],requirement:({spirit:e})=>e.numberOfHealingMarkers>=5&&e.numberOfHealingWaterMarkers>=3},em={name:"Waters Taste Of Ruin",set:gn.NatureIncarnate,effects:[{text:"Lose Innate Power: Swirl And Spill.",[Pn.Now]:async({you:e})=>{await e.forgetPower(Ui.SwirlAndSpill)}},{text:"Lose Special Rule: Seeking a Path towards Healing.",[Pn.Now]:({$:e})=>(e.removeEffectsWithId(In.WoundedSeekingAPathTowardsHealing),Promise.resolve())},{text:"Gain Afflict With Bloodthirst",[Pn.Now]:async({you:e})=>{const a=await e.gainPower(Ui.AfflictWithBloodthirst);await a.play()}}],requirement:({spirit:e})=>e.numberOfHealingMarkers>=5&&e.numberOfHealingAnimalMarkers>=3},am={[Kw.RoilingWaters]:Qw,[Kw.SereneWaters]:Xw,[Kw.WatersRenew]:Zw,[Kw.WatersTasteOfRuin]:em},tm={name:"Wounded Waters Bleeding",set:gn.NatureIncarnate,aspects:[],specialRules:[{name:"Seeking a Path towards Healing",text:"After playing cards each Spirit Phase:<br><br><bullet> Claim a Healing Marker (Element Marker) matching whichever of <water> or <animal> you have more of. (You break ties.)<br><br><bullet> You may then Claim a Healing Card if you meet its requirements.<br><br><bullet> Then Destroy 1 <presence> or Forget a Power Card (unless a Healing Card just removed this rule).",effects:[{text:"After playing cards each Spirit Phase:<br><br>Claim a Healing Marker (Element Marker) matching whichever of <water> or <animal> you have more of. (You break ties.)<br><br>You may then Claim a Healing Card if you meet its requirements.<br><br>Then Destroy 1 <presence> or Forget a Power Card (unless a Healing Card just removed this rule).",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.WoundedSeekingAPathTowardsHealing,[Pn.GlobalReminder]:()=>({icon:"Healing<br>Cards",ongoing:!0,spirit:a,players:[a],previewPowers:()=>({powers:[Kw.WatersTasteOfRuin,Kw.RoilingWaters,Kw.WatersRenew,Kw.SereneWaters],selected:[]})})}),await e.addSubEffect({effectId:In.WoundedSeekingAPathTowardsHealing,[Pn.GlobalReminder]:()=>({icon:"<water><animal>",ongoing:!0,spirit:a,players:[a]}),[Pn.AfterPlayPowers]:async()=>{await e.addSubEffect({effects:[{text:"After playing cards each Spirit Phase:<br><br>Claim a Healing Marker (Element Marker) matching whichever of <water> or <animal> you have more of. (You break ties.)",[Pn.Now]:async()=>{await e.chooseBetween({effects:[ir.Water,ir.Animal].map((e=>({actionId:e,text:Yw[e].text,[Pn.Now]:async()=>{await a.convertElements({[e]:a.elements[e===ir.Water?ir.Animal:ir.Water]}),await a.gainHealingMarker(e)},condition:()=>a.maxElementsWithConvert(e)>=a.elements[e===ir.Water?ir.Animal:ir.Water]})))})}},{text:"You may then Claim a Healing Card if you meet its requirements. (You can claim your first Healing Card on Turn 3.)",[Pn.Now]:async()=>{const t=Object.keys(am).filter((e=>am[e].requirement({spirit:a})&&!a.healingCards.includes(e))),n=await e.queryOptional({query:An.SelectHealingCard,items:t,actionIds:t});if(null!==n){const r=t[n];a.healingCards.push(r);for(const t of am[r].effects)await e.doSpiritAction((()=>e.addEffect({...t,spirit:a,players:[a]})))}}}]})}})}},{text:"Then Destroy 1 <presence> or Forget a Power Card (unless a Healing Card just removed this rule).",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.WoundedSeekingAPathTowardsHealing,[Pn.AfterPlayPowers]:async()=>{e.hasEffectNamed("Seeking a Path towards Healing")&&await e.chooseBetween({effects:[{actionId:"DestroyPresence",text:"Destroy 1 <presence>",[Pn.Now]:async()=>{await a.destroyPresence(1)}},{actionId:"ForgetPowerCard",text:"Forget a Power Card",[Pn.Now]:async()=>{await a.forgetPowers()}}]})}})}}]}],pickOptions:[[0,1,2]],growthOptions:[{effects:[{text:"Reclaim cards",[Pn.Now]:async({you:e})=>{await e.reclaimCards()}},{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Gain +1 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}}]},{effects:[{text:"Gain Power Card",[Pn.Now]:async({you:e})=>{await e.gainPowerCard()}},{text:"Add a <presence> in <range-2>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(2)}}]},{requiresHealingCard:!0,effects:[{text:"Add a <presence> in <range-3>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(3)}},{text:"Gain +3 Energy",[Pn.Now]:async({you:e})=>{await e.gainEnergy(3)}},{text:"Add a Destroyed Presence in <range-1>",[Pn.Now]:async({you:e})=>{await e.addPresenceInRange(1,{destroyed:!0})}}]}],tracks:[{energy:0,cardPlays:1,name:"Middle-track: 0 Energy, 1 Card Play"},{requires:0,elements:[ir.WaterOrAnimal],name:"Middle-track: Water OR Animal"},{requires:1,effect:{actionId:"GatherBlight",text:"Gather 1 <blight> into 1 of Your Lands",[Pn.Now]:({you:e,$:a})=>e.inLandsWhere((e=>e.hasAdjacentLocationWhere((e=>e.isLandForBlight&&e.has(a.Blight))))).pickOne((async e=>{await e.gatherOne(a.Blight)}),{noOptions:"None of your lands have an adjacent <blight>."})},name:"Middle-track: Gather 1 Blight into 1 of Your Lands"},{requires:2,energy:1,cardPlays:2,name:"Middle-track: 1 Energy, 2 Card Plays"},{requires:3,energy:3,name:"Top-track: 3 Energy"},{requires:4,energy:4,elements:[ir.FireOrPlant],name:"Top-track: 4 Energy, Fire OR Plant"},{requires:5,energy:5,elements:[ir.Any],name:"Top-track: 5 Energy, Any"},{requires:3,cardPlays:3,name:"Bottom-track: 3 Card Play"},{requires:7,effect:{actionId:"ReclaimOne",text:"Reclaim One",[Pn.Now]:async({you:e})=>{await e.reclaim(1)}},name:"Bottom-track: Reclaim One"},{requires:8,cardPlays:4,name:"Bottom-track: 4 Card Plays"}],setup:[{text:"On your starting board, put 2 <presence> in a land with <blight>, then put 2 <presence> and 1 <blight> (from the box) in the highest-numbered land with a <town> Setup symbol.",[Pn.Now]:async({you:e,$:a})=>{await e.startingBoard.inLandsFilteredByAllInPriority((e=>e.has(a.Blight))).autoPickOne((async a=>{await a.putPresence(2,e)})),await e.startingBoard.inLandsFilteredByAllInPriority((e=>e.setupSymbols.includes(Ln.Town))).withMost((e=>e.landNumber)).autoPickOne((async t=>{await t.putPresence(2,e),await t.add(1,a.Blight)}))}},{text:"You start with your 4 Unique Power Cards and 4 Energy. Set your 4 Healing Cards nearby.",[Pn.Now]:async({you:e})=>{await e.gainEnergy(4)}}],uniquePowers:[Ui.BloodWaterAndBloodlust,Ui.BoonOfCorruptedBlood,Ui.DrawToTheWatersEdge,Ui.WrackWithPainAndGrief],innatePowers:[Ui.SwirlAndSpill,Ui.SanguinaryTaint],lore:"In years past, Peace-Waters was a woodland pond, fed by a small river: a Spirit of contended coexistence and the gift of water. Humans and animals would drink in peace, then move on.<br>The Invaders, too, found Peace-Waters, drank, and moved on. Upriver, they built slaughterhouses and tanneries, pouring charnel-blood through the pool day after day, year after year.<br>The Spirit which used to be Peace-Waters has barely survived. It is no longer a Spirit of peace - but it has not yet found coherence in a new nature, and until it does, it is at risk of unraveling altogether.",playStyle:"Starts off wounded, losing a Presence or a Power Card every turn. Heals over the course of the game, finding a new nature - while some choices may be a touch better or worse due to Adversary, Power Card picks, teammates, etc., most combinations are viable in most games.<br>Benefits from careful Presence placement, both due to losing Presence and because some if its Unique Powers must target from lands with Blight.",complexity:"High"},nm={[fn.Lightning]:fw,[fn.River]:pw,[fn.Earth]:uw,[fn.Shadows]:ww,[fn.Thunderspeaker]:mw,[fn.Green]:gw,[fn.Ocean]:yw,[fn.Bringer]:hw,[fn.Fangs]:vw,[fn.Keeper]:xw,[fn.Wildfire]:Iw,[fn.Serpent]:Aw,[fn.Stone]:Ww,[fn.Memory]:Lw,[fn.Trickster]:$w,[fn.Lure]:Dw,[fn.ManyMinds]:Bw,[fn.Volcano]:Uw,[fn.Shroud]:Fw,[fn.Vengeance]:Gw,[fn.Starlight]:Nw,[fn.Fractured]:Cw,[fn.Downpour]:bw,[fn.Finder]:Tw,[fn.Teeth]:Ow,[fn.Eyes]:Pw,[fn.Mud]:Ew,[fn.Heat]:Sw,[fn.Whirlwind]:kw,[fn.Behemoth]:Hw,[fn.HearthVigil]:Vw,[fn.Darkness]:qw,[fn.Gaze]:_w,[fn.Roots]:Jw,[fn.Earthquakes]:jw,[fn.Voice]:zw,[fn.Wounded]:tm},rm={name:"Second Wave",set:gn.BranchAndClaw,difficulty:0,configurationError:e=>{const a=e.boards.map((e=>e.spirit?.spirit)).find((a=>void 0!==a&&e.startWaveHistory?.usedSpirits.includes(a)));if(void 0!==a)return`${nm[a].name} has been used in a previous wave and cannot be chosen again.`},rules:[{[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.SecondWave,[Pn.AfterGameEnds]:async({winReason:a})=>{if(void 0!==a){const a=[],t=[],n=[...e.config.startWaveHistory?.usedSpirits??[],...e.spirits.map((e=>e.spirit))],r=Dr([...e.config.startWaveHistory?.revealedBlightCards??[],...e.blightCardsDiscarded,...e.blightCardActive?[e.blightCardActive]:[]]),i=e.config.startWaveHistory?.wave??1,s=Math.min(i+1,7);await e.addSubEffect({name:1===i?"After the First Game":"After each Wave",scenario:Nd.SecondWave,effects:[{text:"Each Spirit sets aside one Power Card to assist with the next Game.",[Pn.Now]:async()=>{await e.eachSpirit((async e=>{await e.powersWhere((e=>e.isA(En.AnyCard)&&!e.isBlessed&&!e.assisted)).pickOne((t=>(a.push({power:t.power,boardIndex:e.startingBoardIndex}),Promise.resolve())),{players:[e]})}))}},{text:"Remove all <presence> and Invaders.",[Pn.Now]:async()=>{await e.clickToContinue(),await e.forPiecesWhere((e=>e.isPresence||e.isInvader)).forEach((async e=>{await e.remove(Wn.Silent)}))}},{text:`Leave on the island one of each token-type per player:<br><br>${e.boardCount} <beasts>, ${e.boardCount} <wilds>, ${e.boardCount} <disease>, ${e.boardCount} <badlands>`,[Pn.Now]:async()=>{await e.clickToContinue(),await e.inBoardsWhere((a=>a.boardIndex>=e.boardCount)).forEach((async a=>{for(const t of a.pieces)t.isA(e.Blight)?await t.location.removeBlight():await t.remove(Wn.Silent)}));for(const a of[e.Beasts,e.Wilds,e.Disease,e.Badlands]){const t=Math.max(e.pieceCountIncludingStasis(a)-e.boardCount,0);t>0&&await e.forPiecesThatIs(a).pickMultiple({amount:t,forPickedItem:async e=>{await e.remove(Wn.Silent)},effect:{prompt:`Pick ${Zn[a].text} to remove.`}})}}},{text:`Leave ${s} <blight> per player. Return the rest to the Blight Card.`,[Pn.Now]:async()=>{await e.clickToContinue();const a=Math.max(e.pieceCountIncludingStasis(e.Blight)-s*e.boardCount,0);a>0&&await e.forPiecesThatIs(e.Blight).pickMultiple({amount:a,forPickedItem:async e=>{await(e.location?.removeBlight())}})}},{text:"In lands with 3 <dahan> or more, Push 1 <dahan> to adjacent lands until there are 2 or fewer.",[Pn.Now]:async()=>{await e.inLandsWhere((a=>a.hasAtLeast(3,e.Dahan))).selectOrder().forEach((async a=>{await a.push({pieces:e.Dahan,amount:Math.max(a.numberOf(e.Dahan)-2,0)})}),{noOptions:"No lands with 3 <dahan> or more"})}},{text:"Then, on each board with 2-4 <dahan>, add 1 <dahan> to the lowest-numbered land with <dahan>.",[Pn.Now]:async()=>{await e.inBoardsWhere((a=>a.numberOf(e.Dahan)>=2&&a.numberOf(e.Dahan)<=4)).forEach((async a=>{const t=a.lowestNumberedLand((a=>a.has(e.Dahan)));void 0!==t&&await t.add(1,e.Dahan)}),{noOptions:"No boards with 2-4 <dahan>."})}},{text:"Then, on each board with 9 <dahan> or more, remove <dahan> until there are 8 or fewer.",[Pn.Now]:async()=>{await e.inBoardsWhere((a=>a.numberOf(e.Dahan)>=9)).forEach((async a=>{await a.forPiecesThatIs(e.Dahan).pickMultiple({amount:Math.max(a.numberOf(e.Dahan)-8,0),forPickedItem:async e=>{await e.remove(Wn.Silent)}})}),{noOptions:"No boards with 9 <dahan> or more."})}}]}),await e.forPiecesWhere((a=>a.isOneOfIgnoringCountAs(e.Beasts,e.Wilds,e.Disease,e.Badlands,e.Blight,e.Dahan))).forEach((e=>(t.push({piece:e.piece,landIndex:e.location.landIndex,boardIndex:e.location.boardIndex}),Promise.resolve()))),await e.addBlightToBlightCard(e.slowHealingBlight);const o=void 0!==e.blightCardActive?Math.max(e.blightOnBlightCard-(2*e.boardCount+1),0):0;e.config.finishWaveHistory={pieces:t,wave:e.config.startWaveHistory?.wave??1,usedSpirits:n,revealedBlightCards:r,blightPool:e.blightPool+o,blightOnBlightCard:e.blightOnBlightCard-o,assistance:a,blightStatus:e.blightStatus},await e.clickToContinue({text:"Post Game Setup finished."}),await e.sendEvent({type:Tn.GameEnd})}}})}},{[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.SecondWave,[Pn.PreventAddBlightInSetup]:async()=>{if((e.config.startWaveHistory?.wave??1)>1){if(!(e.blightPool>0))return!0;await e.removeBlightFromBlightPool(1)}return!1}})}},{[Pn.Now]:async({$:e})=>{if(void 0!==e.config.startWaveHistory){const{pieces:t,wave:n,revealedBlightCards:r,blightPool:i,blightOnBlightCard:s,assistance:o}=e.config.startWaveHistory,d=r.length>0?r[r.length-1]:void 0;for(const t of(a=r,[...a].reverse()))rr[t].stillHealthy||t===d?(e.blightCardsInDeck.remove(t),e.blightCardsInDeck.insert(t),e.addRevealedBlightCard()):await e.discardBlightCard(t);await e.addBlightToBlightPool(i),e.blightOnBlightCard<s?await e.addBlightToBlightCard(s-e.blightOnBlightCard):e.blightOnBlightCard>s&&await e.removeBlightFromBlightCard(e.blightOnBlightCard-s);const l=5-n;await e.forPieces().forEach((async e=>{e.isInvader?e.location.landNumber>=6&&l>0&&null!==e.location.board&&await e.moveTo({location:e.location.board.inLandNumber(e.location.landNumber-l),pieceFilter:Xn.Invader,movement:Mr.Relocate,withoutWait:!0}):await e.remove(Wn.Silent)}));for(const a of t)a.boardIndex<e.boardCount&&await e.boards[a.boardIndex].locations[a.landIndex].add(1,Xn[a.piece]);const c=[[],[],[5],[4,5],[3,4,5],[2,3,4,5],[1,2,3,4,5],[1,2,3,4,5,6]][Math.min(n,7)];await e.onEachBoard((async a=>{for(const t of c)await a.inLandNumber(t).add(1,e.Town)}));for(const a of o)e.removePowerCardFromDecks(a.power);await e.addSubEffect({text:'Once Stage III begins, the Power Cards set aside from the first game may be "played" (during a Spirit Phase as usual). They cost nobody any Energy or Card Plays, grant no Elements, and may target any land. Thresholds trigger if they require 10 or fewer Elements. Each one is discarded after one use (or at the end of the game, if playing further waves)',[Pn.Now]:async()=>{await e.addSubEffect({effectId:In.SecondWave,[Pn.AfterChangingInvaderDeck]:async()=>(3===e.stage&&(e.removeThisEffect(),await e.eachSpirit((async e=>{const a=o.find((a=>a.boardIndex===e.startingBoardIndex));void 0!==a&&await e.gainPower(a.power,{assisted:!0})}))),Promise.resolve())})}})}var a}}]},im={name:"Ward The Shores",set:gn.BranchAndClaw,difficulty:2,rules:[{name:"Ward The Shores",effects:[{text:"Once per turn, each Spirit may play a Power Card as Ward The Shores.<br><br>(See Scenario Card for details.)",[Pn.Now]:async({$:e})=>{await e.eachSpirit((async a=>{let t=null;await a.addExtraAction({effectId:In.WardTheShores,actionId:`WardTheShores${a.spirit}`,icon:"Ward",scenario:Nd.WardTheShores,enabled:()=>e.phase===Gi.GainEnergy&&null===t&&a.powersWhere((e=>e.isA(En.AnyCard)&&e.isInHand&&!e.isBlessed)).count>0,onActivate:async()=>{await e.addSubEffect({effects:[{scenario:Nd.WardTheShores,text:"Once per turn, each Spirit may play a Power Card as Ward the Shores.",prompt:"Pick Power to play as Ward The Shores.",[Pn.Now]:async()=>{await a.powersWhere((e=>e.isA(En.AnyCard)&&e.isInHand)).pickOne((async e=>{t=e.power;const n=a.powers.indexOf(e);await a.forgetPower(e.power,{silent:!0});const r=await a.gainPower(Ui.WardTheShores,{silent:!0,index:n});await r.play()}))}}]})}}),await e.addSubEffect({effectId:In.WardTheShores,[Pn.TimePasses]:async()=>{await e.eachSpirit((async()=>{const e=a.powers.findIndex((e=>e.power===Ui.WardTheShores));if(e>=-1&&await a.forgetPower(Ui.WardTheShores,{silent:!0}),null!==t){const n=await a.gainPower(t,{silent:!0,index:e>=-1?e:void 0});await n.setStatus(Md.Discarded),t=null}}))}})}))}},{text:"Once placed, each Warding Pattern grants Defend 3 in its land. They are destroyed any time <blight> is added to their land.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.WardTheShores,[Pn.DefendFromSpirits]:({land:a})=>3*a.numberOf(e.WardingPattern)})}},{text:"They are destroyed any time <blight> is added to their land.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.WardTheShores,[Pn.WhenAddingBlight]:async({blightedLands:a})=>{for(const t of a)t.has(e.WardingPattern)&&(await e.clickToContinue({highlightPieces:[t.piecesThatAre(e.WardingPattern).anyOne],highlightLocations:[t]}),await t.destroyAll(e.WardingPattern))}})}},{text:"Get out 4 Scenario Markers per player; these represent Warding Patterns. (If you run out of tokens, you can re-use destroyed / already-placed ones.)",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.WardTheShores,[Pn.AfterAddingPiece]:async()=>{for(;e.forPiecesThatIs(e.WardingPattern).count>4*e.boardCount;)await e.forPiecesThatIs(e.WardingPattern).pickOne((async e=>{await e.remove()}),{prompt:"Pick a Warding Pattern to remove"})}})}},{text:"The normal Fear-based Victory is not available. Instead: Terror 2+ There is a Warding Pattern in every Coastal land.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.WardTheShores,[Pn.GlobalReminder]:()=>({icon:`Patterns<br>${e.coastalLandsWithWardingPatterns} / ${e.coastalLands}`,scenario:Nd.WardTheShores,ongoing:!0}),[Pn.RemoveFearBasedVictory]:()=>!0,[Pn.WinCondition]:()=>e.terrorLevel>=2&&e.coastalLandsWithWardingPatterns===e.coastalLands?Bp.WardTheShores:null})}},{text:"After making the Fear Deck, put all remaining Fear Cards on the bottom.",[Pn.Now]:({$:e})=>(e.putAllFearCardsInDeckIntoLevel(3),Promise.resolve())},{text:"If they run out, reshuffle the deck.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.WardTheShores,[Pn.AfterFearDeckIsDecreasing]:async()=>{3===e.terrorLevel&&0===e.fearCardsInLevelCount[2]&&(await e.clickToContinue(),await e.reshuffleFearDeck(),e.putAllFearCardsInDeckIntoLevel(3))}})}},{name:"Stage III Surge",text:"During Stage III, Explore adds 1 <town> in addition to the usual 1 <explorer>.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.WardTheShores,[Pn.GlobalReminder]:()=>({icon:"+1 <town>",scenario:Nd.WardTheShores,ongoing:!0,visible:3===e.stage}),[Pn.AfterSuccessfulExplore]:async({land:a})=>{3===e.stage&&await a.add(1,e.Town)}})}}]}]},sm={name:"A Diversity of Spirits",set:gn.FeatherAndFlame,difficulty:0,rules:[{name:"Strength in Diversity",effects:[{text:"After Growth, if you added 1 or more <presence> to lands with other Spirit's <presence>: Gain 1 Energy or Reclaim 1 non-Major Power Card.",[Pn.Now]:async({$:e})=>{const a=[];await e.addSubEffect({effectId:In.ADiversityOfSpirits,[Pn.AfterAddingPiece]:({land:t,additions:n})=>{if(e.phase===Gi.Grow&&t.hasPresenceFromTwoDifferentSpirits)for(const e of n)e.piece.isPresence&&!a.includes(e.piece.owner)&&a.push(e.piece.owner);return Promise.resolve()},[Pn.AfterGrowth]:async()=>{for(const t of a)await t.doSpiritAction((async()=>{await e.chooseBetween({players:[t],effects:[{actionId:"Energy",text:"Gain 1 Energy.",[Pn.Now]:async()=>{await t.gainEnergy(1)}},{actionId:"Reclaim",text:"Reclaim 1 non-Major Power Card.",[Pn.Now]:async()=>{await t.reclaimCards({amount:1,filter:e=>e.isInDiscard&&e.isA(En.NonMajorCard)})}}]})}))}})}}]}]},om={name:"Varied Terrain",set:gn.FeatherAndFlame,difficulty:2,rules:[{name:"Mountains May Hide Gold",text:"Add +1 <explorer> when Exploring Mountains. (Including during Setup, if appropriate.)",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.VariedTerrain,[Pn.AfterSuccessfulExplore]:async({land:a})=>{a.isMountains&&(await e.sendEvent({type:Tn.GenericMain,text:"Invaders Explored into a <mountains>."}),await a.add(1,e.Explorer))},[Pn.GlobalReminder]:()=>({icon:"<mountains><br>+1 <explorer>",ongoing:!0})})}},{name:"Jungles Clear-Cut for Land",text:"After Invader Build 1 or More <city> in a Jungle, add 1 <blight> there.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.VariedTerrain,[Pn.AfterSuccessfulBuild]:async({land:a,additions:t})=>{a.isJungle&&t.some((a=>a.piece.isA(e.City)))&&(await e.sendEvent({type:Tn.GenericMain,text:"Invaders Built a <city> in a <jungles>."}),await a.addBlight(1))},[Pn.BuildOrderMatters]:()=>!0,[Pn.GlobalReminder]:()=>({icon:"<jungles><br><city>=<blight>",ongoing:!0})})}},{name:"Fragile Sands",text:"After Setup: <blight> added to Sands cascades as if <blight> were already present, even when it is not.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.VariedTerrain,[Pn.BlightAlwaysCascadesInLand]:({land:e})=>e.isSands,[Pn.GlobalReminder]:()=>({icon:"<sands><br>Cascade",ongoing:!0})})}},{name:"Fertile Wetlands",text:"After Invaders successfully Build in a Wetland, they Build there a second time.",[Pn.Now]:async({$:e,...a})=>{const t={triggerId:e.nextTriggerId(),[Pn.Now]:async({action:a})=>{await e.sendEvent({type:Tn.GenericMain,text:"Invaders Built in <wetlands>."}),await a.parentData.builtLand.doExtraBuild()}};await e.addSubEffect({effectId:In.VariedTerrain,[Pn.AfterSuccessfulBuild]:async n=>{n.land.isWetlands&&(e.action.data.builtLand=n.land,await e.addTrigger(t,a.effect,a.action))},[Pn.GlobalReminder]:()=>({icon:"<wetlands><br>Build",ongoing:!0})})}}]},dm={name:"Despicable Theft",set:gn.JaggedEarth,difficulty:2,rules:[{name:"Setup Changes",text:"Make a pool of 18 Scenario Markers: 12 blank ones and (1, 1, 1, 2, 2, 3). They represent small groups of Thieves trying to escape with knowledge of treasure. Mix them to form a face-down supply.",[Pn.Now]:async({$:e,...a})=>{let t=[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,3];const n=[],r=a=>{if(null!==a){if(a.numberOf(e.Thief)>=2&&a.numberOf(e.Dahan)<2&&!e.config.controlledFate){const t=a.piecesThatAre(e.Thief).items.map((e=>e.scenarioNumber));e.shuffle(t),a.piecesThatAre(e.Thief).items.forEach((e=>{e.scenarioNumber=t.pop()}))}a.piecesThatAre(e.Thief).items.forEach((e=>{e.placeInGroup()}))}},i={triggerId:e.nextTriggerId(),text:"Thieves can only be Destroyed/Removed/Replaced in lands with no <town>/<city> and 2 or more <dahan>. Otherwise, they elude you, and are instead Pushed.",[Pn.Now]:async({action:a})=>{for(const{piece:t,location:r,removement:i}of a.parentData.possiblyRemoveThieves??[])if(void 0!==r&&(e.someEffect(Pn.PreventRemovalEffects)||((a.parentData.landsWithoutTownOrCity??[]).includes(r)||r.doesntHave(e.TownOrCity))&&((a.parentData.landsWithAtLeast2Dahan??[]).includes(r)||r.hasAtLeast(2,e.Dahan))))n.push(t.thiefNumber),i!==Wn.Replace&&t.remove(Wn.Silent),await e.sendEvent({type:Tn.GenericSub,text:`A thief was ${wr[i].textPast} in ${r.coordinateLink}.`}),wr[i].isDestroyLike&&await e.generateFear({amount:1,location:void 0,fromDestroyingBuildings:!1});else if(i===Wn.Replace&&void 0!==t.location){const e=await t.replace([Ln.Thief]);e.added.length>0&&await e.added[0].piece.push()}else{const[{piece:e}]=await r.createPiece(1,Ln.Thief);e.scenarioNumber=t.thiefNumber,await e.push()}}};await e.addSubEffect({effects:[{effectId:In.DespicableTheft,name:"Arrive with <explorer>",text:"After Setup, when Invaders successfully Explore into a land numbered 6 or higher, also add 1 Thief there from the pool.",[Pn.GlobalReminder]:()=>({icon:`Thieves<br>${e.forPiecesThatIs(e.Thief).count}`,scenario:Nd.DespicableTheft,ongoing:!0}),[Pn.AfterSuccessfulExplore]:async({land:a})=>{if(!a.landNumbers.some((e=>e<6))&&t.length>0){const n=await a.add(1,e.Thief);if(n.length>0){const a=await e.drawFrom(t,t.map((e=>`${e}`)));n[0].piece.scenarioNumber=a}}}},{effectId:In.DespicableTheft,name:"Seek to Escape by Ship",text:"Before the Ravage Step, all Thieves on the island move 1 land towards their board's Ocean.",[Pn.BeforeRavageStep]:async()=>{await e.inLandsWith(e.Thief).forEach((async a=>{await e.doScenarioAction((async()=>{await a.piecesThatAre(e.Thief).forEach((async a=>{const t=a.location,r=t.inAdjacentLocations().where((e=>e.board===t.board&&e.distanceToThisBoardsOcean<t.distanceToThisBoardsOcean)),i=r.copy().where((e=>!t.isIsolated&&!e.isIsolated));if(r.count>0&&await r.pickOne((async e=>{await a.move({locations:{target:zn.ToThisLocation,location:e},pickDestinationEffect:{autoPlayOneOption:!0}})}),{highlightPieces:[a],highlightLocations:[a.location],noOptions:""},0===i.count),a.location?.isOcean){const t=a.scenarioNumber;await e.clickToContinue({noOptions:`A Thief ${t>0?`with number ${t}`:"without number "} escaped!`}),n.push(t),await a.remove(Wn.Silent),await e.loseFear(4);for(let a=0;a<t;a+=1)await e.accelerateTheInvaderDeck()}}))}))}))}},{effectId:In.DespicableTheft,text:"Thieves are face-down by default, but face-up while in lands with 2 or more <dahan>. If multiple face-down Thieves are in a single land, mix them up.",[Pn.AfterMoving]:({piece:a,source:t,destination:n})=>(a.isOneOf(e.Thief,e.Dahan)&&(r(t),r(n)),Promise.resolve()),[Pn.AfterAddingPiece]:({additions:a})=>{if(a.some((a=>a.piece.isOneOf(e.Thief,e.Dahan))))for(const e of Dr(a.map((e=>e.location))))r(e);return Promise.resolve()},[Pn.AnyActionStarts]:()=>(e.action.data.landsWithoutTownOrCity=e.inLocationsWhere((a=>a.doesntHave(e.TownOrCity))).items,e.action.data.landsWithAtLeast2Dahan=e.inLocationsWhere((a=>a.hasAtLeast(2,e.Dahan))).items,Promise.resolve()),[Pn.PreventRemovePiece]:async({piece:t,removement:n})=>!(!t.isA(e.Thief)||[Wn.Silent,Wn.Relocate].includes(n))&&(void 0===e.action.data.possiblyRemoveThieves&&(e.action.data.possiblyRemoveThieves=[]),e.action.data.possiblyRemoveThieves.push({piece:t,location:t.location,removement:n}),e.action.data.landsWithoutTownOrCity=[...e.action.data.landsWithoutTownOrCity??[],...e.action.parentData.landsWithoutTownOrCity??[]],e.action.data.landsWithAtLeast2Dahan=[...e.action.data.landsWithAtLeast2Dahan??[],...e.action.parentData.landsWithAtLeast2Dahan??[]],n!==Wn.Replace&&await t.remove(Wn.Silent),await e.addTrigger(i,a.effect,a.action,{priority:!0}),n!==Wn.Replace),[Pn.AfterRemovePiece]:({piece:a,location:t})=>(a.isOneOf(e.Thief,e.Dahan)&&r(t),Promise.resolve())},{effectId:In.DespicableTheft,text:"Mix Thieves no longer on the island into the supply at end of turn.",[Pn.TimePasses]:()=>(t=[...t,...n].sort(),Promise.resolve())}]})}}]},lm={name:"Elemental Invocation",set:gn.JaggedEarth,difficulty:1,rules:[{text:"On each board, add 1 <town> to land #6. Add 1 Fear Card to Terror Level 1. Accelerate the Invader Deck.",[Pn.Now]:async({$:e})=>{await e.addSubEffectUntilEndOfTurn({[Pn.BeforeSetupPresence]:async()=>{await e.clickToContinue(),await e.onEachBoard((async a=>{a.ignoreInvaderAndBlightInSetup||await a.inLandNumber(6).add(1,e.Town)})),await e.addFearCards(1).toLevel(1),await e.accelerateTheInvaderDeck()}})}},{text:"Once per Spirit Phase, each Spirit may pay Energy to place 1 Element Marker on a corner of one of their lands.<br><br>(See Scenario Card for details.)",[Pn.Now]:async({$:e})=>{await e.eachSpirit((async a=>{await a.addExtraAction({effectId:In.ElementalInvocation,actionId:`ElementalInvocation${a.spirit}`,icon:"Element",enabled:()=>e.phase===Gi.GainEnergy||e.phase===Gi.Grow,onActivate:async()=>{await e.addSubEffect({effects:[{[Pn.Now]:async()=>{const t=[...kd].filter((e=>a.elementsFromCards[e]>0)).map((e=>({actionId:e,text:`${Yw[e].text}`,[Pn.Now]:async()=>{await a.inCornersWhere((e=>void 0===e.element&&1+e.inAdjacentCorners().where((e=>void 0!==e.element)).count<=a.energy)).pickOne((async t=>{await a.payEnergy(1+t.inAdjacentCorners().where((e=>void 0!==e.element)).count),await t.setElement(e)}),{scenario:Nd.ElementalInvocation,prompt:"Pick a Corner",noOptions:"Cannot afford to add Element to any Corner.",text:'The cost is 1 Energy, +1 Energy per adjacent corner that already has an Element Marker. ("Adjacent" means "along land boundaries"'})}})));await e.chooseBetween({scenario:Nd.ElementalInvocation,text:"Spirit may only place Element Markers which they have on a Power Card in hand, play, or discard.",prompt:"Choose Element:",effects:t})}}]})}})}))}},{name:"Benefits of Elements",text:"When using a land-targeting Power, the Power gains all Elements on the target land's corners, so elemental thresholds can be reached more easily when targeting certain lands.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.ElementalInvocation,[Pn.AfterTargetingLands]:async({lands:a,owner:t})=>{if(e.config.scenario===Nd.ElementalInvocation){const e=Dr(a.map((e=>e.corners)).flat()),n={};let r=!1;for(const a of e)a.element&&(n[a.element]=(n[a.element]??0)+1,r=!0);r&&await t.gainElementsUntilEndOfAction(n)}}})}}]},cm=(e,a)=>(e%a+a)%a,hm={name:"The Great River",set:gn.JaggedEarth,difficulty:3,configurationError:e=>1===Dr(e.boards.map((e=>cm(e.rotation,6)))).length?void 0:"Invalid scenario Layout",rules:[{name:"Population Spills Across the River",text:"After the Build Step, Invaders Build in all Coastal land without <town>/<city> but with <explorer>.<br><br>After the Explore Step, Invaders Explore into all Coastal lands without <town>/<city>.",[Pn.GlobalReminder]:()=>({icon:"River",scenario:Nd.TheGreatRiver,ongoing:!0})},{name:"Population Spills Across the River",text:"After the Build Step, Invaders Build in all Coastal land without <town>/<city> but with <explorer>.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.TheGreatRiver,[Pn.AfterTheNormalBuildStep]:async()=>{await e.inCoastalLands().where((a=>a.doesntHave(e.TownOrCity)&&a.has(e.Explorer))).selectOrder().forEach((a=>e.doScenarioAction((async()=>{await a.doExtraBuild()}))),{noOptions:"No Coastal lands without <town>/<city> but with <explorer>."})}})}},{name:"Population Spills Across the River",text:"After the Explore Step, Invaders Explore into all Coastal lands without <town>/<city>.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.TheGreatRiver,[Pn.AfterTheNormalExploreStep]:async()=>{await e.inCoastalLands().where((a=>a.doesntHave(e.TownOrCity))).selectOrder().forEach((a=>e.doScenarioAction((async()=>{await a.doExtraExplore()}))),{noOptions:"No Coastal lands without <town>/<city>."})}})}},{name:"Additional Loss Condition",text:"If more than 3 <town> per player escape off the edge of the map, the Invaders win.<br><br>(See Scenario Card for details.)",[Pn.Now]:async({$:e})=>{const a=3*e.boardCount+1,t=De.box(0);await e.addSubEffect({effectId:In.TheGreatRiver,effects:[{[Pn.LossCondition]:()=>t.get()>=a?Ep.GreatRiver:null,[Pn.GlobalReminder]:()=>({icon:`Escaped<br>${t.get()} / ${3*e.boardCount+1}`,ongoing:!0,scenario:Nd.TheGreatRiver})},{name:"Relentless Migration Eastwards",text:"At the end of the <slow> phase, move each <town> one land Inland (farther away from the Ocean). Start with the most-Inland lands and work your way to the least-Inland.",[Pn.AfterSlowPhase]:async()=>{const a=[];for(;!e.gameEnded;){const n=e.inLands().where((t=>t.piecesThatAre(e.Town).hasOneWhere((e=>!a.includes(e))))).withMost((e=>e.distanceToNearestOcean)).selectOrder();if(0===n.count)break;await n.forEach((async n=>{await e.doScenarioAction((async()=>{const r=n.adjacentLandsSortedByNorthernmost(),i=r.copy().where((e=>e.distanceToNearestOcean>n.distanceToNearestOcean)),s=r.copy().where((e=>e.distanceToNearestOcean===n.distanceToNearestOcean));let o=0;await n.piecesThatAre(e.Town).where((e=>!a.includes(e))).selectOrder().forEach((async r=>{let d=null,l=!1;i.count>0?(d=i.items[o],o=(o+1)%i.count):n.isEastern||(d=s.items[o],o=(o+1)%s.count),(n.isIsolated||null!==d&&d.isIsolated)&&await e.may({highlightLocations:[n,...null!==d?[d]:[]],text:"Pay 1 Energy to use Isolation to prevent <town> from moving?"})&&(l=!0),l||(null===d?(t.set(t.get()+1),await r.remove(Wn.Silent),await e.sendEvent({type:Tn.GenericSub,text:"A <town> escaped over the eastern edge of its board!"})):await r.move({locations:{target:zn.ToThisLocation,location:d},pickDestinationEffect:{autoPlayOneOption:!0}})),a.push(r)}),{autoPlayOneOption:!0})}))}))}}}]})}}]},um={name:"Destiny Unfold",set:gn.NatureIncarnate,difficulty:-1,configurationError:e=>e.boards.filter((e=>void 0!==e.spirit)).length>=2?void 0:"Destiny Unfold requires at least 2 Players.",rules:[{name:"Setup Changes",text:"Before the initial Explore, each Spirit drafts Power Cards into their Destiny, in two rounds.<br><br>(See Scenario Card for details.)",[Pn.Now]:async({$:e})=>{await e.addSubEffectUntilEndOfTurn({[Pn.BeforeInitialExplore]:async()=>{if(!(e.spiritCount<3))for(let a=1;a<=2;a+=1){const t=3+a,n=3-a,r=2===a?1:-1,i=[];for(let a=0;a<e.spiritCount;a+=1){const a=[];i.push(a);for(const r of[kn.Major,kn.Minor])for(let i=0;i<(r===kn.Minor?t:n);i+=1){const t=await e.drawPower(r,{silent:!0});void 0!==t&&a.push(t)}}for(let a=0;a<5;a+=1){const a=[...i.map((e=>[...e]))];for(const e of i)e.length=0;for(let t=0;t<e.spiritCount;t+=1){const n=e.spirits[t],s=a[t];for(const a of s)await n.addExtraAction({actionId:`Draft${a}`,name:dg[a].name,required:!0,icon:"",text:"Pick this power card.",power:a,previewPowers:()=>({powers:s,selected:[s.indexOf(a)]}),onActivate:()=>{for(const a of s)e.removeEffectsWithName(dg[a].name);const o=s.filter((e=>e!==a));for(const a of o)i[(t+r+e.spiritCount)%e.spiritCount].push(a);return n.destinyPowers.push(a),Promise.resolve()}})}await e.playDraftActions((()=>"Each Spirit picks 1 Power Card and puts it in their Destiny face-down. When all Spirits have picked a Power Card, each Spirit passes their remaining Power Cards to the Spirit in the pass direction for that round."),(()=>"Pick Power Card"))}for(const a of i.flat())await e.discardPowerToDeckDiscard(a)}}})}},{name:"Destinies of Power",text:"Each Spirit has a Destiny (a supply of drafter Power Cards.). When a Spirit would gain a Power Card of their choice from their Destiny (following restrictions on the type of card gained.) If this is not possible, gain from a deck as normal.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.DestinyUnfold,[Pn.GlobalReminder]:()=>({icon:"Destiny",ongoing:!0}),[Pn.AdjustGainingPowers]:({spirit:e,powerType:a})=>{const t=e.destinyPowers.filter((e=>void 0===a||dg[e].type===a));return t.length>0?t:null}})}},{name:"Two-Player Variant",text:"Choose which Spirit will act first.",[Pn.Now]:async({$:e})=>{await e.addSubEffectUntilEndOfTurn({[Pn.BeforeInitialExplore]:async()=>{if(2!==e.spiritCount)return;const a=[...e.spirits];await e.fromAllSpirits().pickOne((e=>(e!==a[0]&&a.reverse(),Promise.resolve())));for(let t=1;t<=2;t+=1){const n=3+t,r=3-t,i=[[],[],[],[],[],[]];for(let a=0;a<e.spiritCount;a+=1){const t=[];for(const a of[kn.Major,kn.Minor])for(let i=0;i<(a===kn.Minor?n:r);i+=1){const n=await e.drawPower(a,{silent:!0});void 0!==n&&t.push(n)}const s=e.spirits[a];for(const n of t)await s.addExtraAction({actionId:`Draft${n}`,name:dg[n].name,required:!0,icon:"",text:"Pick this power card.",power:n,previewPowers:()=>({powers:t,selected:[t.indexOf(n)]}),onActivate:()=>{e.removeEffectsWithName(dg[n].name);const r=Math.floor((6-t.length)/2);return Vr(t,n),i[3*a+r].push(n),Promise.resolve()}})}await e.playDraftActions((()=>`Each Spirit splits their Power Cards into three face-down piles of 2 cards each. Once all six piles are ready, flip them all face-up.<br><br>${e.spirits[0].nameLink}: ${i[0].length}/2 - ${i[1].length}/2 - ${i[2].length}/2<br>${e.spirits[1].nameLink}: ${i[3].length}/2 - ${i[4].length}/2 - ${i[5].length}/2`),(()=>"Split Power Cards into piles.")),i.reverse();const s=[!1,!1],o=()=>{for(let a=0;a<6;a+=1)e.removeEffectsWithName(`Pile${a+1}`);e.removeEffectsWithName("Skip on last Piles")};for(const t of e.spirits){if(t.destinyPowers.length<10)for(let n=0;n<6;n+=1){const r=i[n];await t.addExtraAction({name:"Pile"+(6-n),actionId:"Pile"+(6-n),required:!0,icon:"Pile<br>"+(6-n),text:"Pick this pile.",enabled:()=>i.length>2?a[[0,0,1,1][6-i.length]]===t:s[0]?a[1]===t&&t.destinyPowers.length<10:a[0]===t&&t.destinyPowers.length<10,previewPowers:()=>({powers:i.flat(),selected:[2*i.indexOf(r),2*i.indexOf(r)+1]}),onActivate:()=>{e.removeEffectsWithName("Pile"+(6-n));for(const e of r)t.destinyPowers.push(e);return i.length<=2&&(s[a[0]===t?0:1]=!0,s[0]&&s[1]&&o()),Vr(i,r),Promise.resolve()}})}await t.addExtraAction({name:"Skip on last Piles",text:"In order, each Spirit may take a third pile.",actionId:`PileSkip${t.spirit}`,required:!0,enabled:()=>i.length<=2&&8!==t.destinyPowers.length&&(!s[0]&&a[0]===t||s[0]&&a[1]===t),icon:"Skip",onActivate:()=>(s[a[0]===t?0:1]=!0,s[0]&&s[1]&&o(),Promise.resolve())})}await e.playDraftActions((()=>"The first Spirit puts two piles into their Destiny, then the second Spirit puts two piles into their Destiny.<br>In order, each Spirit may take a third pile. Discard the unpicked Power cards to the Minor/Major discard piles."),(()=>" ."));for(const a of i.flat())await e.discardPowerToDeckDiscard(a);a.reverse()}}})}}]},gm={name:"Surges Of Colonization",set:gn.NatureIncarnate,difficulty:2,rules:[{name:"Setup Changes",text:"Resolve one extra Explore Card during the Initial Explore. (The game will start with two cards in the Build space.)",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.SurgesOfColonization,[Pn.AdjustNumberOfExploreCards]:()=>1,[Pn.AfterInitialExplore]:async()=>{e.removeThisEffect(),await e.explore()}})}},{name:"Distant Expeditions",text:"<explorer> are a source of Invaders for Explore Cards.",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.SurgesOfColonization,[Pn.GlobalReminder]:()=>({icon:"<explorer><br>Source"}),[Pn.LandIsExploringSource]:({land:a})=>a.has(e.Explorer)})}},{name:"Surges and Ebbs",text:"On even-numbered turns, resolve one extra Explore Card during the Explore step (usually 2 Explore Cards. On odd-numbered turns, skip the first normal Explore.",[Pn.Now]:async({$:e})=>{const a=new Set;await e.addSubEffect({effectId:In.SurgesOfColonization,[Pn.AdjustNumberOfExploreCards]:()=>e.turn>0&&e.turn%2==0?1:0,[Pn.AfterTheNormalExploreStep]:async()=>{e.turn>0&&e.turn%2==0&&!a.has(e.turn)&&(a.add(e.turn),0===e.invaderCardsInExploreDeck.length&&await e.addSubEffect({name:"Final Surge",text:"If there are not enough Invader Cards for the final Surges and Ebbs, use unused Stage III Invader Cards. If none are left, use the highest-Stage Invader Cards in the discard (chosen randomly). (You only lose when you need to reveal the normal Explore Card and can't.)",[Pn.Now]:async()=>{const a=e.unusedInvaderCardOfStage(3);let t=!1;if(0===a.length){const n=Dr(e.invaderDeckInSlot(ah.Discard).possibleCards.flat()),r=Vo(n,(e=>Uo[e].stage));a.push(...n.filter((e=>Uo[e].stage===r))),t=!0}if(a.length>0){const n=e.randomFromArray(a);await e.addExploreCardToTop([n]),t&&e.invaderDeckInSlot(ah.Discard).removeCard(e.invaderDeckInSlot(ah.Discard).cards.indexOf(n))}}}),await e.explore())}})}},{name:"Surges and Ebbs",text:"On even-numbered turns, resolve one extra Explore Card during the Explore step (usually 2 Explore Cards. On odd-numbered turns, skip the first normal Explore.",[Pn.Now]:async({$:e})=>{const a=new Set;await e.addSubEffect({effectId:In.SurgesOfColonization,[Pn.GlobalReminder]:()=>({icon:"Surges<br>Ebbs"}),[Pn.AdjustNumberOfExploreCards]:()=>e.turn%2==0?0:-1,[Pn.SkipNextExploreCard]:()=>e.turn%2!=1||a.has(e.turn)?Promise.resolve(!1):(a.add(e.turn),Promise.resolve(!0))})}}]},fm={name:"Larger Surges",set:gn.NatureIncarnate,difficulty:7,rules:[...gm.rules,{name:"Larger Surges (Higher Difficulty)",effects:[{text:"Add a Fear Card to each Terror Level during Setup.",[Pn.Now]:async({$:e})=>{for(let a=1;a<=3;a+=1)await e.addFearCards(1).toLevel(a)}},{text:"Surges and Ebbs resolves another extra Explore Card during the Explore Step on even-numbered turns. (Usually 3 Explore Cards).",[Pn.Now]:async e=>{await gm.rules[2][Pn.Now](e)}}]}]},ym={[Nd.Blitz]:Qp,[Nd.GuardTheIslesHeart]:Zp,[Nd.RitualsOfTerror]:ew,[Nd.DahanInsurrection]:Xp,[Nd.SecondWave]:rm,[Nd.PowersLongForgotten]:dw,[Nd.WardTheShores]:im,[Nd.RitualsOfTheDestroyingFlame]:cw,[Nd.ElementalInvocation]:lm,[Nd.DespicableTheft]:dm,[Nd.TheGreatRiver]:hm,[Nd.ADiversityOfSpirits]:sm,[Nd.VariedTerrain]:om,[Nd.DestinyUnfold]:um,[Nd.SurgesOfColonization]:gm,[Nd.LargerSurges]:fm};class pm{$;constructor(e){this.$=e}get difficulty(){return pm.difficulty(this.$.config)}static difficulty(e){let a=0;if(void 0!==e.adversaryLeading&&(a=Kp[e.adversaryLeading.adversary].levels[e.adversaryLeading.level].difficulty,void 0!==e.adversarySupporting)){const t=Kp[e.adversarySupporting.adversary].levels[e.adversarySupporting.level].difficulty;a=Math.max(a,t)+.5*Math.min(a,t)}void 0!==e.scenario&&(a+=ym[e.scenario]?.difficulty??0),e.thematic&&(a+=1,e.sets&&1===e.sets.length&&(a+=2)),e.archipelagos&&(a+=1);const t=e.boards.some((e=>e.spirit));if(e.boards.filter((e=>void 0===e.spirit&&(e.lockedEmpty||t))).length>0){const t=Math.floor(a/3)+2;a+=t,e.thematic&&(a-=t/2)}return a}static practiceGame(e){return e.boards.some((e=>!0===e.spirit?.progression))||e.skipInitialExplore||e.extraGrowth||e.controlledFate||!e.blightCards}toString(){return Pg({difficulty:this.difficulty},2)}}class wm{promise;rejecter;resolver;constructor(){this.promise=new Promise(((e,a)=>{this.resolver=e,this.rejecter=a}))}reject(e){this.rejecter?.(e)}resolve(e){this.resolver?.(e)}}var mm=function(e,a,t,n){var r,i=arguments.length,s=i<3?a:null===n?n=Object.getOwnPropertyDescriptor(a,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,a,t,n);else for(var o=e.length-1;o>=0;o--)(r=e[o])&&(s=(i<3?r(s):i>3?r(a,t,s):r(a,t))||s);return i>3&&s&&Object.defineProperty(a,t,s),s};class vm{cursorAtPlayPower=null;$;abortAtTurn;client;cursor=0;history=[];historyFinished;nextEventId=0;constructor(e,a){this.$=e,this.client=a}get currentHistory(){return this.history}get defaultPromptForQueryType(){return e=>{switch(e){case An.SelectLand:return"Pick a land.";case An.SelectGrowthOption:return;case An.SelectPowerType:return"Pick a Power type.";case An.SelectPowerToGain:return"Pick a Power Card to keep.";case An.SelectCard:return"Pick a Card.";case An.SelectHealingCard:return"Pick a Healing Card.";case An.SelectPower:return"Pick a Power.";case An.SelectTerrain:return"Pick a Terrain.";case An.PlayPower:return;case An.ChooseBetween:case An.PayJointly:return"Choose between:";case An.SelectSpirit:return"Pick a Spirit.";case An.SelectBoard:return"Pick a Board.";case An.SelectFearCard:return"Pick a Fear Card.";case An.SelectPiece:return"Pick a Piece.";case An.SelectCorner:return"Pick a Corner.";default:return"I'm not sure what you should do now..."}}}async chooseBetween(e,a){await this.$.addSubEffect({...e,effects:void 0,[Pn.Now]:async()=>{const t=void 0!==e.effects?e.effects.filter((({condition:e})=>void 0===e||e())):[];if(t.length>0)if(this.$.treatingAllOrsAsAnds&&a.orChoice)for(const e of t)await this.$.addSubEffectUntilEndOfTurn(e);else{const n=await this.query({query:a.payJointly?An.PayJointly:An.ChooseBetween,chooseBetween:e.effects,items:t,actionIds:t.map((e=>e.actionId)),...e});await this.$.addSubEffectUntilEndOfTurn(t[n])}else e.noOptions&&await this.$.clickToContinue({noOptions:e.noOptions})}})}async chooseFrom(e,a){let t=null;return await this.$.chooseBetween({name:"Controlled Fate",text:"Choose Option",effects:e.map(((n,r)=>({text:a[r],actionId:`Fate-Option-${r}`,[Pn.Now]:()=>(t=n,e.splice(r,1),Promise.resolve())})))}),t}closeDown(){this.client=void 0}async may(e,a=!1){let t=!0;return await this.chooseBetween({...e,effects:["No","Yes"].map((e=>({actionId:(a?"Fate-":"")+e,text:e,[Pn.Now]:()=>(t="Yes"===e,Promise.resolve())})))},{orChoice:!1,payJointly:!1}),t}possiblyResolveHistoryFinished(){return void 0!==this.abortAtTurn&&this.$.turn===this.abortAtTurn&&(this.history.length=this.cursor),this.cursor!==this.history.length&&!this.$.gameEnded||void 0===this.historyFinished||(this.historyFinished.resolve(this.history),this.historyFinished=void 0,this.abortAtTurn=void 0),Promise.resolve()}async query(e){return await this.queryInternal(e)}async queryOptional(e){return await this.queryInternal({...e,optional:!0})}async selectX(e,a,t={}){const{text:n,prompt:r,players:i}=t;let s=e;return await this.chooseBetween({prompt:r??"Select X.",effects:[...Array(a-e+1).keys()].map((a=>({actionId:`Select${e+a}`,text:`${e+a}`,[Pn.Now]:()=>(s=e+a,Promise.resolve())}))),text:n,players:i},{orChoice:!1}),s}async send(e){await this.possiblySendPhase(),await this.sendEvent(e)}setHistory(e,a){return this.history=[...e],this.abortAtTurn=a,this.cursor=0,this.historyFinished=new wm,this.historyFinished.promise}async waitForAnimationsToFinish(){await(this.client?.waitForAnimations())}async possiblySendPhase(){this.$.reportedPhase!==this.$.phase&&(this.$.updateReportedPhase(),await this.sendEvent({type:Tn.Phase,phase:this.$.phase,turn:this.$.turn}),this.$.phase===Gi.PlayPowers&&(this.cursorAtPlayPower=this.cursor))}async queryInternal(e){const a=!0===e.optional;if(this.$.gameEnded)return a?null:0;await this.possiblySendPhase();const{items:t,query:n,actionIds:r}=e;if(0===t.length){if(a)return null;throw new Error(`Non-optional query ${An[n]} without options.`)}if(1===t.length&&!a&&(e.autoPlayOneOption||void 0===e.autoPlayOneOption&&n===An.SelectBoard))return 0;let i;for(;i=await this.queryOrUseHistory(e,r,a),"Admin"===i;)await this.$.enterAdminMode();return"Skip"===i?null:r.includes(i)?r.indexOf(i):(await this.sendEvent({type:Tn.Error,text:`Invalid input: ${i}.`}),this.$.logErrors&&console.error(`Invalid response [2] ${i} to query: ${An[n]}. Valid options: [${a?"Skip, ":""}${r.join(", ")}]`),a?null:0)}async queryOrUseHistory(e,a,t){if(void 0===this.client)return new Promise((()=>{}));if(await this.possiblyResolveHistoryFinished(),this.cursor<this.history.length){const n=this.history[this.cursor];if("Admin"===n||t&&"Skip"===n||a.includes(n))return this.cursor+=1,n;this.history.length=this.cursor,await this.sendEvent({type:Tn.Error,text:`History doesn't match current client. Skipping rest of input: [${n}].`}),this.$.logErrors&&console.error(`Invalid response [1] ${n} to query: ${An[e.query]}. Valid options: [${t?"Skip, ":""}${a.join(", ")}]`),this.historyFinished?.resolve(this.history),this.historyFinished=void 0}const n={...this.$.currentStackEffect,...e};n.prompt=n.prompt??this.defaultPromptForQueryType(n.query),n.optional&&(n.cancel=n.cancel??"Skip"),n.cursor=this.cursor;const r=await this.client.query(n);return this.history.push(r),this.cursor+=1,r}async sendEvent(e){await(this.client?.send({id:this.nextEventId,time:this.cursor,data:e})),this.nextEventId+=1}}mm([De],vm.prototype,"cursorAtPlayPower",void 0);class xm{bringingWarrior=!1;hasAttemptedDamagingInvader=!1;hasAttemptedDestroyingInvader=!1;movedDahan=[];movedPresence=[];inInstruction=!1;async doInstruction(e){if(this.inInstruction)return e();{this.inInstruction=!0,this.hasAttemptedDamagingInvader=!1,this.hasAttemptedDestroyingInvader=!1,this.bringingWarrior=!1,this.movedDahan.length=0,this.movedPresence.length=0;const a=await e();return this.inInstruction=!1,a}}reportMovement(e){e.piece.isDahan&&this.movedDahan.push(e),e.piece.isPresence&&this.movedPresence.push(e),e.piece.piece===Ln.IncarnaWarrior&&e.movement===Mr.Bring&&(this.bringingWarrior=!0)}}class bm{nextPieceId=0;nextRandom=0;seed=0;constructor(e){this.seed=e??this.setRandomSeed()}drawFrom(e){const a=e.length>1?this.randomFromArray(e):e[0];return e.splice(e.indexOf(a),1),a}generatePieceId(){const e=this.nextPieceId;return this.nextPieceId+=1,e}random(){let e=2654435769,a=608135816,t=this.nextRandom;this.nextRandom=t+1;let n=this.seed,r=0;for(let i=0;i<15;i+=1){e>>>=0,a>>>=0,t>>>=0,n>>>=0;let i=e+a|0;e=a^a>>>9,a=t+(t<<3)|0,t=t<<21|t>>>11,n=n+1|0,i=i+n|0,t=t+i|0,r=(i>>>0)/4294967296}return r}randomFromArray(e){return e[Math.floor(this.random()*e.length)]}setRandomSeed(){return this.seed=Math.floor(9999999*Math.random()),this.seed}setSeed(e){this.seed=e}shuffle(e){return((e,a=Math.random)=>{const t=e.slice();for(let e=t.length-1;e>0;e-=1){const n=Math.floor(a()*(e+1));[t[e],t[n]]=[t[n],t[e]]}return t})(e,(()=>this.random()))}toString(){return Pg({seed:this.seed,nextRandom:this.nextRandom},2)}}var Tm=function(e,a,t,n){var r,i=arguments.length,s=i<3?a:null===n?n=Object.getOwnPropertyDescriptor(a,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,a,t,n);else for(var o=e.length-1;o>=0;o--)(r=e[o])&&(s=(i<3?r(s):i>3?r(a,t,s):r(a,t))||s);return i>3&&s&&Object.defineProperty(a,t,s),s};class Am{name;element;$;boardIndex;landIndex;constructor({$:e,boardIndex:a,landIndex:t,name:n}){ed.makeObservable(this),this.$=e,this.boardIndex=a,this.landIndex=t,this.name=n}get board(){return this.$.boards[this.boardIndex]}get index(){return cg(this.landIndex)}get isBoardCorner(){return 1===this.principleLocations.length}get isOnEdge(){return 2===this.touchingLocations.length}get principleLocations(){return this.landIndex.map((e=>this.$.boards[this.boardIndex].locations[e]))}get serialized(){return this.name}static createCollection(e,a){return new Ko(e,An.SelectCorner,a)}inAdjacentCorners(){return Am.createCollection(this.$,this.adjacentCorners)}inAdjacentLands(){return od.createCollection(this.$,this.touchingLands)}inAdjacentLocations(){return od.createCollection(this.$,this.touchingLocations)}setElement(e){return this.element=e,Promise.resolve()}get adjacentCorners(){return this.$.corners.filter((e=>{if(e!==this){const a=((e,a)=>{const t=new Set(e),n=[];for(const e of a)t.has(e)&&n.push(e);return n})(e.touchingLocations,this.touchingLocations);return(1!==a.length||a[0].type!==jo.Ocean)&&a.length>=((this.isOnEdge||this.isBoardCorner)&&(e.isOnEdge||e.isBoardCorner)?1:2)}return!1}))}get touchingLands(){return this.touchingLocations.filter((e=>e.type===jo.Land))}get touchingLocations(){const e=[...this.principleLocations];for(const a of this.principleLocations)for(const t of a.adjacentLands)e.includes(t)||this.isBoardCorner&&!t.sharesCornerWith(this.principleLocations[0])||t.boardIndex===this.boardIndex||this.principleLocations.some((e=>!t.isAdjacentTo(e)))||"NE_6_7_N"===this.name&&!this.board.locations[3].adjacentLands.some((e=>e.boardIndex===t.boardIndex))||"NE_6_7_E"===this.name&&!this.board.locations[7].adjacentLands.some((e=>e.boardIndex===t.boardIndex))||e.push(t);return e}}Tm([De],Am.prototype,"element",void 0);function Im(){return function(e,a,t){if(void 0===t.get)throw new Error("@memoize decorator can only be applied to getter methods.");const n=`_memoized_${a}`,r=`_memoized_reactive_${a}`,i=t.get;t.get=function(){if(ed.reactivity){const e=this[r];if(void 0===e){const e=i.call(this);return this[r]=De.box(e),e}const a=e.get();if(void 0===a){const a=i.call(this);return e.set(a),a}return a}{const e=this[n];if(void 0===e){const e=i.call(this);return this[n]=e,e}return e}}}}function Pm(e,...a){for(const t of a)if(ed.reactivity){const a=e[`_memoized_reactive_${t}`];void 0!==a&&a.set(void 0)}else e[`_memoized_${t}`]=void 0}var Sm=function(e,a,t,n){var r,i=arguments.length,s=i<3?a:null===n?n=Object.getOwnPropertyDescriptor(a,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,a,t,n);else for(var o=e.length-1;o>=0;o--)(r=e[o])&&(s=(i<3?r(s):i>3?r(a,t,s):r(a,t))||s);return i>3&&s&&Object.defineProperty(a,t,s),s};class Em{boardCount;boards;boardsUnused=[];theEndlessDark;corners;oceanIsAllowedForBlight=!1;$;elementsToMigrate=[];constructor(e){ed.makeObservable(this),this.$=e,this.boards=[],this.boardCount=this.$.config.boards.length,this.$.config.boards.forEach((({x:e,y:a,rotation:t,boardId:n})=>{this.boards.push(new nd(this.$,this.boards.length,e,a,t,n))})),this.corners=[],this.theEndlessDark=new od({$:e,boardIndex:-1,board:null,landIndex:-1,type:jo.EndlessDark})}get capitalSize(){return Vo(this.lands,(e=>e.numberOfBuildings))}get coastalLands(){return zo(this.locationsIncludingNonExisting,(e=>e.isCoastal&&!e.isOcean))}get coastalLandsWithCities(){return zo(this.locationsIncludingNonExisting,(e=>e.isCoastal&&e.hasCity))}get coastalLandsWithWardingPatterns(){return zo(this.locationsIncludingNonExisting,(e=>e.isCoastal&&!e.isOcean&&e.has(this.$.WardingPattern)))}get destroyedBoards(){return this.boards.filter((e=>e.destroyed))}get landElements(){const e={};return this.corners.forEach((a=>{a.element&&(e[a.element]=(e[a.element]??0)+1)})),e}get lands(){const e=[];return this.nonDestroyedBoards.forEach((a=>{e.push(...a.landsExcludingExtraLocations)})),this.theEndlessDark.exists&&this.theEndlessDark.isLand&&e.push(this.theEndlessDark),e}get locations(){const e=[];return this.nonDestroyedBoards.forEach((a=>{e.push(...a.existingLocations)})),this.theEndlessDark.exists&&e.push(this.theEndlessDark),e}get locationsIncludingNonExisting(){const e=[];return this.nonDestroyedBoards.forEach((a=>{e.push(...a.locations,this.theEndlessDark)})),e}get mayTargetTheEndlessDark(){return this.$.someEffect(Pn.MayTargetTheEndlessDark)}get nonDestroyedBoards(){return this.boards.filter((e=>!e.destroyed))}get pieceCountIncludingStasis(){return e=>_o(this.locationsIncludingNonExisting,(a=>a.numberOf(e)))}get pieces(){const e=[];return this.locations.forEach((a=>{e.push(...a.pieces)})),e.sort(((e,a)=>e.id-a.id)),e}get strippedLandSize(){return Vo(this.lands,(e=>e.numberOfBlight+e.numberOfInvaders))}get targetableLands(){const e=[];return this.nonDestroyedBoards.forEach((a=>{e.push(...a.landsExcludingExtraLocations,...this.theEndlessDark.exists&&this.mayTargetTheEndlessDark?[this.theEndlessDark]:[])})),e}async addBoard(e){const a=await this.randomUnusedBoard();if(null===a)return null;const t=new nd(this.$,this.boards.length,e.x,e.y,e.rotation,a);return this.boards.push(t),t}async afterPiecesAreAddedOrMovedAddTrigger(e){const{reminder:a=!0,permanent:t=!1,globalReminder:n,locationFilter:r=(()=>!0),pieces:i=Xn.AllPieces,trigger:s,effect:o,action:d,owner:l,removeAfterTrigger:c=!1}=e;await this.$.addSubEffect({expireAtEndOfTurn:!t,[Pn.Reminder]:a?e=>r(e)&&o.text?o.text:void 0:void 0,[Pn.GlobalReminder]:n,[Pn.AfterAddingPiece]:async e=>{const a=e.additions.map((e=>e.piece)).filter((e=>e.isA(i)&&(void 0===l||e.owner===l)));r(e.land)&&a.length>0&&(void 0===this.$.action.data.piecesAddedOrMoved&&(this.$.action.data.piecesAddedOrMoved=[]),this.$.action.data.piecesAddedOrMoved=Dr([...this.$.action.data.piecesAddedOrMoved,...a]),await this.$.addTrigger(s,o,d),c&&this.$.removeThisEffect())},[Pn.AfterMoving]:async e=>{r(e.destination)&&e.piece.isA(i)&&e.movement!==Mr.Relocate&&(void 0===this.$.action.data.piecesAddedOrMoved&&(this.$.action.data.piecesAddedOrMoved=[]),this.$.action.data.piecesAddedOrMoved.push(e.piece),await this.$.addTrigger(s,o,d,{movingAction:this.$.action}))}})}async build(e=ah.Build){await this.forEachCardInSlot(e,(async a=>{await this.buildFromCard(a,e)}))}async buildFromCard(e,a,t={}){const{noIntro:n=!1}=t;await this.$.oneEffectActivates(Pn.SkipNextBuildCard)?await this.$.clickToContinue({name:"Build",text:`The Build in ${Uo[e].text} is skipped.`,card:e}):await this.$.addEffect({name:"Build",text:`The Invaders Build in ${Uo[e].text}.`,card:e,[Pn.Now]:async()=>{await this.$.sendEvent({type:Tn.InvadersBuild,cardSlot:a===ah.Ravage?ah.Build:a,invaderCard:e}),n||await this.$.clickToContinue(),await this.$.escalate(e,{beforeBuilding:!0}),await this.$.doEffects(Pn.BeforeResolvingInvaderCard,{card:e,invaderAction:qr.Build,normal:a===ah.Build});const t=this.inLandsWhere((a=>a.matchesInvaderCard(e,qr.Build)&&(a.has(Xn.Invader)||a.buildCardsAffectLandsWithoutInvaders)));this.$.buildOrderMatters&&t.selectOrder(),await t.forEach((async t=>{a===ah.Build?t.isMiningLand&&this.$.miningLandsCauseRavageActions?await t.ravage({normal:!0,card:e,calculateDoNotParticipateInRavage:!0}):await t.doNormalBuild(e):await t.doExtraBuild(e)}),{noOptions:"No lands to build in."}),await this.$.doEffects(Pn.AfterResolvingBuildCard,{card:e,normal:a===ah.Build})}})}async doAdversaryActionOnEachBoard(e){const{forEach:a,where:t=(()=>!0),effect:n,withoutAction:r=!1}=e;await this.$.doEffects(Pn.BeforeAdversaryActionsOnEachBoard),await this.$.inBoardsWhere(t).forEach((async e=>{e.preventAdversaryActions||(r?await a(e):await this.$.doAdversaryAction((async()=>{await a(e)}),{board:e}))}),n),await this.$.doEffects(Pn.AfterAdversaryActionsOnEachBoard)}async doExtraBuildInTerrain(e){await this.$.addEffect({name:"Build",text:`The Invaders Build in ${zg[e].text}.`,card:e,[Pn.Now]:async()=>{await this.$.sendEvent({type:Tn.InvadersBuildInTerrain,terrain:e}),await this.$.clickToContinue();const a=this.inLandsWhere((a=>a.hasTerrain(e)&&(a.has(Xn.Invader)||a.buildCardsAffectLandsWithoutInvaders)));await a.forEach((e=>e.doExtraBuild()),{noOptions:"No lands to build in."})}})}async doExtraRavageInTerrain(e){await this.$.addEffect({name:"Ravage",text:`Ravage in ${zg[e].text}.`,[Pn.Now]:async()=>{await this.$.sendEvent({type:Tn.InvadersRavageInTerrain,terrain:e});const a=this.inLandsWhere((a=>a.hasTerrain(e)&&a.has(Xn.Invader)));await a.forEach((async e=>{await e.calculateDoNotParticipateInRavage()}));const t=a.where((e=>e.participatingInvaders().count>0));for(const e of a.items)t.has(e)||await e.resetDoNotParticipateInRavage();await t.selectOrder().forEach((e=>e.doExtraRavage({calculateDoNotParticipateInRavage:!1})),{noOptions:"No lands to ravage in."})}})}existLandWhere(e){return this.lands.some(e)}existLocationIncludingNonExistingWhere(e){return this.locationsIncludingNonExisting.some(e)}async explore(){if(await this.$.oneEffectActivates(Pn.SkipNextExploreCard))return;const e=await this.$.drawNextExploreCard();if(!this.$.gameEnded&&null!==e){const a=Uo[e];await this.$.addEffect({name:0===this.$.turn?"Initial Explore":"Explore",text:`The Invaders Explore in ${a.text}.`,card:e,[Pn.Now]:async()=>{await this.$.clickToContinue(),await this.$.escalate(e,{beforeExplore:!0}),await this.$.doEffects(Pn.BeforeResolvingInvaderCard,{card:e,invaderAction:qr.Explore,normal:!0});const a=this.inLandsWhere((a=>a.matchesInvaderCard(e,qr.Explore)&&a.hasExploringSource));this.exploreOrderMatters(e)&&a.selectOrder(),await a.forEach((async a=>{await a.doNormalExplore(e)}),{noOptions:"No lands to explore into."}),await this.$.escalate(e,{afterExplore:!0}),await this.$.doEffects(Pn.AfterResolvingExploreCard,{card:e,normal:!0})}})}}exploreOrderMatters(e){return this.$.someEffect(Pn.ExploreOrderMatters,{card:e})}async forEachLand(e){for(const a of this.lands)await e(a)}forPieces(){return td.createCollection(this.$,this.pieces)}forPiecesWhere(e){return this.forPieces().where(e)}async globalHealthCheck(){await this.forEachLand((async e=>{await e.healthCheck()}))}inBoards(){return nd.createCollection(this.$,this.nonDestroyedBoards)}inBoardsWhere(e){return this.inBoards().where(e)}inBoardsWith(e){return this.inBoardsWhere((a=>a.hasOneLandWith(e)))}inBoardsWithout(e){return this.inBoardsWhere((a=>!a.hasOneLandWith(e)))}inCorners(){return Am.createCollection(this.$,this.corners)}inCornersWhere(e){return this.inCorners().where(e)}inLands(){return od.createCollection(this.$,this.lands)}inLandsWhere(e){return this.inLands().where(e)}inLandsWith(e){return this.inLands().where((a=>a.has(e)))}inLandsWithAllOf(...e){return this.inLands().where((a=>a.hasAllOf(...e)))}inLandsWithOneOf(...e){return this.inLands().where((a=>a.hasOneOf(...e)))}inLandsWithOrAdjacentTo(e){return this.inLandsWhere((a=>a.hasOrIsAdjacentToLandsWith(e)))}inLandsWithStrife(){return this.inLands().where((e=>e.hasStrife))}inLandsWithout(e){return this.inLands().where((a=>a.doesntHave(e)))}inLocations(){return od.createCollection(this.$,this.locations)}inLocationsWhere(e){return this.inLocations().where(e)}inTargetableLands(){return od.createCollection(this.$,this.targetableLands)}inTargetableLandsWhere(e){return this.inTargetableLands().where(e)}invaders(){return this.forPieces().where((e=>e.isInvader))}async invadersHaveMinusOneHealthPerStrife(){await this.$.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({icon:"-1 HP<br>per <strife>"}),[Pn.AdjustHealth]:({piece:e})=>e.isInvader?-e.strife:0,[Pn.AfterAddingStrife]:async({piece:e})=>{await e.location.healthCheck()}}),await this.$.globalHealthCheck()}invalidateBoardCache(){Pm(this,"locations","locationsIncludingNonExisting","nonDestroyedBoards")}migrateCornerCornersFromBoard(e){this.elementsToMigrate=[];for(const a of this.corners)if(a.board===e&&a.isBoardCorner&&void 0!==a.element){const t=a.inAdjacentLocations().where((a=>a.board!==e)).items;t.length>0&&this.elementsToMigrate.push({land:t[0],element:a.element})}}async onEachBoard(e,a={}){const{selectOrder:t=!1}=a;if(t&&this.nonDestroyedBoards.length>1)await this.inBoards().selectOrder().forEach(e,{autoPlayOneOption:!0});else for(const a of this.nonDestroyedBoards)await e(a)}async pickTerrainsWhere(e,a){const t=[Io.Jungles,Io.Mountains,Io.Sands,Io.Wetlands].filter(e);if(0===t.length)return a?.noOptions&&await this.$.clickToContinue(a),null;return t[await this.$.query({query:An.SelectTerrain,items:t,actionIds:t,...a})]}piecesThatAre(e){return this.forPiecesWhere((a=>a.isA(e)))}randomUnusedBoard(){const e=Object.keys($o).filter((e=>$o[e].thematic===!!this.$.config.thematic&&!this.boards.some((a=>a.board===e))));return 0===e.length?Promise.resolve(null):this.$.drawFrom(e,e.map((e=>$o[e].name)))}async ravage(){await this.forEachCardInSlot(ah.Ravage,(async e=>{await this.$.oneEffectActivates(Pn.SkipNextRavageCard,{card:e})||await this.$.addEffect({name:"Ravage",text:`The Invaders Ravage in ${Uo[e].text}.`,card:e,[Pn.Now]:async()=>{await this.$.sendEvent({type:Tn.InvadersRavage,invaderCard:e}),await this.$.clickToContinue(),await this.$.doEffects(Pn.BeforeResolvingInvaderCard,{card:e,invaderAction:qr.Ravage,normal:!0});const a=this.inLandsWhere((a=>a.matchesInvaderCard(e,qr.Ravage)&&a.has(this.$.Invader)));await a.forEach((async e=>{await e.calculateDoNotParticipateInRavage()}));const t=this.inLandsWhere((a=>a.matchesInvaderCard(e,qr.Ravage)&&a.participatingInvaders().count>0));for(const e of a.items)t.has(e)||await e.resetDoNotParticipateInRavage();await t.selectOrder().forEach((a=>a.ravage({normal:!0,card:e,calculateDoNotParticipateInRavage:!1})),{noOptions:"No lands to ravage in."}),await this.$.doEffects(Pn.AfterResolvingRavageCard,{card:e,normal:!0})}})}))}async removeInvadersWorthOfHealthUpTo(e){const a=[],t=this.invaders().where((a=>a.health<=e&&a.targetable));return await t.optionallyPickOne((async t=>{a.push(...await t.remove()),a.push(...await this.removeInvadersWorthOfHealthUpTo(e-t.health))}),{prompt:`${e} health left to remove.`}),a}setCorners(e){const a=[...this.corners];this.corners=e;for(const t of a)if(void 0!==t.element){const a=this.corners.find((e=>e.name===t.name));if(void 0!==a)a.element=t.element;else if(t.isBoardCorner){const a=e.find((e=>e.isBoardCorner&&t.inAdjacentLocations().has(e.principleLocations[0])));void 0!==a&&(a.element=t.element)}}this.elementsToMigrate.forEach((({land:e,element:a})=>{const t=e.corners.find((e=>e.isBoardCorner));void 0!==t&&(t.element=a)}))}async setupStartingTokens(){!this.$.config.sets.includes(gn.BranchAndClaw)&&!this.$.config.sets.includes(gn.JaggedEarth)||this.$.config.thematic||await this.onEachBoard((async e=>{await(e.lowestNumberedLand((e=>!e.hasSetupSymbols))??e.lowestNumberedLand()).add(1,this.$.Beasts),await e.inLandNumber(2).add(1,this.$.Disease)}))}async splittedDamage(e){const{amount:a,lands:t,effect:n}=e;await this.forPiecesWhere((e=>e.isInvader&&null!==e.location&&t.includes(e.location))).pickMultiple({amount:a,where:e=>e.isAlive,forPickedItem:async e=>{await e.damageOnlyThis(1,this.$.Invader)},repeatSame:!0,effect:n})}toString(){return Pg({boards:this.boards,boardsUnused:Yo(this.boardsUnused,(e=>$o[e].name)),boardCount:this.boardCount},2)}async forEachCardInSlot(e,a){for(const t of this.$.invaderCardsInSlot(e))await a(t)}}Sm([De],Em.prototype,"boards",void 0),Sm([De],Em.prototype,"corners",void 0),Sm([Im()],Em.prototype,"destroyedBoards",null),Sm([Im()],Em.prototype,"locations",null),Sm([Im()],Em.prototype,"locationsIncludingNonExisting",null),Sm([Im()],Em.prototype,"nonDestroyedBoards",null);const Om=[[1,-1],[1,0],[0,1],[-1,1],[-1,0],[0,-1]],km=[[[2,0,3],[2,-1,1],[2,0,0]],[[-1,2,5],[0,2,3],[-1,2,2]],[[-2,0,0],[-2,1,4],[-2,0,3]]],Cm=[[[-2,2,3],[-2,1,5],[-2,2,0]],[[1,1,1],[0,2,3],[1,1,4]],[[2,-2,0],[2,-1,2],[2,-2,3]]],Dm=[[1,-1],[1,1],[-1,1],[-1,-1]],Bm=[[-1,0],[-1,2],[1,0],[1,-2]];class Lm{$;constructor(e){this.$=e,this.setupAdjacencies(),this.setupCorners()}static archipelagoConnections(e){return e.boards.map((a=>{if(!e.archipelagos)return null;const t=a.x,n=a.y,r=a.rotation,i=Om[cm(r,6)],s=Om[cm(r+1,6)],o=e.boards.findIndex((r=>{if(r!==a){const a=r.x,o=r.y,d=r.rotation,l=Om[cm(d,6)],c=Om[cm(d+1,6)],h=[[0,-1,0,-2],[0,-2,0,-1],e.thematic?[-1,0,0,-2]:[1,-1,0,-2],e.thematic?[0,-2,-1,0]:[0,-2,1,-1]].map((([e,r,d,h])=>{const u=t+e*i[0]+r*s[0],g=n+e*i[1]+r*s[1],f=a+d*l[0]+h*c[0],y=o+d*l[1]+h*c[1];return u===f&&g===y}));return h[0]&&h[1]||h[2]&&h[3]||h[4]&&h[5]}return!1}));return o>=0?o:null}))}static isPositionValidForBoard(e,a,t){const{boards:n,thematic:r}=e,i=Math.round(a.x),s=Math.round(a.y),o=a.rotation,d=Om[cm(o,6)],l=Om[cm(o+1,6)],c=[[0,0],r?[1,0]:[1,1],r?[1,-2]:[1,-1],[0,-1],r?[-1,0]:[-1,-1],r?[-1,2]:[-1,1]],h=[r?[1,-1]:[1,0],[0,1],r?[-1,1]:[-1,0],[0,-1]];return!n.some(((e,a)=>{if(a===t)return!1;const n=e.x,u=e.y,g=e.rotation,f=Om[cm(g,6)],y=Om[cm(g+1,6)];for(let e=0;e<2;e+=1)for(const[a,t]of 0===e?c:h){const r=i+a*d[0]+t*l[0],o=s+a*d[1]+t*l[1];for(const[a,t]of 0===e?h:c){const e=n+a*f[0]+t*y[0],i=u+a*f[1]+t*y[1];if(r===e&&o===i)return!0}}const p=Math.abs(cm(o,6)-cm(g,6));if(0!==p&&1!==p&&5!==p){const e=[r?[-1,0,1,-2]:[1,-1,-1,-1],r?[1,-2,-1,0]:[-1,-1,1,-1]].map((([e,a,t,r])=>{const o=i+e*d[0]+a*l[0],c=s+e*d[1]+a*l[1],h=n+t*f[0]+r*y[0],g=u+t*f[1]+r*y[1];return o===h&&c===g}));if(e[0]||e[1])return!0}return!1}))}static randomizeLayout(e){const a=e.boards.length,t=e.boards,n=e.thematic?Cm:km,r=a>=4?4:3,i=a>=5?3:2,s=(a,t,n,s,o,d)=>{const l={x:a+s*Om[cm(n,6)][0]+o*Om[cm(n+1,6)][0],y:t+s*Om[cm(n,6)][1]+o*Om[cm(n+1,6)][1],rotation:cm(n+d,6)};return Lm.isPositionValidForBoard(e,l,-1)&&l.x>=-r&&l.x<=r&&l.y>=-i&&l.y<=i?l:null};for(let r=0;r<1e4;r+=1){e.boards=[{...t[0],x:0,y:0,rotation:a>1?Math.floor(6*Math.random()):0}];for(let r=1;r<a;r+=1){const a=[];for(let t=0;t<r;t+=1){const{x:r,y:i,rotation:o}=e.boards[t];for(let e=0;e<3;e+=1)for(let t=0;t<3;t+=1){const[d,l,c]=n[e][t],h=s(r,i,o,d,l,c);null!==h&&a.push(h)}e.archipelagos&&[[0,-3],e.thematic?[-1,-2]:[1,-3]].forEach((([e,t])=>{const n=s(r,i,o,e,t,3);null!==n&&(a.push(n),a.push(n),a.push(n))}))}if(!(a.length>0))break;e.boards.push({...t[e.boards.length],...a[Math.floor(Math.random()*a.length)]})}if(e.boards.length===a&&(!e.archipelagos||1===a||Lm.archipelagoConnections(e).filter((e=>null!==e)).length>(a>=4?2:1)))break}}randomFreePositionFromBoard(e){const a=this.$.config.thematic?Cm:km,{x:t,y:n,r}=e.position,i=[];for(let e=0;e<3;e+=1)for(let s=0;s<3;s+=1){const[o,d,l]=a[e][s],c={x:t+o*Om[cm(r,6)][0]+d*Om[cm(r+1,6)][0],y:n+o*Om[cm(r,6)][1]+d*Om[cm(r+1,6)][1],rotation:cm(r+l,6)};Lm.isPositionValidForBoard(this.$.config,c,-1)&&i.push(c)}return i.length>0?this.$.drawFrom(i,i.map(((e,a)=>`${a}`))):Promise.resolve(null)}setupAdjacencies(){this.$.locations.forEach((e=>{e.adjacentLocations.length=0,e.locationsWithinBase.length=0,e.exists&&e.boardData&&e.boardData.adjacency[e.landIndex].forEach((a=>{const t=this.$.boards[e.boardIndex].locations[a];t.exists&&e.adjacentLocations.push(t)}))})),this.$.boards.forEach((e=>{e.boardDistance=this.$.boards.map((a=>a===e?0:null))}));for(const e of this.$.effectsMappedWithFilter(Pn.ExtraAdjacency))for(const{land1:a,land2:t}of e)a.exists&&t.exists&&(a.adjacentLocations.push(t),t.adjacentLocations.push(a),a.boardIndex!==t.boardIndex&&(a.board.boardDistance[t.boardIndex]=0,t.board.boardDistance[a.boardIndex]=0));const e=this.$.config.thematic?Cm:km;this.$.nonDestroyedBoards.forEach((a=>{const{x:t,y:n,r}=a.position;for(let i=0;i<3;i+=1)for(let s=0;s<3;s+=1){const[o,d,l]=e[i][s],c=t+o*Om[cm(r,6)][0]+d*Om[cm(r+1,6)][0],h=n+o*Om[cm(r,6)][1]+d*Om[cm(r+1,6)][1],u=cm(r+l,6),g=this.$.nonDestroyedBoards.find((e=>{const{x:a,y:t,r:n}=e.position;return a===c&&t===h&&cm(n,6)===cm(u,6)}));if(g){const e=a.data.outerBorders[i],t=g.data.outerBorders[s];a.boardDistance[g.boardIndex]=0;const n=a.data.terrain.map((()=>new Set));for(let a=0;a<7;a+=1)a>0&&n[e[a]].add(t[7-a]),n[e[a]].add(t[6-a]);n.forEach(((e,t)=>{a.locations[t].adjacentLocations.push(...Array.from(e).map((e=>g.locations[e])).filter((e=>e.exists)))}))}}}));const a=this.$.config.thematic?Bm:Dm,t=[];this.$.nonDestroyedBoards.forEach((e=>{a.forEach((([a,n],r)=>{const{x:i,y:s,r:o}=e.position,d=Om[cm(o,6)],l=Om[cm(o+1,6)],c=i+d[0]*a+l[0]*n,h=s+d[1]*a+l[1]*n,u=e.data.outerBorders[r<3?r:2][r<3?0:e.data.outerBorders[2].length-1],g=e.locations[u];t.push({x:c,y:h,land:g})}))}));for(const e of t)for(const a of t)e!==a&&e.x===a.x&&e.y===a.y&&(e.land.isAdjacentTo(a.land)||e.land.exists&&a.land.exists&&(e.land.adjacentLocations.push(a.land),e.land.board.boardDistance[a.land.board.boardIndex]=0));const n=Lm.archipelagoConnections(this.$.config);this.$.locations.forEach((e=>{const{locationsWithinBase:a}=e;let t=new Set([e]);for(;0===a.length||t.size>a[a.length-1].length;){a.push(Array.from(t));const e=new Set;a[a.length-1].forEach((a=>{[a,...a.adjacentLocations].forEach((a=>e.add(a)))})),this.$.config.archipelagos&&a.length>=2&&a[a.length-2].forEach((a=>{if(a.isCoastal){let t=n[a.boardIndex];if(null===t&&(t=n.findIndex((e=>e===a.boardIndex))),null!==t&&t>=0)for(const n of this.$.boards[t].lands)n.isCoastal&&(0!==a.board.boardDistance[n.board.boardIndex]&&(a.board.boardDistance[n.board.boardIndex]=1),e.add(n))}})),t=e}}));const r=(e=>{const a=e.length,t=[...e];for(let e=0;e<a;e+=1)for(let n=0;n<a;n+=1)for(let r=0;r<a;r+=1)if(null!==t[n][e]&&null!==t[e][r]){const a=t[n][e]+t[e][r];(null===t[n][r]||a<t[n][r])&&(t[n][r]=a)}return t})(this.$.boards.map((e=>e.boardDistance)));this.$.boards.forEach(((e,a)=>{e.boardDistance=r[a]}))}setupCorners(){const e={},a=(a,...t)=>{const n=`${t[0].board.name}_${t.map((e=>e.landNumber)).sort().join("_")}${a}`;void 0===e[n]&&(e[n]=new Am({$:this.$,boardIndex:t[0].boardIndex,landIndex:t.map((e=>e.landIndex)),name:n}))};for(const e of this.$.locations)if(e.exists)for(const t of e.adjacentLocations)if(t.board===e.board){for(const n of e.adjacentLocations)n.board===e.board&&t!==n&&t.isAdjacentTo(n)&&a("",e,t,n);e.isNorthern&&t.isNorthern&&a("_N",e,t),e.isEastern&&t.isEastern&&a("_E",e,t),e.isSouthern&&t.isSouthern&&a("_S",e,t),e.isWestern&&t.isWestern&&a("_W",e,t)}for(const e of this.$.nonDestroyedBoards)for(const t of e.inCornerLands().items){const n=t.inAdjacentLocations().where((a=>a.exists&&a.board!==e));if(n.count>0){const e=[t,...n.items.filter((e=>e.isCornerLand&&e.sharesCornerWith(t)))].sort(((e,a)=>e.coordinate.localeCompare(a.coordinate)))[0];let r="";e.isNorthern&&(r+="_N"),e.isEastern&&(r+="_E"),e.isSouthern&&(r+="_S"),e.isWestern&&(r+="_W"),a(r,e)}}this.$.setCorners(Object.values(e))}}var Fm,Rm=function(e,a,t,n){var r,i=arguments.length,s=i<3?a:null===n?n=Object.getOwnPropertyDescriptor(a,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,a,t,n);else for(var o=e.length-1;o>=0;o--)(r=e[o])&&(s=(i<3?r(s):i>3?r(a,t,s):r(a,t))||s);return i>3&&s&&Object.defineProperty(a,t,s),s};class Mm{isInAdmin=!1;$;constructor(e){ed.makeObservable(this),this.$=e}async enterAdminMode(){const e=this.$,a={c:!0};await this.$.addEffect({name:"Admin Mode",text:"Note: Using Admin Mode will disable achievements.",[Pn.Now]:async()=>{this.isInAdmin=!0,await e.doGameAction((async()=>{for(;a.c;)await e.chooseBetween({effects:[...[e.Badlands,e.Beasts,e.Disease,e.Wilds,e.Dahan,e.Explorer,e.Town,e.City,e.Blight].map((a=>({actionId:a,label:Zn[a].text,[Pn.Now]:async()=>{await e.inLands().pickMultiple({optional:!0,repeatSame:!0,forPickedItem:async t=>{a===e.Blight?await t.addBlight(1):await t.add(1,a)},effect:{text:`Add any ${Zn[a].text}.`}})}}))),{actionId:"Strife",label:"<strife>",text:"Add any <strife>.",[Pn.Now]:async()=>{await e.forPiecesThatIs(e.Invader).pickMultiple({optional:!0,repeatSame:!0,forPickedItem:async e=>{await e.addStrife()}})}},{actionId:"Presence",label:"<presence>",text:"Add any <presence>.",[Pn.Now]:async()=>{await e.fromAllSpirits().pickMultiple({optional:!0,repeatSame:!0,forPickedItem:async e=>{await e.addPresence({locations:zn.AnyLands})}})}},{actionId:"Move",label:"Move pieces",text:"Move any pieces.",[Pn.Now]:async()=>{await e.forPieces().pickMultiple({optional:!0,repeatSame:!0,forPickedItem:async e=>{await e.move({locations:{target:zn.AnyLocations}})}})}},{actionId:"Damage",label:"Damage pieces",text:"Damage any pieces",[Pn.Now]:async()=>{await e.forPiecesThatIs(e.InvaderOrDahan).pickMultiple({optional:!0,repeatSame:!0,forPickedItem:async e=>{await e.damageOnlyThis(1)}})}},{actionId:"Remove",label:"Remove pieces",text:"Remove any pieces",[Pn.Now]:async()=>{await e.forPieces().pickMultiple({optional:!0,forPickedItem:async e=>{await e.remove()}})}},{actionId:"EarnFearCard",text:"Earn Fear Card",[Pn.Now]:async()=>{await e.earnFearCard()}},{actionId:"AddFearCard",text:"Add Fear Card",[Pn.Now]:async()=>{await e.addFearCards(1).toLevel(e.terrorLevel)}},{actionId:"DiscardFearCard",text:"Discard Fear Card",[Pn.Now]:async()=>{await e.discardTopFearCard()}},{actionId:"GainEnergy",text:"Gain Energy",[Pn.Now]:async()=>{await e.fromAllSpirits().pickMultiple({optional:!0,repeatSame:!0,forPickedItem:async e=>{await e.gainEnergy(1)}})}},{actionId:"PayEnergy",text:"Pay Energy",[Pn.Now]:async()=>{await e.fromAllSpirits().pickMultiple({optional:!0,repeatSame:!0,forPickedItem:async e=>{e.energy>0&&await e.payEnergy(1)}})}},{actionId:"GainFear",text:"Gain <fear>",[Pn.Now]:async()=>{await e.fear(1)}},{actionId:"LoseFear",text:"Lose <fear>",[Pn.Now]:async()=>{await e.loseFear(1)}},{actionId:"DiscardTopInvaderCard",text:"Discard Top Invader Card",[Pn.Now]:async()=>{await e.removeInvaderCard(0,{allCards:!0})}},{actionId:"AdvanceInvaderCards",text:"Advance Invader Cards",[Pn.Now]:async()=>{await e.explore(),await e.advanceInvaderCards()}},{actionId:"Elements",text:"Elements",[Pn.Now]:async()=>{await e.fromAllSpirits().pickOne((async e=>{await e.gainElements({anyAmount:!0})}))}},{actionId:"AllElements",text:"<any>",[Pn.Now]:async()=>{await e.fromAllSpirits().pickOne((async e=>{await e.gainElementsForTheRestOfTheGame({[ir.Sun]:5,[ir.Moon]:5,[ir.Fire]:5,[ir.Air]:5,[ir.Water]:5,[ir.Earth]:5,[ir.Plant]:5,[ir.Animal]:5})}))}},{actionId:"AddBlightToBlightCard",text:"Add <blight> to Blight Card",[Pn.Now]:async()=>{await e.addBlightToBlightCard(1)}},{actionId:"RemoveBlightFromBlightCard",text:"Remove <blight> from Blight Card",[Pn.Now]:async()=>{await e.removeBlightFromBlightCard(1)}},{actionId:"SelectBlightCard",text:"Select Blight Card",[Pn.Now]:async()=>{const a=await e.queryOptional({text:"Select Blight Card to put on top.",query:An.SelectCard,items:e.blightCardsInDeck.unusedCards,actionIds:e.blightCardsInDeck.unusedCards});if(null!=a){const t=e.blightCardsInDeck.unusedCards[a];e.blightCardsInDeck.addStackedCard(t)}}},{actionId:"SelectFearcard",text:"Select Fear Card",[Pn.Now]:async()=>{const a=await e.queryOptional({text:"Select Fear Card to put on top.",query:An.SelectCard,optional:!0,items:e.fearCardsInDeck.unusedCards,actionIds:e.fearCardsInDeck.unusedCards});if(null!=a){const t=e.fearCardsInDeck.unusedCards[a];e.fearCardsInDeck.addStackedCard(t)}}},{actionId:"SelectEventCard",text:"Select Event Card",[Pn.Now]:async()=>{const a=await e.queryOptional({text:"Select Event Card to put on top.",query:An.SelectCard,optional:!0,items:e.eventCardsInDeck.unusedCards,actionIds:e.eventCardsInDeck.unusedCards});if(null!=a){const t=e.eventCardsInDeck.unusedCards[a];e.eventCardsInDeck.addStackedCard(t)}}},{actionId:"SelectInvaderCard",text:"Select Invader Card",[Pn.Now]:async()=>{const a=e.exploreDeck.possibleCardsAt(0),t=await e.queryOptional({text:"Select Next Invader Card.",query:An.SelectCard,optional:!0,items:a,actionIds:a});if(null!=t){const n=a[t];e.exploreDeck.addStackedCard(n)}}},{actionId:"SelectPowerCard",text:"Select Power Card",[Pn.Now]:async()=>{const a=[kn.Minor,kn.Major],t=await e.queryOptional({query:An.SelectPowerType,items:a,actionIds:a,autoPlayOneOption:!0});if(null!==t){const n=a[t],r=n===kn.Minor?e.powercardsInMinorDeck:e.powercardsInMajorDeck,i=await e.queryOptional({text:`Select ${n} Card to put on top.`,query:An.SelectCard,optional:!0,items:r.unusedCards,actionIds:r.unusedCards});if(null!=i){const e=r.unusedCards[i];r.addStackedCard(e)}}}},{actionId:"GainPower",text:"Gain Power",[Pn.Now]:async()=>{const a=[kn.Minor,kn.Major];await e.fromAllSpirits().optionallyPickOne((async t=>{const n=await e.queryOptional({query:An.SelectPowerType,items:a,actionIds:a,autoPlayOneOption:!0});if(null!==n){const r=a[n],i=r===kn.Minor?e.powercardsInMinorDeck:e.powercardsInMajorDeck,s=await e.queryOptional({text:`Pick ${r} Power.`,query:An.SelectCard,items:i.unusedCards,actionIds:i.unusedCards});if(null!=s){const e=i.unusedCards[s];i.remove(e),await t.gainPower(e)}}}))}},{actionId:"PlayPower",text:"Play Power",[Pn.Now]:async()=>{await e.fromAllSpirits().optionallyPickOne((async e=>{await e.playAPowerCardByPayingItsCost()}))}},{actionId:"DiscardPower",text:"Discard Power",[Pn.Now]:async()=>{await e.fromAllSpirits().optionallyPickOne((async e=>{await e.discardPowerCards(1)}))}},{actionId:"ForgetPower",text:"Forget Power",[Pn.Now]:async()=>{await e.fromAllSpirits().optionallyPickOne((async e=>{await e.forgetPowers()}))}},{actionId:"ReclaimCards",text:"Reclaim Cards",[Pn.Now]:async()=>{await e.fromAllSpirits().optionallyPickOne((async e=>{await e.reclaimCards({filter:e=>e.isInPlay||e.isInDiscard,optional:!0})}))}},{actionId:"CloseAdmin",text:"Close",[Pn.Now]:()=>(a.c=!1,Promise.resolve())}]},{orChoice:!1})})),this.isInAdmin=!1}})}}Rm([De],Mm.prototype,"isInAdmin",void 0);class Nm{adversary;leading;level;$;constructor(e,a,t,n){this.$=e,this.adversary=a,this.level=t,this.leading=n}get data(){return Kp[this.adversary]}get levelData(){return this.data.levels[this.level]}get name(){return`${this.data.name} ${this.level}`}async setup(){const{data:e}=this;await this.$.sendEvent({type:Tn.SetupAdversary,adversary:this});for(let a=0;a<=this.level;a+=1)await this.$.addEffect({...e.levels[a].effect,adversary:this.adversary,adversaryLevel:a})}toString(){return this.name}}class Wm{adversaryLeading=null;adversarySupporting=null;$;constructor(e){this.$=e;const{adversaryLeading:a,adversarySupporting:t}=this.$.config;[this.adversaryLeading,this.adversarySupporting]=[a,t].map((e=>e?new Nm(this.$,e.adversary,e.level,e===a):null))}get maxTownsAllowed(){let e=0;return null!==this.adversarySupporting&&(this.adversaryLeading?.adversary===mg.France&&this.adversaryLeading?.level>=2?e=this.adversarySupporting.level*this.$.boardCount:this.adversarySupporting?.adversary===mg.France&&this.adversarySupporting?.level>=2&&(e=this.adversaryLeading.level*this.$.boardCount)),7*this.$.boardCount+e}async setup(){await(this.adversarySupporting?.setup()),await(this.adversaryLeading?.setup())}toString(){return Pg({adversaryLeading:this.adversaryLeading,adversarySupporting:this.adversarySupporting},2)}}class $m{$;constructor(e){this.$=e}async setup(){if(this.$.playingWithCommandBeasts){await this.$.addFearCards(1).toLevel(2);const e=De.box(2===this.$.stage?1:0),a=De.box(3===this.$.stage?1:0),t=De.box(0);await this.$.addSubEffect({[Pn.GlobalReminder]:()=>({name:"Command Beast",text:"When reaching Invader Stage II and Invader Stage III, the Spirits earn the ability to command all Beasts on the island once.<br><br>During the <fast> phase: For each <beasts>, choose one of the following:<br><br>1 Damage<or>Push the <beasts>.<or>If Invaders are present, 1 <fear>.<br><br>You can use both Commands in the same <fast> Power Phase if you have both available.",icon:`<beasts><br>${t.get()} / ${e.get()+a.get()}`,ongoing:!0}),[Pn.ExtraAction]:()=>this.$.phase!==Gi.FastPowers||t.get()>=e.get()+a.get()?null:{actionId:"CommandBeast",name:"Command Beast",text:"For each <beasts>, choose one of the following:<br><br>1 Damage.<or>Push the <beasts>.<or>If Invaders are present, 1 <fear>.",[Pn.Now]:async()=>{t.set(t.get()+1);const e=[];await this.$.inLandsWith(this.$.Beasts).selectOrder().forEach((a=>this.$.doTokenEventAction((async()=>{const t=a.piecesWhere((a=>a.isBeasts&&!e.includes(a)));await t.pickMultiple({amount:t.count,forPickedItem:async t=>{e.push(t),await this.$.chooseBetween({effects:[{actionId:"Damage",text:"1 Damage.",[Pn.Now]:async()=>{await a.damage(1)}},{actionId:"Push",text:"Push the <beasts>.",[Pn.Now]:async()=>{await t.push()}},{actionId:"Fear",text:"If Invaders are present, 1 <fear>.",[Pn.Now]:async()=>{await a.fear(1)},condition:()=>a.hasInvaders}]})}})}))),{noOptions:"No lands with <beasts>."})}},[Pn.AfterChangingInvaderDeck]:()=>(this.$.phase!==Gi.Setup&&(2===this.$.stage?e.set(1):3===this.$.stage&&a.set(1)),Promise.resolve())})}}}class Gm{randomEventsEnabled=!0;resolvableCardsLeft=void 0;spiritSimulation=!1;alwaysPushToSameDestination=!1;disableRandomEvents(){this.randomEventsEnabled=!1}resolveMaximimumPowers(e){this.resolvableCardsLeft=e}simulateSpiritBoardOnly(){this.spiritSimulation=!0}simplifyMultiPush(){this.alwaysPushToSameDestination=!0}}class Um{scenario=null;wave=0;$;constructor(e){this.$=e,this.scenario=this.$.config.scenario??null}get data(){return ym[this.scenario]}async setup(){if(null!==this.scenario){await this.$.sendEvent({type:Tn.SetupScenario,scenario:this.data});const e=ym[this.scenario];await this.$.addEffect({name:e.name,effects:e.rules,scenario:this.scenario})}}toString(){return Pg({scenario:this.scenario?Nd[this.scenario]:null,wave:this.wave},2)}}!function(e){e.PayEnergy="PayEnergy",e.ConvertElements="ConvertElements",e.DiscardPowerFromHand="DiscardPowerFromHand",e.ForgetPower="ForgetPower"}(Fm||(Fm={}));const Hm={name:"Amorphous",set:gn.FeatherAndFlame,effects:[{name:"Setup Changes",text:"Lose Special Rule: Shadows of the Dahan",[Pn.Now]:({$:e})=>(e.removeEffectsWithId(In.Shadows),Promise.resolve())},{name:"Shadows Partake of Amorphous Space",effects:[{text:"During each <fast> phase, you may move 1 of your <presence> to an adjacent land, or to a land with <dahan> anywhere on the island.",[Pn.Now]:async({$:e,you:a})=>{await a.addExtraAction({effectId:In.ShadowsPartake,actionId:"ShadowsPartakeFast",icon:"<fast>",enabled:()=>e.phase===Gi.FastPowers,onActivate:async()=>{await a.presence().pickOne((async a=>{await a.move({destinationFilter:t=>t.isAdjacentTo(a.location)||t.has(e.Dahan),locations:{target:zn.AnyLands}})}))}})}},{text:"During each <slow> phase, you may move 1 of your <presence> to an adjacent land, or to a land with <dahan> anywhere on the island.",[Pn.Now]:async({$:e,you:a})=>{await a.addExtraAction({effectId:In.ShadowsPartake,actionId:"ShadowsPartakeSlow",icon:"<slow>",enabled:()=>e.phase===Gi.SlowPowers,onActivate:async()=>{await a.presence().pickOne((async a=>{await a.move({destinationFilter:t=>t.isAdjacentTo(a.location)||t.has(e.Dahan),locations:{target:zn.AnyLands}})}))}})}}]}]},qm={name:"Foreboding",set:gn.FeatherAndFlame,innatePowers:[Ui.StretchOutCoilsOfForebodingDread],effects:[{name:"Setup Changes",effects:[{text:"Lose Special Rule: Shadows of the Dahan",[Pn.Now]:({$:e})=>(e.removeEffectsWithId(In.Shadows),Promise.resolve())},{text:"Gain Stretch Out Coils of Foreboding Dread",[Pn.Now]:async({you:e})=>{await e.gainPower(Ui.StretchOutCoilsOfForebodingDread)}}]}]},jm={name:"Immense",set:gn.FeatherAndFlame,effects:[{name:"An Immense Spirit, Towering and Slow",effects:[{text:"Your top Presence track grants you twice as much Energy during the Spirit Phase. Any ongoing modifiers are counted after doubling.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Immense,[Pn.GlobalReminder]:()=>({icon:"x2<br>Energy",spirit:a,players:[a]}),[Pn.AfterGainingEnergyFromTracks]:async()=>{await a.gainEnergyFromTracks()}})}},{text:"Playing Power Cards during the Spirit Phase costs 2 Card Plays instead of 1. (So if you have 3 Card Plays, you will only be able to play 1 Power Card.)",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Immense,[Pn.GlobalReminder]:()=>({icon:"Card<br>Plays",spirit:a,players:[a]}),[Pn.ExtraCardPlaysCost]:({spirit:e})=>e===a?1:0})}},{text:"If you have any unused Card Plays at the end of the Spirit Phase, gain 1 Element of your choice.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Immense,[Pn.GlobalReminder]:()=>({icon:"Unused<br>=1 <any>",spirit:a,players:[a]}),[Pn.AfterPlayPowers]:async()=>{a.usedCardPlays<a.cardPlays&&await a.gainElements()}})}},{text:"For each Major Power you play, gain 2 different Elements of your choice.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({[Pn.GlobalReminder]:()=>({icon:"Major<br>=2 <any>",spirit:a,players:[a]}),[Pn.AfterPlayPowers]:async()=>{const e=a.powersWhere((e=>e.isInPlay&&e.isA(En.Major))).count;e>0&&await Jr(e,(async()=>{await a.gainElements({amount:2,different:!0})}))}})}}]}]},_m={name:"Might",set:gn.FeatherAndFlame,innatePowers:[Ui.EarthMovesWithVigorAndMight],effects:[{name:"Setup Changes",effects:[{text:"Lose Special Rule: Earth's Vitality.",[Pn.Now]:({$:e})=>(e.removeEffectsWithId(In.Earth),Promise.resolve())},{text:"Gain Earth Moves with Vigor and Might.",[Pn.Now]:async({you:e})=>{await e.gainPower(Ui.EarthMovesWithVigorAndMight)}}]}]},Vm={name:"Travel",set:gn.FeatherAndFlame,effects:[{name:"Setup Changes",text:"Lose Special Rule: River's Domain",[Pn.Now]:({$:e})=>(e.removeEffectsWithId(In.River),Promise.resolve())},{name:"Travel on the River's Back",text:"After Growth, choose up to 2 <dahan> among your lands. Move each of them to any land contiguously connected by your <presence>.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Travel,[Pn.GlobalReminder]:()=>({icon:"Move<br>2 <dahan>",spirit:a,players:[a]}),[Pn.AfterGrowth]:async()=>{await a.forPiecesThatIs(e.Dahan).pickMultiple({amount:2,optional:!0,forPickedItem:async e=>{const t=e.location.landsContiguouslyConnectedBy(a);await e.move({locations:{target:zn.AnyLands},destinationFilter:e=>t.includes(e)})},effect:{prompt:"Pick a <dahan> among your lands.",noOptions:"No <dahan> among your lands."}})}})}},{name:"People tend to the River, River tends to the People",text:"Your lands with 4 or more <dahan> are considered <sacred>, and have Defend 1.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Travel,[Pn.GlobalReminder]:()=>({icon:"4 <dahan><br>= <sacred>",spirit:a,players:[a]}),[Pn.HasSacredSiteOf]:({land:t,spirit:n,helpers:r})=>n===a&&t.hasPresenceOf(a,r)&&t.numberOf(e.Dahan)>=4,[Pn.DefendFromSpirits]:({land:t})=>t.hasPresenceOf(a)&&t.numberOf(e.Dahan)>=4?1:0})}}]},Jm={name:"Madness",set:gn.JaggedEarth,effects:[{name:"Setup Changes",text:"Lose Special Rule: Shadows of the Dahan",[Pn.Now]:({$:e})=>(e.removeEffectsWithId(In.Shadows),Promise.resolve())},{name:"Shadows cast a Subtle Madness",text:"When you add <presence> during Growth, you may also add 1 <strife> in that land.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Madness,[Pn.GlobalReminder]:()=>({icon:"<presence><br>+1 <strife>",ongoing:!0,spirit:a,players:[a]}),[Pn.AfterAddingPiece]:async({additions:t})=>{e.phase===Gi.Grow&&t.length>0&&t[0].piece.isAPresenceOf(a)&&t[0].location.hasInvaders&&await t[0].location.addStrife(1,e.Invader,!0)}})}},{name:"Glimpse of the Shadowed Void",text:"When your <presence> is destroyed, if Invaders are present, 1 <fear> per <presence> destroyed there.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Madness,[Pn.GlobalReminder]:()=>({icon:"<broken><br>1 <fear>",ongoing:!0,spirit:a,players:[a]}),[Pn.AfterRemovePiece]:async({piece:t,location:n,removement:r})=>{t.isAPresenceOf(a)&&n.hasInvaders&&wr[r].isDestroyLike&&(await e.sendEvent({type:Tn.GenericSub,text:"1 <presence> was destroyed while Invaders were present."}),await n.fear(1))}})}}]},zm={name:"Pandemonium",set:gn.JaggedEarth,innatePowers:[Ui.LightningTornSkiesIncitePandemonium],effects:[{name:"Setup Changes",effects:[{text:"Lose Innate Power: Thundering Destruction.",[Pn.Now]:async({you:e})=>{await e.forgetPower(Ui.ThunderingDestruction)}},{text:"Gain Lightning-Torn Skies Incite Pandemonium.",[Pn.Now]:async({you:e})=>{await e.gainPower(Ui.LightningTornSkiesIncitePandemonium)}}]}]},Ym={name:"Reach",set:gn.JaggedEarth,effects:[{name:"Setup Changes",text:"Lose Special Rule: Shadows of the Dahan",[Pn.Now]:({$:e})=>(e.removeEffectsWithId(In.Shadows),Promise.resolve())},{name:"Reach Through Ephemeral Distance",text:'Once per turn, you may ignore Range.<br><br>(This can be during Growth or for a Power - anything for which there\'s a Range arrow or the word "Range" is used. It affects a single action of yours.',[Pn.Now]:async({$:e,you:a})=>{await a.addExtraAction({effectId:In.Reach,actionId:"Reach",icon:"Range",enabled:()=>[Gi.Grow,Gi.GainEnergy,Gi.FastPowers,Gi.SlowPowers].includes(e.phase),onActivate:async()=>{let t=!0;await e.addEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({text:"Ignore Range for the next Action.",icon:"Ignore<br>Range",spirit:a,players:[a]}),[Pn.ExtraRange]:e=>e.spirit===a?99:0,[Pn.AnyActionEnds]:()=>(t?t=!1:e.removeThisEffect(),Promise.resolve())})}})}}]},Km={name:"Resilience",set:gn.JaggedEarth,effects:[{name:"Setup Changes",text:"Lose Special Rule: Earth's Vitality",[Pn.Now]:({$:e})=>(e.removeEffectsWithId(In.Earth),Promise.resolve())},{name:"Anchor the Land's Resilience",text:"In lands with your <sacred>, it takes 8 additional Damage to add <blight> to the land.<br><br>(So, usually, 10 Damage will add <blight>. This does not protect <dahan> at all; Damage to them is unaffected.)",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Resilience,[Pn.GlobalReminder]:()=>({icon:"<sacred><br>+8 HP",ongoing:!0,spirit:a,players:[a]}),[Pn.AdjustLandHealth]:({land:e})=>e.hasSacredSiteOf(a)?8:0})}}]},Qm={name:"Sunshine",set:gn.JaggedEarth,innatePowers:[Ui.BoonOfSunshinesPromise],effects:[{name:"Setup Changes",effects:[{text:"Forget Boon of Vigor.",[Pn.Now]:async({you:e})=>{await e.forgetPower(Ui.BoonOfVigor,{canRegain:!1})}},{text:"Gain 1 Energy.",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}},{text:"Gain Boon of Sunshine's Promise.",[Pn.Now]:async({you:e})=>{await e.gainPower(Ui.BoonOfSunshinesPromise)}}]}]},Xm={name:"Wind",set:gn.JaggedEarth,innatePowers:[Ui.ExaltationOfTheStormWind],effects:[{name:"Setup Changes",effects:[{text:"Lose Special Rule: Swiftness of Lightning.",[Pn.Now]:({$:e})=>(e.removeEffectsWithId(In.Lightning),Promise.resolve())},{text:"Gain Exaltation of the Storm-Wind.",[Pn.Now]:async({you:e})=>{await e.gainPower(Ui.ExaltationOfTheStormWind)}}]}]},Zm={name:"Dark Fire",set:gn.NatureIncarnate,effects:[{name:"Setup Changes",effects:[{text:"Lose Special Rule: Shadows of the Dahan.",[Pn.Now]:({$:e})=>(e.removeEffectsWithId(In.Shadows),Promise.resolve())},{text:"Gain Minor Power: Unquenchable Flames.",[Pn.Now]:async({you:e})=>{await e.gainPower(Ui.UnquenchableFlames)}}]},{name:"Dark and Fire as One",effects:[{text:"You may treat each <moon> available to you as being <fire>, or vice versa. (Choose during each Action for each <moon>/<fire> you have.) You may discard or Forget Powers that grant <moon> to pay for <fire> Choice Events, and vice versa.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.DarkFire,[Pn.GlobalReminder]:()=>({icon:"<darkfire>",ongoing:!0,spirit:a,players:[a]}),[Pn.TreatElementAsElement]:({spirit:e,element:t})=>e!==a||t!==ir.Fire&&t!==ir.Moon?t:ir.DarkFire,[Pn.TreatElementsAsElements]:({spirit:e,elements:t})=>{if(e===a){const e={...t};return delete e[ir.Fire],delete e[ir.Moon],void 0===t[ir.DarkFire]&&void 0===t[ir.Fire]&&void 0===t[ir.Moon]||(e[ir.DarkFire]=(t[ir.DarkFire]??0)+(t[ir.Fire]??0)+(t[ir.Moon]??0)),e}return t}})}}]},{name:"Frightful Shadows Elude Destruction",effects:[{text:"The first time each Action would destroy your <presence>, you may Push 1 of those <presence> instead of destroying it.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({[Pn.PreventRemovePiece]:async({piece:t,removement:n})=>!(!t.isAPresenceOf(a)||!wr[n].isDestroyLike||e.action.type===qo.GameAction||e.action.data.hasDestroyedPresence||(e.action.data.hasDestroyedPresence=!0,!await e.may({prompt:"Push 1 of those <presence> instead of destroying it?"})))&&(await t.push({pieces:e.Presence}),!0),[Pn.GlobalReminder]:()=>({icon:"Push <presence>",ongoing:!0})})}}]},{name:"Bonus Track Action",effects:[{text:"Fire (or Moon).",[Pn.Now]:async({you:e})=>{await e.gainElementsForTheRestOfTheGame({[ir.DarkFire]:1})}}]}]},ev={name:"Deeps",set:gn.NatureIncarnate,innatePowers:[Ui.WaterEatsAwayTheDeepRootsOfEarth,Ui.ReclaimedByTheDeeps],effects:[{name:"Setup Changes",effects:[{text:"Replace Innate Power: 'Ocean Breaks The Shore' with 'Water Eats Away The Deep Roots Of Earth'.",[Pn.Now]:async({you:e})=>{await e.replacePower(Ui.OceanBreaksTheShore,{withPower:Ui.WaterEatsAwayTheDeepRootsOfEarth})}},{text:"Replace Innate Power: 'Pound Ships To Splinters' with 'Reclaimed By The Deeps'.",[Pn.Now]:async({you:e})=>{await e.replacePower(Ui.PoundShipsToSplinters,{withPower:Ui.ReclaimedByTheDeeps})}}]}]},av={name:"Encircle",set:gn.NatureIncarnate,innatePowers:[Ui.EncircleTheUnsuspectingPrey],effects:[{name:"Setup Changes",effects:[{text:"Lose Special Rule: Ally of the Beasts.",[Pn.Now]:({$:e})=>(e.removeEffectsWithId(In.FangsAllyOfTheBeasts),Promise.resolve())},{text:"Replace Innate Power: 'Ranging Hunt' with 'Encircle The Unsuspecting Prey'.",[Pn.Now]:async({you:e})=>{await e.replacePower(Ui.RangingHunt,{withPower:Ui.EncircleTheUnsuspectingPrey})}}]},{name:"Pack Hunting",effects:[{text:"Your Powers get <range+1> for targeting lands with <beasts>.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Encircle,[Pn.GlobalReminder]:()=>({icon:"<beasts><br><range+1>",ongoing:!0,players:[a]}),[Pn.ExtraRangeToLand]:t=>({extraRangeToLand:t.spirit===a&&void 0!==e.action.power&&t.targetingLands?1:0,landFilter:a=>a.has(e.Beasts)})})}}]}]},tv={name:"Enticing",set:gn.NatureIncarnate,innatePowers:[Ui.EnticingAndLullingDreams],effects:[{name:"Setup Changes",effects:[{text:"Replace Innate Power: 'Night Terrors' with 'Enticing And Lulling Dreams'.",[Pn.Now]:async({you:e})=>{await e.replacePower(Ui.NightTerrors,{withPower:Ui.EnticingAndLullingDreams})}}]}]},nv={name:"Haven",set:gn.NatureIncarnate,innatePowers:[Ui.CallToASunlitHaven],effects:[{name:"Setup Changes",effects:[{text:"Replace Innate Power: 'Massive Flooding' with 'Call To A Sunlit Haven'.",[Pn.Now]:async({you:e})=>{await e.replacePower(Ui.MassiveFlooding,{withPower:Ui.CallToASunlitHaven})}}]}]},rv={name:"Intensify",set:gn.NatureIncarnate,effects:[{name:"Setup Changes",effects:[{text:"Lose Special Rule: Insights into the World's Nature.",[Pn.Now]:({$:e})=>(e.removeEffectsWithId(In.MemoryInsight),Promise.resolve())}]},{name:"Intensify Through Understanding",effects:[{text:"You may spend Element Markers to modify your Actions (max. 1 of each Marker per Action):<br><sun>: Add +1 <strife> or +1 <badlands>.<br><moon>: Remove/Replace +1 piece<br><fire>: +1 Damage<br><air>: Use Minor Power <fast><br><water>: Move +1 piece<br><earth>: Defend +2<br><plant>: Add +2 <wilds> or 2 <broken><br><animal>: Add +1 <disease> or +1 <beasts><br>Except for <air>, each modifier applies to 1 land. (The Action must already do that effect there.)",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Intensify,spirit:a,[Pn.AfterAddingStrife]:async({piece:t,pieceFilter:n})=>{void 0===e.action.data.usedElement&&(e.action.data.usedElement=[]),e.action.spirit===a&&!e.action.data.usedElement.includes(ir.Sun)&&a.preparedElements[ir.Sun]>0&&await e.may({prompt:"Spend 1 prepared <sun> to add +1 <strife>?"})&&(a.preparedElements[ir.Sun]-=1,e.action.data.usedElement.push(ir.Sun),await t.location.addStrife(1,n))},[Pn.DamageBoost]:async({filter:t,onUse:n})=>{void 0===e.action.data.usedElement&&(e.action.data.usedElement=[]),e.action.spirit===a&&!e.action.data.usedElement.includes(ir.Fire)&&a.preparedElements[ir.Fire]>0&&await e.may({prompt:`Spend 1 prepared <fire> to add +1 <damage> to ${Zn[t].text}?`})&&(a.preparedElements[ir.Fire]-=1,e.action.data.usedElement.push(ir.Fire),await n())},[Pn.ExtraDefense]:async({location:t})=>(void 0===e.action.data.usedElement&&(e.action.data.usedElement=[]),!!(e.action.spirit===a&&!e.action.data.usedElement.includes(ir.Earth)&&a.preparedElements[ir.Earth]>0&&await e.may({prompt:"Spend 1 prepared <earth> to Defend +2?",highlightLocations:[t]}))&&(a.preparedElements[ir.Earth]-=1,e.action.data.usedElement.push(ir.Earth),!0)),[Pn.ExtraMove]:async({movement:t,pieces:n,location:r,possiblePieces:i})=>(void 0===e.action.data.usedElement&&(e.action.data.usedElement=[]),!!(e.action.spirit===a&&t!==Mr.Relocate&&!e.action.data.usedElement.includes(ir.Water)&&a.preparedElements[ir.Water]>0&&await e.may({prompt:`Spend 1 prepared <water> to ${Ho[t].verb} +1 ${Zn[n].text}?`,highlightLocations:[r],highlightPieces:i}))&&(a.preparedElements[ir.Water]-=1,e.action.data.usedElement.push(ir.Water),!0)),[Pn.ExtraRemove]:async({removement:t,pieces:n,location:r,possiblePieces:i})=>(void 0===e.action.data.usedElement&&(e.action.data.usedElement=[]),!(e.action.spirit!==a||t!==Wn.Remove&&t!==Wn.RemoveFromGame&&t!==Wn.Replace||e.action.data.usedElement.includes(ir.Moon)||!(a.preparedElements[ir.Moon]>0)||!await e.may({prompt:`Spend 1 prepared <moon> to ${wr[t].verb} +1 ${Zn[n].text}?`,highlightLocations:[r],highlightPieces:i}))&&(a.preparedElements[ir.Moon]-=1,e.action.data.usedElement.push(ir.Moon),!0)),[Pn.AddTwoExtraBroken]:async({land:t})=>(void 0===e.action.data.usedElement&&(e.action.data.usedElement=[]),e.action.spirit===a&&!e.action.data.usedElement.includes(ir.Plant)&&a.preparedElements[ir.Plant]>0&&await e.may({highlightLocations:[t],prompt:"Spend 1 prepared <plant> to add +2 <broken>?"})?(a.preparedElements[ir.Plant]-=1,e.action.data.usedElement.push(ir.Plant),Promise.resolve(!0)):Promise.resolve(!1)),[Pn.AfterAddingPiece]:async({additions:t,land:n})=>{void 0===e.action.data.usedElement&&(e.action.data.usedElement=[]);for(let r=0;r<4;r+=1){const i=[Ln.Badlands,Ln.Wilds,Ln.Disease,Ln.Beasts][r],s=[ir.Sun,ir.Plant,ir.Animal,ir.Animal][r];e.action.spirit===a&&!e.action.data.usedElement.includes(s)&&a.preparedElements[s]>0&&t.some((e=>e.piece.piece===i))&&await e.may({prompt:`Spend 1 prepared ${Yw[s].text} to add +1 ${Zn[i].text}?`})&&(a.preparedElements[s]-=1,e.action.data.usedElement.push(s),await n.add(i===Ln.Wilds?2:1,Xn[i]))}},[Pn.MayChangeSpeedOfPower]:({power:e})=>e.isSlow&&e.owner===a&&e.isA(En.Minor)&&a.preparedElements[ir.Air]>0,[Pn.ChangeSpeedOfPower]:async({power:t})=>{await t.makeFast(),a.preparedElements[ir.Air]-=1,await e.sendEvent({type:Tn.GenericMain,text:`Intensify used Intensify Through Understanding to make ${t.powerLink} fast.`})}})}}]},{name:"Bonus Track Action",effects:[{text:"Moon, Any.",[Pn.Now]:async({you:e})=>{await e.gainElementsForTheRestOfTheGame({[ir.Moon]:1,[ir.Any]:1})}}]}]},iv={name:"Lair",set:gn.NatureIncarnate,innatePowers:[Ui.SocietyDissolvesAtTheBeckoningHeart],effects:[{name:"Setup Changes",effects:[{text:"Put your Incarna (<incarna-lair>) in an Inland land on your starting board. Remove 3 <presence>.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Lair,[Pn.AdjustSetupPresence]:async({spirit:t})=>{if(t===a){const t=a.startingBoard.inLandNumber(8);return await t.add(1,e.Beasts),await a.startingBoard.inInlandLands().pickOne((async e=>{await e.addIncarna(Ln.IncarnaLair,a)})),e.removeThisEffect(),!0}return!1}})}},{text:"Lose Special Rule: Enthrall the Foreign Explorers.",[Pn.Now]:({$:e})=>(e.removeEffectsWithId(In.LureEnthrallTheForeignExplorers),Promise.resolve())},{text:"Replace Innate Power: 'Forsake Society To Chase After Dreams' with 'Society Dissolves At The Beckoning Heart'.",[Pn.Now]:async({you:e})=>{await e.replacePower(Ui.ForsakeSocietyToChaseAfterDreams,{withPower:Ui.SocietyDissolvesAtTheBeckoningHeart})}}]},{name:"A Single Alluring Lair",effects:[{text:"Invaders/<dahan>/<beasts>/<presence> (of any Spirit) at <incarna-lair> can't move. (You can reposition <incarna-lair> by adding it with your second Growth option instead of adding <presence>.)",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Lair,[Pn.GlobalReminder]:()=>({icon:"<incarna-lair>",text:"Invaders/<dahan>/<beasts>/<presence> (of any Spirit) at <incarna-lair> can't move. (You can reposition <incarna-lair> by adding it with your second Growth option instead of adding <presence>.)<br><br>6 <explorer> and 3 <dahan> at <incarna-lair> don't participate in Ravage. (They don't deal Damage or take Damage.)",ongoing:!0,spirit:a,players:[a]}),[Pn.PreventMovePiece]:({piece:a,movement:t,source:n})=>n.has(e.IncarnaLair)&&a.isOneOfIgnoringCountAs(e.Invader,e.Dahan,e.Beasts,e.Presence)&&t!==Mr.Relocate})}},{text:"6 <explorer> and 3 <dahan> at <incarna-lair> don't participate in Ravage. (They don't deal Damage or take Damage.)",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.Lair,[Pn.DoesNotParticipateInRavage]:async({location:a})=>{a.has(e.IncarnaLair)&&(await a.doNotParticipateInRavage({quantifier:ur.Exactly,amount:6,pieces:e.Explorer}),await a.doNotParticipateInRavage({quantifier:ur.Exactly,amount:3,pieces:e.Dahan}))}})}}]},{name:"Incarna",text:"<incarna-lair> may count as <presence>/<sacred>.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Lair,text:"<incarna-lair> may count as <presence>/<sacred>.",[Pn.GlobalReminder]:()=>({icon:"<incarna-lair> =<br><presence>/<sacred>",ongoing:!0,spirit:a,players:[a]}),[Pn.HasSacredSiteOf]:({land:e,spirit:t})=>t===a&&e.pieces.some((e=>e.piece===Ln.IncarnaLair))})}}]},sv={name:"Locus",set:gn.NatureIncarnate,innatePowers:[Ui.StrengthOfTheWakingIsland],effects:[{name:"Setup Changes",effects:[{text:"Replace Unique Power: 'Elemental Aegis' with 'Pull Beneath The Hungry Earth'.",[Pn.Now]:async({you:e})=>{await e.replacePower(Ui.ElementalAegis,{withPower:Ui.PullBeneathTheHungryEarth})}},{text:"Put your Incarna (<incarna-locus>) and the <presence> from the <fire> space of your <presence> track on your starting board in land #5.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Locus,[Pn.AfterSetupPresence]:async()=>{await a.removePresenceFromTrack(1),await a.startingBoard.inLandNumber(5).addIncarna(Ln.IncarnaLocus,a),await a.startingBoard.inLandNumber(5).createPiece(1,Ln.Presence,a.spiritNumber),e.removeThisEffect()}})}},{text:"Replace Innate Power: 'Serpent Wakes In Power' with 'Strength Of The Waking Island'.",[Pn.Now]:async({you:e})=>{await e.replacePower(Ui.SerpentWakesInPower,{withPower:Ui.StrengthOfTheWakingIsland})}}]},{name:"Locus of the Serpent's Regard",effects:[{text:"Spirits with absorbed <presence> can use your <presence> at <incarna-locus> for targeting.<br><incarna-locus> doesn't count towards your Deep Slumber limit.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Locus,[Pn.GlobalReminder]:()=>({icon:"<incarna-locus><br><presence>",ongoing:!0,spirit:a,players:[a]}),[Pn.MayUseOtherSpiritPresenceForTargeting]:({spirit:e})=>e!==a&&null!=a.incarna?a.incarna.location.pieces.filter((e=>e.isPresence&&e.owner===a)):[]})}},{text:"After uncovering the <earth> space of your <presence> track, Empower <incarna-locus>.",[Pn.Now]:async({$:e,you:a,effect:t,...n})=>{const r={triggerId:e.nextTriggerId(),[Pn.Now]:async()=>{await e.doSpiritAction((async()=>{await a.empowerIncarna()}),{spirit:a})}};await e.addSubEffect({effectId:In.Locus,[Pn.AfterUncoveringTrack]:async({spirit:i,trackIndex:s})=>{i===a&&8===s&&await e.addTrigger(r,t,n.action)}})}}]},{name:"Bonus Track Action",effects:[{text:"Add/Move <incarna-locus> to Land with Your Presence.",[Pn.Now]:async({$:e,you:a})=>{await a.addExtraAction({effectId:In.Locus,actionId:"LocusBonusAction",icon:"<incarna-locus>",maxUses:()=>1,enabled:()=>[Gi.Grow,Gi.GainEnergy].includes(e.phase),onActivate:async()=>{await e.addSubEffect({highlightPieces:null!=a.incarna?[a.incarna]:[],[Pn.Now]:async()=>{await a.inLands().pickOne((async e=>{null==a.incarna?await e.addIncarna(Ln.IncarnaLocus,a):await a.incarna.move({locations:{target:zn.ToThisLocation,location:e}})}))}})}})}}]},{name:"Incarna",text:"<incarna-locus> may count as <presence>.<br><br>When empowered it may also count as <badlands>.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Locus,text:"<incarna-locus> may count as <presence>.<br><br>When empowered it may also count as <badlands>.",[Pn.GlobalReminder]:()=>({icon:"<incarna-locus> =<br><presence>"+(a.hasEmpoweredIncarna?"/<badlands>":""),ongoing:!0,spirit:a,players:[a]})})}}]},ov={name:"Mentor",set:gn.NatureIncarnate,innatePowers:[Ui.ShareMentorshipAndExpertise],effects:[{name:"Setup Changes",effects:[{text:"Lose Special Rule: Long Ages of Knowledge and Forgetfulness.",[Pn.Now]:({$:e})=>(e.removeEffectsWithId(In.MemoryKnowledge),Promise.resolve())},{text:"Replace Innate Power: 'Observe The Ever Changing World' with 'Share Mentorship And Expertise'.",[Pn.Now]:async({you:e})=>{await e.replacePower(Ui.ObserveTheEverChangingWorld,{withPower:Ui.ShareMentorshipAndExpertise})}}]},{name:"Past Teaching Spring Forth Unbidden",effects:[{text:"When you gain Power Cards, draw 2 fewer cards (min. 2) and gain 1 more of them (normally draw 2 cards and gain both). (Forget only one Power Card when gaining Major Powers.)",[Pn.Now]:async({you:e,$:a})=>{await a.addSubEffect({effectId:In.Mentor,[Pn.ExtraCardDrawAmount]:({spirit:a})=>a===e?-2:0,[Pn.ExtraCardKeepAmount]:({spirit:a})=>a===e?1:0})}}]}]},dv={name:"Nourishing",set:gn.NatureIncarnate,innatePowers:[Ui.ImbueWithNourishingVitality],effects:[{name:"Setup Changes",effects:[{text:"Lose Special Rule: Earth's Vitality.",[Pn.Now]:({$:e})=>(e.removeEffectsWithId(In.Earth),Promise.resolve())},{text:"Replace Unique Power: 'A Year Of Perfect Stillness' with 'Voracious Growth'.",[Pn.Now]:async({you:e})=>{await e.replacePower(Ui.AYearOfPerfectStillness,{withPower:Ui.VoraciousGrowth})}},{text:"Gain Innate Power: Imbue With Nourishing Vitality.",[Pn.Now]:async({you:e})=>{await e.gainPower(Ui.ImbueWithNourishingVitality)}}]},{name:"Flourish with Nature's Strength",effects:[{text:"After you gain a Major Power, gain a Minor Power.",[Pn.Now]:async({you:e,$:a})=>{await a.addSubEffect({effectId:In.Nourishing,[Pn.GlobalReminder]:()=>({icon:"Major<br>Power",ongoing:!0,spirit:e,players:[e]}),[Pn.AfterGainingPowers]:async({powerGain:a,spirit:t})=>{t===e&&!a.gifted&&!a.taken&&a.chosen.length>0&&a.chosen[0].data.type===kn.Major&&await e.gainPowerCard({powerType:kn.Minor})}})}}]}]},lv={name:"Regrowth",set:gn.NatureIncarnate,innatePowers:[Ui.UnbelievableRegrowth],effects:[{name:"Setup Changes",effects:[{text:"Lose Special Rule: Steady Regeneration.",[Pn.Now]:({$:e})=>(e.removeEffectsWithId(In.GreenSteadyRegeneration),Promise.resolve())},{text:"Replace Innate Power: 'All-Enveloping Green' with 'Unbelievable Regrowth'.",[Pn.Now]:async({$:e,you:a})=>{await a.replacePower(Ui.AllEnvelopingGreen,{withPower:Ui.UnbelievableRegrowth}),await e.addSubEffect({effectId:In.Regrowth,[Pn.MayIgnoreTargetFilterWhenTargetingLand]:({power:e})=>e.power===Ui.UnbelievableRegrowth&&e.owner.hasElementsWithConvert({[ir.Water]:2,[ir.Plant]:3})})}},{text:"Take 13 <broken>.",[Pn.Now]:({you:e})=>(e.destroyedPresence+=13,Promise.resolve())}]}]},cv={name:"Sparking",set:gn.NatureIncarnate,innatePowers:[Ui.GiftOfTheSparkingSky],effects:[{name:"Setup Changes",effects:[{text:"Replace Innate Power: 'Thundering Destruction' with 'Gift Of The Sparking Sky'.",[Pn.Now]:async({you:e})=>{await e.replacePower(Ui.ThunderingDestruction,{withPower:Ui.GiftOfTheSparkingSky})}},{text:"Replace Unique Power: 'Raging Storm' with 'Smite The Land With Fulmination'.",[Pn.Now]:async({you:e})=>{await e.replacePower(Ui.RagingStorm,{withPower:Ui.SmiteTheLandWithFulmination})}}]}]},hv={name:"Spreading Hostility",set:gn.NatureIncarnate,effects:[{name:"Setup Changes",effects:[{text:"Lose rightmost Growth option.",[Pn.Now]:({you:e})=>(e.disabledGrowthOptions.push(3),Promise.resolve())},{text:"Gain 1 Energy.",[Pn.Now]:async({you:e})=>{await(e?.gainEnergy(1))}}]},{name:"Lands Hostile to Humanity",effects:[{text:"Your <sacred> may also count as <badlands>. (Choose for each Action.)",[Pn.Now]:async({you:e})=>{await e.yourSacredSitesMayAlsoCountAs(Ln.Badlands)}}]},{name:"Seeds of Teaching Sprout and Grow",effects:[{text:"Energy numbers on your top <presence> track are halved (round up).",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.SpreadingHostility,[Pn.GlobalReminder]:()=>({icon:"1/2<br>Energy",spirit:a,players:[a]}),[Pn.AfterGainingEnergyFromTracks]:async()=>{await a.loseEnergy(Math.floor(a.trackEnergy/2))}})}}]},{name:"Implacable and Spreading Enmity",effects:[{text:"Your rightmost (4th) Growth option is replaced with:<br><bullet> Gain Fire<br><bullet> Move a <presence> in <range-1><br><bullet> Move a Presence in <range-1><br><bullet> 1 Damage at Range 0<br>(This option does not have an Energy cost.)",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.SpreadingHostility,[Pn.SpiritHasExtraGrowthOptions]:({spirit:e})=>e===a?{effects:[{text:"Gain Fire",[Pn.Now]:async()=>{await a.gainElementsUntilEndOfTurn({[ir.Fire]:1})}},{text:"Move a <presence> in <range-1>",[Pn.Now]:async()=>{await a.movePresence(1)}},{text:"Move a Presence in <range-1>",[Pn.Now]:async()=>{await a.movePresence(1)}},{text:"1 Damage at Range 0",[Pn.Now]:async()=>{await a.inLandsWithinRange(0).pickOne((async e=>{await e.damage(1)}))}}]}:null}),Pm(a,"growthOptions"),a.growthStatus=a.growthOptions.map((()=>Rw.Available))}}]}]},uv={name:"Stranded",set:gn.NatureIncarnate,effects:[{name:"Setup Changes",effects:[{text:"Lose Special Rule: Mists Shift and Flow.",[Pn.Now]:({$:e})=>(e.removeEffectsWithId(In.ShroudMistsShiftAndFlow),Promise.resolve())}]},{name:"Mists Steadily Drift",effects:[{text:"Up to twice during the <fast> phase and up to twice during the <slow> phase, Push 1 of your <presence>. (If helpful, use Scenario Markers to track uses.)",[Pn.Now]:async({$:e,you:a})=>{for(const t of[Gi.FastPowers,Gi.SlowPowers])await a.addExtraAction({effectId:In.Stranded,actionId:`MistsSteadilyDrift${t}`,icon:"<presence>",maxUses:()=>2,enabled:()=>e.phase===t,visible:()=>e.phase===t,onActivate:async()=>{await a.presence().pickOne((async e=>{await e.push()}))}})}}]},{name:"Stranded In the Shifting Mist",effects:[{text:"Once each <fast> phase, Isolate one of your lands.",[Pn.Now]:async({$:e,you:a})=>{await a.addExtraAction({effectId:In.Stranded,actionId:"StrandedInTheShiftingMist",icon:"Isolate",enabled:()=>e.phase===Gi.FastPowers,onActivate:async()=>{await a.inLands().pickOne((async e=>{await e.isolate()}))}})}}]}]},gv={name:"Tactician",set:gn.NatureIncarnate,effects:[{name:"Setup Changes",effects:[{text:"Lose rightmost Growth option.",[Pn.Now]:({you:e})=>(e.disabledGrowthOptions.push(2),Promise.resolve())}]},{name:"Adaptable Tactician",effects:[{text:"Your 3rd Growth option is replaced by:<br><bullet> Gain Power Card<br><bullet> Add a Presence<br><bullet> Gain +1 Energy<br><bullet> Gain Sun OR Fire",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Tactician,[Pn.SpiritHasExtraGrowthOptions]:({spirit:e})=>e===a?{effects:[{text:"Gain Power Card",[Pn.Now]:async()=>{await a.gainPowerCard()}},{text:"Add a Presence",[Pn.Now]:async()=>{await a.addPresenceInRange(0)}},{text:"Gain +1 Energy",[Pn.Now]:async()=>{await a.gainEnergy(1)}},{text:"Gain Sun OR Fire",[Pn.Now]:async()=>{await a.gainElements({elements:[ir.Sun,ir.Fire]})}}]}:null}),Pm(a,"growthOptions"),a.growthStatus=a.growthOptions.map((()=>Rw.Available))}}]}]},fv={name:"Tangles",set:gn.NatureIncarnate,innatePowers:[Ui.ImpenetrableTanglesOfGreenery],effects:[{name:"Setup Changes",effects:[{text:"Replace Innate Power: 'Creepers Tear Into Mortar' with 'Impenetrable Tangles Of Greenery'.",[Pn.Now]:async({you:e})=>{await e.replacePower(Ui.CreepersTearIntoMortar,{withPower:Ui.ImpenetrableTanglesOfGreenery})}},{text:"Replace Unique Power: 'Gift Of Proliferation' with 'Belligerent And Aggressive Crops'.",[Pn.Now]:async({you:e})=>{await e.replacePower(Ui.GiftOfProliferation,{withPower:Ui.BelligerentAndAggressiveCrops})}}]}]},yv={name:"Transforming",set:gn.NatureIncarnate,innatePowers:[Ui.ExaltationOfTheTransformingFlame],effects:[{name:"Setup Changes",effects:[{text:"Replace Innate Power: 'The Burned Land Regrows' with 'Exaltation Of The Transforming Flame'.",[Pn.Now]:async({you:e})=>{await e.replacePower(Ui.TheBurnedLandRegrows,{withPower:Ui.ExaltationOfTheTransformingFlame})}}]},{name:"Transform Rather Than Consume",effects:[{text:"When your Actions would Destroy <city> (including by Damage), instead:<br>2 <fear>. Replace that <city> with <town> and 1 <explorer>. Push both Invaders.<br><br>When your Actions would Destroy <town> (including by Damage), instead: 1 <fear>. Replace that <town> with <explorer>. Push both Invaders.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Transforming,[Pn.GlobalReminder]:()=>({icon:"Transform",ongoing:!0,spirit:a,players:[a]}),[Pn.PreventRemovePiece]:async({piece:t,removement:n})=>{if(e.action.spirit===a&&wr[n].isDestroyLike&&t.isA(e.TownOrCity)){const a=t.isA(e.City);return await e.addSubEffect({text:a?"When your Actions would Destroy <city> (including by Damage), instead:<br>2 <fear>. Replace that <city> with <town> and 1 <explorer>. Push both Invaders.":"When your Actions would Destroy <town> (including by Damage), instead: 1 <fear>. Replace that <town> with <explorer>. Push both Invaders.",[Pn.Now]:async()=>{await t.location.fear(a?2:1),t.damage=0;const e=[];e.push(...(await t.replace([a?Ln.Town:Ln.Explorer,Ln.Explorer])).added);for(const a of e)await a.piece.push()}}),!0}return!1}})}}]}]},pv={name:"Unconstrained",set:gn.NatureIncarnate,effects:[{name:"Setup Changes",effects:[{text:"Lose Special Rule: Call Forth Predators.",[Pn.Now]:({$:e})=>(e.removeEffectsWithId(In.FangsCallForthPredators),Promise.resolve())},{text:"Do not Add a <beasts> as part of Spirit Setup.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Unconstrained,[Pn.PreventAddPiece]:({piece:t,location:n})=>Promise.resolve(e.phase===Gi.SetupPresence&&t===Ln.Beasts&&n.hasPresenceOf(a)),[Pn.AfterSetupPresence]:()=>(e.removeThisEffect(),Promise.resolve())})}}]},{name:"Unconstrained by Ravaged Lands",text:"Ranging Hunt (your left Innate Power) may target lands with <blight>.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Unconstrained,[Pn.GlobalReminder]:()=>({icon:"Target<br><blight>",ongoing:!0,spirit:a,players:[a]}),[Pn.MayIgnoreTargetFilterWhenTargetingLand]:({power:e})=>e.power===Ui.RangingHunt})}},{name:"Predators Arise",text:"Each Spirit Phase, either Prepare 1 <beasts> (storing it next to your Spirit Panel) or Add any number of your prepared <beasts> to one of your lands.",[Pn.Now]:async({$:e,you:a})=>{await a.addExtraAction({effectId:In.Unconstrained,actionId:"PredatorsArise",icon:"+1 <beasts>",text:"Either Prepare 1 <beasts> (storing it next to your Spirit Panel) or Add any number of your prepared <beasts> to one of your lands.",enabled:()=>e.phase===Gi.Grow||e.phase===Gi.GainEnergy,onActivate:async()=>{await e.addSubEffect({[Pn.Now]:async()=>{await e.chooseBetween({effects:[{actionId:"PrepareBeast",text:"Prepare 1 <beasts>",[Pn.Now]:async()=>{await a.addPrepareBeast(1)}},{actionId:"AddBeasts",text:"Add any number of your prepared <beasts> to one of your lands.",condition:()=>a.panelPieces[e.Beasts]>0,[Pn.Now]:async()=>{await a.inLands().pickMultiple({optional:!0,amount:a.panelPieces[e.Beasts],forPickedItem:async t=>{await t.add(1,e.Beasts),await a.addPrepareBeast(-1)},together:!0})}}]})}})}})}}]},wv={name:"Violence",set:gn.NatureIncarnate,effects:[{name:"Setup Changes",effects:[{text:"Lose Innate Power: Spirits May Yet Dream.",[Pn.Now]:async({you:e})=>{await e.forgetPower(Ui.SpiritsMayYetDream)}},{text:"Gain 1 Energy.",[Pn.Now]:async({you:e})=>{await e.gainEnergy(1)}},{text:"Replace Unique Power: 'Dreams of the Dahan' with 'Bats Scout For Raids By Darkness'.",[Pn.Now]:async({you:e})=>{await e.replacePower(Ui.DreamsOfTheDahan,{withPower:Ui.BatsScoutForRaidsByDarkness})}}]},{name:"Nightmares of Violence and Death",effects:[{text:"Card Plays on your bottom <presence> track grant twice as many Plays during the Spirit Phase. These extra Card Plays can only be used for Power Cards with Damage or Destroy instructions.<br>When To Dream A Thousand Deaths generates <fear>, generate +1 <fear> per affected <explorer>/<town> (to 1/3/5 <fear> for <explorer>/<town>/<city>, respectively).",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Violence,[Pn.ExtraCardPlaysForDamageAndDestroy]:({spirit:e})=>e===a})}}]}]},mv={name:"Warrior",set:gn.NatureIncarnate,innatePowers:[Ui.LeadTheWarriorsToBattle],effects:[{name:"Setup Changes",effects:[{text:"Replace Innate Power: 'Lead The Furious Assault' with 'Lead The Warriors To Battle'.",[Pn.Now]:async({you:e})=>{await e.replacePower(Ui.LeadTheFuriousAssault,{withPower:Ui.LeadTheWarriorsToBattle})}},{text:"Replace 1 of your <presence> with your Incarna (<incarna-warrior>) and 1 <dahan>.",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({[Pn.AfterSetupPresence]:async()=>{await a.presence().pickOne((async t=>{const n=t.location;await t.remove(Wn.RemoveFromGame),await n.addIncarna(Ln.IncarnaWarrior,a),await n.add(1,e.Dahan)}),{noOptions:"No presence?"})}})}},{text:"Replace Unique Power: 'Manifestation Of Power And Glory' with 'Call To Bloodshed'.",[Pn.Now]:async({you:e})=>{await e.replacePower(Ui.ManifestationOfPowerAndGlory,{withPower:Ui.CallToBloodshed})}}]},{name:"Warrior-Spirit's Raiding Party",effects:[{text:"When your Actions move <dahan> and they bring <incarna-warrior>, you may deal 1 Damage at <incarna-warrior> (max. 1 Damage per Action).",[Pn.Now]:async({$:e})=>{await e.addSubEffect({effectId:In.Warrior,[Pn.AfterMoving]:async({piece:a,destination:t})=>{a.isA(e.Dahan)&&e.bringingWarriorThisInstruction&&!e.action.data.hasRaided&&await e.may({text:"Deal 1 Damage at <incarna-warrior>?"})&&(e.action.data.hasRaided=!0,await t.damage(1))}})}}]},{name:"Incarna",[Pn.Now]:async({$:e,you:a})=>{await e.addSubEffect({effectId:In.Warrior,text:"<incarna-warrior> may count as <presence>.",[Pn.GlobalReminder]:()=>({icon:"<incarna-warrior> =<br><presence>",ongoing:!0,spirit:a,players:[a]})})}}]},vv={[Qo.Amorphous]:Hm,[Qo.DarkFire]:Zm,[Qo.Deeps]:ev,[Qo.Encircle]:av,[Qo.Enticing]:tv,[Qo.Foreboding]:qm,[Qo.Haven]:nv,[Qo.Immense]:jm,[Qo.Intensify]:rv,[Qo.Lair]:iv,[Qo.Locus]:sv,[Qo.Madness]:Jm,[Qo.Mentor]:ov,[Qo.Might]:_m,[Qo.Nourishing]:dv,[Qo.Pandemonium]:zm,[Qo.Reach]:Ym,[Qo.Regrowth]:lv,[Qo.Resilience]:Km,[Qo.Sparking]:cv,[Qo.SpreadingHostility]:hv,[Qo.Stranded]:uv,[Qo.Sunshine]:Qm,[Qo.Tactician]:gv,[Qo.Tangles]:fv,[Qo.Transforming]:yv,[Qo.Travel]:Vm,[Qo.Unconstrained]:pv,[Qo.Violence]:wv,[Qo.Warrior]:mv,[Qo.Wind]:Xm},xv=(e,a)=>(e=>Array.from(Array(e.length).keys()))(e).filter(((t,n)=>a(e[t],n))),bv=e=>1===Object.keys(e).filter((a=>0!==e[a])).length,Tv=(e,a)=>{let t="";return Object.keys(Yw).filter((a=>void 0!==e[a]&&0!==e[a])).forEach((n=>{t+=`${e[n]} ${a?Yw[n].name:Yw[n].text} `})),t},Av=(e,...a)=>{const t={...e};for(const e of a)for(const a of Object.keys(t))t[a]=Math.max(t[a]-(e[a]??0),0);return t};var Iv=function(e,a,t,n){var r,i=arguments.length,s=i<3?a:null===n?n=Object.getOwnPropertyDescriptor(a,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,a,t,n);else for(var o=e.length-1;o>=0;o--)(r=e[o])&&(s=(i<3?r(s):i>3?r(a,t,s):r(a,t))||s);return i>3&&s&&Object.defineProperty(a,t,s),s};class Pv{data;absorbedPresence=[];aspect;cardsMadeImpendingThisTurn=[];cardsPlayedThisTurn=[];daysPowers=[];destinyPowers=[];destroyedIncarna=null;destroyedPresence=0;didNotWantToReachThreshold=[];disabledGrowthOptions=[];growthStatus=[];hasEmpoweredIncarna=!1;hasPlayedPowers=!1;hasReclaimedACardDuringSpiritPhase=!1;healingCards=[];healingMarkers=[];innateEnergy=0;landsIncludingNonExisting=[];panelPieces={[Ln.Explorer]:0,[Ln.Town]:0,[Ln.City]:0,[Ln.Beasts]:0};powers=[];powersInProgressionDeck=[];preparedElements=id();rememberedUniques=[];score=0;spirit;spiritNumber;startingBoardIndex;time=0;trackElements=[];usedCardPlaysForNonDamageAndDestroy=0;$;trackStatusInternal=[];constructor({$:e,spiritNumber:a,spirit:t,aspect:n,boardIndex:r,progression:i=!1}){ed.makeObservable(this),this.$=e,this.spiritNumber=a,this.spirit=t,this.aspect=n,this.startingBoardIndex=r,this.data=nm[this.spirit],i&&this.data.progression&&this.data.progression.forEach((e=>{this.$.removePowerCardFromDecks(e),this.powersInProgressionDeck.push(e)}))}get availablePowersForPlay(){if(this.$.allSpiritsHavePlayedPowers)return[];let e;const a=this.cardPlaysCostToPlayPowerCard,t=this.cardPlays;if(this.hasExtraCardPlaysForDamageAndDestroy){const n=this.usedCardPlaysForNonDamageAndDestroy+a>t;e=this.usedCardPlays+a>2*t?this.powers.filter((e=>e.assisted&&e.isPlayable)):this.powers.filter((e=>e.isPlayable&&(!n||e.isCardWithDamageAndDestroy)))}else e=this.usedCardPlays+a>t?this.powers.filter((e=>e.assisted&&e.isPlayable)):this.powers.filter((e=>e.isPlayable));const n=e.map((e=>({power:e,spirit:this})));return this.hasPlayedPowers||n.push({power:void 0,spirit:this}),n}get availablePresenceForTargeting(){return this.presence().items.concat(this.extraPresenceAvailableForTargeting)}get availableRememberedUniques(){return this.rememberedUniques.filter((e=>0===this.$.spiritsWhich((a=>a.hasPower(e))).count))}get averageEnergyCost(){if(0===this.powers.length)return 0;let e=0;for(const a of this.powers)e+=a.costToPlay;return e/this.powers.length}get baseCardPlays(){let e=0,a=0;return this.data.tracks.forEach((({cardPlays:t,extraCardPlays:n},r)=>{this.trackStatus[r]!==vg.Covered&&(e=Math.max(e,t??0),a+=n??0)})),e+a}get canPlayCardsWithoutCost(){return this.$.someEffect(Pn.CanPlayCardsWithoutCost,{spirit:this})}get cardPlays(){const e=this.$.adjustedCardPlays;return e>0?e:this.baseCardPlays+this.extraCardPlays+this.impendingCardPlays}get cardPlaysCostToPlayPowerCard(){return 1+this.$.sumEffects(Pn.ExtraCardPlaysCost,{spirit:this})}get corners(){const e=new Set;for(const a of this.lands)for(const t of a.corners)e.add(t);return Array.from(e)}get elements(){return id(this.elementsFromPowers,this.elementsFromTracks,this.elementsFromEffects)}get elementsFromCards(){return this.elementsWithStatus((()=>!0))}get elementsFromDiscard(){return this.elementsWithStatus((e=>e.isInDiscard))}get elementsFromEffects(){return id(...this.$.effectsMappedWithFilter(Pn.Elements,{spirit:this}))}get elementsFromHand(){return this.elementsWithStatus((e=>e.isInHand))}get elementsFromNonBlessedPowers(){return this.elementsWithStatus((e=>e.isInPlay),!1)}get elementsFromPowers(){return this.elementsWithStatus((e=>e.isInPlay))}get elementsFromTracks(){const e=id();return this.trackStatus.forEach(((a,t)=>{if(a!==vg.Covered){const a=this.data.tracks[t].elements;if(a)for(const t of a)e[t]+=1;null!==this.trackElements[t]&&(e[this.trackElements[t]]+=1)}})),e}get energy(){return this.innateEnergy+(this.spirit===fn.Ocean?Math.floor(this.healthWorthOfDrownedInvaders/this.$.spiritCount)-this.energyDebt:0)}get extraCardPlays(){return this.$.sumEffects(Pn.ExtraCardPlays,{spirit:this})}get extraPresenceAvailableForTargeting(){const e=[];for(const a of this.$.effectsMappedWithFilter(Pn.MayUseOtherSpiritPresenceForTargeting,{spirit:this}))e.push(...a);return e}get growthOptionEnergy(){const e=this.growthOptions.find((e=>e.status===Rw.Available&&e.effect.text?.startsWith("Gain")&&e.effect.text?.endsWith("Energy")));return e?Number.parseInt(e.effect.text[6],10):0}get growthOptionGroups(){const e=[...this.data.growthOptions];for(const a of this.$.effectsMappedWithFilter(Pn.SpiritHasExtraGrowthOptions,{spirit:this}))e.push(a);return e}get growthOptions(){const e=[];let a=0;return this.growthOptionGroups.forEach((({cost:t,effects:n,requiresTrackSpot:r,requiresHealingCard:i})=>{n.forEach(((n,s)=>{e.push({effect:{...n,card:this.data.innatePowers[0]},spirit:this,option:a,subOption:s,index:e.length,cost:t,status:this.growthStatus[e.length],requiresTrackSpot:r,requiresHealingCard:i})})),a+=1})),e}get hasExtraCardPlaysForDamageAndDestroy(){return this.$.someEffect(Pn.ExtraCardPlaysForDamageAndDestroy,{spirit:this})}get hasIncarna(){return null!=this.incarna}get hasReclaimableCards(){return this.powers.some((e=>e.isA(En.AnyCard)&&e.isInDiscard))}get healthWorthOfDrownedInvaders(){return this.panelPieces[Ln.Explorer]+2*this.panelPieces[Ln.Town]+3*this.panelPieces[Ln.City]}get impendingCardPlays(){let e=0;return this.data.tracks.forEach((({impendingCardPlays:a},t)=>{this.trackStatus[t]!==vg.Covered&&(e+=a??0)})),e}get impendingEnergy(){let e=0;return this.data.tracks.forEach((({impendingEnergy:a},t)=>{this.trackStatus[t]!==vg.Covered&&(e+=a??0)})),e}get incarna(){return this.pieces.find((e=>e.isIncarna&&e.owner===this))??null}get innatePowers(){return this.powers.filter((e=>e.data.type===kn.Innate))}get lands(){return this.landsIncludingNonExisting.filter((e=>e.exists))}get mayShift(){return this.$.someEffect(Pn.MayShift,{spirit:this})}get mayUsePreparedElementsToEnhanceActions(){return this.$.hasEffectNamed("Insights into the World's Nature")}get name(){return this.data.name}get nameLink(){return`<spirit-${this.spirit.toLowerCase()}>`}get nonBlessedPowerCards(){return this.powers.filter((e=>e.isA(En.AnyCard)&&!e.isBlessed&&!e.assisted))}get nonInnatePowers(){return this.powers.filter((e=>e.data.type!==kn.Innate))}get numberOfHealingAnimalMarkers(){return this.healingMarkers.filter((e=>e===ir.Animal)).length}get numberOfHealingMarkers(){return this.healingMarkers.length}get numberOfHealingWaterMarkers(){return this.healingMarkers.filter((e=>e===ir.Water)).length}get numberOfImpendingCards(){return this.powers.filter((e=>e.isImpending)).length}get numberOfPowerCards(){return this.nonBlessedPowerCards.length}get numberOfPowerCardsInHand(){return this.nonBlessedPowerCards.filter((e=>e.isInHand)).length}get numberOfPowerCardsInPlay(){return this.powerCardsInPlay.length}get numberOfPreparedElements(){return cg(Object.values(this.preparedElements))}get numberOfPresenceInLands(){return this.presence().count}get numberOfPresenceInTracks(){return zo(this.trackStatus,(e=>e===vg.Covered))}get numberOfSacredSites(){return this.inSacredSites().count}get pickOptions(){const e=[...this.data.pickOptions.map((e=>[...e]))];return this.$.firstEffectOfType(Pn.SpiritHasExtraGrowthOptions,{spirit:this})&&e.forEach((e=>{e.push(e[e.length-1]+1)})),e}get pieces(){const e=[];for(const a of this.lands)e.push(...a.pieces);return e}get powerCardsInPlay(){return this.powers.filter((e=>e.isA(En.AnyCard)&&e.isInPlay))}get powerCardsInPlayNotBlessed(){return this.powers.filter((e=>e.isA(En.AnyCard)&&e.isInPlay&&!e.isBlessed&&!e.assisted))}get preparedElementsForGainingElements(){return this.mayUsePreparedElementsToEnhanceActions?this.preparedElements:id()}get presenceMayCountAsBadlandsOrBeasts(){return this.$.someEffect(Pn.PresenceCountsAsBadlandsOrBeasts,{spirit:this})}get preventAddAnyPresence(){return this.$.someEffect(Pn.PreventAddAnyPresence,{spirit:this})}get primaryElements(){const e=id();for(const a of this.data.uniquePowers)for(const t of dg[a].elements)e[t]+=1;return Object.keys(e).sort(((a,t)=>e[t]-e[a])).slice(0,3)}get serialized(){return this.spirit}get startingBoard(){return this.$.boards[this.startingBoardIndex]}get trackActions(){return this.data.tracks.map((({effect:e,effectRequires:a},t)=>({effect:e,effectRequires:a,trackIndex:t,spirit:this,status:this.trackStatus[t]}))).filter((({effect:e,effectRequires:a})=>void 0!==e&&(void 0===a||a({you:this,$:this.$}))))}get trackEnergy(){let e=0,a=0;return this.data.tracks.forEach((({energy:t,extraEnergy:n},r)=>{this.trackStatus[r]!==vg.Covered&&(e=Math.max(e,t??0),a+=n??0)})),e+a}get trackStatus(){return this.trackStatusInternal}get unlockedTrackPresence(){return xv(this.data.tracks,((e,a)=>this.trackStatus[a]===vg.Covered&&(void 0===e.requires||this.trackStatus[e.requires]!==vg.Covered)&&(void 0===e.requiresAll||!e.requiresAll.some((e=>this.trackStatus[e]===vg.Covered)))&&(void 0===e.requiresAny||e.requiresAny.some((e=>this.trackStatus[e]!==vg.Covered)))))}get usedCardPlays(){return this.cardsPlayedThisTurn.length*this.cardPlaysCostToPlayPowerCard}get validTrackSpotsToReturnPresence(){return xv(this.data.tracks,((e,a)=>this.trackStatus[a]!==vg.Covered&&(this.data.tracks[a].covered||void 0!==this.data.tracks[a].requires||void 0!==this.data.tracks[a].requiresAll||void 0!==this.data.tracks[a].requiresAny)&&this.trackPlacementIsValidGivenIndexIsCovered(a)))}static createCollection(e,a){return new Ko(e,An.SelectSpirit,a)}async absorb(e){this.absorbedPresence.push(e.spiritNumber),await this.$.sendEvent({type:Tn.AbsorbedPresence,spirit:this,targetSpirit:e})}addExtraAction(e){const{actionId:a,icon:t,enabled:n=(()=>!0),visible:r=(()=>!0),maxUses:i=(()=>1),text:s=this.$.currentStackEffect?.text,name:o=this.$.currentStackEffect?.name,onActivate:d,unlimited:l=!1,power:c,previewPowers:h,required:u=!1,scenario:g,effectId:f}=e,y=De.box(0);return this.$.addSubEffect({name:o,text:s,effectId:f,[Pn.GlobalReminder]:()=>({icon:l||u?t:`${t}<br>${y.get()} / ${i()}`,ongoing:!0,unlimited:l,spirit:l||u?void 0:this,players:[this],visible:r(),scenario:g,power:c,previewPowers:h}),[Pn.ExtraAction]:()=>l||!(y.get()>=i())&&n()?{actionId:a,players:[this],spirit:this,required:u,name:o,text:s,[Pn.Now]:async e=>{y.set(y.get()+1),await d(e)}}:null,[Pn.TimePasses]:()=>(y.set(0),Promise.resolve())})}async addExtraTrackElement(e){null===this.trackElements[e]&&await this.$.chooseBetween({prompt:"Select Element.",effects:[...kd].map((a=>({actionId:a,text:`${Yw[a].text}`,[Pn.Now]:()=>(this.trackElements[e]=a,Promise.resolve())})))})}async addIncarna(e,a=(()=>!0)){const t=[];return await this.inLandsWhere(a).pickOne((async a=>{t.push(await a.putIncarna(e,this))}),{players:[this],prompt:"Pick a land to add Incarna."}),t}addLand(e){this.landsIncludingNonExisting.includes(e)||e.isEndlessDark||this.landsIncludingNonExisting.push(e)}async addOrMoveIncarnaToLandWithPresence(e){this.hasIncarna?await(this.incarna?.location.move({pieces:Xn.Incarna,owner:this,destinationFilter:e=>e.hasPresenceOf(this),locations:{target:zn.AnyLands}})):await this.addIncarna(e)}addPrepareBeast(e){return this.panelPieces[this.$.Beasts]+=e,Promise.resolve()}async addPresence(e={}){const{range:a=0,locations:t=zn.ToOneOfYourLands,filter:n=(()=>!0),destroyed:r=!1,together:i=!1,ignoreLandType:s=!1,forcedFromTrack:o=!1,amount:d=1,autoPlayOneOption:l=!1}=e,c=t===zn.Remove||t===zn.RemoveFromGame||t===zn.Time,h=[];for(;h.length<d;){let u;const g=!c&&this.preventAddAnyPresence,f=h.length,y=this.unlockedTrackPresence;let p,w;if(r){if(0===this.destroyedPresence){await this.$.clickToContinue({text:"No <broken> to add."});break}}else{let e=null;if(y.length>0&&(o?e=await this.$.query({query:An.SelectTrack,prompt:"Select <presence> from tracks",players:[this],items:y,actionIds:y.map((e=>`Track-${this.spirit}-${e}`))}):g||(e=await this.$.queryOptional({query:An.SelectTrack,prompt:"Select <presence> from tracks",cancel:c?"Remove <presence> from island":"Reposition <presence>",players:[this],items:y,actionIds:y.map((e=>`Track-${this.spirit}-${e}`))}))),null!==e)u=y[e];else{let e="Select which <presence> to relocate.";g?e=`No more <presence> may be added to the island.<br>${e}`:c&&(e="Select which <presence> to remove."),await this.presence().pickOne((e=>(p=e,Promise.resolve())),{players:[this],prompt:e})}}switch(t){case zn.RemoveFromGame:void 0!==p&&await p.remove(Wn.RemoveFromGame);break;case zn.Remove:void 0!==p&&await p.remove(Wn.Remove),this.destroyedPresence+=1;break;case zn.Time:if(this.time+=1,void 0!==p&&await p.remove(Wn.Silent),d>1)return void 0!==u&&await this.removePresenceFromTrack(u),this.addPresence({...e,amount:d-1});break;case zn.ToAnyOcean:w=this.$.inOceans().where(n);break;case zn.WithinRange:w=this.inLandsWithinRange(a,n);break;case zn.ToOneOfYourLands:w=this.inLandsWhere(void 0!==n?n:()=>!0);break;case zn.AnyLands:w=this.$.inLandsWhere(void 0!==n?n:()=>!0)}if(void 0!==w&&await w.where((e=>!this.preventAddPresence(e,s)&&(!i||0===h.length||h.some((a=>a.location===e))))).autoPickOne((async e=>{void 0!==p&&await p.remove(Wn.Relocate);let a=1;r&&this.destroyedPresence>0&&await this.$.oneEffectActivates(Pn.AddTwoExtraBroken,{spirit:this,land:e})&&(a=Math.min(this.destroyedPresence,3)),h.push(...await e.createPiece(a,p?.piece??Ln.Presence,this.spiritNumber)),r&&(this.destroyedPresence-=a)}),{players:[this],autoPlayOneOption:l}),void 0!==u&&await this.removePresenceFromTrack(u),h.length===f)break}return h}addPresenceInAnyOcean(){return this.addPresence({locations:zn.ToAnyOcean})}addPresenceInRange(e,a){return this.addPresence({locations:zn.WithinRange,range:e,...a})}async andAnotherSpirit(e,a){for(const t of[0,1]){const n=[this,e][t];await this.$.addSubEffect({text:a.text?.(0===t),players:[n],[Pn.Now]:()=>a.now(n,0===t)})}}async askToConvertElements(e,a={}){const t=this.elementsTreatedAsElements(e);if(this.$.action.power?.assisted)return cg(Object.values(t))<=10;const{optionalUpgrade:n=!0,optionalThreshold:r=!0}=a;if(this.hasElements(t))return!(r&&!this.$.currentActionHasAllThresholds)||this.$.may({prompt:"Resolve threshold?"});if(this.hasElementsWithConvert(t)){const a=Av(t,this.elements);if(!n||await this.$.may({prompt:`Convert Elements to reach threshold:<br>${Tv(t)}?`})){for(;cg(Object.values(a))>0;){const e=Object.keys(a).filter((e=>(a[e]??0)>0))[0],t=[];this.preparedElementsForGainingElements[e]>0&&t.push({actionId:`Prepared${e}`,text:`Use prepared ${Yw[e].text}`,[Pn.Now]:async()=>{this.preparedElements[e]-=1,await this.$.sendEvent({text:`${this.nameLink} spent 1 ${Yw[e].text}.`,type:Tn.GenericSub}),await this.gainElementsUntilEndOfAction({[e]:1})},condition:()=>this.preparedElementsForGainingElements[e]>0});const n=[ir.SunOrMoon,ir.WaterOrAnimal,ir.FireOrPlant].find((a=>Yw[a].elements.includes(e)));void 0!==n&&1===this.elements[n]&&t.push({actionId:`Dual${n}`,text:void 0!==`Use ${n}`?Yw[n].text:0,[Pn.Now]:async()=>{await this.$.sendEvent({text:`${this.nameLink} converted ${Yw[n].text} to ${Yw[e].text}.`,type:Tn.GenericSub}),await this.gainElementsUntilEndOfTurn({[e]:1,[n]:-1},{subEffect:!1})}}),this.elements[ir.Any]>0&&t.push({actionId:"Any",text:"Use <any>.",[Pn.Now]:async()=>{await this.$.sendEvent({text:`${this.nameLink} converted <any> to ${Yw[e].text}.`,type:Tn.GenericSub}),await this.gainElementsUntilEndOfTurn({[e]:1,[ir.Any]:-1},{subEffect:!1})},condition:()=>this.elements[ir.Any]>0}),await this.$.chooseBetween({text:`How to convert to ${Yw[e].text}?`,autoPlayOneOption:!1,effects:t},{orChoice:!1}),a[e]-=1}return this.$.action.data.upgraded=!0,!0}return this.didNotWantToReachThreshold.push(e),!1}return!1}async askToConvertElementsToCombo(e){const a=this.elementsTreatedAsElements(e),t=this.numberOfElementCombos(a);let n=id();for(let e=0;e<t+1;e+=1)n=id(n,a);for(;this.hasElementsWithConvert(n)&&await this.askToConvertElements(n,{optionalThreshold:!1});)n=id(n,a)}boardDistanceToSpirit(e){let a=null;for(const t of this.boards(this.extraPresenceAvailableForTargeting))for(const n of e.boards(e.extraPresenceAvailableForTargeting))if(null!==t.boardDistance[n.boardIndex]&&(a=null===a?t.boardDistance[n.boardIndex]:Math.min(a,t.boardDistance[n.boardIndex]),0===a))return 0;return a}boards(e=[]){return this.$.boards.filter((a=>a.existingLocations.some((a=>a.hasPresenceOf(this,e)))))}canAffordGrowthOption(e){return(void 0===e.requiresTrackSpot||this.trackStatus[e.requiresTrackSpot]!==vg.Covered)&&(void 0===e.requiresHealingCard||this.healingCards.length>0)&&(void 0===e.cost||this.energy>=e.cost||this.hasPaidForGrowthOption(e))&&!this.disabledGrowthOptions.includes(e.option)}convertElements(e){return this.askToConvertElements(e,{optionalUpgrade:!1,optionalThreshold:!1})}async destroyPresence(e,a=Wn.DirectDestroy,t=!1){const n=[];return await this.presence().pickMultiple({amount:e,forPickedItem:async e=>{n.push(...await e.remove(a))},repeatSame:!0,optional:t,effect:{prompt:"Pick presence."}}),n}async discardAllPowerCards(){await this.powersWhere((e=>e.isA(En.AnyCard)&&e.isInHand)).forEach((async e=>{await e.discard()}))}async discardElements(e,{optional:a}={optional:!1}){const t={};for(let n=0;n<e;n+=1){const r=[...kd].map((e=>({actionId:e,text:`${Yw[e].text}`,condition:()=>this.preparedElements[e]>0,[Pn.Now]:()=>(t[e]=(t[e]??0)+1,this.preparedElements[e]-=1,Promise.resolve())})));a&&r.push({actionId:"SkipDiscard",text:"Skip",[Pn.Now]:()=>(n=e,Promise.resolve())}),await this.$.chooseBetween({prompt:`Select Element to discard. (${e-n} left.)`,effects:r,autoPlayOneOption:!0})}return Promise.resolve(t)}async discardPowerCards(e,a){const t=this.powersWhere((e=>e.isA(En.AnyCard)&&e.status===Md.InHand&&(void 0===a||a(e))));await t.pickMultiple({amount:e,forPickedItem:async e=>{await e.discard()},effect:{prompt:"Pick a Power Card to discard."}})}doPowerAction(e,a){return this.$.doPowerAction(this,e,a)}doSpiritAction(e){return this.$.doSpiritAction(e,{spirit:this})}async doTrackAction(e){const a=this.data.tracks[e];await this.doSpiritAction((()=>this.$.addEffect({name:a.name,spirit:this,...a.effect}))),this.setTrackStatusForIndex(vg.UncoveredPlayed,e)}elementTreatedAsElement(e){if(this.mayTreatElementsAsOther){const a=this.$.resultFromFirstEffectOfType(Pn.TreatElementAsElement,{spirit:this,element:e});if(void 0!==a)return a}return e}elementsTreatedAsElements(e){if(this.mayTreatElementsAsOther){const a=this.$.resultFromFirstEffectOfType(Pn.TreatElementsAsElements,{spirit:this,elements:e});if(void 0!==a)return a}return e}elementsWithStatus(e,a=!0){const t=id();return this.powers.forEach((n=>{!n.data.elements||n.assisted||!e(n)||!a&&n.isBlessed||n.data.elements.forEach((e=>{t[e]=(t[e]??0)+1}))})),id(this.elementsTreatedAsElements(t))}empowerIncarna(){return this.hasEmpoweredIncarna=!0,Promise.resolve()}async escapePieces(e){const a=Math.min(e??this.$.theEndlessDark.pieces.length,this.$.theEndlessDark.pieces.length),t=await this.$.theEndlessDark.move({amount:a,destinationFilter:e=>e.isLand&&!e.isOcean&&e.hasPresenceOf(this),locations:{target:zn.AnyLands},pickPiecesEffect:{prompt:"Pick Piece to Escape."},pickDestinationEffect:{prompt:"Pick Land to Escape to."}});return t.length!==a&&this.$.loseGame(Ep.TheEndlessDark),t}extraRange(e){let a=0;return this.data.tracks.forEach((({extraRange:e},t)=>{this.trackStatus[t]!==vg.Covered&&(a+=e??0)})),a+=this.$.sumEffects(Pn.ExtraRange,{spirit:this,location:e}),a}forPieces(){return td.createCollection(this.$,this.pieces)}forPiecesThatIs(e){return this.forPieces().where((a=>a.isA(e)))}forPiecesWhere(e){return this.forPieces().where(e)}async forgetPower(e,a={}){const t=this.powers.find((a=>a.power===e));void 0!==t&&await this.forgetPowerState(t,a)}async forgetPowerState(e,a={}){const{canRegain:t=!0,silent:n=!1,duringPowerGain:r=!1}=a;if(e.owner!==this||!n&&await this.$.oneEffectActivates(Pn.PreventForgetPowercard,{power:e,duringPowerGain:r}))return null;const i=Vr(this.powers,(a=>a.power===e.power));return this.invalidatePowerElementCache(),i&&(i.isA(En.Unique)?t&&(this.rememberedUniques.includes(i.power)||this.rememberedUniques.push(i.power)):await this.$.discardPowerToDeckDiscard(i.power),n||await this.$.sendEvent({type:Tn.PowerCardForgotten,spirit:this,power:i})),i}async forgetPowers(e={}){const{amount:a=1,powerFilter:t=En.AnyCard,filter:n=(()=>!0),optional:r=!1,duringPowerGain:i=!1}=e,s=[],o=this.powersWhere((e=>e.isA(t)&&!e.isBlessed&&!e.assisted&&n(e)));return await o.pickMultiple({amount:a,forPickedItem:async e=>{const a=await this.forgetPowerState(e,{duringPowerGain:i});a&&s.push(a)},optional:r,effect:{players:[this],prompt:`Pick ${Fd[t].text} to forget.`}}),s}async gainCardPlays(e){await this.$.addSubEffectUntilEndOfTurn({[Pn.ExtraCardPlays]:({spirit:a})=>a===this?e:0})}gainDamageBoost(e){return this.$.gainDamageBoost({...e,spirit:this})}async gainElements(e={}){const{elements:a=[...kd],amount:t=1,forTheRestOfTheGame:n=!1,different:r=!1,same:i=!1,possiblyWithConvert:s=!1,anyAmount:o=!1}=e,d={},l={close:!1};for(;cg(Object.values(d))<t&&!o||o&&!l.close;){const e=a.filter((e=>!1===r||!d[e])).map((e=>({actionId:e,text:`${Yw[e].text}`,[Pn.Now]:async()=>{const a=i?t:1;s&&!o&&await this.askToConvertElements({[e]:a},{optionalUpgrade:!1}),d[e]||(d[e]=0),d[e]+=a}})));if(o&&e.push({actionId:"Close",text:"Close",[Pn.Now]:()=>(l.close=!0,Promise.resolve())}),await this.$.chooseBetween({prompt:`Choose Element:<br>${Tv(d)}`,autoPlayOneOption:!0,effects:e}),0===e.length)break}return Object.keys(d).length>0&&(n?n&&await this.gainElementsForTheRestOfTheGame(d):await this.gainElementsUntilEndOfTurn(d)),d}async gainElementsForTheRestOfTheGame(e){const a=this.elementsTreatedAsElements(e);await this.$.addSubEffect({[Pn.GlobalReminder]:()=>({text:`Extra elements:<br>${Tv(a)}<br><br>(permanent)`,icon:bv(a)?Tv(a):"Extra<br>Elements",ongoing:!0,spirit:this,players:[this]}),[Pn.Elements]:({spirit:e})=>e===this?a:{}}),Pm(this,"elementsFromEffects","elements")}async gainElementsUntilEndOfAction(e,a){const t=this.elementsTreatedAsElements(e);await this.$.addEffectUntilEndOfAction({effectId:a?In.Downgrade:void 0,name:a?"Downgrade":void 0,[Pn.GlobalReminder]:()=>({text:`${a?"Lose":"Extra"} elements:<br>${Tv(t)}<br><br>(until end of action)`,icon:bv(t)?Tv(t):(a?"Lose":"Extra")+"<br>Elements",spirit:this,players:[this]}),[Pn.Elements]:({spirit:e})=>e===this?t:{}}),Pm(this,"elementsFromEffects","elements")}async gainElementsUntilEndOfTurn(e,a={}){const{subEffect:t=!0}=a,n=this.elementsTreatedAsElements(e);await this.$.sendEvent({type:Tn.GenericSub,text:`${this.nameLink} gained ${Tv(n)}.`});const r={[Pn.GlobalReminder]:()=>({text:`Extra elements:<br>${Tv(n)}<br><br>(until end of turn)`,icon:bv(n)?Tv(n):"Extra<br>Elements",spirit:this,players:[this]}),[Pn.Elements]:({spirit:e})=>e===this?n:{}};t?await this.$.addSubEffectUntilEndOfTurn(r):await this.$.addEffectUntilEndOfTurn(r),Pm(this,"elementsFromEffects","elements")}async gainEnergy(e){for(;e>0&&await this.$.oneEffectActivates(Pn.PreventGainEnergy,{spirit:this});)e-=1;const a={amount:e,spirit:this};return e>0&&(await this.$.waitForAnimationsToFinish(),this.innateEnergy+=e,await this.$.sendEvent({type:Tn.EnergyGained,spirit:this,amount:e})),a}gainEnergyFromTracks(){return this.gainEnergy(this.trackEnergy)}gainHealingMarker(e){return this.healingMarkers.push(e),Promise.resolve()}async gainMakeFastBuff(e={}){const{amount:a=1,filter:t=(()=>!0),alsoMakeSlow:n=!1}=e,r=De.box(0);await this.$.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({icon:`<fast><br>${r.get()} / ${a}`,spirit:this,players:[this]}),[Pn.MayChangeSpeedOfPower]:({power:e})=>(e.isSlow||n)&&t(e)&&this===e.owner&&r.get()<a,[Pn.ChangeSpeedOfPower]:async({power:e})=>{e.data.speed===sr.Slow?await e.makeFast():await e.makeSlow(),r.set(r.get()+1),r.get()===a&&this.$.removeThisEffect()}})}async gainPower(e,a={}){await this.$.removePowerCardFromDecks(e);const{silent:t=!1,index:n,assisted:r}=a,i=new $d(this.$,e,Md.InHand);return r&&(i.assisted=!0),void 0!==n?this.powers.splice(n,0,i):this.powers.push(i),t||await this.$.sendEvent({type:Tn.PowerCardGained,spirit:this,power:i}),i}async gainPowerCard(e={}){const{powerType:a,withoutForgetting:t=!1,forgetOptional:n=!1,gifted:r=!1,taken:i=!1}=e;let{fromSelection:s,discardAfter:o=!0}=e,d=null;const l={chosen:[],notChosen:[],forgotten:[],gifted:r,taken:i};let c=1;c=!(void 0===e.drawAmount||e.drawAmount>1)||i||r?e.drawAmount??4:Math.max((e.drawAmount??4)+this.extraCardDrawAmount,2);const h=(e.keepAmount??1)+this.extraCardKeepAmount;if(!r&&!i&&!s){const e=this.$.resultFromFirstEffectOfType(Pn.AdjustGainingPowers,{spirit:this,powerType:a});e&&(s=e,o=!1)}const u=void 0===s&&4===c&&1===h&&this.powersInProgressionDeck.length>0;if(s)l.notChosen=[...s];else if(!u){const e=void 0!==a?[a]:[kn.Minor,kn.Major],t=e[await this.$.query({query:An.SelectPowerType,items:e,actionIds:e,autoPlayOneOption:!0})];await Jr(c,(async()=>{const e=await this.$.drawPower(t);e&&l.notChosen.push(e)}))}for(let e=0;e<h;e+=1){if(u)void 0===a?d=this.powersInProgressionDeck.shift()??null:(d=this.powersInProgressionDeck.find((e=>dg[e].type===a))??null,null!==d&&Vr(this.powersInProgressionDeck,d));else if(l.notChosen.length>0){if(this.$.phase===Gi.Grow&&4===c)return await this.gainPowerCardBuffs(l.notChosen.reverse(),{discardAfter:o,withoutForgetting:t,forgetOptional:n}),l;if(d=l.notChosen[await this.$.query({query:An.SelectPowerToGain,items:l.notChosen,actionIds:l.notChosen,players:[this]})],Vr(l.notChosen,d),o)for(const e of l.notChosen)await this.$.discardPowerToDeckDiscard(e)}if(null!=d){const a=await this.gainPower(d);dg[d].type!==kn.Major||t||e!==h-1||await this.$.addSubEffect({text:"After you gain a Major Power, you must Forget one of your Power Cards.",[Pn.Now]:async()=>{const e=await this.forgetPowers({optional:n,duringPowerGain:!0});l.forgotten.push(...e)}}),l.chosen.push(a)}}return await this.$.doEffects(Pn.AfterGainingPowers,{spirit:this,powerGain:l}),l}async gainTime(e){await this.addPresence({amount:e,locations:zn.Time})}async gainTimeUpTo(e){await this.$.chooseBetween({text:"Gain how much Time?",effects:[...Array(e+1).keys()].map((e=>({actionId:`Gain${e}Time`,text:`Gain ${e} Time.`,label:`${e}`,[Pn.Now]:async()=>{await this.addPresence({amount:e,locations:zn.Time})}})))})}async givePower(e){const a=e.owner;Vr(a.powers,e),!a.rememberedUniques.includes(e.power)&&e.isA(En.Unique)&&a.rememberedUniques.push(e.power),this.powers.push(e),await this.$.sendEvent({type:Tn.PowerCardGiven,source:a,destination:this,power:e})}async grow(e){const a=this.growthOptions[e];if(a.cost&&!this.hasPaidForGrowthOption(a)&&await this.payEnergy(a.cost),this.growthStatus[e]=Rw.Chosen,Pm(this,"growthOptions"),await this.$.sendEvent({type:Tn.Grow,spirit:this,option:a.option,subOption:a.subOption,text:a.effect.text}),await this.$.doSpiritAction((()=>this.$.addEffect({name:`Growth ${a.option+1}`,spirit:this,players:[this],...a.effect})),{spirit:this}),void 0!==this.unfinishedGrowthOption)this.growthOptions.forEach((({option:e,status:t},n)=>{e!==a.option&&t===Rw.Available&&(this.growthStatus[n]=Rw.NotChosen)}));else{this.growthOptions.forEach((({option:e,status:a},t)=>{if(a===Rw.NotChosen||a===Rw.Available){const a=this.pickOptions.filter((a=>a.includes(e)));if(a.length>0){a[0].filter((e=>this.chosenGrowthOption[e])).length<a.length?this.growthStatus[t]=Rw.Available:this.growthStatus[t]=Rw.NotChosen}}}));this.growthOptionGroups[a.option].oncePerGame&&this.growthOptions.filter((e=>e.option===a.option)).forEach((e=>{this.growthStatus[e.index]=Rw.Unavailable}))}Pm(this,"growthOptions")}hasAtLeastNonBlessed(e,a){return zo(this.powers,(e=>e.isA(a)&&!e.isBlessed&&!e.assisted))>=e}hasElements(e,a=!1){if(this.$.currentActionHasAllThresholds)return!0;const t=this.elementsTreatedAsElements(e);if(this.$.action.power?.assisted)return cg(Object.values(t))<=10;if(a)return this.hasElementsWithConvert(t);const n=this.elements;return!Object.keys(t).some((e=>n[e]<t[e]))}hasElementsWithConvert(e,a){const t=this.elements,n=this.elementsTreatedAsElements(e),r=void 0!==a?this.elementsTreatedAsElements(a):void 0,i=Av(n,t,this.preparedElementsForGainingElements,r??{});for(const e of[ir.SunOrMoon,ir.WaterOrAnimal,ir.FireOrPlant])1===t[e]&&Yw[e].elements.some((e=>(i[e]??0)>0&&(i[e]-=1,!0)));return cg(Object.values(i))<=t[ir.Any]}hasPaidForGrowthOption(e){return this.growthOptions.some((a=>a.option===e.option&&a.status===Rw.Chosen))}hasPieceInLands(e){return this.pieces.some((a=>a.isA(e)))}hasPower(e){return this.powers.some((a=>a.power===e))}hasUncovered(e){return this.trackStatus[e]!==vg.Covered}inCorners(){return Am.createCollection(this.$,this.corners)}inCornersWhere(e){return this.inCorners().where(e)}inLands(){return od.createCollection(this.$,this.lands)}inLandsWhere(e){return this.inLands().where(e)}inLandsWith(e){return this.inLands().where((a=>a.has(e)))}inLandsWithAllOf(...e){return this.inLands().where((a=>a.hasAllOf(...e)))}inLandsWithinRange(e,a){const t=new Set;return this.lands.forEach((n=>{n.landsWithin(e,this).forEach((e=>{(void 0===a||a(e))&&t.add(e)}))})),od.createCollection(this.$,Array.from(t))}inSacredSites(){return this.inLandsWhere((e=>e.hasSacredSiteOf(this)))}invalidateEffectElementCache(){Pm(this,"elementsFromEffects","elements")}invalidatePowerElementCache(){Pm(this,"elementsFromPowers","elements")}async loseEnergy(e){const a=Math.min(this.innateEnergy,e);a>0&&(this.innateEnergy-=a,await this.$.sendEvent({type:Tn.EnergyLost,spirit:this,amount:a}))}maxElementsWithConvert(e){const a=this.elements;return a[e]+this.preparedElementsForGainingElements[e]+[ir.SunOrMoon,ir.WaterOrAnimal,ir.FireOrPlant].filter((t=>1===a[t]&&Yw[t].elements.some((a=>a===e)))).length+a[ir.Any]}async mayReclaimPowerCardInsteadOfDiscarding(e){await this.$.addSubEffectUntilEndOfTurn({[Pn.GlobalReminder]:()=>({power:e.power,players:[this]}),[Pn.AtTimePassesBegin]:()=>this.powersWhere((e=>e.isA(En.AnyCard)&&e.isInPlay&&!e.isBlessed)).optionallyPickOne((e=>e.reclaim()),{noOptions:`${this.nameLink} has no Powers in play.`,card:e.power,players:[this]})})}async movePresence(e){const a=[];return await this.presence().pickOne((async t=>{a.push(...await t.move({amount:1,pieces:this.$.Presence,owner:this,locations:{target:zn.WithinRange,range:e,spirit:this}}))}),{prompt:"Pick <presence> to move."}),a}numberOfAbsorbedPresenceOf(e){return this.absorbedPresence.filter((a=>a===e.spiritNumber)).length}numberOfElementCombos(e){const a=this.elementsTreatedAsElements(e),t=Object.keys(a),n={...this.elements};let r=0;for(;!t.some((e=>n[e]<a[e]));)r+=1,t.forEach((e=>{n[e]-=a[e]}));return r}numberOfPiecesInLands(e){return this.pieces.filter((a=>a.isA(e))).length}async payEnergy(e){if(e>0){if(await this.$.doEffects(Pn.BeforePayEnergy,{spirit:this,amount:e}),this.innateEnergy<e)throw new Error("Not enough energy to pay for amount.");this.innateEnergy-=e,await this.$.sendEvent({type:Tn.EnergyLost,spirit:this,amount:e})}}async playAPowerCardByPayingItsCost(e=(()=>!0)){await this.powersWhere((a=>e(a)&&a.isPlayable)).optionallyPickOne((async e=>{await e.play({withoutUsingCardPlays:!0})}),{players:[this],noOptions:`${this.nameLink} has no Power Cards in hand that can be played.`})}async playInnates(){for(const e of this.innatePowers)await e.play()}async possiblyDowngradeElements(e){const a=e.status===Md.PlayedFast?sr.Fast:sr.Slow,t=e.data,n=new Set;for(const e of t.effects)if(void 0!==e.threshold&&!e.noConvertToThreshold&&this.hasElementsWithConvert(e.threshold))for(const a of Object.keys(e.threshold))n.add(a);const r=Array.from(n),i={skip:!1},s={};for(;!i.skip&&(t.mayAlwaysDowngrade||t.effects.filter((e=>void 0!==e.threshold&&!e.noConvertToThreshold&&this.hasElementsWithConvert(e.threshold))).length>1)&&r.some((e=>this.elements[e]>0));){const n=r.filter((e=>this.elements[e]>0)).map((e=>({actionId:e,text:`${Yw[e].text}`,[Pn.Now]:async()=>{this.$.removeEffectsWithName(In.Downgrade),s[e]=(s[e]??0)-1,await this.gainElementsUntilEndOfAction(s,!0)},condition:()=>t.effects.filter((a=>{if(void 0===a.threshold||a.dontResolveAlone)return!1;const t={...a.threshold,[e]:(a.threshold[e]??0)+1};return this.hasElementsWithConvert(t)})).length>0&&!t.mayBeSpeed?.noDowngrade?.({speed:a,element:e,spirit:this})})));n.push({actionId:"SkipDowngrade",text:"Continue",[Pn.Now]:()=>(i.skip=!0,Promise.resolve()),condition:()=>!0});const o={};r.forEach((e=>{o[e]=this.elements[e]})),await this.$.chooseBetween({text:`Resolve Power as if you had fewer elements?<br><br>${Tv(o)}`,prompt:"Choose element to downgrade<or>Continue:",name:t.name,card:e.power,effects:n,autoPlayOneOption:!0,highlightPowers:[e],players:[this]})}}powersWhere(e){return $d.createCollection(this.$,this.powers.filter(e))}async prepareElement(e=[...kd]){await this.$.chooseBetween({prompt:"Select Element to Prepare.",effects:e.map((e=>({actionId:e,text:`${Yw[e].text}`,[Pn.Now]:()=>(this.preparedElements[e]+=1,Promise.resolve())})))})}presence(){return this.forPiecesWhere((e=>e.isPresence&&e.owner===this))}preventAddPresence(e,a){return this.$.someEffect(Pn.PreventAddPresence,{spirit:this,location:e,ignoreLandType:a})}reclaim(e){return this.reclaimCards({amount:e})}async reclaimCards(e={}){const{amount:a,filter:t=(e=>e.isInDiscard),optional:n=!1}=e,r=this.powersWhere((e=>e.isA(En.AnyCard)&&t(e)&&!e.isBlessed)),i=[];return await r.pickMultiple({amount:a??r.count,forPickedItem:async e=>{i.push(e),await e.reclaim()},optional:n,autoplayIfPickingAll:!n,effect:{autoPlayOneOption:!0,prompt:"Pick a Power Card to Reclaim."}}),i}removeLand(e){Vr(this.landsIncludingNonExisting,e)}async removePresenceFromTrack(e){this.setTrackStatusForIndex(vg.Uncovered,e),await this.$.sendEvent({type:Tn.TrackUncovered,spirit:this,trackSpot:this.data.tracks[e]}),void 0!==this.data.tracks[e].uncoverEffect&&await this.$.addEffect({spirit:this,...this.data.tracks[e].uncoverEffect}),await this.$.doEffects(Pn.AfterUncoveringTrack,{spirit:this,trackIndex:e})}async replacePower(e,a){const t=this.powers.findIndex((a=>a.power===e));t>=0&&await this.forgetPowerState(this.powers[t],{canRegain:!1,silent:!0}),await this.gainPower(a.withPower,{silent:!0,index:t})}resolvableCardsWithSpeed(e,a=!1){return e===sr.Slow&&this.$.preventSlowPowers?[]:this.powers.filter((t=>{if(void 0!==t.data.mayUse&&!t.data.mayUse({$:this.$,power:t,spirit:this}))return!1;let n=t.status===(e===sr.Fast?Md.PlayedFast:Md.PlayedSlow),r=t.status===(e===sr.Fast?Md.PlayedSlow:Md.PlayedFast);return a&&(n=e===sr.Fast?t.isFast:t.isSlow,r=e===sr.Fast?t.isSlow:t.isFast),!!(n||r&&t.mayChangeSpeed&&!t.assisted||!a&&!t.assisted&&this.$.someEffect(Pn.MayRepeatPowercard,{power:t,speed:e}))&&!!t.ownerHasEnoughElementsToCastPower}))}async resolvePowerInLocations(e,a,t=!1,n=!1,r=void 0){const i=e.data;if(!n)for(let t=0;t<a.length;t+=1){const n=a[t];for(;void 0!==dg[e.power].payForRange&&!e.validLandTargets({targetIndex:t,ignorePowerModifiesRange:!0}).has(n);)await dg[e.power].payForRange({$:this.$,spirit:this})}await this.$.doEffects(Pn.AfterTargetingLands,{power:e,isRepeat:t,lands:a,owner:this});const s=await e.maximizedThresholdsForPower(or.Land,a[0]),o=rd(s,(e=>void 0!==e.threshold&&this.hasElements(e.threshold))),d=o>=0?s[o].threshold:void 0;await this.$.sendEvent({type:Tn.PowerResolvedInLands,spirit:this,power:e,targetLands:a,threshold:d});for(const n of s)await e.fulfillsThreshold(n,a[0],or.Land)&&(await this.$.addEffect({name:i.name,effects:[n],card:e.power,highlightPowers:[e],highlightLocations:a,players:[this],spirit:this}),await this.$.doEffectsWithContext(Pn.InTargetLand,{power:e,land:a[0],lands:a,owner:this,isRepeat:t,origin:r},(a=>a.card===e.power)));await this.$.doEffects(Pn.AfterResolvingLandTargetingPower,{power:e,isRepeat:t})}async resolvePowerOnSpirit(e,a,t=!1){const n=e.data,r=await e.maximizedThresholdsForPower(or.Spirit,a),i=rd(r,(e=>void 0!==e.threshold&&this.hasElements(e.threshold))),s=i>=0?r[i].threshold:void 0;await this.$.sendEvent({type:Tn.PowerResolvedOnSpirit,spirit:this,power:e,targetSpirit:a,threshold:s});for(const i of r)await e.fulfillsThreshold(i,a,or.Spirit)&&(await this.$.addEffect({name:n.name,effects:[i],spirit:this,players:[this],card:e.power,highlightPowers:[e]}),await this.$.doEffectsWithContext(Pn.TargetSpirit,{power:e,spirit:a,owner:this,isRepeat:t},(a=>a.card===e.power)))}async returnPresenceToTracks(e,a={}){await Jr(e,(async()=>{const e=this.validTrackSpotsToReturnPresence;if(e.length>0&&(!a.time||this.time>0)&&(!a.destroyed||this.destroyedPresence>0)){const t=await this.$.query({query:An.SelectTrack,prompt:"Select track spot to return to",players:[this],items:e,actionIds:e.map((e=>`TrackSpot-${e}`)),optional:a.optional});null!==t&&(this.setTrackStatusForIndex(vg.Covered,e[t]),a.time?this.time-=1:a.destroyed&&(this.destroyedPresence-=1))}else a.time&&(this.time-=1,this.destroyedPresence+=1),await this.$.clickToContinue({noOptions:"No valid track spot to return to."})}))}async scoreFromPowers(){for(const e of this.powerCardsInPlay){const a=(e.data.energy||0)+2;this.score+=a,await this.$.sendEvent({type:Tn.ScoreFromPower,score:a,power:e})}for(const e of this.innatePowers){const a=e.estimatedValueOfPower;this.score+=cg(a),await this.$.sendEvent({type:Tn.ScoreFromInnate,scores:a,power:e})}}async selectBetweenGrowthOptions(e,a){if(this.growthStatus[e]===Rw.Unavailable||this.growthStatus[a]===Rw.Unavailable)return;this.growthStatus[e]=Rw.Available,this.growthStatus[a]=Rw.Available;const t=this.growthOptions,n=[t[e],t[a]],r=t[0===await this.$.query({name:"Growths Begets Growth",text:"Pick unlock option",query:An.SelectGrowthOption,items:n,actionIds:n.map((e=>`Growth-${e.spirit.spirit}-${e.option}-${e.subOption}`)),players:[this]})?e:a];this.growthStatus[e]=Rw.Inactive,this.growthStatus[a]=Rw.Inactive,await this.$.addEffect({...r.effect,spirit:this,players:[this]}),Pm(this,"growthOptions")}async setup(){const{data:e}=this;this.setTrackStatus(e.tracks.map((e=>void 0!==e.requires||void 0!==e.requiresAll||void 0!==e.requiresAny||e.covered?vg.Covered:vg.Uncovered))),this.trackElements=e.tracks.map((()=>null)),this.growthStatus=this.growthOptions.map((()=>Rw.Available)),await this.$.sendEvent({type:Tn.SetupSpirit,spirit:this});for(const a of e.uniquePowers)await this.gainPower(a);for(const a of e.innatePowers)await this.gainPower(a);for(const a of e.specialRules)await this.doSpiritAction((()=>this.$.addEffect({...a,card:e.innatePowers[0],spirit:this,players:[this]})));if(this.aspect)for(const a of vv[this.aspect].effects)await this.doSpiritAction((()=>this.$.addEffect({...a,card:e.innatePowers[0],spirit:this,players:[this]})));Pm(this,"growthOptions")}async setupPresence(){const{data:e,name:a}=this;await this.$.oneEffectActivates(Pn.AdjustSetupPresence,{spirit:this})||await this.$.addEffect({name:`${a}: Setup`,effects:e.setup,spirit:this,players:[this]})}async spendTime(e){if(this.time<e)throw new Error("Not enough time to pay for amount.");await this.returnPresenceToTracks(e,{time:!0}),await this.$.sendEvent({type:Tn.TimeLost,spirit:this,amount:e})}async targetAndResolvePower(e,a=!1){await this.doPowerAction((async()=>{const t=e.data;if(e.status===Md.ResolvedFast||e.status===Md.ResolvedSlow){const t=e.status===Md.ResolvedFast?sr.Fast:sr.Slow,n=this.$.firstEffectOfType(Pn.MayRepeatPowercard,{power:e,speed:t});n&&(await this.$.doEffect(n,Pn.RepeatPowerCard,{power:e,speed:t}),a=!0)}if(t.type===kn.Innate&&(await this.$.doEffects(Pn.BeforeResolvingInnate,{power:e}),await this.possiblyDowngradeElements(e)),t.target===or.Land)await this.$.addEffect({name:t.name,text:a?"Repeat this Power":"Pick Target Land",card:e.power,highlightPowers:[e],players:[this],[Pn.Now]:async()=>{t.blightWhiteListedPower&&this.$.startAllowOceanForBlight();const n=e.data.specifyOrigin?await e.pickValidOriginTarget():void 0,r=void 0!==e.data.ranges?e.data.ranges.length:1,i=[];for(let s=0;s<r;s+=1){const o=this.$.action.data.mustTargetAdjacent,d=e.validLandTargets({targetIndex:s,origin:n,mustTargetAdjacent:o}).where((e=>!i.includes(e)));let l=a?"Repeat this Power":"Pick Target Land";r>1&&(l+=` at <range-${e.data.ranges[s]}>`),o&&(l+=" adjacent to Source"),await d.pickOne((async a=>{i.push(a),await this.$.doEffects(Pn.AfterTargetingLand,{targetIndex:s,power:e,land:a,owner:this})}),{text:l,noOptions:`No valid Target Lands for ${t.name}.`})}this.$.stopAllowOceanForBlight(),i.length>0&&await this.resolvePowerInLocations(e,i,a,!1,null!==n?n:void 0)}});else{const n=e.validSpiritTargets();await this.$.addEffect({name:t.name,text:"Pick Target Spirit",card:e.power,highlightPowers:[e],players:[this],[Pn.Now]:async()=>{await n.autoPickOne((async t=>{if(this!==t&&this.$.config.archipelagos){const e=this.boardDistanceToSpirit(t);null!==e&&e>0&&(await this.$.sendEvent({type:Tn.TargetedAcrossIslets,spirit:this,targetSpirit:t,distance:e}),await this.payEnergy(e))}await this.resolvePowerOnSpirit(e,t,a)}),{noOptions:`No valid Target Spirits for ${t.name}.`})}})}await e.setStatus(e.status===Md.PlayedFast?Md.ResolvedFast:Md.ResolvedSlow)}),e)}async timePasses(){this.growthStatus=this.growthStatus.map((e=>e===Rw.Chosen||e===Rw.NotChosen?Rw.Available:e)),this.setTrackStatus(this.trackStatus.map((e=>e===vg.UncoveredPlayed?vg.Uncovered:e))),this.hasPlayedPowers=!1,this.cardsPlayedThisTurn=[],this.usedCardPlaysForNonDamageAndDestroy=0,this.cardsMadeImpendingThisTurn=[];for(const e of this.powers)await e.timePasses();this.hasReclaimedACardDuringSpiritPhase=!1,Pm(this,"growthOptions")}toString(){return Pg({[nm[this.spirit].name]:Pg({aspect:null!==this.aspect?vv[this.aspect].name:"None",cards:Yo(this.powers,(e=>`${e.power}[${e.status}]`)),energy:this.energy},4)},3)}trackPlacementIsValidGivenIndexIsCovered(e){const a=this.trackStatus.filter(((a,t)=>a!==vg.Covered&&t!==e)).length,t=this.data.tracks.map((e=>void 0===e.requires&&void 0===e.requiresAny&&void 0===e.requiresAll));for(;t.filter((e=>!0===e)).length<a;){let a=!1;if(this.data.tracks.forEach(((n,r)=>{t[r]||r===e||this.trackStatus[r]===vg.Covered||void 0!==n.requires&&!t[n.requires]||void 0!==n.requiresAll&&n.requiresAll.some((e=>!t[e]))||void 0!==n.requiresAny&&!n.requiresAny.some((e=>t[e]))||(t[r]=!0,a=!0)})),!a)return!1}return!0}async yourSacredSitesMayAlsoCountAs(e){await this.$.addSubEffect({[Pn.GlobalReminder]:()=>({icon:`<sacred><br>= ${Zn[e].text}`,ongoing:!0,spirit:this,players:[this]}),[Pn.MoveWithoutWaiting]:({piece:e,source:a,pieceFilter:t})=>e.isAPresenceOf(this)&&a.numberOfPresenceOf(this)>=2&&!Zn[t].pieces.includes(Ln.Presence),[Pn.AfterMoving]:async({piece:e,source:a,destination:t,pieceFilter:n,movement:r})=>{e.isAPresenceOf(this)&&!Zn[n].pieces.includes(Ln.Presence)&&await a.move({pieces:this.$.Presence,locations:{target:zn.ToThisLocation,location:t},owner:this,movement:r})},[Pn.AfterRemovePiece]:async({piece:e,location:a,removement:t,pieceFilter:n})=>{e.isAPresenceOf(this)&&!Zn[n].pieces.includes(Ln.Presence)&&await a.remove({owner:this,pieces:this.$.Presence,removement:t})}})}get chosenGrowthOption(){return Dr(this.growthOptions.map((({option:e})=>e))).map((e=>this.growthOptions.some((({status:a,option:t})=>e===t&&a===Rw.Chosen))))}get energyDebt(){return this.$.sumEffects(Pn.EnergyDebt,{spirit:this})}get extraCardDrawAmount(){return this.$.sumEffects(Pn.ExtraCardDrawAmount,{spirit:this})}get extraCardKeepAmount(){return this.$.sumEffects(Pn.ExtraCardKeepAmount,{spirit:this})}get mayTreatElementsAsOther(){return this.aspect===Qo.DarkFire}get unfinishedGrowthOption(){return this.growthOptions.find((e=>e.status===Rw.Chosen&&this.growthOptions.some((a=>e!==a&&e.option===a.option&&a.status===Rw.Available))))?.option}async gainPowerCardBuffs(e,a={}){const{discardAfter:t=!0,withoutForgetting:n=!1,forgetOptional:r=!1}=a;for(const a of e)await this.addExtraAction({actionId:`Gain${a}`,name:dg[a].name,required:!0,icon:"",text:"Gain this power card.",power:a,previewPowers:()=>({powers:e,selected:[e.indexOf(a)]}),enabled:()=>this.$.phase===Gi.Grow,onActivate:async()=>{for(const a of e)this.$.removeEffectsWithName(dg[a].name);const i=e.filter((e=>e!==a)),s={chosen:[],notChosen:i,forgotten:[],gifted:!1,taken:!1};if(t)for(const e of i)await this.$.discardPowerToDeckDiscard(e);this.destinyPowers.includes(a)&&Vr(this.destinyPowers,a);const o=await this.gainPower(a);dg[a].type!==kn.Major||n||await this.$.addSubEffect({text:"After you gain a Major Power, you must Forget one of your Power Cards.",[Pn.Now]:async()=>{const e=await this.forgetPowers({optional:r,duringPowerGain:!0});s.forgotten.push(...e)}}),s.chosen.push(o),await this.$.doEffects(Pn.AfterGainingPowers,{spirit:this,powerGain:s})}})}setTrackStatus(e){this.trackStatusInternal=e,Pm(this,"elementsFromTracks","elements")}setTrackStatusForIndex(e,a){this.trackStatusInternal=this.trackStatusInternal.map(((t,n)=>n===a?e:t)),Pm(this,"elementsFromTracks","elements")}}Iv([De],Pv.prototype,"absorbedPresence",void 0),Iv([De],Pv.prototype,"aspect",void 0),Iv([De],Pv.prototype,"cardsMadeImpendingThisTurn",void 0),Iv([De],Pv.prototype,"cardsPlayedThisTurn",void 0),Iv([De],Pv.prototype,"daysPowers",void 0),Iv([De],Pv.prototype,"destinyPowers",void 0),Iv([De],Pv.prototype,"destroyedIncarna",void 0),Iv([De],Pv.prototype,"destroyedPresence",void 0),Iv([De],Pv.prototype,"didNotWantToReachThreshold",void 0),Iv([De],Pv.prototype,"disabledGrowthOptions",void 0),Iv([De],Pv.prototype,"growthStatus",void 0),Iv([De],Pv.prototype,"hasEmpoweredIncarna",void 0),Iv([De],Pv.prototype,"hasPlayedPowers",void 0),Iv([De],Pv.prototype,"hasReclaimedACardDuringSpiritPhase",void 0),Iv([De],Pv.prototype,"healingCards",void 0),Iv([De],Pv.prototype,"healingMarkers",void 0),Iv([De],Pv.prototype,"innateEnergy",void 0),Iv([De],Pv.prototype,"landsIncludingNonExisting",void 0),Iv([De],Pv.prototype,"panelPieces",void 0),Iv([De],Pv.prototype,"powers",void 0),Iv([De],Pv.prototype,"powersInProgressionDeck",void 0),Iv([De],Pv.prototype,"preparedElements",void 0),Iv([De],Pv.prototype,"rememberedUniques",void 0),Iv([De],Pv.prototype,"spirit",void 0),Iv([De],Pv.prototype,"spiritNumber",void 0),Iv([De],Pv.prototype,"startingBoardIndex",void 0),Iv([De],Pv.prototype,"time",void 0),Iv([De],Pv.prototype,"trackElements",void 0),Iv([De],Pv.prototype,"usedCardPlaysForNonDamageAndDestroy",void 0),Iv([De],Pv.prototype,"trackStatusInternal",void 0),Iv([Re],Pv.prototype,"cardPlaysCostToPlayPowerCard",null),Iv([Im()],Pv.prototype,"elements",null),Iv([Im()],Pv.prototype,"elementsFromEffects",null),Iv([Im()],Pv.prototype,"elementsFromPowers",null),Iv([Im()],Pv.prototype,"elementsFromTracks",null),Iv([Re],Pv.prototype,"extraPresenceAvailableForTargeting",null),Iv([Re],Pv.prototype,"growthOptionGroups",null),Iv([Im()],Pv.prototype,"growthOptions",null),Iv([Re],Pv.prototype,"pickOptions",null);class Sv{spiritCount;spirits;$;constructor(e){this.$=e,this.spirits=[],this.spiritCount=0,this.$.config.boards.forEach(((e,a)=>{e.spirit&&(this.spirits.push(new Pv({$:this.$,spiritNumber:this.spiritCount,spirit:e.spirit.spirit,aspect:e.spirit.aspect,boardIndex:a,progression:e.spirit.progression})),this.spiritCount+=1)}))}get adjustedCardPlays(){return this.$.sumEffects(Pn.AdjustCardPlays)}get allSpiritsHavePlayedPowers(){return!this.spirits.some((e=>!e.hasPlayedPowers))}get availableExtraActions(){const e=[];for(const a of this.$.effectsOfType(Pn.ExtraAction)){const t=a[Pn.ExtraAction]?.({effect:a});t&&e.push({effect:t,spirit:a.spirit,extraIndex:this.$.globalReminders.findIndex((e=>e.id===a.id))})}return e}get availableGrowthOptions(){return this.growthOptions.filter((e=>e.status===Rw.Available&&e.spirit.canAffordGrowthOption(e)))}get availablePowersForPlay(){const e=[];return this.spirits.forEach((a=>{e.push(...a.availablePowersForPlay)})),e}get availableTrackActions(){return this.trackActions.filter((({status:e})=>e===vg.Uncovered))}get growthOptions(){const e=[];return this.spirits.forEach((a=>{e.push(...a.growthOptions)})),e}get growthStatus(){const e=[];return this.spirits.forEach((a=>{e.push(...a.growthStatus)})),e}get playersCanJointlyPayEnergyAidedBy(){return e=>this.spareEnergyWhenJointlyPayEnergyAidedBy(e)>=0}get powerCardsPlayedThisTurn(){const e=[];return this.spirits.forEach((a=>{e.push(...a.cardsPlayedThisTurn)})),e}get requiredExtraActions(){return this.availableExtraActions.filter((e=>e.effect.required))}get resolvablePowers(){return(e,a=!1)=>{const t=[];return this.spirits.forEach((n=>{t.push(...n.resolvableCardsWithSpeed(e,a))})),t}}get spiritsWithAvailablePowersForPlay(){return this.spirits.filter((e=>!e.hasPlayedPowers))}get spiritsWithExtraActions(){const e=this.availableExtraActions;return this.spirits.filter((a=>e.some((({effect:e})=>void 0===e.players||e.players?.includes(a)))))}get trackActions(){const e=[];return this.spirits.forEach((a=>{e.push(...a.trackActions)})),e}async eachSpirit(e){for(const a of this.spirits)await this.$.addSubEffect({players:[a],[Pn.Now]:async()=>{await e(a)}})}fromAllSpirits(){return Pv.createCollection(this.$,this.spirits)}async gainDamageBoost(e){const{amount:a,once:t=!1,source:n,permanent:r=!1,spirit:i,scenario:s,filter:o,effectId:d}=e,l=De.box(0);await this.$.addSubEffect({effectId:d,expireAtEndOfTurn:!r,[Pn.GlobalReminder]:()=>({icon:`+${a} <damage><br>${l}/${a}`,ongoing:r,spirit:n,scenario:s,players:void 0!==i?[i]:void 0}),[Pn.DamageBoost]:async e=>{const n=this.$.currentStackEffect;for(;l.get()<a&&(e.spirit===i||void 0===i)&&a>0&&(void 0===o||o())&&await e.onUse();)l.set(l.get()+1);l.get()>0&&await this.$.addEffectUntilEndOfAction({[Pn.ActionEnds]:()=>(t?this.$.removeEffect(n):l.set(0),Promise.resolve())})}})}async gainEnergyDividedEvenly(e){const a=Math.floor(e/this.spiritCount),t=e-a*this.spiritCount,n=this.fromAllSpirits();await n.pickMultiple({amount:t,forPickedItem:async e=>{n.remove(e),await e.gainEnergy(a+1)},effect:{prompt:`Pick spirit to gain ${a} energy.`}}),await n.forEach((async e=>{await e.gainEnergy(a)}))}async gainEnergyFromTracks(){await this.eachSpirit((async e=>{await e.gainEnergyFromTracks()}))}async growAndPlayTrackActions(){for(;;){const e=this.availableGrowthOptions;if(!(e.length>0||this.requiredExtraActions.length>0)||this.$.gameEnded)break;let a=this.availableTrackActions;const t=this.availableExtraActions,n=await this.$.query({name:"Grow",text:e.length>0?"Pick Growth Option":"Pick Power Card",query:An.SelectGrowthOption,items:[...e,...a,...t],actionIds:[...e.map((e=>`Growth-${e.spirit.spirit}-${e.option}-${e.subOption}`)),...a.map((e=>`TrackAction-${e.spirit.spirit}-${e.effect.actionId}`)),...t.map((e=>`ExtraAction-${void 0!==e.spirit?e.spirit.spirit:"Global"}-${e.effect.actionId}`))],players:this.spiritsWithGrowthOptions(t)});if(n<e.length){const a=e[n];await a.spirit.grow(a.index)}else if(a=this.availableTrackActions,n<e.length+a.length){const t=a[n-e.length];await t.spirit.doTrackAction(t.trackIndex)}else{const r=t[n-e.length-a.length];await this.$.doExtraAction(r)}}}async payEnergyJointlyAidedBy(e){const{energy:a,element:t,aidedByRemovingDisease:n}=e;let r=0;if(n)for(;!this.$.playersCanJointlyPayEnergyAidedBy({energy:a-3*r,aidedByRemovingDisease:!1});)r+=1;const i={amount:this.spareEnergyWhenJointlyPayEnergyAidedBy(e)};if(1===this.$.spiritCount&&void 0===t&&!n)return void await this.$.spirits[0].payEnergy(a);const s={amount:0};for(const e of this.spirits)if(t){const a=e.elementTreatedAsElement(t);s.amount+=e.elements[a]}if(t&&(s.amount+=2*(this.$.landElements[t]??0)),s.amount>=a){let e="Jointly pay Energy";void 0!==t&&(e+=` aided by ${Yw[t].text}.`),e+=`<br>Paid: ${a} / ${a}.`,await this.$.clickToContinue({text:e})}n&&(r>0&&await this.$.forPiecesThatIs(this.$.Disease).pickMultiple({effect:{text:"Remove <disease> from the island for 3 Energy. (required)"},forPickedItem:async e=>{await e.remove(),s.amount+=3}}),await this.$.forPiecesThatIs(this.$.Disease).pickMultiple({effect:{text:"Remove <disease> from the island for 3 Energy each? (optional)"},optional:!0,forPickedItem:async e=>{await e.remove(),s.amount+=3}}));const o=[];for(;s.amount<a;){const e=[];for(const a of this.spirits)if(a.energy>0&&e.push({actionId:`${a.spirit}-PayEnergy`,text:"Pay 1 Energy. (+1)",category:Fm.PayEnergy,spirit:a,[Pn.Now]:async()=>{s.amount+=1,await a.payEnergy(1)}}),void 0!==t){const n=a.elementTreatedAsElement(t);a.elements[n]<a.maxElementsWithConvert(n)&&e.push({actionId:`${a.spirit}-Convert`,text:`Convert to ${Yw[n].text}`,category:Fm.ConvertElements,spirit:a,[Pn.Now]:async()=>{s.amount+=1,await a.convertElements({[n]:a.elements[n]+1})}});const r=n===ir.DarkFire?[ir.Moon,ir.Fire]:[n],d=a.powersWhere((e=>e.isInHand&&!e.assisted&&(r.some((a=>e.data.elements?.includes(a)))||e.power===Ui.ElementalBoon)&&!o.includes(e)&&i.amount>=(e.isInPlay&&e.power!==Ui.ElementalBoon?1:2)));d.count>0&&e.push({actionId:`${a.spirit}-Discard`,text:"Discard Power from Hand. (+2)",players:[a],category:Fm.DiscardPowerFromHand,spirit:a,[Pn.Now]:async()=>{await d.pickOne((async e=>{s.amount+=2,o.push(e),await e.discard(),i.amount-=e.isInPlay&&e.power!==Ui.ElementalBoon?1:2}))}});const l=a.powersWhere((e=>(r.some((a=>e.data.elements?.includes(a)))||e.power===Ui.ElementalBoon)&&!e.isBlessed&&!e.assisted&&!o.includes(e)));l.count>0&&e.push({actionId:`${a.spirit}-Forget`,text:"Forget a Power. (+3-4)",players:[a],category:Fm.ForgetPower,spirit:a,[Pn.Now]:async()=>{await l.pickOne((async e=>{s.amount+=e.isInPlay&&e.power!==Ui.ElementalBoon?3:4,o.push(e),await e.forget()}))}})}let n="Jointly pay Energy";if(void 0!==t&&(n+=` aided by ${Yw[t].text}.`),n+=`<br>Paid: ${s.amount} / ${a}.`,0===e.length)throw new Error("No valid pay option.");await this.$.chooseBetween({text:n,effects:e},{orChoice:!1,payJointly:!0})}}async playDraftActions(e,a){for(;!this.$.gameEnded;){const t=this.availableExtraActions;if(0===t.length)break;const n=await this.$.query({name:"Drafting",prompt:a(),text:e(),query:An.SelectGrowthOption,items:[...t],actionIds:[...t.map((e=>`ExtraAction-${void 0!==e.spirit?e.spirit.spirit:"Global"}-${e.effect.actionId}`))],players:this.spiritsWithExtraActions}),r=t[n];await this.$.doExtraAction(r)}}async playPowers(){for(;;){const e=this.availablePowersForPlay;if(0===e.length)break;const a=await this.$.query({name:"Play Powers",text:"Play Powers",query:An.PlayPower,players:this.spiritsWithAvailablePowersForPlay,items:e,actionIds:e.map((e=>`${e.spirit.spirit}-${void 0===e.power?"Finish":e.power.power}`))});if(null===a)break;{const t=e[a];t.power?(t.spirit.hasPlayedPowers=!1,await t.power.play()):t.spirit.hasPlayedPowers=!0}}for(const e of this.spirits)await e.playInnates()}async playTrackActions(){for(;!this.$.gameEnded;){const e=this.availableExtraActions,a=this.availableTrackActions,t=a.length+e.length;if(0===t)break;const n=await this.$.queryOptional({name:"Spirit actions",text:"Pick Spirit action.",cancel:`Skip remaining Spirit action${t>1?"s":""}.`,query:An.SelectGrowthOption,items:[...a,...e],actionIds:[...a.map((e=>`TrackAction-${e.spirit.spirit}-${e.effect.actionId}`)),...e.map((e=>`ExtraAction-${void 0!==e.spirit?e.spirit.spirit:"Global"}-${e.effect.actionId}`))],players:this.spiritsWithGrowthOptions(e)});if(null===n)break;if(n<a.length){const e=a[n];await e.spirit.doTrackAction(e.trackIndex)}else{const t=e[n-a.length];await this.$.doExtraAction(t)}}}powersWhere(e){const a=[];for(const t of this.spirits)a.push(...t.powers.filter(e));return $d.createCollection(this.$,a)}async resolvePowers(e){for(;!this.$.gameEnded&&(void 0===this.$.resolvableCardsLeft||this.$.resolvableCardsLeft>0);){const a=this.resolvablePowers(e),t=this.availableExtraActions,n=a.length+t.length;if(0===n)break;const r=await this.$.queryOptional({name:(e===sr.Fast?"Fast":"Slow")+" Powers",text:"Select power to resolve",cancel:"Skip remaining "+(n>1?"powers":"power"),query:An.SelectPower,items:[...a,...t],actionIds:[...a.map((e=>`${e.owner.spirit}-${e.power}`)),...t.map((e=>`Extra-${e.effect.actionId}`))],players:this.spiritsWithResolvablePowersOActions(e,t)});if(null===r)return;if(r<a.length){const t=a[r];await t.changeSpeedIfNeeded(e),await t.owner.targetAndResolvePower(t)}else{const e=t[r-a.length];await this.$.doExtraAction(e)}}}async scoreFromPowers(){for(const e of this.spirits)await e.scoreFromPowers()}async setup(){for(const e of this.spirits)await e.setup()}async setupPresence(){for(const e of this.spirits)await e.setupPresence()}spiritsWhich(e){return this.fromAllSpirits().where(e)}spiritsWithGrowthOptions(e){return this.spirits.filter((a=>a.growthOptions.some((({status:e})=>e===Rw.Available))||a.trackActions.some((({status:e})=>e===vg.Uncovered))||e.some((({effect:e})=>void 0===e.players||e.players?.includes(a)))))}spiritsWithResolvablePowersOActions(e,a){return this.spirits.filter((t=>t.resolvableCardsWithSpeed(e).length>0||a.some((({effect:e})=>void 0===e.players||e.players.includes(t)))))}async timePasses(){for(const e of this.spirits)await e.timePasses()}toString(){return Pg({spiritCount:this.spiritCount,spirits:this.spirits},2)}get spareEnergyWhenJointlyPayEnergyAidedBy(){return e=>{const{energy:a,element:t,aidedByRemovingDisease:n=!1}=e;let r=0;n&&(r+=3*this.$.forPiecesThatIs(this.$.Disease).count),t&&(r+=2*(this.$.landElements[t]??0));for(const e of this.spirits)if(r+=e.energy,t){const a=e.elementTreatedAsElement(t);r+=e.maxElementsWithConvert(a),r+=4*e.elementsFromHand[a],r+=4*e.elementsFromDiscard[a],r+=3*e.elementsFromNonBlessedPowers[a],e.hasPower(Ui.ElementalBoon)&&(r+=4)}return r-a}}}var Ev=function(e,a,t,n){var r,i=arguments.length,s=i<3?a:null===n?n=Object.getOwnPropertyDescriptor(a,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,a,t,n);else for(var o=e.length-1;o>=0;o--)(r=e[o])&&(s=(i<3?r(s):i>3?r(a,t,s):r(a,t))||s);return i>3&&s&&Object.defineProperty(a,t,s),s};class Ov{AllPieces=Xn.AllPieces;AllPiecesButDahanPresenceAndSpiritTokens=Xn.AllPiecesButDahanPresenceAndSpiritTokens;Badlands=Xn.Badlands;BadlandsBeastsDiseaseOrWilds=Xn.BadlandsBeastsDiseaseOrWilds;BadlandsOrBeasts=Xn.BadlandsOrBeasts;BadlandsOrDisease=Xn.BadlandsOrDisease;BadlandsOrStrife=Xn.BadlandsOrStrife;Beasts=Xn.Beasts;BeastsDiseaseOrWilds=Xn.BeastsDiseaseOrWilds;Blight=Xn.Blight;BlightExplorerOrTown=Xn.BlightExplorerOrTown;City=Xn.City;Dahan=Xn.Dahan;Deeps=Xn.Deeps;Disease=Xn.Disease;Explorer=Xn.Explorer;ExplorerDahanOrBlight=Xn.ExplorerDahanOrBlight;ExplorerOrDahan=Xn.ExplorerOrDahan;ExplorerOrTown=Xn.ExplorerOrTown;ExplorerTownDahanOrBeasts=Xn.ExplorerTownDahanOrBeasts;ExplorerTownOrDahan=Xn.ExplorerTownOrDahan;FlameMarker=Xn.FlameMarker;HiddenLocation=Xn.HiddenLocation;Incarna=Xn.Incarna;IncarnaBehemoth=Xn.IncarnaBehemoth;IncarnaDarkness=Xn.IncarnaDarkness;IncarnaLair=Xn.IncarnaLair;IncarnaLocus=Xn.IncarnaLocus;IncarnaRoots=Xn.IncarnaRoots;IncarnaVoice=Xn.IncarnaVoice;IncarnaWarrior=Xn.IncarnaWarrior;Invader=Xn.Invader;InvaderDahanOrBeast=Xn.InvaderDahanOrBeast;InvaderDahanPresenceOrBeast=Xn.InvaderDahanPresenceOrBeast;InvaderOrDahan=Xn.InvaderOrDahan;Omen=Xn.Omen;Presence=Xn.Presence;Quake=Xn.Quake;Strife=Xn.Strife;Thief=Xn.Thief;Town=Xn.Town;TownCityOrDahan=Xn.TownCityOrDahan;TownOrCity=Xn.TownOrCity;TownOrDahan=Xn.TownOrDahan;TownPresenceOrBeasts=Xn.TownPresenceOrBeasts;Vitality=Xn.Vitality;WardingPattern=Xn.WardingPattern;Wilds=Xn.Wilds;blightHandler;logErrors;pieceCount={};config;actionHandler;adminHandler;adversaryHandler;commandBeastHandler;conductor;difficultyCalculator;effectHandler;eventHandler;fearHandler;inquirer;instructionHandler;invaderCardHandler;islandHandler;overrider;powerHandler;randomizer;scenarioHandler;spiritHandler;surveyor;constructor(e,a,t={}){ed.makeObservable(this),this.config=a,this.logErrors=t.logErrors??!0,this.randomizer=new bm(a.seed),this.actionHandler=new $p(this),this.adminHandler=new Mm(this),this.adversaryHandler=new Wm(this),this.blightHandler=new Eg(this),this.commandBeastHandler=new $m(this),this.conductor=new Up(this),this.difficultyCalculator=new pm(this),this.effectHandler=new Np(this),this.eventHandler=new fy(this),this.fearHandler=new kp(this),this.inquirer=new vm(this,e),this.instructionHandler=new xm,this.invaderCardHandler=new Dp(this),this.islandHandler=new Em(this),this.powerHandler=new Fp(this),this.scenarioHandler=new Um(this),this.spiritHandler=new Sv(this),this.surveyor=new Lm(this),this.overrider=new Gm}get action(){return this.actionHandler.currentAction}get activeEventCard(){return this.eventHandler.activeEventCard}get adjustedCardPlays(){return this.spiritHandler.adjustedCardPlays}get adversaryLeading(){return this.adversaryHandler.adversaryLeading}get adversarySupporting(){return this.adversaryHandler.adversarySupporting}get allSpiritsHavePlayedPowers(){return this.spiritHandler.allSpiritsHavePlayedPowers}get alwaysPushToSameDestination(){return this.overrider.alwaysPushToSameDestination}get beastsCountAsBadlands(){return this.someEffect(Pn.BeastsCountAsBadlands)}get beastsOnIsland(){return this.islandHandler.pieceCountIncludingStasis(this.Beasts)}get blightCardActive(){return this.blightHandler.blightCardActive}get blightCardsDiscarded(){return this.blightHandler.blightCardsInDiscard}get blightCardsInDeck(){return this.blightHandler.blightCardsInDeck}get blightOnBlightCard(){return this.blightHandler.blightOnBlightCard}get blightPool(){return this.blightHandler.blightPool}get blightStatus(){return this.blightHandler.blightStatus}get boardCount(){return this.islandHandler.boardCount}get boards(){return this.islandHandler.boards}get bringingWarriorThisInstruction(){return this.instructionHandler.bringingWarrior}get buildOrderMatters(){return this.someEffect(Pn.BuildOrderMatters)}get capitalSize(){return this.islandHandler.capitalSize}get coastalLands(){return this.islandHandler.coastalLands}get coastalLandsWithCities(){return this.islandHandler.coastalLandsWithCities}get coastalLandsWithWardingPatterns(){return this.islandHandler.coastalLandsWithWardingPatterns}get corners(){return this.islandHandler.corners}get currentActionHasAllThresholds(){return this.action.type===qo.PowerAction&&this.someEffect(Pn.PowerHasAllThresholds,{power:this.action.power})}get currentActionType(){return this.actionHandler.currentActionType}get currentFear(){return this.fearHandler.fear}get currentHistory(){return this.inquirer.currentHistory}get currentStackEffect(){return this.effectHandler.currentStackEffect}get cursorAtPlayPower(){return this.inquirer.cursorAtPlayPower}get dahanCount(){return this.islandHandler.pieceCountIncludingStasis(this.Dahan)}get damageIgnoreHealthBonuses(){return this.someEffect(Pn.DamageIgnoreHealthBonuses)}get destroyedBoards(){return this.islandHandler.destroyedBoards}get difficulty(){return this.difficultyCalculator.difficulty}get effectIds(){return this.effectHandler.effectIds}get eventCardIsActive(){return this.eventHandler.eventCardIsActive}get eventCardsInDeck(){return this.eventHandler.eventCardsInDeck}get exploreDeck(){return this.invaderCardHandler.exploreDeck}get exploreDistance(){return 1+(this.someEffect(Pn.ExtraExploreDistance)?1:0)}get extraBeastAdjacency(){return this.someEffect(Pn.ExtraBeastAdjacency)}get fearBasedVictoryIsRemoved(){return this.someEffect(Pn.RemoveFearBasedVictory)}get fearCardsDiscarded(){return this.fearHandler.fearCardsDiscarded}get fearCardsEarned(){return this.fearHandler.fearCardsEarned}get fearCardsEarnedCount(){return this.fearHandler.fearCardsEarnedCount}get fearCardsInDeck(){return this.fearHandler.fearCardsInDeck}get fearCardsInLevelCount(){return this.fearHandler.fearCardsInLevelCount}get fearPool(){return this.fearHandler.fearPool}get gameEnded(){return this.conductor.gameEnded}get gameLost(){return this.conductor.gameLost}get gameWon(){return this.conductor.gameWon}get globalReminders(){return this.effectHandler.globalReminderEffects}get hasAttemptedDamagingInvaderThisInstruction(){return this.instructionHandler.hasAttemptedDamagingInvader}get hasAttemptedDestroyingInvaderThisInstruction(){return this.instructionHandler.hasAttemptedDestroyingInvader}get hasLostFromEffect(){return this.effectHandler.hasLostFromEffect}get hasResolvedFearCard(){return this.fearHandler.hasResolvedFearCard}get hasRunningAction(){return this.actionHandler.hasRunningAction}get hasWonFromEffect(){return this.effectHandler.hasWonFromEffect}get highImmigrationActive(){return this.existEffect(Pn.HighImmigration)}get ignoreOneStrife(){return this.someEffect(Pn.IgnoreOneStrife)}get ignoreWildsDuringExplore(){return this.someEffect(Pn.IgnoreWildsDuringExplore)}get inputs(){return wg.getInputs(this,0)}get invaderCardsInExploreDeck(){return this.invaderCardHandler.invaderCardsInExploreDeck}get invaderCardsInFearDeck(){return this.fearHandler.invaderCardsInFearDeck}get invaderCardsVisible(){return this.invaderCardHandler.invaderCardsVisible}get isInAdmin(){return this.adminHandler.isInAdmin}get landCountWhereTownsAndCitiesOutnumberDahan(){return this.locationsIncludingNonExisting.filter((e=>e.the(this.TownOrCity).outnumber(this.Dahan))).length}get landElements(){return this.islandHandler.landElements}get lands(){return this.islandHandler.lands}get lastSeenEventCard(){return this.eventHandler.lastSeenEventCard}get locations(){return this.islandHandler.locations}get locationsIncludingNonExisting(){return this.islandHandler.locationsIncludingNonExisting}get lostReason(){return this.conductor.lostReason}get maxCoastalLandsWithCities(){return 2*this.islandHandler.boards.length+1}get maxIrreparableDamage(){return this.spiritCount+1}get maxTownsAllowed(){return this.adversaryHandler.maxTownsAllowed}get miningLandsCauseRavageActions(){return this.someEffect(Pn.MiningLandsCauseRavageActions)}get movedDahanThisInstruction(){return this.instructionHandler.movedDahan}get movedPresenceThisInstruction(){return this.instructionHandler.movedPresence}get nonDestroyedBoards(){return this.islandHandler.nonDestroyedBoards}get numberOfExploreCardsThisTurn(){return this.invaderCardHandler.numberOfExploreCardsThisTurn}get oceanIsAllowedForBlight(){return this.islandHandler.oceanIsAllowedForBlight}get orderOfRemoveAllMightMatter(){return this.someEffect(Pn.OrderOfRemoveAllMightMatter)}get parentEffect(){return this.effectHandler.parentEffect}get phase(){return this.conductor.phase}get pieces(){return this.islandHandler.pieces}get playingWithCommandBeasts(){return!this.config.events&&this.config.sets.length>1}get powerCardsInPlayThatGeneratesFear(){return this.powerCardsPlayedThisTurn.filter((e=>e.data.generatesFear&&!e.isBlessed&&!e.assisted))}get powerCardsPlayedThisTurn(){return this.spiritHandler.powerCardsPlayedThisTurn}get powercardsInMajorDeck(){return this.powerHandler.powercardsInMajorDeck}get powercardsInMinorDeck(){return this.powerHandler.powercardsInMinorDeck}get preventSlowPowers(){return this.someEffect(Pn.PreventSlowPowers)}get preventTerrorLevelAndResolveFearCards(){return this.fearHandler.preventTerrorLevelAndResolveFearCards}get randomEventsEnabled(){return this.overrider.randomEventsEnabled}get reminderEffects(){return this.effectHandler.reminderEffects}get reportedPhase(){return this.conductor.reportedPhase}get resolvableCardsLeft(){return this.overrider.resolvableCardsLeft}get resolvingFearCard(){return this.fearHandler.resolvingFearCard}get scenario(){return this.scenarioHandler.scenario}get score(){let e=0;return this.gameWon?(e+=5*this.difficulty+10+2*this.invaderCardsInExploreDeck.length,this.gameLost&&(e-=5)):e+=2*this.difficulty+(this.invaderCardsVisible.length+this.invaderCardsInSlot(ah.Discard).length),e+=Math.floor(this.pieceCountIncludingStasis(Xn.Dahan)/this.spiritCount),e-=Math.floor(this.pieceCountIncludingStasis(Xn.Blight)/this.spiritCount),e+=this.sumEffects(Pn.ExtraScore),e}get showFearCards(){return!this.preventTerrorLevelAndResolveFearCards}get showingTerrainTypes(){return this.invaderCardHandler.showingTerrainTypes}get slowHealingBlight(){return this.blightHandler.slowHealingBlight}get someBoardsHasExtraLocations(){return this.existEffect(Pn.BoardHasExtraLocation)}get someEffect(){return(e,a)=>this.effectHandler.someEffect(e,a)}get someEffectMakesOceanALand(){return this.existEffect(Pn.OceanIsLand)}get someLocationHasExtraTerrains(){return this.existEffect(Pn.LocationIsTerrain)}get someNonOceanIsOcean(){return this.existEffect(Pn.LocationIsOcean)}get spiritCount(){return this.spiritHandler.spiritCount}get spiritPhase(){return[Gi.Grow,Gi.GainEnergy,Gi.PlayPowers].includes(this.phase)}get spiritSimulation(){return this.overrider.spiritSimulation}get spirits(){return this.spiritHandler.spirits}get stage(){return this.invaderCardHandler.stage}get startingBlight(){return this.blightHandler.startingBlight}get strippedLandSize(){return this.islandHandler.strippedLandSize}get terrorLevel(){return this.fearHandler.terrorLevel}get theEndlessDark(){return this.islandHandler.theEndlessDark}get theEndlessDarkExists(){return this.config.boards.some((e=>e.spirit?.spirit===fn.Darkness))}get theEndlessDarkPosition(){return this.config.endlessDark??{x:0,y:0}}get townsCount(){return this.islandHandler.pieceCountIncludingStasis(this.Town)}get treatingAllOrsAsAnds(){return this.someEffect(Pn.TreatAllORsAsANDs)}get turn(){return this.conductor.turn}get unusedBoardCount(){return this.islandHandler.boardsUnused.length}get unusedFearCardsLeft(){return this.fearHandler.unusedFearCardsLeft}get upToMustBeUsedAtMaximum(){return this.someEffect(Pn.UpToMustBeUsedAtMaximum)}get willTakeFromBlightPool(){return this.blightHandler.willTakeFromBlightPool}get winReason(){return this.conductor.winReason}accelerateTheInvaderDeck(){return this.invaderCardHandler.accelerateTheInvaderDeck()}actualExploreCardIndex(e){return this.invaderCardHandler.actualExploreCardIndex(e)}addBlightToBlightCard(e){return this.blightHandler.addBlightToBlightCard(e)}addBlightToBlightPool(e){return this.blightHandler.addBlightToBlightPool(e)}addBoard(e){return this.islandHandler.addBoard(e)}addEffect(e){return this.effectHandler.addEffect(e)}addEffectUntilEndOfAction(e){return this.effectHandler.addEffectUntilEndOfAction(e)}addEffectUntilEndOfActionTree(e){return this.effectHandler.addEffectUntilEndOfActionTree(e)}addEffectUntilEndOfTurn(e){return this.effectHandler.addEffectUntilEndOfTurn(e)}addExploreCardToTop(e,a=0){return this.invaderCardHandler.addExploreCardToTop(e,a)}addFearCards(e){return this.fearHandler.addFearCards(e)}addFearToPool(e){return this.fearHandler.addFearToPool(e)}addRevealedBlightCard(){this.blightHandler.addOneToRevealedBlightCards()}addSlowHealingBlight(e=1){return this.blightHandler.addSlowHealingBlight(e)}addSubEffect(e){return this.effectHandler.addSubEffect(e)}addSubEffectUntilEndOfAction(e){return this.effectHandler.addSubEffectUntilEndOfAction(e)}addSubEffectUntilEndOfTimePasses(e){return this.effectHandler.addSubEffectUntilEndOfTimePasses(e)}addSubEffectUntilEndOfTurn(e){return this.effectHandler.addSubEffectUntilEndOfTurn(e)}addTrigger(e,a,t,n={}){return this.actionHandler.addTrigger(e,a,t,n)}advanceCardsIn(e){return this.invaderCardHandler.advanceCardsIn(e)}advanceInvaderCards(){return this.invaderCardHandler.advanceInvaderCards()}afterPiecesAreAddedOrMovedAddTrigger(e){return this.islandHandler.afterPiecesAreAddedOrMovedAddTrigger(e)}blightDeckIncludesCard(e){return this.blightHandler.blightCardsInDeck.includes(e)}build(e){return this.islandHandler.build(e)}buildFromCard(e,a,t={}){return this.islandHandler.buildFromCard(e,a,t)}checkIfEnded(){this.actionHandler.checkIfEnded()}chooseBetween(e,a={orChoice:!0,payJointly:!1}){return this.inquirer.chooseBetween(e,a)}async clickToContinue(e){await this.query({query:An.ClickToContinue,items:[0],actionIds:["ClickToContinue"],...e})}closeDown(){this.inquirer.closeDown()}countPieceOnlyIfHavingPiece(e,a){return this.countPiecesOnlyIfHavingPieces([e],a)}async countPieceOptionally(e,a){this.action.dontCountAs.add(e);const t=a();this.action.dontCountAs.delete(e);const n=a();if(n.count>t.count){if(await this.may({prompt:`Count pieces as ${Zn[e].text} to do this effect?`}))return n;this.dontCountAs(e)}return t}countPiecesOnlyIfHavingPieces(e,a){const t=this.action.dontCountAs;for(const a of e)t.add(a);const n=a();if(n.count>0){for(const a of e)t.delete(a);return a()}return n}defaultPromptForQueryType(e){return this.inquirer.defaultPromptForQueryType(e)}disableRandomEvents(){this.overrider.disableRandomEvents()}discardBlightCard(e){return this.blightHandler.discardBlightCard(e)}discardEarnedFearCards(e){return this.fearHandler.discardEarnedFearCards(e)}discardPowerToDeckDiscard(e){return this.powerHandler.discardPower(e)}discardTopFearCard(){return this.fearHandler.discardTopFearCard()}doActionOnEachBoard(e,a,t={}){return this.onEachBoard((t=>this.actionHandler.doAction(e,(()=>a(t)),{board:t})),t)}doAdversaryAction(e,a){return this.actionHandler.doAction(qo.AdversaryAction,e,a)}doAdversaryActionOnEachBoard(e){return this.islandHandler.doAdversaryActionOnEachBoard(e)}doBlightCardAction(e){return this.actionHandler.doAction(qo.BlightCardAction,e)}doBlightCardActionOnEachBoard(e){return this.doActionOnEachBoard(qo.BlightCardAction,e)}doDahanEventAction(e,a){return this.actionHandler.doAction(qo.DahanEventAction,e,a)}doDahanEventActionOnEachBoard(e,a={}){return this.doActionOnEachBoard(qo.DahanEventAction,e,a)}doEffect(e,a,t){return this.effectHandler.doEffect(e,a,t)}doEffectWithContext(e,a,t){return this.effectHandler.doEffectWithContext(e,a,t)}doEffects(e,a,t){return this.effectHandler.doEffects(e,a,t)}doEffectsWithContext(e,a,t){return this.effectHandler.doEffectsWithContext(e,a,t)}doEffectsWithPriority(e,a){return this.effectHandler.doEffectsWithPriority(e,a)}async doExtraAction(e){void 0!==e.effect.spirit?await this.doSpiritAction((()=>this.addEffect(e.effect))):await this.addEffect(e.effect)}doExtraBuildInTerrain(e){return this.islandHandler.doExtraBuildInTerrain(e)}doExtraRavageInTerrain(e){return this.islandHandler.doExtraRavageInTerrain(e)}doFearAction(e,a){return this.actionHandler.doAction(qo.FearAction,e,a)}doGameAction(e,a){return this.actionHandler.doAction(qo.GameAction,e,a)}doInstruction(e){return this.instructionHandler.doInstruction(e)}doInvaderAction(e,a,t){return this.actionHandler.doAction(e,a,t)}doMainEventAction(e,a){return this.actionHandler.doAction(qo.MainEventAction,e,a)}doMainEventActionOnEachBoard(e,a={}){return this.doActionOnEachBoard(qo.MainEventAction,e,a)}doPowerAction(e,a,t){return this.actionHandler.doAction(qo.PowerAction,a,{spirit:e,power:t})}doScenarioAction(e,a){return this.actionHandler.doAction(qo.ScenarioAction,e,a)}doScenarioActionOnEachBoard(e,a={}){return this.doActionOnEachBoard(qo.ScenarioAction,e,a)}doSpiritAction(e,a){return this.actionHandler.doAction(qo.SpiritAction,e,a)}doTokenEventAction(e,a){return this.actionHandler.doAction(qo.TokenEventAction,e,a)}doTokenEventActionOnEachBoard(e,a={}){return this.doActionOnEachBoard(qo.TokenEventAction,e,a)}dontCountAs(e){this.action.dontCountAs.add(e)}drawAndDiscardPower(e){return this.powerHandler.drawAndDiscardPower(e)}drawEventCard(){return this.eventHandler.drawEventCard()}drawFrom(e,a){return this.config.controlledFate&&a.length>0?this.inquirer.chooseFrom(e,a):Promise.resolve(this.randomizer.drawFrom(e))}drawNextExploreCard(){return this.invaderCardHandler.drawNextExploreCard()}drawPower(e,a={}){return this.powerHandler.drawPower(e,a)}eachSpirit(e){return this.spiritHandler.eachSpirit(e)}earnFearCard(){return this.fearHandler.earnFearCard()}earnTerrorLevel(){return this.fearHandler.earnTerrorLevel()}effectsMappedWithFilter(e,a){return this.effectHandler.effectsMappedWithFilter(e,a)}effectsOfType(e){return this.effectHandler.effectsOfType(e)}enhanceEffectWithCurrentEffect(e){return this.effectHandler.enhanceEffectWithCurrentEffect(e)}enterAdminMode(){return this.adminHandler.enterAdminMode()}escalate(e,a){return this.invaderCardHandler.escalate(e,a)}eventCardAtIndexIsSpecial(e){return this.eventHandler.eventCardAtIndexIsSpecial(e)}eventDeckIncludesCard(e){return this.eventHandler.eventCardsInDeck.includes(e)}eventDiscardIncludesCard(e){return this.eventHandler.eventCardsInDiscard.includes(e)}existEffect(e){return this.effectHandler.existEffect(e)}existLandWhere(e){return this.islandHandler.existLandWhere(e)}existLocationIncludingNonExistingWhere(e){return this.islandHandler.existLocationIncludingNonExistingWhere(e)}explore(){return this.islandHandler.explore()}extractFeatures(){return bg.extractFeatures(this)}fear(e){return this.generateFear({amount:e,fromDestroyingBuildings:!1})}fearCardsInLevel(e){return this.fearHandler.fearCardsInLevel(e)}fearDeckIncludesCard(e){return this.fearHandler.fearCardsInDeck.includes(e)}firstEffectOfType(e,a){return this.effectHandler.firstEffectOfType(e,a)}forEachLand(e){return this.islandHandler.forEachLand(e)}forPieces(){return this.islandHandler.forPieces()}forPiecesThatIs(e,a){return this.islandHandler.forPieces().where((t=>t.isA(e)&&(void 0===a||a(t.location))))}forPiecesWhere(e){return this.islandHandler.forPieces().where(e)}fromAllSpirits(){return this.spiritHandler.fromAllSpirits()}gainDamageBoost(e){return this.spiritHandler.gainDamageBoost(e)}gainEnergyDividedEvenly(e){return this.spiritHandler.gainEnergyDividedEvenly(e)}gainEnergyFromTracks(){return this.spiritHandler.gainEnergyFromTracks()}gameStartQuery(){return this.clickToContinue({name:"Setup",splash:!0,text:"",noOptions:"Click to Start Game"})}generateFear(e){return this.fearHandler.generateFear(e)}generatePieceId(){return this.randomizer.generatePieceId()}globalHealthCheck(){return this.islandHandler.globalHealthCheck()}growAndPlayTrackActions(){return this.spiritHandler.growAndPlayTrackActions()}hasEffectNamed(e){return this.effectHandler.hasEffectNamed(e)}inBoards(){return this.islandHandler.inBoards()}inBoardsWhere(e){return this.islandHandler.inBoardsWhere(e)}inBoardsWith(e){return this.islandHandler.inBoardsWith(e)}inBoardsWithout(e){return this.islandHandler.inBoardsWithout(e)}inCoastalLands(){return this.inLandsWhere((e=>e.isCoastal))}inCorners(){return this.islandHandler.inCorners()}inCornersWhere(e){return this.islandHandler.inCornersWhere(e)}inDifferentLands(e){return this.islandHandler.inLands().inDifferent(e)}inInlandLands(){return this.inLandsWhere((e=>e.isInland))}inLands(){return this.islandHandler.inLands()}inLandsWhere(e){return this.islandHandler.inLandsWhere(e)}inLandsWith(e){return this.islandHandler.inLandsWith(e)}inLandsWithAllOf(...e){return this.islandHandler.inLandsWithAllOf(...e)}inLandsWithOneOf(...e){return this.islandHandler.inLandsWithOneOf(...e)}inLandsWithOrAdjacentTo(e){return this.islandHandler.inLandsWithOrAdjacentTo(e)}inLandsWithStrife(){return this.islandHandler.inLandsWithStrife()}inLandsWithout(e){return this.islandHandler.inLandsWithout(e)}inLocations(){return this.islandHandler.inLocations()}inLocationsWhere(e){return this.islandHandler.inLocationsWhere(e)}inOceans(){return this.inLocationsWhere((e=>e.type===jo.Ocean))}inTargetableLandsWhere(e){return this.islandHandler.inTargetableLandsWhere(e)}insertEventCard(e){return this.eventHandler.insertEventCard(e)}insertInvaderCard(e,a={}){return this.invaderCardHandler.insertInvaderCard(e,a)}insertInvaderCardUnderFearCards(e,a){this.fearHandler.insertInvaderCardUnderFearCards(e,a)}invaderCardAtIndexIsSpecial(e){return this.invaderCardHandler.invaderCardAtIndexIsSpecial(e)}invaderCardsInSlot(e){return this.invaderDeckInSlot(e).cards}invaderCardsInVisibleSlot(e){return this.invaderDeckInSlot(e).cards}invaderDeckInSlot(e){return this.invaderCardHandler.invaderCardsInSlot[e]}invadersHaveMinusOneHealthPerStrife(){return this.islandHandler.invadersHaveMinusOneHealthPerStrife()}invalidateBoardCache(){this.islandHandler.invalidateBoardCache()}loseFear(e){return this.fearHandler.loseFear(e)}loseGame(e){return this.conductor.loseGame(e)}majorDeckIncludesPower(e){return this.powerHandler.powercardsInMajorDeck.includes(e)}majorDiscardIncludesPower(e){return this.powerHandler.powercardsInMajorDiscard.includes(e)}may(e,a=!1){return this.inquirer.may(e,a)}migrateCornerCornersFromBoard(e){this.islandHandler.migrateCornerCornersFromBoard(e)}minorDeckIncludesPower(e){return this.powerHandler.powercardsInMinorDeck.includes(e)}minorDiscardIncludesPower(e){return this.powerHandler.powercardsInMinorDiscard.includes(e)}moveNthCardOfStageUpByOne(e,a){return this.invaderCardHandler.moveNthCardOfStageUpByOne(e,a)}nextTriggerId(){return this.actionHandler.nextTriggerId()}nthCardOfStage(e,a){return this.invaderCardHandler.nthCardOfStage(e,a)}oceanIsLandForBlight(e){return this.someEffect(Pn.OceanIsLandForBlight,{location:e})}ofTheseLocations(e){return od.createCollection(this,e)}onEachBoard(e,a={}){return this.islandHandler.onEachBoard(e,a)}oneEffectActivates(e,a){return this.effectHandler.oneEffectActivates(e,a)}payEnergyJointlyAidedBy(e){return this.spiritHandler.payEnergyJointlyAidedBy(e)}pickAFaceDownFearCard(){return this.fearHandler.pickAFaceDownFearCard()}pickTerrainsWhere(e,a){return this.islandHandler.pickTerrainsWhere(e,a)}pieceCountIncludingStasis(e){return this.islandHandler.pieceCountIncludingStasis(e)}playDraftActions(e,a){return this.spiritHandler.playDraftActions(e,a)}playPowers(){return this.spiritHandler.playPowers()}playTrackActions(){return this.spiritHandler.playTrackActions()}playersCanJointlyPayEnergyAidedBy(e){return this.spiritHandler.playersCanJointlyPayEnergyAidedBy(e)}possiblyResolveHistoryFinished(){return this.inquirer.possiblyResolveHistoryFinished()}powersWhere(e){return this.spiritHandler.powersWhere(e)}putAllFearCardsInDeckIntoLevel(e){return this.fearHandler.putAllFearCardsInDeckIntoLevel(e)}putAllFearCardsIntoLevel(e){return this.fearHandler.putAllFearCardsIntoLevel(e)}putBottomEventCardToTop(){return this.eventHandler.putBottomEventCardToTop()}putTopEventCardToBottom(){return this.eventHandler.putTopEventCardToBottom()}putTopInvaderCardToBottom(){return this.invaderCardHandler.putTopInvaderCardToBottom()}query(e){return this.inquirer.query(e)}queryOptional(e){return this.inquirer.queryOptional(e)}randomFreePositionFromBoard(e){return this.surveyor.randomFreePositionFromBoard(e)}randomFromArray(e){return this.randomizer.randomFromArray(e)}ravage(){return this.islandHandler.ravage()}removeBlightFromBlightCard(e,a){return this.blightHandler.removeBlightFromBlightCard(e,a)}removeBlightFromBlightPool(e){return this.blightHandler.removeBlightFromBlightPool(e)}removeBottomMostInvaderCardOfStage(e){return this.invaderCardHandler.removeBottomMostInvaderCardOfStage(e)}removeEffect(e){return this.effectHandler.removeEffect(e)}removeEffectsWithId(e){return this.effectHandler.removeEffectsWithId(e)}removeEffectsWithName(e){return this.effectHandler.removeEffectsWithName(e)}removeEventCardFromDiscard(e){this.eventHandler.removeEventCardFromDiscard(e)}removeInvaderCard(e,a){return this.invaderCardHandler.removeCardFromExploreDeck(e,a)}removeInvadersWorthOfHealthUpTo(e){return this.islandHandler.removeInvadersWorthOfHealthUpTo(e)}removePowerCardFromDecks(e){return this.powerHandler.removePowerCardFromDecks(e)}removeSlowHealingBlight(e){return this.blightHandler.removeSlowHealingBlight(e)}removeThisEffect(){this.effectHandler.removeCurrentEffect()}removeTopFearCard(){return this.fearHandler.removeTopFearCard()}removeTopMostInvaderCardOfStage(e){return this.invaderCardHandler.removeTopMostInvaderCardOfStage(e)}removeTopNonSpecialExploreCard(){return this.invaderCardHandler.removeTopNonSpecialExploreCard()}reportMovement(e){return this.instructionHandler.reportMovement(e)}reshuffleFearDeck(){return this.fearHandler.reshuffleFearDeck()}resolvablePowers(e,a=!1){return $d.createCollection(this,this.spiritHandler.resolvablePowers(e,a))}resolveFearCards(){return this.fearHandler.resolveFearCards()}resolveMaximimumPowers(e){this.overrider.resolveMaximimumPowers(e)}resolveNextFearCard(e){return this.fearHandler.resolveNextFearCard(e)}resolvePowers(e){return this.spiritHandler.resolvePowers(e)}resultFromFirstEffectOfType(e,a){return this.effectHandler.resultFromFirstEffectOfType(e,a)}revealFearCardAtLevel(e,a){return this.fearHandler.revealFearCard(e,a)}revealFearCardInDeck(e){return this.fearHandler.revealFearCardInDeck(e)}revealTopEventCard(){return this.eventHandler.revealTopEventCard()}revealTopFearCard(){return this.fearHandler.revealTopFearCard()}revealTopInvaderCard(){return this.invaderCardHandler.revealTopInvaderCard()}run(e,a){const t=this.inquirer.setHistory(e??[],a);return this.conductor.run(void 0===e),t}runEndOfActionEffects(e){return this.effectHandler.runEndOfActionEffects(e)}runEndOfActionTreeEffects(e){return this.effectHandler.runEndOfActionTreeEffects(e)}scoreFromPowers(){return this.spiritHandler.scoreFromPowers()}selectX(e,a,t={}){return this.inquirer.selectX(e,a,t)}sendEvent(e){return this.inquirer.send(e)}setCorners(e){this.islandHandler.setCorners(e)}setHasAttemptedDamagingInvaderThisInstruction(){this.instructionHandler.hasAttemptedDamagingInvader=!0}setHasAttemptedDestroyingInvaderThisInstruction(){this.instructionHandler.hasAttemptedDestroyingInvader=!0}setPhase(e){return this.conductor.setPhase(e)}setRandomSeed(){this.randomizer.setRandomSeed()}setSeed(e){this.randomizer.setSeed(e)}setupAdjacencies(){this.surveyor.setupAdjacencies()}setupAdversaries(){return this.adversaryHandler.setup()}setupCommandBeast(){return this.commandBeastHandler.setup()}setupCorners(){this.surveyor.setupCorners()}setupFearDeck(){return this.fearHandler.setupFearDeck()}setupInvaderDeck(){return this.invaderCardHandler.setupInvaderDeck()}setupPresence(){return this.spiritHandler.setupPresence()}setupScenario(){return this.scenarioHandler.setup()}setupSpirits(){return this.spiritHandler.setup()}setupStartingTokens(){return this.islandHandler.setupStartingTokens()}shuffle(e){return this.randomizer.shuffle(e)}shuffleTopThreeEventCards(){return this.eventHandler.shuffleTopThreeEventCards()}shuffleTopTwoEventCards(){return this.eventHandler.shuffleTopTwoEventCards()}shuffleTopTwoInvaderCards(){return this.invaderCardHandler.shuffleTopTwoInvaderCards()}simplifyMultiPush(){this.overrider.simplifyMultiPush()}simulateSpiritBoardOnly(){this.overrider.simulateSpiritBoardOnly()}spiritsWhich(e){return this.spiritHandler.spiritsWhich(e)}splittedDamage(e){return this.islandHandler.splittedDamage(e)}stageNumbersInSlot(e){return this.invaderCardHandler.stageNumbersInSlot(e)}startAllowOceanForBlight(e){this.oceanIsLandForBlight(e)&&(this.islandHandler.oceanIsAllowedForBlight=!0)}stopAllowOceanForBlight(){this.islandHandler.oceanIsAllowedForBlight=!1}sumEffects(e,a){return this.effectHandler.sumEffects(e,a)}timePassesForEffects(){return this.effectHandler.timePasses()}timePassesForFear(){return this.fearHandler.timePasses()}timePassesForSpirits(){return this.spiritHandler.timePasses()}timePassesLateExpiration(){return this.effectHandler.timePassesLateExpiration()}toString(){return Pg({adversary:this.adversaryHandler,blight:this.blightHandler,conductor:this.conductor,event:this.eventHandler,fear:this.fearHandler,invaderCards:this.invaderCardHandler,island:this.islandHandler,powerHandler:this.powerHandler,randomizer:this.randomizer,scenario:this.scenarioHandler,spirits:this.spiritHandler})}unusedInvaderCardOfStage(e){return this.invaderCardHandler.unusedInvaderCardOfStage(e)}updateReportedPhase(){this.conductor.updateReportedPhase()}waitForAnimationsToFinish(){return this.inquirer.waitForAnimationsToFinish()}winGame(e){return this.conductor.winGame(e)}}Ev([Re],Ov.prototype,"ignoreOneStrife",null),Ev([Re],Ov.prototype,"someBoardsHasExtraLocations",null),Ev([Re],Ov.prototype,"someEffectMakesOceanALand",null),Ev([Re],Ov.prototype,"someLocationHasExtraTerrains",null),Ev([Re],Ov.prototype,"someNonOceanIsOcean",null);class kv{get layout(){return{}}static create(...e){const a=new this(...e);return ed.observableClass(a,this.name),a.init(),a}static layout(e,a,...t){return kv.create.call(this,e,a,...t).layout}init(){}}class Cv extends kv{currentQuery;movingPieces=[];queryPromise;queryPromisePromise;state;stateCursor=0;static DEBUG_QUERIES=!1;waitingForQuery;constructor(e){super(),this.state=new Ov(this,it(e))}addEvent(e){e.data.type===Tn.GameEnd&&(this.currentQuery=void 0)}close(){this.state.closeDown()}query(e){const{query:a,items:t,name:n,text:r,prompt:i,optional:s}=e;Cv.DEBUG_QUERIES&&(console.log(`${An[a]} ${n}: ${r} ${i} optional = ${s}`),console.log(t)),this.currentQuery=e;const o=new wm;if(void 0!==this.queryPromisePromise){const{queryPromisePromise:e}=this;return this.queryPromisePromise=void 0,e.resolve(o),o.promise}return this.queryPromise=o,void 0!==this.waitingForQuery&&this.waitingForQuery.resolve(),this.queryPromise.promise}async resolveQuery(e){if(void 0===this.queryPromise){this.queryPromisePromise=new wm;(await this.queryPromisePromise.promise).resolve(e)}else{const a=this.queryPromise;this.queryPromise=void 0,a.resolve(e)}this.stateCursor+=1,this.currentQuery=void 0}async run(e,a){const t=await this.state.run(e,a);return this.stateCursor=t?.length??0,this.stateCursor}send(e){return this.addEvent(e),Promise.resolve()}waitForAnimations(){return Promise.resolve()}async waitForQuery(){void 0===this.queryPromise&&(this.waitingForQuery=new wm,await this.waitingForQuery.promise,this.waitingForQuery=void 0)}}var Dv=t(248),Bv=t.n(Dv);const Lv={debugEvents:!1,debugQueries:!1,debugSimulation:!0,maxActions:2,maxNumberOfSimulations:300,maxSimulationTimeInMs:5e4,maxTurns:void 0,nodesToAdd:5,numberOfWorkers:6,randomizeSeed:!0,repeats:1,traceSimulation:!1,variable:0};class Fv{static selectMove(e){const{debug:a=!1,results:t}=e;if(0===t[0].moves.length)return a&&console.log("No more moves. Game ended."),null;if(1===t[0].moves.length)return a&&console.log(Bv().green(`${xg(t[0].moves[0].move,66)} `)),{bestMove:t[0].moves[0].move};{const e=t[0].moves.map(((e,a)=>_o(t,(e=>e.moves[a].plays)))),n=t[0].moves.map(((e,a)=>Math.max(...t.map((e=>e.moves[a].value))))),r=Math.max(...n),i=n.reduce(((e,a,t)=>a===r?e.concat([t]):e),[]),s=i[Math.floor(Math.random()*i.length)];if(a)for(let a=0;a<t[0].moves.length;a+=1){const r=a===s?Bv().green:Bv().white;console.log(r(`${xg(t[0].moves[a].move,66)} [${xg(`${e[a]}`,6)} | ${xg(`${n[a].toFixed(2)}`,7)}]`))}return{bestMove:t[0].moves[s].move}}}}class Rv{config;history;onError;simParams;workerPool;constructor(e){this.config=e.config,this.history=e.history,this.simParams=e.simParams||Lv,this.workerPool=e.workerPool,this.onError=e.onError}async findBestMove(){const e=[];for(let a=0;a<this.simParams.numberOfWorkers;a+=1)e.push(this.workerPool.performWork(a,{config:this.config,history:this.history,simParams:this.simParams,workerId:a}));const a=new wm,t=setTimeout((()=>{console.log("TIMEOUT!"),a.resolve([{error:"Timeout"}])}),this.simParams.maxSimulationTimeInMs+1e3),n=Promise.all(e),r=await Promise.race([n,a.promise]);clearTimeout(t);const i=r.find((e=>e.error));if(i)return console.log("error"),this.onError?.(i),null;const s=r;if(this.simParams.debugSimulation){const e=_o(s,(e=>e.runs));console.log(Bv().gray(`=[${xg(`${e}`,5)} ]============================================================================`))}const o=Fv.selectMove({results:s,debug:this.simParams.debugSimulation,simParams:this.simParams});return this.simParams.debugSimulation&&console.log(Bv().gray("=====================================================================================")),null===o?null:o.bestMove}}class Mv{static workers=[];async performWork(e,a){for(;Mv.workers.length<=e;)Mv.workers.push(new Worker(new URL(t.p+t.u(466),t.b)));const n=Mv.workers[e],r=new wm,i=e=>{const a=e.data;r.resolve(a)};n.addEventListener("message",i),n.postMessage(JSON.stringify(a));const s=await r.promise;return n.removeEventListener("message",i),s}release(){Mv.workers.forEach((e=>{e.terminate()})),Mv.workers.length=0}}class Nv extends kv{game;client;updateOn=!0;static webworkerPool=new Mv;config=bn;cursor=0;history=[];constructor(e){super(),this.game=e,this.client=Cv.create(bn)}get currentQuery(){return this.client.currentQuery}get dataStore(){return{cursor:this.cursor,history:this.history,config:this.config}}set dataStore(e){void 0!==e.config&&(this.cursor=e.cursor,this.history=e.history,this.config=e.config)}get gameData(){return{cursor:this.cursor,history:this.history,config:this.config}}get gameJson(){return JSON.stringify({config:this.config,history:this.history})}get mayGoNext(){return this.cursor<this.history.length}get mayGoPrevious(){return this.cursor>0}get nextResponse(){return this.client.stateCursor<this.history.length?this.history[this.client.stateCursor]:void 0}get queryIsCurrent(){return this.currentQuery?.cursor===this.cursor}async alterHistory(e){const{delta:a=0}=e;await this.resetStateToCursor({cursor:this.cursor+a,history:e.history})}clearHistory(){this.history=[],this.cursor=0}async enterAdminMode(e={}){const{withPrompt:a=!0}=e;let t="Admin";if(this.state.isInAdmin&&(this.currentQuery?.actionIds.includes("CloseAdmin")?t="CloseAdmin":this.currentQuery?.optional&&(t="Skip")),this.client.stateCursor<this.cursor)return void console.warn("Tried to enter move when stateCursor is not up to date");const n={history:this.history,cursor:this.cursor,move:t};a&&this.cursor<this.history.length&&t!==this.history[this.cursor]?this.newHistoryBranch({move:t}):await this.resolveMove(n)}async enterMove(e,a={}){const{withPrompt:t=!0}=a;if(this.game.aiIsPlaying)return;if(this.client.stateCursor<this.cursor)return void console.warn("Tried to enter move when stateCursor is not up to date");const n={history:this.history,cursor:this.cursor,move:-1===e?"Skip":this.currentQuery.actionIds[e]};t&&this.cursor<this.history.length&&n.move!==this.history[this.cursor]?this.newHistoryBranch({move:n.move}):await this.resolveMove(n)}findBestMove(){return new Rv({config:this.config,history:this.history.slice(0,this.cursor),state:this.state,currentQuery:this.game.currentQuery,workerPool:Nv.webworkerPool}).findBestMove()}async importGame(e,a=!0){const t=JSON.parse(e);if(this.isValidImport(t))return await this.resetStateToCursor({config:t.config,history:t.history,cursor:a?0:t.history.length}),t.config;throw new Error("Invalid file.")}insertMove(e){const a=this.history.slice();return a.splice(this.cursor,0,e),a}async jumpToEnd(){await this.resetStateToCursor({cursor:this.history.length})}async jumpToStart(){await this.resetStateToCursor({cursor:0})}async jumpToTime(e){await this.resetStateToCursor({cursor:e})}async jumpToTurn(e){await this.resetStateToCursor({includeStart:!1,localOnly:!1,abortAtTurn:e,cursor:this.history.length})}newHistoryBranch(e={}){const{move:a,previous:t=!1}=e,n=this.history.slice(0,this.cursor);let r=e.delta||0;t&&(n.pop(),r-=1),a&&(n.push(a),r+=1),this.alterHistory({history:n,delta:r})}async next(){void 0!==this.currentQuery?this.cursor<this.history.length&&await this.resetStateToCursor({cursor:this.cursor+1,reactive:!1}):await this.resetStateToCursor()}nextTurn(){return this.jumpToTurn(this.state.turn+1)}async playNext(){void 0!==this.game.nextResponse&&(this.game.nextResponseIsAdmin?await this.enterAdminMode():await this.enterMove(this.game.nextResponse))}async previous(){this.cursor>0&&await this.resetStateToCursor({cursor:this.cursor-1,reactive:!1})}previousTurn(){return this.jumpToTurn(Math.max(this.state.phase===Gi.Grow?this.state.turn-1:this.state.turn,0))}async randomMove(){if(this.currentQuery){const{optional:e,items:a,query:t}=this.currentQuery;if(e)return void await this.enterMove(-1);if(t===An.PlayPower){const e=a.findIndex((e=>void 0===e.power));return void await this.enterMove(e)}const n=a?.map(((e,a)=>{const t=e.effect;return void 0!==t?"Cheat"!==t.name?a:-1:a})).filter((e=>e>=0)),r=e&&0===n.length?-1:0,i=n.length-1,s=Math.floor(Math.random()*(i-r+1))+r;if(-1===s)return void await this.enterMove(-1);await this.enterMove(void 0!==n&&n.length>0?n[s]:s)}}removeNextMove(){const e=this.history.slice();return e.splice(this.cursor,1),e}replaceNextMove(e,a=!1){const t=this.history.slice();return t.splice(this.cursor,1,e),a&&(this.history=t),t}async resetStateToCursor(e={}){const{config:a,includeStart:t=!1,abortAtTurn:n,cursor:r=this.cursor,history:i=this.history}=e;this.client.close(),a&&(this.config=a),ed.reactivity=!0,this.updateOn=!1;const s=Cv.create(this.config),o=await s.run(t?void 0:i.slice(0,r),n);this.cursor=o,this.history=i,this.client=s,this.updateOn=!0}async syncToGameData(e,a,t){await this.resetStateToCursor({cursor:e.cursor,config:e.config,history:e.history,includeStart:a,abortAtTurn:t})}get state(){return this.client.state}isValidImport(e){const a=e;return void 0!==a.config&&void 0!==a.history}async resolveMove(e){await this.resetStateToCursor({cursor:this.cursor,history:e.history});const a=e.move;this.cursor<this.history.length?a!==this.history[this.cursor]&&(this.history[this.cursor]=a):this.history.push(a),this.cursor+=1,await this.client.resolveQuery(a)}}class Wv extends kv{aiIsPlaying=!1;askToDowngradeThresholds=!1;autoPlayControlledFate=!1;showNextMove=!0;skipDowngrades=!1;history;currentSpiritIndex=0;estimator=null;constructor(){super(),this.history=Nv.create(this)}get client(){return this.history.client}get config(){return this.client.state.config}get currentQuery(){return this.history.currentQuery}get currentSpirit(){return this.state.spirits[this.currentSpiritIndex%this.state.spirits.length]}get dataStore(){return{currentSpiritIndex:this.currentSpiritIndex,showNextMove:this.showNextMove,autoPlayControlledFate:this.autoPlayControlledFate,askToDowngradeThresholds:this.askToDowngradeThresholds}}set dataStore(e){this.currentSpiritIndex=e.currentSpiritIndex,this.showNextMove=e.showNextMove,this.autoPlayControlledFate=e.autoPlayControlledFate,this.askToDowngradeThresholds=e.askToDowngradeThresholds}get estimatedValue(){return null===this.estimator&&(this.estimator=new bg),this.estimator.estimateValueWithReward(this.state,!1)}get gameData(){return this.history.gameData}get hasRunningAction(){return this.state.hasRunningAction}get mayGoNext(){return this.history.mayGoNext}get mayGoPrevious(){return this.history.mayGoPrevious}get nextResponse(){if(void 0!==this.currentQuery&&this.history.queryIsCurrent&&void 0!==this.history.nextResponse){if("Skip"===this.history.nextResponse&&this.currentQuery.optional)return-1;{const e=this.currentQuery.actionIds.indexOf(this.history.nextResponse);return void 0===e||e>=0?e:-2}}}get nextResponseIsAdmin(){return"Admin"===this.history.nextResponse}get nextTextResponse(){return this.history.nextResponse}get nextVisibleResponse(){if(this.showNextMove)return this.nextResponse}get state(){return this.client.state}get updateOn(){return this.history.updateOn}alterHistory(e){return this.history.alterHistory(e)}autoPlay(){this.aiIsPlaying=!0,setTimeout((()=>{(async()=>{const e=await this.findBestMove();null!==e?(this.history.newHistoryBranch({move:e,delta:-1}),setTimeout((()=>{(async()=>{await this.playNext(),this.state.gameEnded?this.aiIsPlaying=!1:this.autoPlay()})()}),100)):this.aiIsPlaying=!1})()}),0)}async continueGame(){await this.history.jumpToEnd()}debugEstimatedValue(){return null===this.estimator&&(this.estimator=new bg),this.estimator.estimateValueWithReward(this.state,!0)}enterAdminMode(){return this.history.enterAdminMode()}exportGame(){const e=document.createElement("a");e.download=`${(()=>{const e=new Date;return`${e.getFullYear().toString().slice(0,4)}-${e.getMonth()+1>10?e.getMonth()+1:`0${e.getMonth()+1}`}-${e.getDate()>10?e.getDate():`0${e.getDate()}`}`})()}.json`,e.href=this.exportObjectUrl,e.click()}findBestMove(){return this.history.findBestMove()}importGame(e,a=!0){return this.history.importGame(e,a)}jumpToEnd(){return this.history.jumpToEnd()}jumpToStart(){return this.history.jumpToStart()}jumpToTime(e){return this.history.jumpToTime(e)}jumpToTurn(e){return this.history.jumpToTurn(e)}next(){return this.history.next()}nextTurn(){return this.history.nextTurn()}playNext(){return this.history.playNext()}previous(){return this.history.previous()}previousTurn(){return this.history.previousTurn()}randomMove(){return this.history.randomMove()}async setupGame(e){this.currentSpiritIndex=0,this.client.state.config=bn,e.startDate=new Date,await this.history.resetStateToCursor({config:e,includeStart:!0,cursor:0,history:[]})}async start(){await this.history.resetStateToCursor()}get exportObjectUrl(){const e=new Blob([this.history.gameJson],{type:"application/json"});return URL.createObjectURL(e)}}const $v=e=>`"<code>${e}</code>"`;class Gv extends kv{app;description="Clear output.";constructor(e){super(),this.app=e}handle(){return this.app.clear(),Promise.resolve()}help(){this.app.subHeader("Usage: "),this.app.addOutput(`${$v("clear")}: Clear output.`)}}const Uv=e=>`<code>${e}</code>`;class Hv extends kv{app;description="Lists available commands. Supply an argument to get help for that command.";constructor(e){super(),this.app=e}handle(e){if(0===e.length){this.app.header("List of commands:");for(const[e,a]of Object.entries(this.app.commandHandlers))this.app.addOutput(`${$v(e)}: ${a.description}`)}else{const a=e[0],t=this.app.commandHandlers[a]?a:this.app.commandAlias[a],n=this.app.commandHandlers[t];if(n){this.app.header(`The ${Uv(t)} commando.`),n.help();const e=Object.keys(this.app.commandAlias).filter((e=>this.app.commandAlias[e]===t));e.length>0&&(this.app.subHeader("Aliases:"),this.app.addOutput(e.map((e=>`${Uv(e)}`)).join(", ")))}else this.app.addOutput(`Unknown command ${Uv(a)}.`)}return Promise.resolve()}help(){this.app.subHeader("Usage: "),this.app.addOutput(`${$v("help")}: Lists available commands.`),this.app.addOutput(`${$v("help &lt;cmd&gt;")}: Show help for the command ${Uv("&lt;cmd&gt;")}.`)}}class qv extends kv{app;library={};constructor(e){super(),this.app=e;for(const e of Object.keys(fn))this.library[nm[e].name]=e}get command(){return""}get description(){return`Read ${this.infoType} section of the Spirit board.`}get infoType(){return""}handle(e){if(0===e.length)this.outputWithoutArgument();else{const a=Object.keys(this.library).filter((a=>e.join(" ").toUpperCase()===a.toUpperCase())),t=0===a.length?Object.keys(this.library).filter((a=>e.every((e=>a.split(" ").some((a=>a.toUpperCase().startsWith(e.toUpperCase()))))))):a;if(t.length>0)if(1===t.length){const e=this.library[t[0]],a=nm[e];a&&this.outputSpiritInfo(a)}else{this.app.subHeader(`${t.length} entries found:`);for(const e of t)this.app.link(e,`${this.command} ${e}`)}else this.app.subHeader("No entries found.")}return Promise.resolve()}help(){this.app.subHeader("Usage: "),this.app.addOutput(`${$v(`${this.command} &lt;spirit&gt;`)}: Show ${this.infoType} of spirit ${Uv("&lt;spirit&gt;")}.`)}outputSpiritInfo(e){this.app.addOutput(e.name)}outputWithoutArgument(){this.app.addOutput("Supply the name or parts of the Spirit name as argument.")}}const jv={"<air>":"Air","<animal>":"Animal","<any>":"Any","<badlands>":"Badlands","<beasts>":"Beasts","<blight>":"Blight","<br><br>":"<br>","<broken>":"Destroyed Presence","<bullet>":"•","<city>":"City","<dahan>":"Dahan","<damage>":"Damage","<darkfire>":"Darkfire","<deeps>":"Deeps","<disease>":"Disease","<earth>":"Earth","<endless-dark>":"Endless Dark","<escalation>":"Escalation","<explorer>":"Explorer","<fast>":"Fast","<fear>":"Fear","<fire>":"Fire","<fire-plant>":"Fire or Plant","<i>":"&nbsp;&nbsp;","<impending>":"Impending","<marked-beast>":"Marked Beast","<moon>":"Moon","<or>":" ~ OR ~ ","<plant>":"Plant","<presence>":"Presence","<quake>":"Quake","<range-0>":"Range 0","<range-1>":"Range 1","<range-2>":"Range 2","<range-3>":"Range 3","<range-4>":"Range 4","<range+1>":"+1 Range","<range+2>":"+2 Range","<range+3>":"+3 Range","<range+4>":"+4 Range","<range-air>":"Range Air","<sacred>":"Sacred Site","<branch>":"Branch and Claw","<feather>":"Feather and Flame","<horizons>":"Horizons of Spirit Island","<incarna-behemoth>":"Behemoth Incarna","<incarna-darkness>":"Darkness Incarna","<incarna-lair>":"Lair Incarna","<incarna-locus>":"Locus Incarna","<incarna-roots>":"Roots Incarna","<incarna-voice>":"Voice Incarna","<incarna-warrior>":"Warrior Incarna","<jagged>":"Jagged Earth","<nature>":"Nature Incarnate","<shadow-damage>":"Shadow Damage","<slow>":"Slow","<spirit-lightning>":"Lightning","<spirit-river>":"River","<spirit-earth>":"Earth","<spirit-shadows>":"Shadows","<spirit-thunderspeaker>":"Thunderspeaker","<spirit-green>":"Green","<spirit-ocean>":"Ocean","<spirit-bringer>":"Bringer","<spirit-fangs>":"Fangs","<spirit-keeper>":"Keeper","<spirit-wildfire>":"Wildfire","<spirit-serpent>":"Serpent","<spirit-stone>":"Stone","<spirit-memory>":"Memory","<spirit-trickster>":"Trickster","<spirit-lure>":"Lure","<spirit-manyminds>":"ManyMinds","<spirit-volcano>":"Volcano","<spirit-shroud>":"Shroud","<spirit-vengeance>":"Vengeance","<spirit-starlight>":"Starlight","<spirit-fractured>":"Fractured","<spirit-downpour>":"Downpour","<spirit-finder>":"Finder","<spirit-teeth>":"Teeth","<spirit-eyes>":"Eyes","<spirit-mud>":"Mud","<spirit-heat>":"Heat","<spirit-whirlwind>":"Whirlwind","<spirit-hearthvigil>":"HearthVigil","<spirit-behemoth>":"Behemoth","<spirit-darkness>":"Darkness","<spirit-gaze>":"Gaze","<spirit-roots>":"Roots","<spirit-earthquakes>":"Earthquakes","<spirit-voice>":"Voice","<spirit-wounded>":"Wounded","<strife>":"Strife","<sun>":"Sun","<sun-moon>":"Sun or Moon","<jungles-sands>":"Jungles or Sands","<jungles-wetlands>":"Jungles or Wetlands","<jungles>":"Jungles","<mountains-jungles>":"Mountains or Jungles","<mountains-sands>":"Mountains or Sands","<mountains-wetlands>":"Mountains or Wetlands","<mountains>":"Mountains","<sands-wetlands>":"Sands or Wetlands","<sands>":"Sands","<wetlands>":"Wetlands","<town>":"Town","<vitality>":"Vitality","<water>":"Water","<water-animal>":"Water or Animal","<wilds>":"Wilds"},_v=e=>{let a=e;for(const e of Object.keys(jv))a=a.replaceAll(e,jv[e]);return a};class Vv extends qv{constructor(e){super(e)}get command(){return"growth"}get infoType(){return"the Growth Options"}static outputSpiritInfo(e,a){let t=1;for(const n of a.growthOptions)if(n.effects.some((e=>e.text))){e.subHeader(`Growth Option ${t}`);let a=1;for(const t of n.effects)t.text&&e.addOutput(`Action ${a}: ${_v(t.text)}`),a+=1;t+=1}}outputSpiritInfo(e){return Vv.outputSpiritInfo(this.app,e)}}class Jv extends qv{constructor(e){super(e)}get command(){return"innates"}get description(){return"List all Innates. Supply argument to filter by Spirit."}get infoType(){return"the Innates"}static outputSpiritInfo(e,a){for(const t of a.innatePowers)e.link(dg[t].name,`read ${dg[t].name}`)}outputSpiritInfo(e){return Jv.outputSpiritInfo(this.app,e)}outputWithoutArgument(){for(const e of Object.keys(dg)){const a=dg[e];a.type===kn.Innate&&this.app.link(a.name,`read ${a.name}`)}}}class zv extends qv{constructor(e){super(e)}get command(){return"lore"}get infoType(){return"the Lore"}static outputSpiritInfo(e,a){e.addOutput(a.lore)}outputSpiritInfo(e){return zv.outputSpiritInfo(this.app,e)}}class Yv extends qv{constructor(e){super(e)}get command(){return"playstyle"}get infoType(){return"the Play Style"}static outputSpiritInfo(e,a){e.addOutput(a.playStyle)}outputSpiritInfo(e){return Yv.outputSpiritInfo(this.app,e)}}class Kv extends qv{constructor(e){super(e)}get command(){return"setup"}get infoType(){return"the Setup"}static outputSpiritInfo(e,a){for(const t of a.setup)t.text&&e.addOutput(_v(t.text))}outputSpiritInfo(e){return Kv.outputSpiritInfo(this.app,e)}}class Qv extends qv{constructor(e){super(e)}get command(){return"tracks"}get infoType(){return"the Presence Tracks"}static outputSpiritInfo(e,a){for(const t of a.tracks)e.addOutput(t.name)}outputSpiritInfo(e){return Qv.outputSpiritInfo(this.app,e)}}class Xv extends qv{constructor(e){super(e)}get command(){return"uniques"}get description(){return"List all Uniques. Supply argument to filter by Spirit."}get infoType(){return"the Unique Powers"}static outputSpiritInfo(e,a){for(const t of a.uniquePowers)e.link(dg[t].name,`read ${dg[t].name}`)}outputSpiritInfo(e){return Xv.outputSpiritInfo(this.app,e)}outputWithoutArgument(){for(const e of Object.keys(dg)){const a=dg[e];a.type===kn.Unique&&this.app.link(a.name,`read ${a.name}`)}}}const Zv={[dr.Beasts]:"Land with Beasts",[dr.Blight]:"Blighted Land",[dr.BlightAndInvaders]:"Land with Blight and Invaders",[dr.City]:"Land with City",[dr.Coastal]:"Coastal Land",[dr.CoastalCity]:"Coastal Land with City",[dr.Dahan]:"Land with Dahan",[dr.Deeps]:"Land with Deeps Token",[dr.Disease]:"Land with Disease",[dr.Incarna]:"Land with Incarna",[dr.IncarnaAndDahan]:"Land with Incarna and Dahan",[dr.IncarnaBehemoth]:"Land with Behemoth Incarna",[dr.IncarnaLair]:"Land with Lair Incarna",[dr.IncarnaRoots]:"Land with Roots Incarna",[dr.IncarnaVoice]:"Land with Voice Incarna",[dr.Inland]:"Inland Land",[dr.Invaders]:"Land with Invaders",[dr.InvadersAndIncarnaRoots]:"Land with Invaders and Roots Incarna",[dr.Jungle]:"Jungle",[dr.JunglesOrWetlands]:"Jungles or Wetlands",[dr.Mountain]:"Mountain",[dr.MountainOrJungles]:"Mountain or Jungles",[dr.NoInvaders]:"Land without Invaders",[dr.NonBlight]:"Non-Blighted Land",[dr.NonOceanLand]:"Non-Ocean Land",[dr.NotWetlands]:"Non-Wetlands",[dr.Quake]:"Land with Quake",[dr.SacredSite]:"Sacred Site",[dr.SacredSiteAndDahan]:"Sacred Site with Dahan",[dr.Sands]:"Sands",[dr.Strife]:"Land with Strife",[dr.TheEndlessDark]:"The Endless Dark",[dr.Town]:"Land with Town",[dr.TownOrCity]:"Land with Town or City",[dr.TwoBeasts]:"Land with two Beasts",[dr.TwoBeastsAndInvaders]:"Land with two beasts and Invaders",[dr.TwoDahan]:"Land with two Dahan",[dr.WardTheShores]:"Land",[dr.Wetlands]:"Wetlands"};class ex extends kv{app;description="Read the text of any card or Spirit board.";library={};constructor(e){super(),this.app=e;for(const e of Object.keys(dg))this.library[dg[e].name]=e;for(const e of Object.keys(rr))this.library[rr[e].name]=e;for(const e of Object.keys(Ip))this.library[Ip[e].name]=e;for(const e of Object.keys(uy))this.library[uy[e].name]=e;for(const e of Object.keys(fn))this.library[nm[e].name]=e;for(const e of Object.keys(Qo))this.library[vv[e].name]=e}handle(e){if(0===e.length)this.app.addOutput("Supply the name or parts of the name as arguments.");else{const a=Object.keys(this.library).filter((a=>e.join(" ").toUpperCase()===a.toUpperCase())),t=0===a.length?Object.keys(this.library).filter((a=>e.every((e=>a.split(" ").some((a=>a.toUpperCase().startsWith(e.toUpperCase()))))))):a;if(t.length>0)if(1===t.length){const e=this.library[t[0]],a=dg[e],n=this.library[t[0]],r=rr[n],i=this.library[t[0]],s=Ip[i],o=this.library[t[0]],d=uy[o],l=this.library[t[0]],c=nm[l],h=this.library[t[0]],u=vv[h];if(a){this.app.header(a.name);const t=a.speed===sr.Fast?"Fast":"Slow";let n,r,i;if(a.type===kn.Unique?n=Object.keys(nm).find((a=>nm[a].uniquePowers.includes(e))):a.type===kn.Innate&&(n=Object.keys(nm).find((a=>nm[a].innatePowers.includes(e))),void 0===n&&(r=Object.keys(vv).find((a=>vv[a].innatePowers?.includes(e))))),n?i=`${nm[n].name}`:r&&(i=`the Aspect ${vv[r].name}`),this.app.addOutput(`${a.banned?"Banned ":""}${a.type} Power${i?` of ${i}`:""}.`),this.app.addOutput(`${t}${void 0!==a.energy?`, ${a.energy} Energy.`:"."}`),a.elements&&this.app.addOutput(`Elements: ${a.elements.length>0?a.elements.join(", "):"None"}. `),a.target===or.Spirit){let e="Any Spirit";a.targetFilter?.includes(fr.Another)?e="Another Spirit":a.targetFilter?.includes(fr.Yourself)&&(e="Yourself"),this.app.addOutput(`Target ${e}`)}else{const e=a.sourceFilter?` of ${a.sourceFilter.map((e=>Zv[e])).join(" or ")}`:"";if(void 0!==a.ranges){const t=` in ranges ${a.ranges.join(" and ")}`;this.app.addOutput(`Target ${a.ranges.length} Lands ${t}${e}.`)}else{const t=void 0!==a.range?` in range ${a.range}`:"",n=a.targetFilter?a.targetFilter.map((e=>Zv[e])).join(" or "):"Land";this.app.addOutput(`Target ${n}${t}${e}.`)}}if(a.fullText)for(const e of a.fullText)a.type===kn.Innate&&e.startsWith("Threshold")?this.app.subHeader(_v(e)):this.app.addOutput(_v(e));else for(const e of a.effects)if(e.threshold&&this.app.subHeader(`Threshold ${_v(Tv(e.threshold))}`),e.text)a.type===kn.Innate&&e.text.startsWith("Threshold")?this.app.subHeader(_v(e.text)):this.app.addOutput(_v(e.text));else if(e.effects)for(const t of e.effects)t.text&&(a.type===kn.Innate&&t.text.startsWith("Threshold")?this.app.subHeader(_v(t.text)):this.app.addOutput(_v(t.text)))}else if(r){this.app.header(r.name),this.app.addOutput(`${r.banned?"Banned ":""}Blight Card. ${r.stillHealthy?"Still Healthy Island. ":""}${r.blightPerPlayer} Blight per Player.`);for(const e of r.effects)e.text&&this.app.addOutput(_v(e.text))}else if(s){this.app.header(s.name),this.app.addOutput((s.banned?"Banned ":"")+"Fear Card.");let e=1;for(const a of s.levels)a.text?(this.app.subHeader(`Terror Level ${e}:`),this.app.addOutput(`${_v(a.text)}`)):a.effects&&this.app.addOutput(`Terror Level ${e}: ${a.effects.map((e=>_v(e.text||""))).join(" ")}`),e+=1}else if(d){this.app.header(d.name),this.app.addOutput((d.banned?"Banned ":"")+"Event Card.");for(const e of d.events){let a="";if(e.tokenEvent?a="Token Event: ":e.blightStatus?a=e.blightStatus===lg.BlightedIsland?"Blighted Island: ":"Healthy Island: ":e.dahanEvent?a="Dahan Event: ":e.stages?a=`Stage ${e.stages.join(" & ")}: `:e.terrorLevels&&(a=`Terrorlevel ${e.terrorLevels.join(" & ")}: `),e.fullText)for(const a of e.fullText)this.app.addOutput(_v(a));else{this.app.subHeader(a+e.name);for(const a of e.effects)a.text&&this.app.addOutput(_v(a.text))}}}else if(c){this.app.header(`${c.name}`),this.app.addOutput("Base Spirit."),this.app.subHeader("Lore:"),zv.outputSpiritInfo(this.app,c),this.app.subHeader("Setup:"),Kv.outputSpiritInfo(this.app,c),this.app.subHeader("Play Style:"),Yv.outputSpiritInfo(this.app,c),this.app.subHeader("Complexity:"),this.app.addOutput(c.complexity);for(const e of c.specialRules)e.name&&e.text&&(this.app.subHeader(`Special Rule: ${e.name}`),this.app.addOutput(_v(e.text)));Vv.outputSpiritInfo(this.app,c),this.app.subHeader("Presence Tracks:"),Qv.outputSpiritInfo(this.app,c),this.app.subHeader("Innate Powers:"),Jv.outputSpiritInfo(this.app,c),this.app.subHeader("Unique Powers:"),Xv.outputSpiritInfo(this.app,c),this.app.subHeader("Aspects:"+(c.aspects.length>0?"":" None."));for(const e of c.aspects)this.app.link(vv[e].name,`read ${vv[e].name}`)}else if(u){this.app.header(`${u.name}`);const e=Object.keys(nm).find((e=>nm[e].aspects.includes(h)));this.app.addOutput(`Aspect of ${nm[e].name}`);for(const e of u.effects)if(e.name&&(e.text||e.effects))if(this.app.subHeader(e.name),e.text)this.app.addOutput(_v(e.text));else if(e.effects)for(const a of e.effects)a.text&&this.app.addOutput(_v(a.text))}}else{this.app.subHeader(`${t.length} entries found:`);for(const e of t)this.app.link(e,`read ${e}`)}else this.app.subHeader("No entries found.")}return Promise.resolve()}help(){this.app.subHeader("Usage: "),this.app.addOutput(`${$v("read &lt;card&gt;")}: Show text of card ${Uv("&lt;card&gt;")}.`)}}var ax;!function(e){e.AdversaryEngland="AdversaryEngland",e.AdversaryFrance="AdversaryFrance",e.AdversaryHabsburg="AdversaryHabsburg",e.AdversaryPrussia="AdversaryPrussia",e.AdversaryRussia="AdversaryRussia",e.AdversarySaltburg="AdversarySaltburg",e.AdversaryScotland="AdversaryScotland",e.AdversarySweden="AdversarySweden",e.AspectsAmorphous="AspectsAmorphous",e.AspectsDarkFire="AspectsDarkFire",e.AspectsDeeps1="AspectsDeeps1",e.AspectsDeeps2="AspectsDeeps2",e.AspectsEncircle1="AspectsEncircle1",e.AspectsEncircle2="AspectsEncircle2",e.AspectsEnticing="AspectsEnticing",e.AspectsForeboding="AspectsForeboding",e.AspectsHaven="AspectsHaven",e.AspectsImmense="AspectsImmense",e.AspectsIntensify="AspectsIntensify",e.AspectsLair1="AspectsLair1",e.AspectsLair2="AspectsLair2",e.AspectsLocus1="AspectsLocus1",e.AspectsLocus2="AspectsLocus2",e.AspectsMadness="AspectsMadness",e.AspectsMentor1="AspectsMentor1",e.AspectsMentor2="AspectsMentor2",e.AspectsMight="AspectsMight",e.AspectsNourishing="AspectsNourishing",e.AspectsPandemonium="AspectsPandemonium",e.AspectsReach="AspectsReach",e.AspectsRegrowth="AspectsRegrowth",e.AspectsResilience="AspectsResilience",e.AspectsSparking="AspectsSparking",e.AspectsSpreadingHostility="vSpreadingHostility",e.AspectsStranded="AspectsStranded",e.AspectsSunshine="AspectsSunshine",e.AspectsTactician="AspectsTactician",e.AspectsTangles="AspectsTangles",e.AspectsTransforming1="AspectsTransforming1",e.AspectsTransforming2="AspectsTransforming2",e.AspectsTravel="AspectsTravel",e.AspectsUnconstrained="AspectsUnconstrained",e.AspectsViolence="AspectsViolence",e.AspectsWarrior="AspectsWarrior",e.AspectsWind="AspectsWind",e.BacksBlight="BacksBlight",e.BacksEvents="BacksEvents",e.BacksFear="BacksFear",e.BacksForgotten="BacksForgotten",e.BacksFractured="BacksFractured",e.BacksInvader1="BacksInvader1",e.BacksInvader2="BacksInvader2",e.BacksInvader3="BacksInvader3",e.BacksMajor="BacksMajor",e.BacksMinor="BacksMinor",e.BacksReminderLargePink="BacksReminderLargePink",e.BacksReminderSmallPink="BacksReminderSmallPink",e.BacksReminderLargeYellow="BacksReminderLargeYellow",e.BacksReminderSmallYellow="BacksReminderSmallYellow",e.BacksTwoCards="BacksTwoCards",e.BlightCardsAPallUponTheLand="BlightCardsAPallUponTheLand",e.BlightCardsAidFromLesserSpirit="BlightCardsAidFromLesserSpirit",e.BlightCardsAllThingsWeaken="BlightCardsAllThingsWeaken",e.BlightCardsAttenuatedEssence="BlightCardsAttenuatedEssence",e.BlightCardsBackAgainstTheWall="BlightCardsBackAgainstTheWall",e.BlightCardsBlightCorrodesTheSpirit="BlightCardsBlightCorrodesTheSpirit",e.BlightCardsBurnBrightestBeforeTheEnd="BlightCardsBurnBrightestBeforeTheEnd",e.BlightCardsDisintegratingEcosystem="BlightCardsDisintegratingEcosystem",e.BlightCardsDownwardSpiral="BlightCardsDownwardSpiral",e.BlightCardsErosionOfWill="BlightCardsErosionOfWill",e.BlightCardsIntensifyingExploitation="BlightCardsIntensifyingExploitation",e.BlightCardsInvadersFindTheLandToTheirLiking="BlightCardsInvadersFindTheLandToTheirLiking",e.BlightCardsMemoryFadesToDust="BlightCardsMemoryFadesToDust",e.BlightCardsPowerCorrodesTheSpirit="BlightCardsPowerCorrodesTheSpirit",e.BlightCardsPromisingFarmlands="BlightCardsPromisingFarmlands",e.BlightCardsShatteredFragmentsOfPower="BlightCardsShatteredFragmentsOfPower",e.BlightCardsSlowDissolutionOfWill="BlightCardsSlowDissolutionOfWill",e.BlightCardsStrongEarthShattersSlowly="BlightCardsStrongEarthShattersSlowly",e.BlightCardsTheBorderOfLifeAndDeath="BlightCardsTheBorderOfLifeAndDeath",e.BlightCardsThrivingCommunities="BlightCardsThrivingCommunities",e.BlightCardsThrivingCrops="BlightCardsThrivingCrops",e.BlightCardsTippingPoint="BlightCardsTippingPoint",e.BlightCardsUnnaturalProliferation="BlightCardsUnnaturalProliferation",e.BlightCardsUntendedLandCrumbles="BlightCardsUntendedLandCrumbles",e.BoardA="BoardA",e.BoardB="BoardB",e.BoardC="BoardC",e.BoardD="BoardD",e.BoardE="BoardE",e.BoardF="BoardF",e.BoardG="BoardG",e.BoardH="BoardH",e.BoardsThematicEA="BoardsThematicEA",e.BoardsThematicNE="BoardsThematicNE",e.BoardsThematicNW="BoardsThematicNW",e.BoardsThematicSE="BoardsThematicSE",e.BoardsThematicSW="BoardsThematicSW",e.BoardsThematicWE="BoardsThematicWE",e.EventCardsAccumulatedDevastation="EventCardsAccumulatedDevastation",e.EventCardsAnOminousDawn="EventCardsAnOminousDawn",e.EventCardsAStrangeMadnessAmongTheBeasts="EventCardsAStrangeMadnessAmongTheBeasts",e.EventCardsBureaucratsAdjustFunding="EventCardsBureaucratsAdjustFunding",e.EventCardsCitiesRise="EventCardsCitiesRise",e.EventCardsCivicEngagement="EventCardsCivicEngagement",e.EventCardsCoastalTownsMultiply="EventCardsCoastalTownsMultiply",e.EventCardsCulturalAssimilation="EventCardsCulturalAssimilation",e.EventCardsDahanTradeWithTheInvaders="EventCardsDahanTradeWithTheInvaders",e.EventCardsDistantExploration="EventCardsDistantExploration",e.EventCardsEagerExplorers="EventCardsEagerExplorers",e.EventCardsEtherealConjunction="EventCardsEtherealConjunction",e.EventCardsFarOffWarsTouchTheIsland="EventCardsFarOffWarsTouchTheIsland",e.EventCardsFarmersSeekTheDahanForAid="EventCardsFarmersSeekTheDahanForAid",e.EventCardsFocusedFarming="EventCardsFocusedFarming",e.EventCardsFortuneseekers="EventCardsFortuneseekers",e.EventCardsGradualCorruption="EventCardsGradualCorruption",e.EventCardsHardworkingSettlers="EventCardsHardworkingSettlers",e.EventCardsHarvestBountyHarvestDust="EventCardsHarvestBountyHarvestDust",e.EventCardsHeavyFarming="EventCardsHeavyFarming",e.EventCardsInfluxOfSettlers="EventCardsInfluxOfSettlers",e.EventCardsInterestingDiscoveries="EventCardsInterestingDiscoveries",e.EventCardsInvadersSurgeInland="EventCardsInvadersSurgeInland",e.EventCardsInvestedAristocracy="EventCardsInvestedAristocracy",e.EventCardsInvestigationOfDangers="EventCardsInvestigationOfDangers",e.EventCardsLesserSpiritsImperiled="EventCardsLesserSpiritsImperiled",e.EventCardsLifesBalanceTilts="EventCardsLifesBalanceTilts",e.EventCardsMapmakersChartTheWild="EventCardsMapmakersChartTheWild",e.EventCardsMissionariesArrive="EventCardsMissionariesArrive",e.EventCardsNewSpeciesSpread="EventCardsNewSpeciesSpread",e.EventCardsNoBraveryWithoutNumbers="EventCardsNoBraveryWithoutNumbers",e.EventCardsNuminousCrisis="EventCardsNuminousCrisis",e.EventCardsOutpaced="EventCardsOutpaced",e.EventCardsOverconfidence="EventCardsOverconfidence",e.EventCardsPopulationRises="EventCardsPopulationRises",e.EventCardsPromisingFarmland="EventCardsPromisingFarmland",e.EventCardsProvincialSeat="EventCardsProvincialSeat",e.EventCardsPullTogetherInAdversity="EventCardsPullTogetherInAdversity",e.EventCardsPuttingDownRoots="EventCardsPuttingDownRoots",e.EventCardsRelentlessOptimism="EventCardsRelentlessOptimism",e.EventCardsRemnantsOfASpiritsHeart="EventCardsRemnantsOfASpiritsHeart",e.EventCardsResourcefulPopulace="EventCardsResourcefulPopulace",e.EventCardsRisingInterestInTheIsland="EventCardsRisingInterestInTheIsland",e.EventCardsSacredSitesUnderThreat="EventCardsSacredSitesUnderThreat",e.EventCardsSearchForNewLands="EventCardsSearchForNewLands",e.EventCardsSearchForUnclaimedLand="EventCardsSearchForUnclaimedLand",e.EventCardsSeekNewFarmland="EventCardsSeekNewFarmland",e.EventCardsSeekingTheInterior="EventCardsSeekingTheInterior",e.EventCardsSlaveRebellion="EventCardsSlaveRebellion",e.EventCardsSmallerPortsSpringUp="EventCardsSmallerPortsSpringUp",e.EventCardsSprawlContainedByTheWilds="EventCardsSprawlContainedByTheWilds",e.EventCardsStrangeTalesAttractExplorers="EventCardsStrangeTalesAttractExplorers",e.EventCardsTemporaryTruce="EventCardsTemporaryTruce",e.EventCardsTerrorSpikesUpwards="EventCardsTerrorSpikesUpwards",e.EventCardsTheFrontierCalls="EventCardsTheFrontierCalls",e.EventCardsTheStrugglesOfGrowth="EventCardsTheStrugglesOfGrowth",e.EventCardsThrivingTrade="EventCardsThrivingTrade",e.EventCardsTightknitCommunities="EventCardsTightknitCommunities",e.EventCardsUrbanDevelopment="EventCardsUrbanDevelopment",e.EventCardsVisionsOutOfTime="EventCardsVisionsOutOfTime",e.EventCardsWarTouchesTheIslandsShores="EventCardsWarTouchesTheIslandsShores",e.EventCardsWaveOfReconnaissance="EventCardsWaveOfReconnaissance",e.EventCardsWellpreparedExplorers="EventCardsWellpreparedExplorers",e.EventCardsWoundedLandsAttractExplorers="EventCardsWoundedLandsAttractExplorers",e.EventCardsYearsOfLittleRain="EventCardsYearsOfLittleRain",e.FearCardsAngryMobs="FearCardsAngryMobs",e.FearCardsAvoidTheDahan="FearCardsAvoidTheDahan",e.FearCardsBeliefTakesRoot="FearCardsBeliefTakesRoot",e.FearCardsBesetByManyTroubles="FearCardsBesetByManyTroubles",e.FearCardsCivilUnrest="FearCardsCivilUnrest",e.FearCardsCommunitiesInDisarray="FearCardsCommunitiesInDisarray",e.FearCardsDahanAttack="FearCardsDahanAttack",e.FearCardsDahanEnheartened="FearCardsDahanEnheartened",e.FearCardsDahanGainTheEdge="FearCardsDahanGainTheEdge",e.FearCardsDahanOnTheirGuard="FearCardsDahanOnTheirGuard",e.FearCardsDahanRaid="FearCardsDahanRaid",e.FearCardsDahanReclaimFishingGrounds="FearCardsDahanReclaimFishingGrounds",e.FearCardsDahanThreaten="FearCardsDahanThreaten",e.FearCardsDauntedByTheDahan="FearCardsDauntedByTheDahan",e.FearCardsDemoralized="FearCardsDemoralized",e.FearCardsDepartTheDangerousLand="FearCardsDepartTheDangerousLand",e.FearCardsDepopulation="FearCardsDepopulation",e.FearCardsDiscord="FearCardsDiscord",e.FearCardsDistractedByLocalTroubles="FearCardsDistractedByLocalTroubles",e.FearCardsEmigrationAccelerates="FearCardsEmigrationAccelerates",e.FearCardsExplorersAreReluctant="FearCardsExplorersAreReluctant",e.FearCardsFearOfTheUnseen="FearCardsFearOfTheUnseen",e.FearCardsFleeFromDangerousLands="FearCardsFleeFromDangerousLands",e.FearCardsFleeThePestilentLand="FearCardsFleeThePestilentLand",e.FearCardsImmigrationSlows="FearCardsImmigrationSlows",e.FearCardsIsolation="FearCardsIsolation",e.FearCardsMimicTheDahan="FearCardsMimicTheDahan",e.FearCardsNervesFray="FearCardsNervesFray",e.FearCardsOverseasTradeSeemSafer="FearCardsOverseasTradeSeemSafer",e.FearCardsPanic="FearCardsPanic",e.FearCardsPanickedByWildBeasts="FearCardsPanickedByWildBeasts",e.FearCardsPlanForDeparture="FearCardsPlanForDeparture",e.FearCardsRestlessness="FearCardsRestlessness",e.FearCardsQuarantine="FearCardsQuarantine",e.FearCardsRetreat="FearCardsRetreat",e.FearCardsScapegoats="FearCardsScapegoats",e.FearCardsSeekCompany="FearCardsSeekCompany",e.FearCardsSeekSafety="FearCardsSeekSafety",e.FearCardsSenseOfDread="FearCardsSenseOfDread",e.FearCardsSpreadingTimidity="FearCardsSpreadingTimidity",e.FearCardsStrugglesOverFarmland="FearCardsStrugglesOverFarmland",e.FearCardsSupplyChainsAbandoned="FearCardsSupplyChainsAbandoned",e.FearCardsTallTalesOfSavagery="FearCardsTallTalesOfSavagery",e.FearCardsTheologicalStrife="FearCardsTheologicalStrife",e.FearCardsTooManyMonsters="FearCardsTooManyMonsters",e.FearCardsTradeSuffers="FearCardsTradeSuffers",e.FearCardsTreadCarefully="FearCardsTreadCarefully",e.FearCardsUnrest="FearCardsUnrest",e.FearCardsUnsettled="FearCardsUnsettled",e.FearCardsWaryOfTheInterior="FearCardsWaryOfTheInterior",e.FlagsEngland="FlagsEngland",e.FlagsFrance="FlagsFrance",e.FlagsHabsburg="FlagsHabsburg",e.FlagsPrussia="FlagsPrussia",e.FlagsRussia="FlagsRussia",e.FlagsSaltburg="FlagsSaltburg",e.FlagsScotland="FlagsScotland",e.FlagsSweden="FlagsSweden",e.GuiAltBack="GuiAltBack",e.GuiArrowLeft="GuiArrowLeft",e.GuiArrowRight="GuiArrowRight",e.GuiBack="GuiBack",e.GuiBlight="GuiBlight",e.GuiCardplays="GuiCardplays",e.GuiCheck="GuiCheck",e.GuiCrossed="GuiCrossed",e.GuiDamage="GuiDamage",e.GuiDarkBack="GuiDarkBack",e.GuiDice="GuiDice",e.GuiEndlessDark="GuiEndlessDark",e.GuiEnergy="GuiEnergy",e.GuiFear="GuiFear",e.GuiHeader="GuiHeader",e.GuiLightBack="GuiLightBack",e.GuiNoCities="GuiNoCities",e.GuiNoExplorers="GuiNoExplorers",e.GuiNoTowns="GuiNoTowns",e.GuiOpen="GuiOpen",e.GuiPlayer="GuiPlayer",e.GuiRewind="GuiRewind",e.GuiRotate="GuiRotate",e.GuiRules1="GuiRules1",e.GuiRules2="GuiRules2",e.GuiRules3="GuiRules3",e.GuiRules4="GuiRules4",e.GuiSearch="GuiSearch",e.GuiShadowDamage="GuiShadowDamage",e.GuiSplash="GuiSplash",e.GuiVisible="GuiVisible",e.GuiInvisible="GuiInvisible",e.HealingCardsRoilingWaters="HealingCardsRoilingWaters",e.HealingCardsSereneWaters="HealingCardsSereneWaters",e.HealingCardsWatersRenew="HealingCardsWatersRenew",e.HealingCardsWatersTasteOfRuin="HealingCardsWatersTasteOfRuin",e.IconsBadlands="IconsBadlands",e.IconsBeasts="IconsBeasts",e.IconsBlight="IconsBlight",e.IconsBroken="IconsBroken",e.IconsBullet="IconsBullet",e.IconsCity="IconsCity",e.IconsDahan="IconsDahan",e.IconsDeeps="IconsDeeps",e.IconsDisease="IconsDisease",e.IconsEndlessDark="IconsEndlessDark",e.IconsEscalation="IconsEscalation",e.IconsExplorer="IconsExplorer",e.IconsFast="IconsFast",e.IconsFear="IconsFear",e.IconsImpending="IconsImpending",e.IconsIncarnaBehemoth="IconsIncarnaBehemoth",e.IconsIncarnaDarkness="IconsIncarnaDarkness",e.IconsIncarnaLair="IconsIncarnaLair",e.IconsIncarnaLocus="IconsIncarnaLocus",e.IconsIncarnaRoots="IconsIncarnaRoots",e.IconsIncarnaVoice="IconsIncarnaVoice",e.IconsIncarnaWarrior="IconsIncarnaWarrior",e.IconsMarkedBeast="IconsMarkedBeast",e.IconsOr="IconsOr",e.IconsPresence="IconsPresence",e.IconsRange0="IconsRange0",e.IconsRange1="IconsRange1",e.IconsRange2="IconsRange2",e.IconsRange3="IconsRange3",e.IconsRange4="IconsRange4",e.IconsRangeAir="IconsRangeAir",e.IconsRangePlus1="IconsRangePlus1",e.IconsRangePlus2="IconsRangePlus2",e.IconsRangePlus3="IconsRangePlus3",e.IconsRangePlus4="IconsRangePlus4",e.IconsQuake="IconsQuake",e.IconsSacred="IconsSacred",e.IconsSlow="IconsSlow",e.IconsStrife="IconsStrife",e.IconsTown="IconsTown",e.IconsVitality="IconsVitality",e.IconsWilds="IconsWilds",e.InvaderCardsCoastalLands="InvaderCardsCoastalLands",e.InvaderCardsJungles="InvaderCardsJungles",e.InvaderCardsJunglesAndSands="InvaderCardsJunglesAndSands",e.InvaderCardsJunglesAndWetlands="InvaderCardsJunglesAndWetlands",e.InvaderCardsJunglesEscalation="InvaderCardsJunglesEscalation",e.InvaderCardsMountains="InvaderCardsMountains",e.InvaderCardsMountainsAndJungles="InvaderCardsMountainsAndJungles",e.InvaderCardsMountainsAndWetlands="InvaderCardsMountainsAndWetlands",e.InvaderCardsMountainsEscalation="InvaderCardsMountainsEscalation",e.InvaderCardsSaltDeposits="InvaderCardsSaltDeposits",e.InvaderCardsSands="InvaderCardsSands",e.InvaderCardsSandsAndMountains="InvaderCardsSandsAndMountains",e.InvaderCardsSandsAndWetlands="InvaderCardsSandsAndWetlands",e.InvaderCardsSandsEscalation="InvaderCardsSandsEscalation",e.InvaderCardsWaveOfImmigration="InvaderCardsWaveOfImmigration",e.InvaderCardsWetlands="InvaderCardsWetlands",e.InvaderCardsWetlandsEscalation="InvaderCardsWetlandsEscalation",e.MajorPowersAcceleratedRot="MajorPowersAcceleratedRot",e.MajorPowersAngryBears="MajorPowersAngryBears",e.MajorPowersBargainOfCoursingPaths="MajorPowersBargainOfCoursingPaths",e.MajorPowersBargainsOfPowerAndProtection="MajorPowersBargainsOfPowerAndProtection",e.MajorPowersBlazingRenewal="MajorPowersBlazingRenewal",e.MajorPowersBloodwrackPlague="MajorPowersBloodwrackPlague",e.MajorPowersBombardWithBouldersAndStingingSeeds="MajorPowersBombardWithBouldersAndStingingSeeds",e.MajorPowersCastDownIntoTheBrinyDeep="MajorPowersCastDownIntoTheBrinyDeep",e.MajorPowersCleansingFloods="MajorPowersCleansingFloods",e.MajorPowersDeathFallsGentlyFromOpenBlossoms="MajorPowersDeathFallsGentlyFromOpenBlossoms",e.MajorPowersDissolveTheBondsOfKinship="MajorPowersDissolveTheBondsOfKinship",e.MajorPowersDrawTowardsAConsumingVoid="MajorPowersDrawTowardsAConsumingVoid",e.MajorPowersDreamOfTheUntouchedLand="MajorPowersDreamOfTheUntouchedLand",e.MajorPowersEntwinedPower="MajorPowersEntwinedPower",e.MajorPowersExaltationOfTheIncandescentSky="MajorPowersExaltationOfTheIncandescentSky",e.MajorPowersFireAndFlood="MajorPowersFireAndFlood",e.MajorPowersFlockingRedTalons="MajorPowersFlockingRedTalons",e.MajorPowersFlowLikeWaterReachLikeAir="MajorPowersFlowLikeWaterReachLikeAir",e.MajorPowersFocusTheLandsAnguish="MajorPowersFocusTheLandsAnguish",e.MajorPowersForestsOfLivingObsidian="MajorPowersForestsOfLivingObsidian",e.MajorPowersFragmentsOfYesteryear="MajorPowersFragmentsOfYesteryear",e.MajorPowersGrantHatredARavenousForm="MajorPowersGrantHatredARavenousForm",e.MajorPowersIndomitableClaim="MajorPowersIndomitableClaim",e.MajorPowersInfestationOfVenomousSpiders="MajorPowersInfestationOfVenomousSpiders",e.MajorPowersInfiniteVitality="MajorPowersInfiniteVitality",e.MajorPowersInsatiableHungerOfTheSwarm="MajorPowersInsatiableHungerOfTheSwarm",e.MajorPowersInspireTheReleaseOfStolenLands="MajorPowersInspireTheReleaseOfStolenLands",e.MajorPowersInstrumentsOfTheirOwnRuin="MajorPowersInstrumentsOfTheirOwnRuin",e.MajorPowersIrresistibleCall="MajorPowersIrresistibleCall",e.MajorPowersManifestIncarnation="MajorPowersManifestIncarnation",e.MajorPowersMeltEarthIntoQuicksand="MajorPowersMeltEarthIntoQuicksand",e.MajorPowersMistsOfOblivion="MajorPowersMistsOfOblivion",e.MajorPowersParalyzingFright="MajorPowersParalyzingFright",e.MajorPowersPentupCalamity="MajorPowersPentupCalamity",e.MajorPowersPillarOfLivingFlame="MajorPowersPillarOfLivingFlame",e.MajorPowersPlagueShipsSailToDistantPorts="MajorPowersPlagueShipsSailToDistantPorts",e.MajorPowersPoisonedLand="MajorPowersPoisonedLand",e.MajorPowersPowerstorm="MajorPowersPowerstorm",e.MajorPowersPyroclasticFlow="MajorPowersPyroclasticFlow",e.MajorPowersRavagedUndergrowthSlithersBackToLife="MajorPowersRavagedUndergrowthSlithersBackToLife",e.MajorPowersRumblingEarthquakes="MajorPowersRumblingEarthquakes",e.MajorPowersSavageTransformation="MajorPowersSavageTransformation",e.MajorPowersSeaMonsters="MajorPowersSeaMonsters",e.MajorPowersSettleIntoHuntinggrounds="MajorPowersSettleIntoHuntinggrounds",e.MajorPowersSleepAndNeverWaken="MajorPowersSleepAndNeverWaken",e.MajorPowersSmotheringInfestation="MajorPowersSmotheringInfestation",e.MajorPowersSolidifyEchoesOfMajestyPast="MajorPowersSolidifyEchoesOfMajestyPast",e.MajorPowersSpillBitternessIntoTheEarth="MajorPowersSpillBitternessIntoTheEarth",e.MajorPowersStormswath="MajorPowersStormswath",e.MajorPowersStranglingFirevine="MajorPowersStranglingFirevine",e.MajorPowersSweepIntoTheSea="MajorPowersSweepIntoTheSea",e.MajorPowersTalonsOfLightning="MajorPowersTalonsOfLightning",e.MajorPowersTerrifyingNightmares="MajorPowersTerrifyingNightmares",e.MajorPowersTheJungleHungers="MajorPowersTheJungleHungers",e.MajorPowersTheLandThrashesInFuriousPain="MajorPowersTheLandThrashesInFuriousPain",e.MajorPowersTheTreesAndStonesSpeakOfWar="MajorPowersTheTreesAndStonesSpeakOfWar",e.MajorPowersTheWoundedWildTurnsOnItsAssailants="MajorPowersTheWoundedWildTurnsOnItsAssailants",e.MajorPowersThicketsEruptWithEveryTouchOfBreeze="MajorPowersThicketsEruptWithEveryTouchOfBreeze",e.MajorPowersTigersHunting="MajorPowersTigersHunting",e.MajorPowersTransformToAMurderousDarkness="MajorPowersTransformToAMurderousDarkness",e.MajorPowersTransformativeSacrifice="MajorPowersTransformativeSacrifice",e.MajorPowersTreesRadiateCelestialBrilliance="MajorPowersTreesRadiateCelestialBrilliance",e.MajorPowersTsunami="MajorPowersTsunami",e.MajorPowersTwistedFlowersMurmurUltimatums="MajorPowersTwistedFlowersMurmurUltimatums",e.MajorPowersUnearthABeastOfWrathfulStone="MajorPowersUnearthABeastOfWrathfulStone",e.MajorPowersUnleashATorrentOfTheSelfsOwnEssence="MajorPowersUnleashATorrentOfTheSelfsOwnEssence",e.MajorPowersUnlockTheGatesOfDeepestPower="MajorPowersUnlockTheGatesOfDeepestPower",e.MajorPowersUnrelentingGrowth="MajorPowersUnrelentingGrowth",e.MajorPowersUtterACurseOfDreadAndBone="MajorPowersUtterACurseOfDreadAndBone",e.MajorPowersVanishSoftlyAwayForgottenByAll="MajorPowersVanishSoftlyAwayForgottenByAll",e.MajorPowersVengeanceOfTheDead="MajorPowersVengeanceOfTheDead",e.MajorPowersVigorOfTheBreakingDawn="MajorPowersVigorOfTheBreakingDawn",e.MajorPowersVoiceOfCommand="MajorPowersVoiceOfCommand",e.MajorPowersVolcanicEruption="MajorPowersVolcanicEruption",e.MajorPowersWallsOfRockAndThorn="MajorPowersWallsOfRockAndThorn",e.MajorPowersWeaveTogetherTheFabricOfPlace="MajorPowersWeaveTogetherTheFabricOfPlace",e.MajorPowersWindsOfRustAndAtrophy="MajorPowersWindsOfRustAndAtrophy",e.MajorPowersWrapInWingsOfSunlight="MajorPowersWrapInWingsOfSunlight",e.MinorPowersAbsorbCorruption="MinorPowersAbsorbCorruption",e.MinorPowersAnimatedWrackroot="MinorPowersAnimatedWrackroot",e.MinorPowersBatsScoutForRaidsByDarkness="MinorPowersBatsScoutForRaidsByDarkness",e.MinorPowersBirdsCryWarning="MinorPowersBirdsCryWarning",e.MinorPowersBloodDrawsPredators="MinorPowersBloodDrawsPredators",e.MinorPowersCallOfTheDahanWays="MinorPowersCallOfTheDahanWays",e.MinorPowersCallToBloodshed="MinorPowersCallToBloodshed",e.MinorPowersCallToFerocity="MinorPowersCallToFerocity",e.MinorPowersCallToGuard="MinorPowersCallToGuard",e.MinorPowersCallToIsolation="MinorPowersCallToIsolation",e.MinorPowersCallToMigrate="MinorPowersCallToMigrate",e.MinorPowersCallToTend="MinorPowersCallToTend",e.MinorPowersCallToTrade="MinorPowersCallToTrade",e.MinorPowersCarapacedLand="MinorPowersCarapacedLand",e.MinorPowersConfoundingMists="MinorPowersConfoundingMists",e.MinorPowersCyclesOfTimeAndTide="MinorPowersCyclesOfTimeAndTide",e.MinorPowersDarkAndTangledWoods="MinorPowersDarkAndTangledWoods",e.MinorPowersDelusionsOfDanger="MinorPowersDelusionsOfDanger",e.MinorPowersDesiccatingWinds="MinorPowersDesiccatingWinds",e.MinorPowersDevouringAnts="MinorPowersDevouringAnts",e.MinorPowersDireMetamorphosis="MinorPowersDireMetamorphosis",e.MinorPowersDisorientingLandscape="MinorPowersDisorientingLandscape",e.MinorPowersDomesticatedAnimalsGoBerserk="MinorPowersDomesticatedAnimalsGoBerserk",e.MinorPowersDriftDownIntoSlumber="MinorPowersDriftDownIntoSlumber",e.MinorPowersDrought="MinorPowersDrought",e.MinorPowersDryWoodExplodesInSmolderingSplinters="MinorPowersDryWoodExplodesInSmolderingSplinters",e.MinorPowersElementalBoon="MinorPowersElementalBoon",e.MinorPowersElusiveAmbushes="MinorPowersElusiveAmbushes",e.MinorPowersEncompassingWard="MinorPowersEncompassingWard",e.MinorPowersEnticingSplendor="MinorPowersEnticingSplendor",e.MinorPowersEntrancingApparitions="MinorPowersEntrancingApparitions",e.MinorPowersEntrapTheForcesOfCorruption="MinorPowersEntrapTheForcesOfCorruption",e.MinorPowersFavorOfTheSunAndStarlitDark="MinorPowersFavorOfTheSunAndStarlitDark",e.MinorPowersFireInTheSky="MinorPowersFireInTheSky",e.MinorPowersFleshrotFever="MinorPowersFleshrotFever",e.MinorPowersFlowDownriverBlowDownwind="MinorPowersFlowDownriverBlowDownwind",e.MinorPowersGiftOfConstancy="MinorPowersGiftOfConstancy",e.MinorPowersGiftOfLivingEnergy="MinorPowersGiftOfLivingEnergy",e.MinorPowersGiftOfNaturesConnection="MinorPowersGiftOfNaturesConnection",e.MinorPowersGiftOfPower="MinorPowersGiftOfPower",e.MinorPowersGiftOfTwinnedDays="MinorPowersGiftOfTwinnedDays",e.MinorPowersGnawingRootbiters="MinorPowersGnawingRootbiters",e.MinorPowersGoldsAllure="MinorPowersGoldsAllure",e.MinorPowersGrowthThroughSacrifice="MinorPowersGrowthThroughSacrifice",e.MinorPowersGuardianSerpents="MinorPowersGuardianSerpents",e.MinorPowersHauntedByPrimalMemories="MinorPowersHauntedByPrimalMemories",e.MinorPowersHazardsSpreadAcrossTheIsland="MinorPowersHazardsSpreadAcrossTheIsland",e.MinorPowersHereThereBeMonsters="MinorPowersHereThereBeMonsters",e.MinorPowersInfestedAquifers="MinorPowersInfestedAquifers",e.MinorPowersInflameTheFiresOfLife="MinorPowersInflameTheFiresOfLife",e.MinorPowersLandOfHauntsAndEmbers="MinorPowersLandOfHauntsAndEmbers",e.MinorPowersLikeCallsToLike="MinorPowersLikeCallsToLike",e.MinorPowersLureOfTheUnknown="MinorPowersLureOfTheUnknown",e.MinorPowersMesmerizedTranquility="MinorPowersMesmerizedTranquility",e.MinorPowersNaturesResilience="MinorPowersNaturesResilience",e.MinorPowersPactOfTheJoinedHunt="MinorPowersPactOfTheJoinedHunt",e.MinorPowersPoisonedDew="MinorPowersPoisonedDew",e.MinorPowersPortentsOfDisaster="MinorPowersPortentsOfDisaster",e.MinorPowersPromisesOfProtection="MinorPowersPromisesOfProtection",e.MinorPowersProwlingPanthers="MinorPowersProwlingPanthers",e.MinorPowersPullBeneathTheHungryEarth="MinorPowersPullBeneathTheHungryEarth",e.MinorPowersPurifyingFlame="MinorPowersPurifyingFlame",e.MinorPowersQuickenTheEarthsStruggles="MinorPowersQuickenTheEarthsStruggles",e.MinorPowersRainOfBlood="MinorPowersRainOfBlood",e.MinorPowersRazorsharpUndergrowth="MinorPowersRazorsharpUndergrowth",e.MinorPowersReachingGrasp="MinorPowersReachingGrasp",e.MinorPowersRenewingBoon="MinorPowersRenewingBoon",e.MinorPowersRenewingRain="MinorPowersRenewingRain",e.MinorPowersRitesOfTheLandsRejection="MinorPowersRitesOfTheLandsRejection",e.MinorPowersRoilingBogAndSnaggingThorn="MinorPowersRoilingBogAndSnaggingThorn",e.MinorPowersRouseTheTreesAndStones="MinorPowersRouseTheTreesAndStones",e.MinorPowersSapTheStrengthOfMultitudes="MinorPowersSapTheStrengthOfMultitudes",e.MinorPowersSavageMawbeasts="MinorPowersSavageMawbeasts",e.MinorPowersScourTheLand="MinorPowersScourTheLand",e.MinorPowersScreamDiseaseIntoTheWind="MinorPowersScreamDiseaseIntoTheWind",e.MinorPowersSearAngerIntoTheWildLands="MinorPowersSearAngerIntoTheWildLands",e.MinorPowersSetThemOnAnEvertwistingTrail="MinorPowersSetThemOnAnEvertwistingTrail",e.MinorPowersShadowsOfTheBurningForest="MinorPowersShadowsOfTheBurningForest",e.MinorPowersSkiesHeraldTheSeasonOfReturn="MinorPowersSkiesHeraldTheSeasonOfReturn",e.MinorPowersSkyStretchesToShore="MinorPowersSkyStretchesToShore",e.MinorPowersSongOfSanctity="MinorPowersSongOfSanctity",e.MinorPowersSpurOnWithWordsOfFire="MinorPowersSpurOnWithWordsOfFire",e.MinorPowersSteamVents="MinorPowersSteamVents",e.MinorPowersStrongAndConstantCurrents="MinorPowersStrongAndConstantCurrents",e.MinorPowersSuckingOoze="MinorPowersSuckingOoze",e.MinorPowersSunsetsFireFlowsAcrossTheLand="MinorPowersSunsetsFireFlowsAcrossTheLand",e.MinorPowersSwarmingWasps="MinorPowersSwarmingWasps",e.MinorPowersTeemingRivers="MinorPowersTeemingRivers",e.MinorPowersTerritorialStrife="MinorPowersTerritorialStrife",e.MinorPowersTerrorTurnsToMadness="MinorPowersTerrorTurnsToMadness",e.MinorPowersTheShoreSeethesWithHatred="MinorPowersTheShoreSeethesWithHatred",e.MinorPowersThrivingChokefungus="MinorPowersThrivingChokefungus",e.MinorPowersTormentingRotflies="MinorPowersTormentingRotflies",e.MinorPowersTreacherousWaterways="MinorPowersTreacherousWaterways",e.MinorPowersTwilightFogBringsMadness="MinorPowersTwilightFogBringsMadness",e.MinorPowersUncannyMelting="MinorPowersUncannyMelting",e.MinorPowersUnquenchableFlames="MinorPowersUnquenchableFlames",e.MinorPowersVeilTheNightsHunt="MinorPowersVeilTheNightsHunt",e.MinorPowersVisionsOfFieryDoom="MinorPowersVisionsOfFieryDoom",e.MinorPowersVoraciousGrowth="MinorPowersVoraciousGrowth",e.MinorPowersWeepForWhatIsLost="MinorPowersWeepForWhatIsLost",e.PortraitsBehemoth="PortraitsBehemoth",e.PortraitsBringer="PortraitsBringer",e.PortraitsDarkness="PortraitsDarkness",e.PortraitsDownpour="PortraitsDownpour",e.PortraitsEarth="PortraitsEarth",e.PortraitsEarthquakes="PortraitsEarthquakes",e.PortraitsEyes="PortraitsEyes",e.PortraitsFangs="PortraitsFangs",e.PortraitsFinder="PortraitsFinder",e.PortraitsFractured="PortraitsFractured",e.PortraitsGaze="PortraitsGaze",e.PortraitsGreen="PortraitsGreen",e.PortraitsHearthVigil="PortraitsHearthVigil",e.PortraitsHeat="PortraitsHeat",e.PortraitsKeeper="PortraitsKeeper",e.PortraitsLightning="PortraitsLightning",e.PortraitsLure="PortraitsLure",e.PortraitsManyMinds="PortraitsManyMinds",e.PortraitsMemory="PortraitsMemory",e.PortraitsMud="PortraitsMud",e.PortraitsOcean="PortraitsOcean",e.PortraitsRiver="PortraitsRiver",e.PortraitsRoots="PortraitsRoots",e.PortraitsSerpent="PortraitsSerpent",e.PortraitsShadows="PortraitsShadows",e.PortraitsShroud="PortraitsShroud",e.PortraitsStarlight="PortraitsStarlight",e.PortraitsStone="PortraitsStone",e.PortraitsTeeth="PortraitsTeeth",e.PortraitsThunderspeaker="PortraitsThunderspeaker",e.PortraitsTrickster="PortraitsTrickster",e.PortraitsVengeance="PortraitsVengeance",e.PortraitsVoice="PortraitsVoice",e.PortraitsVolcano="PortraitsVolcano",e.PortraitsWhirlwind="PortraitsWhirlwind",e.PortraitsWildfire="PortraitsWildfire",e.PortraitsWounded="PortraitsWounded",e.PresenceBehemoth="PresenceBehemoth",e.PresenceBringer="PresenceBringer",e.PresenceDarkness="PresenceDarkness",e.PresenceDownpour="PresenceDownpour",e.PresenceEarth="PresenceEarth",e.PresenceEarthquakes="PresenceEarthquakes",e.PresenceEyes="PresenceEyes",e.PresenceFangs="PresenceFangs",e.PresenceFinder="PresenceFinder",e.PresenceFractured="PresenceFractured",e.PresenceGaze="PresenceGaze",e.PresenceGreen="PresenceGreen",e.PresenceHearthVigil="PresenceHearthVigil",e.PresenceHeat="PresenceHeat",e.PresenceKeeper="PresenceKeeper",e.PresenceLightning="PresenceLightning",e.PresenceLure="PresenceLure",e.PresenceManyMinds="PresenceManyMinds",e.PresenceMemory="PresenceMemory",e.PresenceMud="PresenceMud",e.PresenceOcean="PresenceOcean",e.PresenceRiver="PresenceRiver",e.PresenceRoots="PresenceRoots",e.PresenceSerpent="PresenceSerpent",e.PresenceShadows="PresenceShadows",e.PresenceShroud="PresenceShroud",e.PresenceStarlight="PresenceStarlight",e.PresenceStone="PresenceStone",e.PresenceTeeth="PresenceTeeth",e.PresenceThunderspeaker="PresenceThunderspeaker",e.PresenceTrickster="PresenceTrickster",e.PresenceVengeance="PresenceVengeance",e.PresenceVoice="PresenceVoice",e.PresenceVolcano="PresenceVolcano",e.PresenceWhirlwind="PresenceWhirlwind",e.PresenceWildfire="PresenceWildfire",e.PresenceWounded="PresenceWounded",e.RulesBase1="RulesBase1",e.RulesBase10="RulesBase10",e.RulesBase11="RulesBase11",e.RulesBase12="RulesBase12",e.RulesBase13="RulesBase13",e.RulesBase14="RulesBase14",e.RulesBase15="RulesBase15",e.RulesBase16="RulesBase16",e.RulesBase17="RulesBase17",e.RulesBase18="RulesBase18",e.RulesBase19="RulesBase19",e.RulesBase2="RulesBase2",e.RulesBase20="RulesBase20",e.RulesBase21="RulesBase21",e.RulesBase22="RulesBase22",e.RulesBase23="RulesBase23",e.RulesBase24="RulesBase24",e.RulesBase25="RulesBase25",e.RulesBase26="RulesBase26",e.RulesBase27="RulesBase27",e.RulesBase28="RulesBase28",e.RulesBase29="RulesBase29",e.RulesBase3="RulesBase3",e.RulesBase30="RulesBase30",e.RulesBase31="RulesBase31",e.RulesBase32="RulesBase32",e.RulesBase4="RulesBase4",e.RulesBase5="RulesBase5",e.RulesBase6="RulesBase6",e.RulesBase7="RulesBase7",e.RulesBase8="RulesBase8",e.RulesBase9="RulesBase9",e.RulesBranch1="RulesBranch1",e.RulesBranch10="RulesBranch10",e.RulesBranch11="RulesBranch11",e.RulesBranch12="RulesBranch12",e.RulesBranch13="RulesBranch13",e.RulesBranch14="RulesBranch14",e.RulesBranch15="RulesBranch15",e.RulesBranch16="RulesBranch16",e.RulesBranch17="RulesBranch17",e.RulesBranch18="RulesBranch18",e.RulesBranch19="RulesBranch19",e.RulesBranch2="RulesBranch2",e.RulesBranch20="RulesBranch20",e.RulesBranch21="RulesBranch21",e.RulesBranch22="RulesBranch22",e.RulesBranch23="RulesBranch23",e.RulesBranch24="RulesBranch24",e.RulesBranch3="RulesBranch3",e.RulesBranch4="RulesBranch4",e.RulesBranch5="RulesBranch5",e.RulesBranch6="RulesBranch6",e.RulesBranch7="RulesBranch7",e.RulesBranch8="RulesBranch8",e.RulesBranch9="RulesBranch9",e.RulesJagged1="RulesJagged1",e.RulesJagged10="RulesJagged10",e.RulesJagged11="RulesJagged11",e.RulesJagged12="RulesJagged12",e.RulesJagged13="RulesJagged13",e.RulesJagged14="RulesJagged14",e.RulesJagged15="RulesJagged15",e.RulesJagged16="RulesJagged16",e.RulesJagged17="RulesJagged17",e.RulesJagged18="RulesJagged18",e.RulesJagged19="RulesJagged19",e.RulesJagged2="RulesJagged2",e.RulesJagged20="RulesJagged20",e.RulesJagged21="RulesJagged21",e.RulesJagged22="RulesJagged22",e.RulesJagged23="RulesJagged23",e.RulesJagged24="RulesJagged24",e.RulesJagged25="RulesJagged25",e.RulesJagged26="RulesJagged26",e.RulesJagged27="RulesJagged27",e.RulesJagged28="RulesJagged28",e.RulesJagged29="RulesJagged29",e.RulesJagged3="RulesJagged3",e.RulesJagged30="RulesJagged30",e.RulesJagged31="RulesJagged31",e.RulesJagged32="RulesJagged32",e.RulesJagged33="RulesJagged33",e.RulesJagged34="RulesJagged34",e.RulesJagged35="RulesJagged35",e.RulesJagged36="RulesJagged36",e.RulesJagged4="RulesJagged4",e.RulesJagged5="RulesJagged5",e.RulesJagged6="RulesJagged6",e.RulesJagged7="RulesJagged7",e.RulesJagged8="RulesJagged8",e.RulesJagged9="RulesJagged9",e.RulesNature1="RulesNature1",e.RulesNature10="RulesNature10",e.RulesNature11="RulesNature11",e.RulesNature12="RulesNature12",e.RulesNature13="RulesNature13",e.RulesNature14="RulesNature14",e.RulesNature15="RulesNature15",e.RulesNature16="RulesNature16",e.RulesNature17="RulesNature17",e.RulesNature18="RulesNature18",e.RulesNature19="RulesNature19",e.RulesNature2="RulesNature2",e.RulesNature20="RulesNature20",e.RulesNature21="RulesNature21",e.RulesNature22="RulesNature22",e.RulesNature23="RulesNature23",e.RulesNature24="RulesNature24",e.RulesNature3="RulesNature3",e.RulesNature4="RulesNature4",e.RulesNature5="RulesNature5",e.RulesNature6="RulesNature6",e.RulesNature7="RulesNature7",e.RulesNature8="RulesNature8",e.RulesNature9="RulesNature9",e.ScenariosADiversityOfSpirits="ScenariosADiversityOfSpirits",e.ScenariosADiversityOfSpiritsBack="ScenariosADiversityOfSpiritsBack",e.ScenariosADiversityOfSpiritsThumb="ScenariosADiversityOfSpiritsThumb",e.ScenariosBlitz="ScenariosBlitz",e.ScenariosBlitzBack="ScenariosBlitzBack",e.ScenariosBlitzThumb="ScenariosBlitzThumb",e.ScenariosDahanInsurrection="ScenariosDahanInsurrection",e.ScenariosDahanInsurrectionBack="ScenariosDahanInsurrectionBack",e.ScenariosDahanInsurrectionThumb="ScenariosDahanInsurrectionThumb",e.ScenariosDespicableTheft="ScenariosDespicableTheft",e.ScenariosDespicableTheftBack="ScenariosDespicableTheftBack",e.ScenariosDespicableTheftThumb="ScenariosDespicableTheftThumb",e.ScenariosDestinyUnfoldsBack="ScenariosDestinyUnfoldsBack",e.ScenariosDestinyUnfoldsThumb="ScenariosDestinyUnfoldsThumb",e.ScenariosDestinyUnfolds="ScenariosDestinyUnfolds",e.ScenariosElementalInvocation="ScenariosElementalInvocation",e.ScenariosElementalInvocationBack="ScenariosElementalInvocationBack",e.ScenariosElementalInvocationThumb="ScenariosElementalInvocationThumb",e.ScenariosGuardTheIslesHeart="ScenariosGuardTheIslesHeart",e.ScenariosGuardTheIslesHeartBack="ScenariosGuardTheIslesHeartBack",e.ScenariosGuardTheIslesHeartThumb="ScenariosGuardTheIslesHeartThumb",e.ScenariosLargerSurgesBack="ScenariosLargerSurgesBack",e.ScenariosLargerSurgesThumb="ScenariosLargerSurgesThumb",e.ScenariosLargerSurges="ScenariosLargerSurges",e.ScenarioPowersWardTheShores="ScenarioPowersWardTheShores",e.ScenariosPowersLongForgotten="ScenariosPowersLongForgotten",e.ScenariosPowersLongForgottenBack="ScenariosPowersLongForgottenBack",e.ScenariosPowersLongForgottenThumb="ScenariosPowersLongForgottenThumb",e.ScenariosRitualsOfTerror="ScenariosRitualsOfTerror",e.ScenariosRitualsOfTerrorBack="ScenariosRitualsOfTerrorBack",e.ScenariosRitualsOfTerrorThumb="ScenariosRitualsOfTerrorThumb",e.ScenariosRitualsOfTheDestroyingFlame="ScenariosRitualsOfTheDestroyingFlame",e.ScenariosRitualsOfTheDestroyingFlameBack="ScenariosRitualsOfTheDestroyingFlameBack",e.ScenariosRitualsOfTheDestroyingFlameThumb="ScenariosRitualsOfTheDestroyingFlameThumb",e.ScenariosSecondWave="ScenariosSecondWave",e.ScenariosSecondWaveBack="ScenariosSecondWaveBack",e.ScenariosSecondWaveThumb="ScenariosSecondWaveThumb",e.ScenariosSurgesOfColonizationBack="ScenariosSurgesOfColonizationBack",e.ScenariosSurgesOfColonizationThumb="ScenariosSurgesOfColonizationThumb",e.ScenariosSurgesOfColonization="ScenariosSurgesOfColonization",e.ScenariosTheGreatRiver="ScenariosTheGreatRiver",e.ScenariosTheGreatRiverBack="ScenariosTheGreatRiverBack",e.ScenariosTheGreatRiverThumb="ScenariosTheGreatRiverThumb",e.ScenariosVariedTerrain="ScenariosVariedTerrain",e.ScenariosVariedTerrainBack="ScenariosVariedTerrainBack",e.ScenariosVariedTerrainThumb="ScenariosVariedTerrainThumb",e.ScenariosWardTheShores="ScenariosWardTheShores",e.ScenariosWardTheShoresBack="ScenariosWardTheShoresBack",e.ScenariosWardTheShoresThumb="ScenariosWardTheShoresThumb",e.SetBranchAndClaw="SetBranchAndClaw",e.SetFeatherAndFlame="SetFeatherAndFlame",e.SetHorizonsOfSpiritIsland="SetHorizonsOfSpiritIsland",e.SetJaggedEarth="SetJaggedEarth",e.SetNatureIncarnate="SetNatureIncarnate",e.SpiritbacksBehemoth="SpiritbacksBehemoth",e.SpiritbacksBringer="SpiritbacksBringer",e.SpiritbacksDarkness="SpiritbacksDarkness",e.SpiritbacksDownpour="SpiritbacksDownpour",e.SpiritbacksEarth="SpiritbacksEarth",e.SpiritbacksEarthquakes="SpiritbacksEarthquakes",e.SpiritbacksEyes="SpiritbacksEyes",e.SpiritbacksFangs="SpiritbacksFangs",e.SpiritbacksFinder="SpiritbacksFinder",e.SpiritbacksFractured="SpiritbacksFractured",e.SpiritbacksGaze="SpiritbacksGaze",e.SpiritbacksGreen="SpiritbacksGreen",e.SpiritbacksHearthVigil="SpiritbacksHearthVigil",e.SpiritbacksHeat="SpiritbacksHeat",e.SpiritbacksKeeper="SpiritbacksKeeper",e.SpiritbacksLightning="SpiritbacksLightning",e.SpiritbacksLure="SpiritbacksLure",e.SpiritbacksManyMinds="SpiritbacksManyMinds",e.SpiritbacksMemory="SpiritbacksMemory",e.SpiritbacksMud="SpiritbacksMud",e.SpiritbacksOcean="SpiritbacksOcean",e.SpiritbacksRiver="SpiritbacksRiver",e.SpiritbacksRoots="SpiritbacksRoots",e.SpiritbacksSerpent="SpiritbacksSerpent",e.SpiritbacksShadows="SpiritbacksShadows",e.SpiritbacksShroud="SpiritbacksShroud",e.SpiritbacksStarlight="SpiritbacksStarlight",e.SpiritbacksStone="SpiritbacksStone",e.SpiritbacksTeeth="SpiritbacksTeeth",e.SpiritbacksThunderspeaker="SpiritbacksThunderspeaker",e.SpiritbacksTrickster="SpiritbacksTrickster",e.SpiritbacksVengeance="SpiritbacksVengeance",e.SpiritbacksVoice="SpiritbacksVoice",e.SpiritbacksVolcano="SpiritbacksVolcano",e.SpiritbacksWhirlwind="SpiritbacksWhirlwind",e.SpiritbacksWildfire="SpiritbacksWildfire",e.SpiritbacksWounded="SpiritbacksWounded",e.SpiritsBehemoth="SpiritsBehemoth",e.SpiritsBringer="SpiritsBringer",e.SpiritsDarkness="SpiritsDarkness",e.SpiritsDownpour="SpiritsDownpour",e.SpiritsEarth="SpiritsEarth",e.SpiritsEarthquakes="SpiritsEarthquakes",e.SpiritsEyes="SpiritsEyes",e.SpiritsFangs="SpiritsFangs",e.SpiritsFinder="SpiritsFinder",e.SpiritsFractured="SpiritsFractured",e.SpiritsGaze="SpiritsGaze",e.SpiritsGreen="SpiritsGreen",e.SpiritsHearthVigil="SpiritsHearthVigil",e.SpiritsHeat="SpiritsHeat",e.SpiritsKeeper="SpiritsKeeper",e.SpiritsLightning="SpiritsLightning",e.SpiritsLure="SpiritsLure",e.SpiritsManyMinds="SpiritsManyMinds",e.SpiritsMemory="SpiritsMemory",e.SpiritsMud="SpiritsMud",e.SpiritsOcean="SpiritsOcean",e.SpiritsRiver="SpiritsRiver",e.SpiritsRoots="SpiritsRoots",e.SpiritsSerpent="SpiritsSerpent";e.SpiritsShadows="SpiritsShadows",e.SpiritsShroud="SpiritsShroud",e.SpiritsStarlight="SpiritsStarlight",e.SpiritsStone="SpiritsStone",e.SpiritsTeeth="SpiritsTeeth",e.SpiritsThunderspeaker="SpiritsThunderspeaker",e.SpiritsTrickster="SpiritsTrickster",e.SpiritsVengeance="SpiritsVengeance",e.SpiritsVoice="SpiritsVoice",e.SpiritsVolcano="SpiritsVolcano",e.SpiritsWhirlwind="SpiritsWhirlwind",e.SpiritsWildfire="SpiritsWildfire",e.SpiritsWounded="SpiritsWounded",e.SymbolsDiscard="SymbolsDiscard",e.SymbolsFast="SymbolsFast",e.SymbolsFastCheck="SymbolsFastCheck",e.SymbolsHand="SymbolsHand",e.SymbolsImpending="SymbolsImpending",e.SymbolsSlow="SymbolsSlow",e.SymbolsSlowCheck="SymbolsSlowCheck",e.TerrainJunglesAndSands="TerrainJunglesAndSands",e.TerrainJunglesAndWetlands="TerrainJunglesAndWetlands",e.TerrainJungles="TerrainJungles",e.TerrainMountainsAndJungles="TerrainMountainsAndJungles",e.TerrainMountainsAndSands="TerrainMountainsAndSands",e.TerrainMountainsAndWetlands="TerrainMountainsAndWetlands",e.TerrainMountains="TerrainMountains",e.TerrainSandsAndWetlands="TerrainSandsAndWetlands",e.TerrainSands="TerrainSands",e.TerrainWetlands="TerrainWetlands",e.TerrorLevel1="TerrorLevel1",e.TerrorLevel2="TerrorLevel2",e.TerrorLevel3="TerrorLevel3",e.TokensAir="TokensAir",e.TokensAnimal="TokensAnimal",e.TokensAny="TokensAny",e.TokensBadlands="TokensBadlands",e.TokensBeasts="TokensBeasts",e.TokensBlackPresence="TokensBlackPresence",e.TokensBlackReminder1="TokensBlackReminder1",e.TokensBlackReminder2="TokensBlackReminder2",e.TokensBlight="TokensBlight",e.TokensBluePresence="TokensBluePresence",e.TokensBlueReminder1="TokensBlueReminder1",e.TokensBlueReminder2="TokensBlueReminder2",e.TokensCity="TokensCity",e.TokensDahan="TokensDahan",e.TokensDahanBlessed="TokensDahanBlessed",e.TokensDarkFire="TokensDarkFire",e.TokensDeeps="TokensDeeps",e.TokensDisease="TokensDisease",e.TokensEarth="TokensEarth",e.TokensExplorer="TokensExplorer",e.TokensFire="TokensFire",e.TokensFireOrPlant="FireOrPlant",e.TokensGreenPresence="TokensGreenPresence",e.TokensGreenReminder1="TokensGreenReminder1",e.TokensGreenReminder2="TokensGreenReminder2",e.TokensIncarnaBehemothEmpowered="TokensIncarnaBehemothEmpowered",e.TokensIncarnaBehemoth="TokensIncarnaBehemoth",e.TokensIncarnaDarknessEmpowered="TokensIncarnaDarknessEmpowered",e.TokensIncarnaDarkness="TokensIncarnaDarkness",e.TokensIncarnaLair="TokensIncarnaLair",e.TokensIncarnaLocusEmpowered="TokensIncarnaLocusEmpowered",e.TokensIncarnaLocus="TokensIncarnaLocus",e.TokensIncarnaRootsEmpowered="TokensIncarnaRootsEmpowered",e.TokensIncarnaRoots="TokensIncarnaRoots",e.TokensIncarnaVoiceEmpowered="TokensIncarnaVoiceEmpowered",e.TokensIncarnaVoice="TokensIncarnaVoice",e.TokensIncarnaWarrior="TokensIncarnaWarrior",e.TokensMarkedBeast="TokensMarkedBeast",e.TokensMoon="TokensMoon",e.TokensOrangePresence="TokensOrangePresence",e.TokensOrangeReminder1="TokensOrangeReminder1",e.TokensOrangeReminder2="TokensOrangeReminder2",e.TokensPlant="TokensPlant",e.TokensPurplePresence="TokensPurplePresence",e.TokensPurpleReminder1="TokensPurpleReminder1",e.TokensPurpleReminder2="TokensPurpleReminder2",e.TokensQuake="TokensQuake",e.TokensRedPresence="TokensRedPresence",e.TokensRedReminder1="TokensRedReminder1",e.TokensRedReminder2="TokensRedReminder2",e.TokensScenario="TokensScenario",e.TokensScenario2="TokensScenario2",e.TokensScenario2Flipped="TokensScenario2Flipped",e.TokensScenarioFlipped="TokensScenarioFlipped",e.TokensStrife="TokensStrife",e.TokensSun="TokensSun",e.TokensSunOrMoon="TokensSunOrMoon",e.TokensTown="TokensTown",e.TokensTown2="TokensTown2",e.TokensVitality="TokensVitality",e.TokensWater="TokensWater",e.TokensWaterOrAnimal="TokensWaterOrAnimal",e.TokensWilds="TokensWilds",e.TokensYellowPresence="TokensYellowPresence",e.TokensYellowReminder1="TokensYellowReminder1",e.TokensYellowReminder2="TokensYellowReminder2",e.TokensWhitePresence="TokensWhitePresence",e.TokensWhiteReminder1="TokensWhiteReminder1",e.TokensWhiteReminder2="TokensWhiteReminder2",e.UniquePowersBehemothBlazingIntimidation="UniquePowersBehemothBlazingIntimidation",e.UniquePowersBehemothExaltationOfGraspingRoots="UniquePowersBehemothExaltationOfGraspingRoots",e.UniquePowersBehemothSurgingLahar="UniquePowersBehemothSurgingLahar",e.UniquePowersBehemothTerrifyingRampage="UniquePowersBehemothTerrifyingRampage",e.UniquePowersBringerCallOnMidnightsDream="UniquePowersBringerCallOnMidnightsDream",e.UniquePowersBringerDreadApparitions="UniquePowersBringerDreadApparitions",e.UniquePowersBringerDreamsOfTheDahan="UniquePowersBringerDreamsOfTheDahan",e.UniquePowersBringerPredatoryNightmares="UniquePowersBringerPredatoryNightmares",e.UniquePowersDarknessEmergeFromTheDreadNightWind="UniquePowersDarknessEmergeFromTheDreadNightWind",e.UniquePowersDarknessReachFromTheInfiniteDarkness="UniquePowersDarknessReachFromTheInfiniteDarkness",e.UniquePowersDarknessSwallowedByTheEndlessDark="UniquePowersDarknessSwallowedByTheEndlessDark",e.UniquePowersDarknessTerrorOfTheHunted="UniquePowersDarknessTerrorOfTheHunted",e.UniquePowersDownpourDarkSkiesLooseAStingingRain="UniquePowersDownpourDarkSkiesLooseAStingingRain",e.UniquePowersDownpourFoundationsSinkIntoMud="UniquePowersDownpourFoundationsSinkIntoMud",e.UniquePowersDownpourGiftOfAbundance="UniquePowersDownpourGiftOfAbundance",e.UniquePowersDownpourUnbearableDeluge="UniquePowersDownpourUnbearableDeluge",e.UniquePowersEarthAYearOfPerfectStillness="UniquePowersEarthAYearOfPerfectStillness",e.UniquePowersEarthDrawOfTheFruitfulEarth="UniquePowersEarthDrawOfTheFruitfulEarth",e.UniquePowersEarthGuardTheHealingLand="UniquePowersEarthGuardTheHealingLand",e.UniquePowersEarthRitualsOfDestruction="UniquePowersEarthRitualsOfDestruction",e.UniquePowersEarthquakesExaltationOfEchoedSteps="UniquePowersEarthquakesExaltationOfEchoedSteps",e.UniquePowersEarthquakesGiftOfSeismicEnergy="UniquePowersEarthquakesGiftOfSeismicEnergy",e.UniquePowersEarthquakesInspireAWindingDance="UniquePowersEarthquakesInspireAWindingDance",e.UniquePowersEarthquakesRadiatingTremors="UniquePowersEarthquakesRadiatingTremors",e.UniquePowersEarthquakesResoundingFootfallsSowDismay="UniquePowersEarthquakesResoundingFootfallsSowDismay",e.UniquePowersEarthquakesRumblingsPortendAGreaterQuake="UniquePowersEarthquakesRumblingsPortendAGreaterQuake",e.UniquePowersEyesBoonOfWatchfulGuarding="UniquePowersEyesBoonOfWatchfulGuarding",e.UniquePowersEyesEerieNoisesAndMovingTrees="UniquePowersEyesEerieNoisesAndMovingTrees",e.UniquePowersEyesMysteriousAbductions="UniquePowersEyesMysteriousAbductions",e.UniquePowersEyesWhisperedGuidanceThroughTheNight="UniquePowersEyesWhisperedGuidanceThroughTheNight",e.UniquePowersFangsPreyOnTheBuilders="UniquePowersFangsPreyOnTheBuilders",e.UniquePowersFangsTeethGleamFromDarkness="UniquePowersFangsTeethGleamFromDarkness",e.UniquePowersFangsTerrifyingChase="UniquePowersFangsTerrifyingChase",e.UniquePowersFangsTooNearTheJungle="UniquePowersFangsTooNearTheJungle",e.UniquePowersFinderACircuitousAndWendingJourney="UniquePowersFinderACircuitousAndWendingJourney",e.UniquePowersFinderAidFromTheSpiritspeakers="UniquePowersFinderAidFromTheSpiritspeakers",e.UniquePowersFinderOfferPassageBetweenWorlds="UniquePowersFinderOfferPassageBetweenWorlds",e.UniquePowersFinderPathsTiedByNature="UniquePowersFinderPathsTiedByNature",e.UniquePowersFinderTravelersBoon="UniquePowersFinderTravelersBoon",e.UniquePowersFinderWaysOfShoreAndHeartland="UniquePowersFinderWaysOfShoreAndHeartland",e.UniquePowersFracturedAbsoluteStasis="UniquePowersFracturedAbsoluteStasis",e.UniquePowersFracturedBlurTheArcOfYears="UniquePowersFracturedBlurTheArcOfYears",e.UniquePowersFracturedPourTimeSideways="UniquePowersFracturedPourTimeSideways",e.UniquePowersFracturedThePastReturnsAgain="UniquePowersFracturedThePastReturnsAgain",e.UniquePowersGazeBlindingGlare="UniquePowersGazeBlindingGlare",e.UniquePowersGazeFocusTheSunsRays="UniquePowersGazeFocusTheSunsRays",e.UniquePowersGazeUnbearableGaze="UniquePowersGazeUnbearableGaze",e.UniquePowersGazeWitherBodiesScarStones="UniquePowersGazeWitherBodiesScarStones",e.UniquePowersGreenBelligerentAndAggressiveCrops="UniquePowersGreenBelligerentAndAggressiveCrops",e.UniquePowersGreenFieldsChokedWithGrowth="UniquePowersGreenFieldsChokedWithGrowth",e.UniquePowersGreenGiftOfProliferation="UniquePowersGreenGiftOfProliferation",e.UniquePowersGreenOvergrowInANight="UniquePowersGreenOvergrowInANight",e.UniquePowersGreenStemTheFlowOfFreshWater="UniquePowersGreenStemTheFlowOfFreshWater",e.UniquePowersHearthVigilCallToVigilance="UniquePowersHearthVigilCallToVigilance",e.UniquePowersHearthVigilCoordinatedRaid="UniquePowersHearthVigilCoordinatedRaid",e.UniquePowersHearthVigilFavorsOfStoryAndSeason="UniquePowersHearthVigilFavorsOfStoryAndSeason",e.UniquePowersHearthVigilSurroundedByTheDahan="UniquePowersHearthVigilSurroundedByTheDahan",e.UniquePowersHeatCallOnHerdersForAid="UniquePowersHeatCallOnHerdersForAid",e.UniquePowersHeatGiftOfSearingHeat="UniquePowersHeatGiftOfSearingHeat",e.UniquePowersHeatStingingSandstorm="UniquePowersHeatStingingSandstorm",e.UniquePowersHeatSwelteringExhaustion="UniquePowersHeatSwelteringExhaustion",e.UniquePowersKeeperBoonOfGrowingPower="UniquePowersKeeperBoonOfGrowingPower",e.UniquePowersKeeperRegrowFromRoots="UniquePowersKeeperRegrowFromRoots",e.UniquePowersKeeperSacrosanctWilderness="UniquePowersKeeperSacrosanctWilderness",e.UniquePowersKeeperToweringWrath="UniquePowersKeeperToweringWrath",e.UniquePowersLightningHarbingersOfTheLightning="UniquePowersLightningHarbingersOfTheLightning",e.UniquePowersLightningLightningsBoon="UniquePowersLightningLightningsBoon",e.UniquePowersLightningRagingStorm="UniquePowersLightningRagingStorm",e.UniquePowersLightningShatterHomesteads="UniquePowersLightningShatterHomesteads",e.UniquePowersLightningSmiteTheLandWithFulmination="UniquePowersLightningSmiteTheLandWithFulmination",e.UniquePowersLureGiftOfTheUntamedWild="UniquePowersLureGiftOfTheUntamedWild",e.UniquePowersLurePerilsOfTheDeepestIsland="UniquePowersLurePerilsOfTheDeepestIsland",e.UniquePowersLureSoftlyBeckonEverInward="UniquePowersLureSoftlyBeckonEverInward",e.UniquePowersLureSwallowedByTheWilderness="UniquePowersLureSwallowedByTheWilderness",e.UniquePowersManyMindsADreadfulTideOfScurryingFlesh="UniquePowersManyMindsADreadfulTideOfScurryingFlesh",e.UniquePowersManyMindsBoonOfSwarmingBedevilment="UniquePowersManyMindsBoonOfSwarmingBedevilment",e.UniquePowersManyMindsEvermultiplyingSwarm="UniquePowersManyMindsEvermultiplyingSwarm",e.UniquePowersManyMindsGuideTheWayOnFeatheredWings="UniquePowersManyMindsGuideTheWayOnFeatheredWings",e.UniquePowersManyMindsPursueWithScratchesPecksAndStings="UniquePowersManyMindsPursueWithScratchesPecksAndStings",e.UniquePowersMemoryBoonOfAncientMemories="UniquePowersMemoryBoonOfAncientMemories",e.UniquePowersMemoryElementalTeachings="UniquePowersMemoryElementalTeachings",e.UniquePowersMemoryShareSecretsOfSurvival="UniquePowersMemoryShareSecretsOfSurvival",e.UniquePowersMemoryStudyTheInvadersFears="UniquePowersMemoryStudyTheInvadersFears",e.UniquePowersMudExaltationOfTangledGrowth="UniquePowersMudExaltationOfTangledGrowth",e.UniquePowersMudFoulVaporsAndFetidMuck="UniquePowersMudFoulVaporsAndFetidMuck",e.UniquePowersMudIntractableThicketsAndThorns="UniquePowersMudIntractableThicketsAndThorns",e.UniquePowersMudOpenShiftingWaterways="UniquePowersMudOpenShiftingWaterways",e.UniquePowersOceanCallOfTheDeeps="UniquePowersOceanCallOfTheDeeps",e.UniquePowersOceanGraspingTide="UniquePowersOceanGraspingTide",e.UniquePowersOceanSwallowTheLanddwellers="UniquePowersOceanSwallowTheLanddwellers",e.UniquePowersOceanTidalBoon="UniquePowersOceanTidalBoon",e.UniquePowersRiverBoonOfVigor="UniquePowersRiverBoonOfVigor",e.UniquePowersRiverFlashFloods="UniquePowersRiverFlashFloods",e.UniquePowersRiverRiversBounty="UniquePowersRiverRiversBounty",e.UniquePowersRiverWashAway="UniquePowersRiverWashAway",e.UniquePowersRootsBloomingOfTheRocksAndTrees="UniquePowersRootsBloomingOfTheRocksAndTrees",e.UniquePowersRootsBoonOfResilientPower="UniquePowersRootsBoonOfResilientPower",e.UniquePowersRootsEntwineTheFatesOfAll="UniquePowersRootsEntwineTheFatesOfAll",e.UniquePowersRootsRadiantAndHallowedGrove="UniquePowersRootsRadiantAndHallowedGrove",e.UniquePowersSerpentAbsorbEssence="UniquePowersSerpentAbsorbEssence",e.UniquePowersSerpentElementalAegis="UniquePowersSerpentElementalAegis",e.UniquePowersSerpentGiftOfFlowingPower="UniquePowersSerpentGiftOfFlowingPower",e.UniquePowersSerpentGiftOfThePrimordialDeeps="UniquePowersSerpentGiftOfThePrimordialDeeps",e.UniquePowersShadowsConcealingShadows="UniquePowersShadowsConcealingShadows",e.UniquePowersShadowsCropsWitherAndFade="UniquePowersShadowsCropsWitherAndFade",e.UniquePowersShadowsFavorsCalledDue="UniquePowersShadowsFavorsCalledDue",e.UniquePowersShadowsMantleOfDread="UniquePowersShadowsMantleOfDread",e.UniquePowersShroudDissolvingVapors="UniquePowersShroudDissolvingVapors",e.UniquePowersShroudFlowingAndSilentFormsDartBy="UniquePowersShroudFlowingAndSilentFormsDartBy",e.UniquePowersShroudTheFogClosesIn="UniquePowersShroudTheFogClosesIn",e.UniquePowersShroudUnnervingPall="UniquePowersShroudUnnervingPall",e.UniquePowersStarlightBoonOfReimagining="UniquePowersStarlightBoonOfReimagining",e.UniquePowersStarlightGatherTheScatteredLightOfStars="UniquePowersStarlightGatherTheScatteredLightOfStars",e.UniquePowersStarlightPeaceOfTheNighttimeSky="UniquePowersStarlightPeaceOfTheNighttimeSky",e.UniquePowersStarlightShapeTheSelfAnew="UniquePowersStarlightShapeTheSelfAnew",e.UniquePowersStoneJaggedShardsPushFromTheEarth="UniquePowersStoneJaggedShardsPushFromTheEarth",e.UniquePowersStonePlowsShatterOnRockyGround="UniquePowersStonePlowsShatterOnRockyGround",e.UniquePowersStoneScarredAndStonyLand="UniquePowersStoneScarredAndStonyLand",e.UniquePowersStoneStubbornSolidity="UniquePowersStoneStubbornSolidity",e.UniquePowersTeethFerociousRampage="UniquePowersTeethFerociousRampage",e.UniquePowersTeethGiftOfFuriousMight="UniquePowersTeethGiftOfFuriousMight",e.UniquePowersTeethHerdTowardsTheLurkingMaw="UniquePowersTeethHerdTowardsTheLurkingMaw",e.UniquePowersTeethMarkTerritoryWithScarsAndTeeth="UniquePowersTeethMarkTerritoryWithScarsAndTeeth",e.UniquePowersThunderspeakerManifestationOfPowerAndGlory="UniquePowersThunderspeakerManifestationOfPowerAndGlory",e.UniquePowersThunderspeakerSuddenAmbush="UniquePowersThunderspeakerSuddenAmbush",e.UniquePowersThunderspeakerVoiceOfThunder="UniquePowersThunderspeakerVoiceOfThunder",e.UniquePowersThunderspeakerWordsOfWarning="UniquePowersThunderspeakerWordsOfWarning",e.UniquePowersTricksterImpersonateAuthority="UniquePowersTricksterImpersonateAuthority",e.UniquePowersTricksterInciteTheMob="UniquePowersTricksterInciteTheMob",e.UniquePowersTricksterOverenthusiasticArson="UniquePowersTricksterOverenthusiasticArson",e.UniquePowersTricksterUnexpectedTigers="UniquePowersTricksterUnexpectedTigers",e.UniquePowersVengeanceFetidBreathSpreadsInfection="UniquePowersVengeanceFetidBreathSpreadsInfection",e.UniquePowersVengeanceFieryVengeance="UniquePowersVengeanceFieryVengeance",e.UniquePowersVengeancePlaguebearers="UniquePowersVengeancePlaguebearers",e.UniquePowersVengeanceStrikeLowWithSuddenFevers="UniquePowersVengeanceStrikeLowWithSuddenFevers",e.UniquePowersVoiceExhaleConfusionAndDelirium="UniquePowersVoiceExhaleConfusionAndDelirium",e.UniquePowersVoiceFrightfulKeening="UniquePowersVoiceFrightfulKeening",e.UniquePowersVoiceTurmoilsTouch="UniquePowersVoiceTurmoilsTouch",e.UniquePowersVoiceTwistPerceptions="UniquePowersVoiceTwistPerceptions",e.UniquePowersVolcanoExaltationOfMoltenStone="UniquePowersVolcanoExaltationOfMoltenStone",e.UniquePowersVolcanoLavaFlows="UniquePowersVolcanoLavaFlows",e.UniquePowersVolcanoPyroclasticBombardment="UniquePowersVolcanoPyroclasticBombardment",e.UniquePowersVolcanoRainOfAsh="UniquePowersVolcanoRainOfAsh",e.UniquePowersWhirlwindGiftOfTheSunlitAir="UniquePowersWhirlwindGiftOfTheSunlitAir",e.UniquePowersWhirlwindGiftOfWindspedSteps="UniquePowersWhirlwindGiftOfWindspedSteps",e.UniquePowersWhirlwindScatterToTheWinds="UniquePowersWhirlwindScatterToTheWinds",e.UniquePowersWhirlwindTempestOfLeavesAndBranches="UniquePowersWhirlwindTempestOfLeavesAndBranches",e.UniquePowersWildfireAsphyxiatingSmoke="UniquePowersWildfireAsphyxiatingSmoke",e.UniquePowersWildfireFlamesFury="UniquePowersWildfireFlamesFury",e.UniquePowersWildfireFlashfires="UniquePowersWildfireFlashfires",e.UniquePowersWildfireThreateningFlames="UniquePowersWildfireThreateningFlames",e.UniquePowersWoundedBloodWaterAndBloodlust="UniquePowersWoundedBloodWaterAndBloodlust",e.UniquePowersWoundedBoonOfCorruptedBlood="UniquePowersWoundedBoonOfCorruptedBlood",e.UniquePowersWoundedDrawToTheWatersEdge="UniquePowersWoundedDrawToTheWatersEdge",e.UniquePowersWoundedWrackWithPainAndGrief="UniquePowersWoundedWrackWithPainAndGrief"}(ax||(ax={}));const tx={[ar.APallUponTheLand]:{image:ax.BlightCardsAPallUponTheLand,keywords:["a","pall","upon","the","land","immediately","destroy","presence","remove","town","board","each"]},[ar.AidFromLesserSpirit]:{image:ax.BlightCardsAidFromLesserSpirit,keywords:["aid","from","lesser","spirit","immediately","draw","minor","power","card","play","energy","each"]},[ar.AllThingsWeaken]:{image:ax.BlightCardsAllThingsWeaken,keywords:["all","things","weaken","invader","dahan","health","blight","damage","destroy","presence","beast","add"]},[ar.AttenuatedEssence]:{image:ax.BlightCardsAttenuatedEssence,keywords:["attenuated","essence","each","spirit","presence","destroy"]},[ar.BackAgainstTheWall]:{image:ax.BlightCardsBackAgainstTheWall,keywords:["back","against","the","wall","energy","card","play","each","gain"]},[ar.BlightCorrodesTheSpirit]:{image:ax.BlightCardsBlightCorrodesTheSpirit,keywords:["blight","corrodes","the","spirit","each","board","destroy","presence","blight"]},[ar.BurnBrightestBeforeTheEnd]:{image:ax.BlightCardsBurnBrightestBeforeTheEnd,keywords:["burn","brightest","before","the","end","immediately","spirit","add","presence","remove","broken"]},[ar.DisintegratingEcosystem]:{image:ax.BlightCardsDisintegratingEcosystem,keywords:["disintegrating","ecosystem","immediately","destroy","beast","blight","town","city","board","each","add"]},[ar.DownwardSpiral]:{image:ax.BlightCardsDownwardSpiral,keywords:["downward","spiral","destroy","presence","each"]},[ar.ErosionOfWill]:{image:ax.BlightCardsErosionOfWill,keywords:["erosion","of","will","immediately","fear","destroy","presence","energy","player","each"]},[ar.IntensifyingExploitation]:{image:ax.BlightCardsIntensifyingExploitation,keywords:["intensifying","exploitation","each","ravage","invader","damage"]},[ar.InvadersFindTheLandToTheirLiking]:{image:ax.BlightCardsInvadersFindTheLandToTheirLiking,keywords:["invaders","find","the","land","to","their","liking","still","healthy","immediately","terror","level","fear","pool","player"]},[ar.MemoryFadesToDust]:{image:ax.BlightCardsMemoryFadesToDust,keywords:["memory","fades","to","dust","forget","power","destroy","presence","each"]},[ar.PowerCorrodesTheSpirit]:{image:ax.BlightCardsPowerCorrodesTheSpirit,keywords:["power","corrodes","the","spirit","destroy","presence","power","card","energy","each"]},[ar.PromisingFarmlands]:{image:ax.BlightCardsPromisingFarmlands,keywords:["promising","farmlands","immediately","add","town","city","inland","each","board","add"]},[ar.ShatteredFragmentsOfPower]:{image:ax.BlightCardsShatteredFragmentsOfPower,keywords:["shattered","fragments","of","power","blight","draw","major","power","card","energy"]},[ar.SlowDissolutionOfWill]:{image:ax.BlightCardsSlowDissolutionOfWill,keywords:["slow","dissolution","of","will","immediately","spirit","badland","beast","wild","each","replace","presence","token"]},[ar.StrongEarthShattersSlowly]:{image:ax.BlightCardsStrongEarthShattersSlowly,keywords:["strong","earth","shatters","slowly","still","healthy","immediately","blight","each","player","add"]},[ar.TheBorderOfLifeAndDeath]:{image:ax.BlightCardsTheBorderOfLifeAndDeath,keywords:["the","border","of","life","and","death","still","healthy","now","each","spirit","destroy","presence","power","gain","energy"]},[ar.ThrivingCommunities]:{image:ax.BlightCardsThrivingCommunities,keywords:["thriving","communities","immediately","explorer","town","replace","city","each","board"]},[ar.ThrivingCrops]:{image:ax.BlightCardsThrivingCrops,keywords:["thriving","crops","still","healthy","immediately","board","build","town"]},[ar.TippingPoint]:{image:ax.BlightCardsTippingPoint,keywords:["tipping","point","immediately","destroy","presence","each","branch","event"]},[ar.UnnaturalProliferation]:{image:ax.BlightCardsUnnaturalProliferation,keywords:["unnatural","proliferation","immediately","presence","dahan","city","town","each","add"]},[ar.UntendedLandCrumbles]:{image:ax.BlightCardsUntendedLandCrumbles,keywords:["untended","land","crumbles","blight","energy","destroy","presence","each","add","any","board","all"]}};var nx;!function(e){e.Air="Air",e.Animal="Animal",e.Any="Any",e.Badlands="Badlands",e.Beasts="Beasts",e.Blight="Blight",e.Broken="Broken",e.Bullet="Bullet",e.City="City",e.Dahan="Dahan",e.Damage="Damage",e.DarkFire="DarkFire",e.Deeps="Deeps",e.Disease="Disease",e.Earth="Earth",e.EndlessDark="EndlessDark",e.Escalation="Escalation",e.Explorer="Explorer",e.Fast="Fast",e.Fear="Fear",e.Fire="Fire",e.FireOrPlant="FireOrPlant",e.Impending="Impending",e.IncarnaBehemoth="IncarnaBehemoth",e.IncarnaDarkness="IncarnaDarkness",e.IncarnaLair="IncarnaLair",e.IncarnaLocus="IncarnaLocus",e.IncarnaRoots="IncarnaRoots",e.IncarnaVoice="IncarnaVoice",e.IncarnaWarrior="IncarnaWarrior",e.MarkedBeast="MarkedBeast",e.Moon="Moon",e.Or="Or",e.Plant="Plant",e.Presence="Presence",e.Quake="Quake",e.Range0="Range0",e.Range1="Range1",e.Range2="Range2",e.Range3="Range3",e.Range4="Range4",e.RangeAir="RangeAir",e.RangePlus1="RangePlus1",e.RangePlus2="RangePlus2",e.RangePlus3="RangePlus3",e.RangePlus4="RangePlus4",e.Sacred="Sacred",e.SetBranchAndClaw="SetBranchAndClaw",e.SetFeatherAndFlame="SetFeatherAndFlame",e.SetHorizonsOfSpiritIsland="SetHorizonsOfSpiritIsland",e.SetJaggedEarth="SetJaggedEarth",e.SetNatureIncarnate="SetNatureIncarnate",e.ShadowDamage="ShadowDamage",e.Slow="Slow",e.SpiritLightning="SpiritLightning",e.SpiritRiver="SpiritRiver",e.SpiritEarth="SpiritEarth",e.SpiritShadows="SpiritShadows",e.SpiritThunderspeaker="SpiritThunderspeaker",e.SpiritGreen="SpiritGreen",e.SpiritOcean="SpiritOcean",e.SpiritBringer="SpiritBringer",e.SpiritFangs="SpiritFangs",e.SpiritKeeper="SpiritKeeper",e.SpiritWildfire="SpiritWildfire",e.SpiritSerpent="SpiritSerpent",e.SpiritStone="SpiritStone",e.SpiritMemory="SpiritMemory",e.SpiritTrickster="SpiritTrickster",e.SpiritLure="SpiritLure",e.SpiritManyMinds="SpiritManyMinds",e.SpiritVolcano="SpiritVolcano",e.SpiritShroud="SpiritShroud",e.SpiritVengeance="SpiritVengeance",e.SpiritStarlight="SpiritStarlight",e.SpiritFractured="SpiritFractured",e.SpiritDownpour="SpiritDownpour",e.SpiritFinder="SpiritFinder",e.SpiritTeeth="SpiritTeeth",e.SpiritEyes="SpiritEyes",e.SpiritMud="SpiritMud",e.SpiritHeat="SpiritHeat",e.SpiritWhirlwind="SpiritWhirlwind",e.SpiritHearthVigil="SpiritHearthVigil",e.SpiritBehemoth="SpiritBehemoth",e.SpiritDarkness="SpiritDarkness",e.SpiritGaze="SpiritGaze",e.SpiritRoots="SpiritRoots",e.SpiritEarthquakes="SpiritEarthquakes",e.SpiritVoice="SpiritVoice",e.SpiritWounded="SpiritWounded",e.Strife="Strife",e.Sun="Sun",e.SunOrMoon="SunOrMoon",e.TerrainJungles="TerrainJungles",e.TerrainJunglesAndSands="TerrainJunglesAndSands",e.TerrainJunglesAndWetlands="TerrainJunglesAndWetlands",e.TerrainMountains="TerrainMountains",e.TerrainMountainsAndJungles="TerrainMountainsAndJungles",e.TerrainMountainsAndSands="TerrainMountainsAndSands",e.TerrainMountainsAndWetlands="TerrainMountainsAndWetlands",e.TerrainSands="TerrainSands",e.TerrainSandsAndWetlands="TerrainSandsAndWetlands",e.TerrainWetlands="TerrainWetlands",e.Town="Town",e.Vitality="Vitality",e.Water="Water",e.WaterOrAnimal="WaterOrAnimal",e.Wilds="Wilds"}(nx||(nx={}));const rx={[ir.Sun]:{name:"Sun",icon:nx.Sun,image:ax.TokensSun},[ir.Moon]:{name:"Moon",icon:nx.Moon,image:ax.TokensMoon},[ir.Fire]:{name:"Fire",icon:nx.Fire,image:ax.TokensFire},[ir.DarkFire]:{name:"Darkfire",icon:nx.DarkFire,image:ax.TokensDarkFire},[ir.Air]:{name:"Air",icon:nx.Air,image:ax.TokensAir},[ir.Water]:{name:"Water",icon:nx.Water,image:ax.TokensWater},[ir.Earth]:{name:"Earth",icon:nx.Earth,image:ax.TokensEarth},[ir.Plant]:{name:"Plant",icon:nx.Plant,image:ax.TokensPlant},[ir.Animal]:{name:"Animal",icon:nx.Animal,image:ax.TokensAnimal},[ir.Any]:{name:"Any",icon:nx.Any,image:ax.TokensAny},[ir.SunOrMoon]:{name:"Sun OR Moon",icon:nx.SunOrMoon,image:ax.TokensSunOrMoon},[ir.WaterOrAnimal]:{name:"Water OR Animal",icon:nx.WaterOrAnimal,image:ax.TokensWaterOrAnimal},[ir.FireOrPlant]:{name:"Fire OR Plant",icon:nx.FireOrPlant,image:ax.TokensFireOrPlant}};var ix;!function(e){e.Menu="Menu",e.Background="Background",e.GameLost="GameLost",e.GameWon="GameWon",e.EventFriendly="EventFriendly",e.EventBattle="EventBattle",e.EventDramatic="EventDramatic",e.EventSpiritual="EventSpiritual"}(ix||(ix={}));const sx={[nf.AccumulatedDevastation]:{image:ax.EventCardsAccumulatedDevastation,musicType:ix.EventDramatic,keywords:["accumulated","devastation","the","worlds","vibrance","fades","territorial","beasts","years","of","health","and","harmony","ravage","damage","dahan","stage","remove","blight","card","spirit","destroy","presence","isolate","beasts","fear","invader"]},[nf.AnOminousDawn]:{image:ax.EventCardsAnOminousDawn,musicType:ix.EventDramatic,keywords:["an","ominous","dawn","wavering","resolve","dangerous","lands","waning","support","fear","power","card","fear","town","city","element","remove","health","damage","badlands","beasts","dahan","destroy","presence","add","blight"]},[nf.AStrangeMadnessAmongTheBeasts]:{image:ax.EventCardsAStrangeMadnessAmongTheBeasts,musicType:ix.EventDramatic,keywords:["a","strange","madness","among","the","beasts","choice","aid","let","them","rampage","unto","death","guide","savage","frenzy","seek","safer","home","beast","destroy","dahan","remove","board","energy","push","explorer","damage","disease","wild"]},[nf.BureaucratsAdjustFunding]:{image:ax.EventCardsBureaucratsAdjustFunding,musicType:ix.Background,keywords:["bureaucrats","adjust","funding","terror","ransack","and","run","terrifying","beast","coordinated","defense","town","city","skip","build","card","ravage","remove","fear","board","dahan","presence","defend"]},[nf.CitiesRise]:{image:ax.EventCardsCitiesRise,musicType:ix.Background,keywords:["cities","rise","healthy","depleted","soil","beasts","chase","off","homesteaders","careful","defense","board","town","replace","city","blight","push","explorer","beast","ravage","dahan","defend"]},[nf.CivicEngagement]:{image:ax.EventCardsCivicEngagement,musicType:ix.EventBattle,keywords:["civic","engagement","healthy","life's","web","torn","asunder","casualties","of","fang","and","sting","keep","far","from","the","lands","plague","remove","strife","invaders","damage","ravage","town","city","blight","explorer","beast","dahan","disease"]},[nf.CoastalTownsMultiply]:{image:ax.EventCardsCoastalTownsMultiply,musicType:ix.Background,keywords:["coastal","towns","multiply","healthy","cooperation","among","explorers","blunder","coming","of","age","town","invader","damage","city","strife","destroy","explorer","beast","dahan","blight","disease"]},[nf.CulturalAssimilation]:{image:ax.EventCardsCulturalAssimilation,musicType:ix.EventBattle,keywords:["cultural","assimilation","terror","reprisal","against","the","dahan","beasts","attack","reckless","offensive","board","city","replace","town","invader","damage","defend","beast","destroy","blight"]},[nf.DahanTradeWithTheInvaders]:{image:ax.EventCardsDahanTradeWithTheInvaders,musicType:ix.EventFriendly,keywords:["dahan","trade","with","the","invaders","choice","aid","ignore","their","interest","display","your","wrath","at","this","betrayal","change","and","help","them","learn","from","enemy","outbreaks","shift","ravage","energy","fire","destroy","fear","air","forget","power","card","defend","push","disease","board"]},[nf.DistantExploration]:{image:ax.EventCardsDistantExploration,musicType:ix.Background,keywords:["distant","exploration","terror","fearful","mobs","grim","toll","fierce","mien","explore","town","city","ravage","damage","invader","board","disease","dahan","fear"]},[nf.EagerExplorers]:{image:ax.EventCardsEagerExplorers,musicType:ix.Background,keywords:["eager","explorers","terror","xenophobia","beasts","chase","off","homesteaders","at","their","gates","demanding","redress","build","explorer","invader","ravage","dahan","push","town","beast","fear","city"]},[nf.EtherealConjunction]:{image:ax.EventCardsEtherealConjunction,musicType:ix.EventSpiritual,keywords:["ethereal","conjunction","endure","its","forces","as","best","you","can","seek","to","control","it","though","it","exhausts","you","irregular","outbreaks","tend","to","the","living","earth","destroy","presence","lose","energy","major","power","card","forget","disease","prevent","build","fear","board","dahan","remove","blight"]},[nf.FarOffWarsTouchTheIsland]:{image:ax.EventCardsFarOffWarsTouchTheIsland,musicType:ix.EventBattle,keywords:["far","off","wars","touch","the","island","encourage","the","destruction","blunt","the","offensive","ecosystem","damage","return","to","old","pillars","fear","card","town","city","blight","destroy","badland","dahan","setup","symbol"]},[nf.FarmersSeekTheDahanForAid]:{image:ax.EventCardsFarmersSeekTheDahanForAid,musicType:ix.EventFriendly,keywords:["farmers","seek","the","dahan","for","aid","choice","spurn","invaders","teach","new","diseases","board","town","city","blight","health","ravage","build","disease","damage"]},[nf.FocusedFarming]:{image:ax.EventCardsFocusedFarming,musicType:ix.EventDramatic,keywords:["focused","farming","essence","disperses","explorers","blunder","offerings","of","story","and","season","add","explorer","town","blight","spirit","forget","power","card","lose","energy","destroy","presence","beasts","dahan","reclaim"]},[nf.Fortuneseekers]:{image:ax.EventCardsFortuneseekers,musicType:ix.Background,keywords:["fortuneseekers","healthy","the","land's","bounty","exhausted","grim","toll","tell","old","stories","explore","card","town","city","escalation","presence","damage","blight","board","disease","invader","dahan","reclaim","power","unique","forgot"]},[nf.GradualCorruption]:{image:ax.EventCardsGradualCorruption,musicType:ix.EventDramatic,keywords:["gradual","corruption","healthy","ravaged","wilderness","fatalities","rise","blessings","of","bounty","and","health","blight","town","city","energy","beast","wild","disease","damage","invader","remove","destroy","dahan"]},[nf.HardworkingSettlers]:{image:ax.EventCardsHardworkingSettlers,musicType:ix.Background,keywords:["hardworking","settlers","choice","act","cautiously","in","the","background","create","unnerving","distractions","beasts","prey","on","injured","push","dahan","add","town","ravage","card","skip","fear","player","beast","badland","destroy","invader"]},[nf.HarvestBountyHarvestDust]:{image:ax.EventCardsHarvestBountyHarvestDust,musicType:ix.EventDramatic,keywords:["harvest","bounty","dust","stage","widespread","clearcutting","explorers","blunder","coordinated","strikes","town","city","ravage","board","blight","destroy","presence","dahan","explorer","beast","damage","defend"]},[nf.HeavyFarming]:{image:ax.EventCardsHeavyFarming,musicType:ix.EventDramatic,keywords:["heavy","farming","healthy","overcrowded","cities","prey","on","the","unwary","coming","of","age","ravage","town","damage","city","blight","presence","beast","explorer","board","dahan"]},[nf.InfluxOfSettlers]:{image:ax.EventCardsInfluxOfSettlers,musicType:ix.Background,keywords:["influx","of","settlers","healthy","lethargy","and","degeneration","sand","stalkers","network","support","trade","board","town","city","add","skip","ravage","card","blight","destroy","presence","beast","fear","sands","invader","dahan","defend"]},[nf.InterestingDiscoveries]:{image:ax.EventCardsInterestingDiscoveries,musicType:ix.Background,keywords:["interesting","discoveries","stage","increasing","aggression","wheezelung","outbreak","tend","the","land","board","sacred","explorer","gather","invader","damage","ravage","disease","town","city","remove","blight","dahan"]},[nf.InvadersSurgeInland]:{image:ax.EventCardsInvadersSurgeInland,musicType:ix.Background,keywords:["invaders","surge","inland","healthy","widening","destruction","grim","toll","canny","defense","coastal","move","town","blight","city","presence","disease","damage","dahan","ravage","defend"]},[nf.InvestedAristocracy]:{image:ax.EventCardsInvestedAristocracy,musicType:ix.Background,keywords:["invested","aristocracy","stage","foreign","dignitaries","visit","prey","on","the","heedless","coming","of","age","ravage","blight","town","invader","damage","fear","card","beast","dahan"]},[nf.InvestigationOfDangers]:{image:ax.EventCardsInvestigationOfDangers,musicType:ix.EventSpiritual,keywords:["investigation","of","dangers","terror","destroy","the","unnatural","prey","on","unwary","rouse","spirits","board","explorer","invader","dahan","ravage","presence","beast","slow","power"]},[nf.LesserSpiritsImperiled]:{image:ax.EventCardsLesserSpiritsImperiled,musicType:ix.EventSpiritual,keywords:["lesser","spirits","imperiled","choice","aid","tend","to","your","own","strength","forge","a","web","of","mutual","support","quit","the","farmed","lands","return","old","pillars","energy","minor","power","plant","blight","animal","dahan","destroy","presence","element","beast","town","city","fear","explorer"]},[nf.LifesBalanceTilts]:{image:ax.EventCardsLifesBalanceTilts,musicType:ix.EventDramatic,keywords:["lifes","balance","tilts","choice","aid","let","destruction","have","its","day","fortify","the","resilience","of","life","a","thousand","small","struggles","remove","beast","disease","minor","power","fast","blight","dahan","health","energy","animal","slow","town","city"]},[nf.MapmakersChartTheWild]:{image:ax.EventCardsMapmakersChartTheWild,musicType:ix.Background,keywords:["mapmakers","chart","the","wild","stage","increasing","aggression","prey","on","heedless","coming","of","age","explore","explorer","damage","invader","ravage","beast","dahan","badland","disease","board"]},[nf.MissionariesArrive]:{image:ax.EventCardsMissionariesArrive,musicType:ix.EventFriendly,keywords:["missionaries","arrive","choice","aid","ignore","their","contact","with","the","dahan","curse","tongues","of","foreigners","prey","on","unwary","board","minor","power","sun","explorer","replace","town","event","energy","disease","city","fear","ravage","beast"]},[nf.NewSpeciesSpread]:{image:ax.EventCardsNewSpeciesSpread,musicType:ix.EventSpiritual,keywords:["new","species","spread","choice","aid","let","the","invasive","bloom","transmute","worst","of","diseases","offerings","pattern","and","dance","board","minor","power","fast","blight","town","city","event","energy","moon","fear","beast","disease","dahan","damage"]},[nf.NoBraveryWithoutNumbers]:{image:ax.EventCardsNoBraveryWithoutNumbers,musicType:ix.Background,keywords:["no","bravery","without","numbers","stage","courage","of","the","crowd","prey","on","heedless","leave","hostile","land","invader","ravage","damage","beast","dahan","badland","disease"]},[nf.NuminousCrisis]:{image:ax.EventCardsNuminousCrisis,musicType:ix.EventDramatic,keywords:["numinous","crisis","choice","draw","strength","from","it","while","you","can","pour","your","into","the","island","plagues","bring","fear","and","death","careful","defense","remove","blight","energy","forget","power","presence","disease","damage","dahan","defend"]},[nf.Outpaced]:{image:ax.EventCardsOutpaced,musicType:ix.EventDramatic,keywords:["outpaced","choice","stay","steady","and","slow","work","to","match","their","pace","lingering","plagues","raids","in","force","power","card","energy","destroy","presence","disease","dahan","town","city","damage"]},[nf.Overconfidence]:{image:ax.EventCardsOverconfidence,musicType:ix.Background,keywords:["overconfidence","terror","breeds","aggression","beasts","multiply","coordinated","defense","fear","cards","damage","ravage","beast","destroy","dahan","presence","defend"]},[nf.PopulationRises]:{image:ax.EventCardsPopulationRises,musicType:ix.Background,keywords:["population","rises","healthy","power","fades","sandfever","outbreak","offerings","of","pattern","and","dance","board","town","explorer","destroy","presence","forget","blight","card","disease","city","dahan","energy"]},[nf.PromisingFarmland]:{image:ax.EventCardsPromisingFarmland,musicType:ix.EventDramatic,keywords:["promising","farmland","healthy","new","cash","crops","take","hold","beasts","provoked","canny","defense","explore","town","explorer","ravage","presence","destroy","beast","blight","defend","dahan"]},[nf.ProvincialSeat]:{image:ax.EventCardsProvincialSeat,musicType:ix.Background,keywords:["provincial","seat","healthy","lands","hollow","of","promise","beasts","chase","off","homesteaders","rally","to","the","defense","distant","kin","city","build","blight","presence","destroy","explorer","town","beast","dahan","defend","gather"]},[nf.PullTogetherInAdversity]:{image:ax.EventCardsPullTogetherInAdversity,musicType:ix.Background,keywords:["pull","together","in","adversity","terror","purge","the","land","with","salt","and","fire","explorers","blunder","careful","defense","strife","town","blight","badland","remove","explorer","beast","dahan","defend","ravage"]},[nf.PuttingDownRoots]:{image:ax.EventCardsPuttingDownRoots,musicType:ix.Background,keywords:["putting","down","roots","healthy","the","center","crumbles","stricken","drive","off","interlopers","inland","board","replace","explorer","town","blight","destroy","presence","disease","strife","push","dahan"]},[nf.RelentlessOptimism]:{image:ax.EventCardsRelentlessOptimism,musicType:ix.Background,keywords:["relentless","optimism","terror","cultures","mix","and","clash","foreign","diseases","offerings","of","pattern","dance","fear","destroy","town","city","dahan","replace","disease","energy"]},[nf.RemnantsOfASpiritsHeart]:{image:ax.EventCardsRemnantsOfASpiritsHeart,musicType:ix.EventSpiritual,keywords:["remnants","of","a","spirits","heart","choice","aid","leave","its","strength","with","the","dahan","patient","focus","craft","great","warding","hunting","parties","thousand","small","struggles","health","energy","earth","defend","future","beast","city","fear","destroy","town","blight"]},[nf.ResourcefulPopulace]:{image:ax.EventCardsResourcefulPopulace,musicType:ix.Background,keywords:["resourceful","populace","terror","strip","the","land","bare","virulence","among","close-packed","homes","offerings","of","story","and","season","destroy","town","city","damage","ravage","blight","explorer","disease","dahan","reclaim","energy"]},[nf.RisingInterestInTheIsland]:{image:ax.EventCardsRisingInterestInTheIsland,musicType:ix.EventDramatic,keywords:["rising","interest","in","the","island","choice","aid","ignore","curiosity","weave","lies","minds","of","their","observers","beasts","jungle","traps","and","snares","invader","town","energy","air","fear","card","ravage","city","damage","beast","blight","wild","dahan"]},[nf.SacredSitesUnderThreat]:{image:ax.EventCardsSacredSitesUnderThreat,musicType:ix.EventSpiritual,keywords:["sacred","sites","under","threat","choice","aid","let","the","island's","strength","repulse","them","guard","yourself","for","well","or","ill","beasts","prowl","spirit","speakers","solve","riddles","of","power","push","explorer","town","blight","card","energy","fire","damage","destroy","presence","beast","fear","dahan","minor"]},[nf.SearchForNewLands]:{image:ax.EventCardsSearchForNewLands,musicType:ix.Background,keywords:["search","for","new","lands","healthy","devastated","shores","distant","hunt","canny","defense","explorer","push","invader","blight","coastal","destroy","presence","beast","damage","defend","dahan"]},[nf.SearchForUnclaimedLand]:{image:ax.EventCardsSearchForUnclaimedLand,musicType:ix.EventDramatic,keywords:["search","for","unclaimed","land","widespread","hunting","plagues","populous","lands","spreading","conflict","prompts","caution","explore","invader","dahan","town","city","ravage","beasts","damage","destroy","add","disease","push","card"]},[nf.SeekNewFarmland]:{image:ax.EventCardsSeekNewFarmland,musicType:ix.Background,keywords:["seek","new","farmland","healthy","voracious","consumption","plagues","bring","fear","and","death","engage","on","their","own","terms","town","push","ravage","blight","city","destroy","presence","disease","dahan","board","damage"]},[nf.SeekingTheInterior]:{image:ax.EventCardsSeekingTheInterior,musicType:ix.Background,keywords:["seeking","the","interior","stage","local","diaspora","beasts","prowl","forsake","barren","land","coastal","push","explorer","inland","town","beast","fear","invader","dahan","blight"]},[nf.SlaveRebellion]:{image:ax.EventCardsSlaveRebellion,musicType:ix.EventBattle,keywords:["slave","rebellion","stage","small","uprising","aid","the","france","strife","town","event","destroy","board","invader","damage","card","dahan","city"]},[nf.SmallerPortsSpringUp]:{image:ax.EventCardsSmallerPortsSpringUp,musicType:ix.Background,keywords:["smaller","ports","spring","up","stage","extensive","building","stricken","settlers","encroach","too","far","board","coastal","city","town","build","invader","disease","strife","skip","ravage","dahan","push"]},[nf.SprawlContainedByTheWilds]:{image:ax.EventCardsSprawlContainedByTheWilds,musicType:ix.EventSpiritual,keywords:["sprawl","contained","by","the","wilds","healthy","dissolution","threatens","accept","this","fragmentation","focus","your","will","towards","wholeness","explorers","blunder","lay","ambushes","wild","invader","build","town","city","destroy","presence","slow","fast","power","explorer","beast","ravage","dahan"]},[nf.StrangeTalesAttractExplorers]:{image:ax.EventCardsStrangeTalesAttractExplorers,musicType:ix.EventSpiritual,keywords:["strange","tales","attract","explorers","stage","fortification","beasts","attack","coming","of","age","fear","sacred","invader","card","explorer","build","beast","damage","remove","town","city","dahan","mountain","sands"]},[nf.TemporaryTruce]:{image:ax.EventCardsTemporaryTruce,musicType:ix.EventFriendly,keywords:["temporary","truce","terror","caution","prey","on","the","heedless","speak","of","spirit's","anger","dahan","town","city","ravage","skip","board","beast","damage","fear"]},[nf.TerrorSpikesUpwards]:{image:ax.EventCardsTerrorSpikesUpwards,musicType:ix.EventDramatic,keywords:["terror","spikes","upwards","final","harvest","secure","settled","territory","war","among","the","dahan","fear","cards","player","city","damage","ravage","remove","town","badland","beast","push","destroy","board"]},[nf.TheFrontierCalls]:{image:ax.EventCardsTheFrontierCalls,musicType:ix.Background,keywords:["the","frontier","calls","healthy","self-sacrifice","buys","time","lair","in","untamed","lands","seek","out","new","grounds","explore","explorer","town","city","destroy","presence","blight","card","beast","gather","dahan"]},[nf.TheStrugglesOfGrowth]:{image:ax.EventCardsTheStrugglesOfGrowth,musicType:ix.EventSpiritual,keywords:["the","struggles","of","growth","healthy","blight","deepens","irregular","outbreaks","careful","defense","destroy","presence","gain","power","card","forget","energy","cascade","disease","build","fear","ravage","dahan","defend"]},[nf.ThrivingTrade]:{image:ax.EventCardsThrivingTrade,musicType:ix.EventFriendly,keywords:["thriving","trade","healthy","partitioned","wilderness","pestilence","arrives","on","canvas","sails","clever","cooperation","city","coastal","board","town","blight","destroy","presence","disease","dahan","push","damage"]},[nf.TightknitCommunities]:{image:ax.EventCardsTightknitCommunities,musicType:ix.Background,keywords:["tightknit","communities","healthy","blight","spreads","prey","on","the","unwary","coming","of","age","town","city","health","board","destroy","presence","beast","explorer","dahan","coastal"]},[nf.UrbanDevelopment]:{image:ax.EventCardsUrbanDevelopment,musicType:ix.Background,keywords:["urban","development","healthy","festering","pits","of","blight","lingering","plagues","fierce","mien","ravage","city","damage","cascade","disease","build","fear","dahan","town"]},[nf.WarTouchesTheIslandsShores]:{image:ax.EventCardsWarTouchesTheIslandsShores,musicType:ix.EventBattle,keywords:["war","touches","the","islands","shores","choice","allow","attacks","help","repel","newcomers","beasts","find","new","homes","reclaim","territory","board","major","power","energy","damage","invader","coastal","town","city","defend","fear","card","beast","push","blight","dahan"]},[nf.VisionsOutOfTime]:{image:ax.EventCardsVisionsOutOfTime,musicType:ix.EventSpiritual,keywords:["visions","out","of","time","let","the","warning","waft","into","days","past","head","off","the","problems","yourself","prey","on","the","heedless","strength","from","trade","spirit","lose","energy","unique","power","card","hand","reveal","omen","ravage","fear","remove","beasts","damage","dahan","defend","town","city"]},[nf.WaveOfReconnaissance]:{image:ax.EventCardsWaveOfReconnaissance,musicType:ix.Background,keywords:["wave","of","reconnaissance","stage","urbanization","stricken","retreat","explore","explorer","town","city","replace","disease","strife","ravage","skip","push","board","dahan"]},[nf.WellpreparedExplorers]:{image:ax.EventCardsWellpreparedExplorers,musicType:ix.Background,keywords:["wellprepared","explorers","healthy","blight","spreads","beasts","prowl","coming","of","age","explorer","health","destroy","presence","beast","fear","invader","dahan","inland"]},[nf.WoundedLandsAttractExplorers]:{image:ax.EventCardsWoundedLandsAttractExplorers,musicType:ix.Background,keywords:["wounded","lands","attract","explorers","healthy","the","world's","vibrance","fades","beasts","chase","off","homesteaders","raiding","and","retaliation","board","explorer","blight","remove","card","destroy","presence","push","town","beast","damage","dahan","strife","defend"]},[nf.YearsOfLittleRain]:{image:ax.EventCardsYearsOfLittleRain,musicType:ix.EventDramatic,keywords:["years","of","little","rain","choice","aid","let","the","plants","die","and","land","wither","act","to","ease","drought","beasts","attack","canny","defense","minor","power","water","blight","sands","town","city","dahan","health","energy","presence","beast","damage","remove","ravage","defend"]}},ox={[Ap.AngryMobs]:{image:ax.FearCardsAngryMobs,keywords:["angry","mobs","player","replace","town","explorer","fear","destroy","invader"]},[Ap.AvoidTheDahan]:{image:ax.FearCardsAvoidTheDahan,keywords:["avoid","the","dahan","invader","skip","explore","build","town","city"]},[Ap.BeliefTakesRoot]:{image:ax.FearCardsBeliefTakesRoot,keywords:["belief","takes","root","defend","presence","sacred","energy","invader","remove","health","player"]},[Ap.BesetByManyTroubles]:{image:ax.FearCardsBesetByManyTroubles,keywords:["beset","by","many","troubles","badland","beast","disease","wild","strife","defend"]},[Ap.CivilUnrest]:{image:ax.FearCardsCivilUnrest,keywords:["civil","unrest","strife","town","city","ravage","card","invader","damage"]},[Ap.CommunitiesInDisarray]:{image:ax.FearCardsCommunitiesInDisarray,keywords:["communities","in","disarray","city","damage","ravage","invader","town","heal"]},[Ap.DahanAttack]:{image:ax.FearCardsDahanAttack,keywords:["dahan","attack","player","remove","explorer","town","city","gather","damage"]},[Ap.DahanEnheartened]:{image:ax.FearCardsDahanEnheartened,keywords:["dahan","enheartened","player","push","invader","damage","gather"]},[Ap.DahanGainTheEdge]:{image:ax.FearCardsDahanGainTheEdge,keywords:["dahan","gain","the","edge","player","defend","damage"]},[Ap.DahanOnTheirGuard]:{image:ax.FearCardsDahanOnTheirGuard,keywords:["dahan","on","their","guard","defend"]},[Ap.DahanRaid]:{image:ax.FearCardsDahanRaid,keywords:["dahan","raid","player","damage"]},[Ap.DahanReclaimFishingGrounds]:{image:ax.FearCardsDahanReclaimFishingGrounds,keywords:["dahan","reclaim","fishing","grounds","player","coastal","damage","gather"]},[Ap.DahanThreaten]:{image:ax.FearCardsDahanThreaten,keywords:["dahan","threaten","player","strife","invader","health","damage"]},[Ap.DauntedByTheDahan]:{image:ax.FearCardsDauntedByTheDahan,keywords:["daunted","by","the","dahan","fear","invader","damage","ravage","isolate"]},[Ap.Demoralized]:{image:ax.FearCardsDemoralized,keywords:["demoralized","defend"]},[Ap.DepartTheDangerousLand]:{image:ax.FearCardsDepartTheDangerousLand,keywords:["depart","the","dangerous","land","player","remove","explorer","beast","disease","dahan","town","health","invader"]},[Ap.Depopulation]:{image:ax.FearCardsDepopulation,keywords:["depopulation","board","replace","town","explorer","city","remove"]},[Ap.Discord]:{image:ax.FearCardsDiscord,keywords:["discord","player","strife","invader","damage"]},[Ap.DistractedByLocalTroubles]:{image:ax.FearCardsDistractedByLocalTroubles,keywords:["distracted","by","local","troubles","board","ravage","damage","invader"]},[Ap.EmigrationAccelerates]:{image:ax.FearCardsEmigrationAccelerates,keywords:["emigration","accelerates","player","remove","coastal","explorer","town"]},[Ap.ExplorersAreReluctant]:{image:ax.FearCardsExplorersAreReluctant,keywords:["explorers","are","reluctant","skip","explore","card","escalation"]},[Ap.FearOfTheUnseen]:{image:ax.FearCardsFearOfTheUnseen,keywords:["fear","of","the","unseen","player","remove","explorer","town","sacred","presence","city"]},[Ap.FleeFromDangerousLands]:{image:ax.FearCardsFleeFromDangerousLands,keywords:["flee","from","dangerous","lands","board","push","explorer","town","badland","wild","dahan","remove","city"]},[Ap.FleeThePestilentLand]:{image:ax.FearCardsFleeThePestilentLand,keywords:["flee","the","pestilent","land","player","remove","explorer","town","disease","health","invader","inland"]},[Ap.ImmigrationSlows]:{image:ax.FearCardsImmigrationSlows,keywords:["immigration","slows","skip","build","card"]},[Ap.Isolation]:{image:ax.FearCardsIsolation,keywords:["isolation","player","remove","explorer","town","invader"]},[Ap.MimicTheDahan]:{image:ax.FearCardsMimicTheDahan,keywords:["mimic","the","dahan","player","remove","explorer","town","replace"]},[Ap.NervesFray]:{image:ax.FearCardsNervesFray,keywords:["nerves","fray","player","strife","ravage","fear","card"]},[Ap.OverseasTradeSeemSafer]:{image:ax.FearCardsOverseasTradeSeemSafer,keywords:["overseas","trade","seem","safer","defend","coastal","city","build","skip"]},[Ap.Panic]:{image:ax.FearCardsPanic,keywords:["panic","player","strife","beast","disease","dahan","health","invader"]},[Ap.PanickedByWildBeasts]:{image:ax.FearCardsPanickedByWildBeasts,keywords:["panicked","by","wild","beasts","player","strife","beast","explore","build","skip","invader"]},[Ap.PlanForDeparture]:{image:ax.FearCardsPlanForDeparture,keywords:["plan","for","departure","player","gather","town","coastal","defend","explorer"]},[Ap.Quarantine]:{image:ax.FearCardsQuarantine,keywords:["quarantine","explore","coastal","disease","skip","invader"]},[Ap.Restlessness]:{image:ax.FearCardsRestlessness,keywords:["restlessness","player","push","explorer","town","build","card"]},[Ap.Retreat]:{image:ax.FearCardsRetreat,keywords:["retreat","player","push","explorer","inland","town"]},[Ap.Scapegoats]:{image:ax.FearCardsScapegoats,keywords:["scapegoats","explorer","town","destroy","city"]},[Ap.SeekCompany]:{image:ax.FearCardsSeekCompany,keywords:["seek","company","board","gather","explorer","invader","town"]},[Ap.SeekSafety]:{image:ax.FearCardsSeekSafety,keywords:["seek","safety","player","push","explorer","town","city","gather","remove","health"]},[Ap.SenseOfDread]:{image:ax.FearCardsSenseOfDread,keywords:["sense","of","dread","board","remove","explorer","ravage","card","town","invader"]},[Ap.SpreadingTimidity]:{image:ax.FearCardsSpreadingTimidity,keywords:["spreading","timidity","player","isolate","defend"]},[Ap.StrugglesOverFarmland]:{image:ax.FearCardsStrugglesOverFarmland,keywords:["struggles","over","farmland","player","add","strife","blight","town","invader","damage"]},[Ap.SupplyChainsAbandoned]:{image:ax.FearCardsSupplyChainsAbandoned,keywords:["supply","chains","abandoned","board","isolate","town","city","skip","build"]},[Ap.TallTalesOfSavagery]:{image:ax.FearCardsTallTalesOfSavagery,keywords:["tall","tales","of","savagery","player","remove","explorer","dahan","town","city"]},[Ap.TheologicalStrife]:{image:ax.FearCardsTheologicalStrife,keywords:["theological","strife","player","presence","sacred","energy","damage","invader"]},[Ap.TooManyMonsters]:{image:ax.FearCardsTooManyMonsters,keywords:["too","many","monsters","player","remove","explorer","town","beast"]},[Ap.TradeSuffers]:{image:ax.FearCardsTradeSuffers,keywords:["trade","suffers","player","build","city","skip","town","explorer","coastal","replace","invader"]},[Ap.TreadCarefully]:{image:ax.FearCardsTreadCarefully,keywords:["tread","carefully","player","dahan","ravage","skip","invader"]},[Ap.Unrest]:{image:ax.FearCardsUnrest,keywords:["unrest","player","strife","town","invader","health"]},[Ap.Unsettled]:{image:ax.FearCardsUnsettled,keywords:["unsettled","board","beasts","strife","dahan","downgrade","town","city","skip","build","remove","invader"]},[Ap.WaryOfTheInterior]:{image:ax.FearCardsWaryOfTheInterior,keywords:["wary","of","the","interior","player","remove","explorer","inland","town"]}};var dx;!function(e){e.Attention="Attention",e.Badlands="Badlands",e.BeastDying="BeastDying",e.BeastSpawn="BeastSpawn",e.Blight="Blight",e.Break="Break",e.Card="Card",e.CityBreak="CityBreak",e.Click="Click",e.Dahan="Dahan",e.Disease="Disease",e.Energy="Energy",e.Fanfare="Fanfare",e.Fear1="Fear1",e.Fear2="Fear2",e.Fear3="Fear3",e.GameOver="GameOver",e.Flip="Flip",e.Invader="Invader",e.InvaderBreak="InvaderBreak",e.InvaderHit="InvaderHit",e.Presence="Presence",e.Quake="Quake",e.Replace="Replace",e.Shuffle="Shuffle",e.Spirit="Spirit",e.SpiritLightning="SpiritLightning",e.SpiritRiver="SpiritRiver",e.SpiritEarth="SpiritEarth",e.SpiritShadows="SpiritShadows",e.SpiritThunderspeaker="SpiritThunderspeaker",e.SpiritGreen="SpiritGreen",e.SpiritOcean="SpiritOcean",e.SpiritBringer="SpiritBringer",e.SpiritFangs="SpiritFangs",e.SpiritKeeper="SpiritKeeper",e.SpiritWildfire="SpiritWildfire",e.SpiritSerpent="SpiritSerpent",e.SpiritStone="SpiritStone",e.SpiritMemory="SpiritMemory",e.SpiritTrickster="SpiritTrickster",e.SpiritLure="SpiritLure",e.SpiritManyMinds="SpiritManyMinds",e.SpiritVolcano="SpiritVolcano",e.SpiritShroud="SpiritShroud",e.SpiritVengeance="SpiritVengeance",e.SpiritStarlight="SpiritStarlight",e.SpiritFractured="SpiritFractured",e.SpiritDownpour="SpiritDownpour",e.SpiritFinder="SpiritFinder",e.SpiritTeeth="SpiritTeeth",e.SpiritEyes="SpiritEyes",e.SpiritMud="SpiritMud",e.SpiritHeat="SpiritHeat",e.SpiritWhirlwind="SpiritWhirlwind",e.SpiritHearthVigil="SpiritHearthVigil",e.SpiritBehemoth="SpiritBehemoth",e.SpiritDarkness="SpiritDarkness",e.SpiritGaze="SpiritGaze",e.SpiritRoots="SpiritRoots",e.SpiritEarthquakes="SpiritEarthquakes",e.SpiritVoice="SpiritVoice",e.SpiritWounded="SpiritWounded",e.Splash="Splash",e.Strife="Strife",e.Turn="Turn",e.Wilds="Wilds",e.Woosh="Woosh"}(dx||(dx={}));const lx={[Ui.ACircuitousAndWendingJourney]:{image:ax.UniquePowersFinderACircuitousAndWendingJourney,keywords:["a","circuitous","and","wending","journey","r0","any","push","invader","dahan","presence","beast","moro","rogers"]},[Ui.ADreadfulTideOfScurryingFlesh]:{image:ax.UniquePowersManyMindsADreadfulTideOfScurryingFlesh,keywords:["a","dreadful","tide","of","scurrying","flesh","r1","sacred","beast","remove","fear","skip","each","moro","rogers"]},[Ui.AYearOfPerfectStillness]:{image:ax.UniquePowersEarthAYearOfPerfectStillness,keywords:["a","year","of","perfect","stillness","r1","any","invader","skip","all","sydni","kruger"]},[Ui.AbsoluteStasis]:{image:ax.UniquePowersFracturedAbsoluteStasis,keywords:["absolute","stasis","r2","sacred","any","time","ocean","lucas","durham"]},[Ui.AbsorbCorruption]:{image:ax.MinorPowersAbsorbCorruption,keywords:["absorb","corruption","r0","any","gather","blight","energy","remove","threshold","nolan","nasser"]},[Ui.AbsorbEssence]:{image:ax.UniquePowersSerpentAbsorbEssence,keywords:["absorb","essence","another","spirit","energy","presence","element","gain","jorge","ramos"]},[Ui.AcceleratedRot]:{image:ax.MajorPowersAcceleratedRot,keywords:["accelerated","rot","r2","jungle","wetland","fear","damage","threshold","remove","blight","graham","stermberg"]},[Ui.AidFromTheSpiritspeakers]:{image:ax.UniquePowersFinderAidFromTheSpiritspeakers,keywords:["aid","from","the","spiritspeakers","r1","any","dahan","move","invader","presence","beast","each","moro","rogers"]},[Ui.AfflictWithBloodthirst]:{image:ax.HealingCardsWatersTasteOfRuin,keywords:["afflict","with","bloodthirst","r1","any","gather","beast","fear","invader","explorer","town","dahan","damage","push","healing","card","marker"]},[Ui.AngryBears]:{image:ax.MajorPowersAngryBears,keywords:["angry","bears","r0","any","fear","damage","beast","add","push","threshold","destroy","explorer","town","moro","rogers"]},[Ui.AnimatedWrackroot]:{image:ax.MinorPowersAnimatedWrackroot,keywords:["animated","wrackroot","r0","any","fear","destroy","explorer","wild","joshua","wright"]},[Ui.AsphyxiatingSmoke]:{image:ax.UniquePowersWildfireAsphyxiatingSmoke,keywords:["asphyxiating","smoke","r2","sacred","any","fear","destroy","town","push","dahan","nolan","nasser"]},[Ui.BargainOfCoursingPaths]:{image:ax.MajorPowersBargainOfCoursingPaths,keywords:["bargain","of","coursing","paths","r0","dahan","presence","energy","mark","piece","add","move","threshold","agnieszka","dabrowiecka"]},[Ui.BargainsOfPowerAndProtection]:{image:ax.MajorPowersBargainsOfPowerAndProtection,keywords:["bargains","of","power","and","protection","r0","dahan","remove","presence","defend","energy","threshold","each","joshua","wright"]},[Ui.BatsScoutForRaidsByDarkness]:{image:ax.MinorPowersBatsScoutForRaidsByDarkness,keywords:["bats","scout","for","raids","by","darkness","r2","any","dahan","damage","town","city","fear","gather","each","shawn","daley"]},[Ui.BelligerentAndAggressiveCrops]:{image:ax.UniquePowersGreenBelligerentAndAggressiveCrops,keywords:["belligerent","and","aggressive","crops","r2","sacred","town","city","add","wilds","fear","damage","david","markiwsky"]},[Ui.BirdsCryWarning]:{image:ax.MinorPowersBirdsCryWarning,keywords:["birds","cry","warning","r3","dahan","destroy","push","joshua","wright"]},[Ui.BlazingIntimidation]:{image:ax.UniquePowersBehemothBlazingIntimidation,keywords:["blazing","intimidation","r1","any","fear","push","explorer","town","incarna","david","markiwsky"]},[Ui.BlazingRenewal]:{image:ax.MajorPowersBlazingRenewal,keywords:["blazing","renewal","any","spirit","add","destroy","presence","damage","town","city","threshold","r2","nolan","nasser"]},[Ui.BlindingGlare]:{image:ax.UniquePowersGazeBlindingGlare,keywords:["blinding","glare","r0","invader","sacred","fear","skip","ravage","threshold","agnieszka","dabrowiecka"]},[Ui.BloodDrawsPredators]:{image:ax.MinorPowersBloodDrawsPredators,keywords:["blood","draws","predators","r1","any","invader","destroy","beast","damage","add","after","kat","guevara"]},[Ui.BloodWaterAndBloodlust]:{image:ax.UniquePowersWoundedBloodWaterAndBloodlust,keywords:["blood","water","and","bloodlust","r1","any","blight","add","beast","disease","nolan","nasser"]},[Ui.BloodwrackPlague]:{image:ax.MajorPowersBloodwrackPlague,keywords:["bloodwrack","plague","r1","sacred","any","add","disease","defend","threshold","fear","damage","each","jorge","ramos"]},[Ui.BloomingOfTheRocksAndTrees]:{image:ax.UniquePowersRootsBloomingOfTheRocksAndTrees,keywords:["blooming","of","the","rocks","and","trees","r1","sacred","blight","vitality","wilds","threshold","aalaa","yassin"]},[Ui.BlurTheArcOfYears]:{image:ax.UniquePowersFracturedBlurTheArcOfYears,keywords:["blur","the","arc","of","years","r1","any","dahan","invader","remove","blight","build","ravage","push","repeat","time","add","power","lucas","durham"]},[Ui.BombardWithBouldersAndStingingSeeds]:{image:ax.MajorPowersBombardWithBouldersAndStingingSeeds,keywords:["bombard","with","boulders","and","stinging","seeds","r2","any","fear","damage","add","badlands","threshold","wilds","kat","guevara"]},[Ui.BoonOfAncientMemories]:{image:ax.UniquePowersMemoryBoonOfAncientMemories,keywords:["boon","of","ancient","memories","any","spirit","power","energy","forget","card","gain","joshua","wright"]},[Ui.BoonOfCorruptedBlood]:{image:ax.UniquePowersWoundedBoonOfCorruptedBlood,keywords:["boon","of","corrupted","blood","any","spirit","damage","destroy","presence","gather","beast","nolan","nasser"]},[Ui.BoonOfGrowingPower]:{image:ax.UniquePowersKeeperBoonOfGrowingPower,keywords:["boon","of","growing","power","any","spirit","gain","card","energy","joshua","wright"]},[Ui.BoonOfReimagining]:{image:ax.UniquePowersStarlightBoonOfReimagining,keywords:["boon","of","reimagining","any","spirit","forget","power","card","energy","gain","emily","hancock"]},[Ui.BoonOfResilientPower]:{image:ax.UniquePowersRootsBoonOfResilientPower,keywords:["boon","of","resilient","power","any","spirit","add","broken","card","aalaa","yassin"]},[Ui.BoonOfSwarmingBedevilment]:{image:ax.UniquePowersManyMindsBoonOfSwarmingBedevilment,keywords:["boon","of","swarming","bedevilment","another","spirit","presence","defend","push","each","moro","rogers"]},[Ui.BoonOfVigor]:{image:ax.UniquePowersRiverBoonOfVigor,keywords:["boon","of","vigor","any","spirit","energy","power","card","gain","nolan","nasser"]},[Ui.BoonOfWatchfulGuarding]:{image:ax.UniquePowersEyesBoonOfWatchfulGuarding,keywords:["boon","of","watchful","guarding","any","spirit","defend","energy","moro","rogers"]},[Ui.CallOfTheDahanWays]:{image:ax.MinorPowersCallOfTheDahanWays,keywords:["call","of","the","dahan","ways","r1","replace","explorer","threshold","town","loic","belliau"]},[Ui.CallOfTheDeeps]:{image:ax.UniquePowersOceanCallOfTheDeeps,keywords:["call","of","the","deeps","r0","coastal","gather","explorer","joshua","wright"]},[Ui.CallOnHerdersForAid]:{image:ax.UniquePowersHeatCallOnHerdersForAid,keywords:["call","on","herders","for","aid","r2","any","gather","dahan","push","explorer","town","lucas","durham"]},[Ui.CallOnMidnightsDream]:{image:ax.UniquePowersBringerCallOnMidnightsDream,keywords:["call","on","midnights","dream","r0","any","dahan","power","forget","energy","invader","fear","gain","shane","tyree"]},[Ui.CallToAFastnessOfRenewal]:{image:ax.HealingCardsWatersRenew,keywords:["call","to","a","fastness","of","renewal","r1","any","gather","dahan","defend","downgrade","add","beasts","replace","healing","marker","card"]},[Ui.CallToASunlitHaven]:{image:ax.AspectsHaven,bounds:{width:600,height:623},keywords:["call","to","a","sunlit","haven","sacred","r0","any","energy","track","defend","presence","gather","dahan","remove","invader"]},[Ui.CallToBloodshed]:{image:ax.MinorPowersCallToBloodshed,keywords:["call","to","bloodshed","r1","dahan","damage","gather","jorge","ramos"]},[Ui.CallToFerocity]:{image:ax.MinorPowersCallToFerocity,keywords:["call","to","ferocity","r1","invader","gather","dahan","fear","push","explorer","town","joshua","wright"]},[Ui.CallToGuard]:{image:ax.MinorPowersCallToGuard,keywords:["call","to","guard","r1","any","gather","dahan","defend","move","damage","invader","add","after","kat","guevara"]},[Ui.CallToIsolation]:{image:ax.MinorPowersCallToIsolation,keywords:["call","to","isolation","r1","dahan","push","explorer","town","graham","stermberg"]},[Ui.CallToMigrate]:{image:ax.MinorPowersCallToMigrate,keywords:["call","to","migrate","r1","any","gather","dahan","push","graham","stermberg"]},[Ui.CallToTend]:{image:ax.MinorPowersCallToTend,keywords:["call","to","tend","r1","dahan","remove","blight","push","loic","belliau"]},[Ui.CallToTrade]:{image:ax.MinorPowersCallToTrade,keywords:["call","to","trade","r2","dahan","gather","terror","town","ravage","build","kat","birmelin"]},[Ui.CallToVigilance]:{image:ax.UniquePowersHearthVigilCallToVigilance,keywords:["call","to","vigilance","r1","dahan","any","fear","invader","push","explorer","town","aalaa","yassin"]},[Ui.CarapacedLand]:{image:ax.MinorPowersCarapacedLand,keywords:["carapaced","land","r0","any","beast","defend","threshold","kat","guevara"]},[Ui.CastDownIntoTheBrinyDeep]:{image:ax.MajorPowersCastDownIntoTheBrinyDeep,sound:dx.SpiritOcean,keywords:["cast","down","into","the","briny","deep","r1","sacred","coastal","fear","destroy","all","invader","threshold","board","blight","card","jason","behnke"]},[Ui.CleansingFloods]:{image:ax.MajorPowersCleansingFloods,keywords:["cleansing","floods","r1","wetland","any","damage","remove","blight","threshold","nolan","nasser"]},[Ui.ConcealingShadows]:{image:ax.UniquePowersShadowsConcealingShadows,keywords:["concealing","shadows","r0","any","fear","dahan","damage","ravage","nolan","nasser"]},[Ui.ConfoundingMists]:{image:ax.MinorPowersConfoundingMists,keywords:["confounding","mists","r1","any","defend","invader","push","each","loic","belliau"]},[Ui.CoordinatedRaid]:{image:ax.UniquePowersHearthVigilCoordinatedRaid,keywords:["coordinated","raid","r1","dahan","damage","any","aalaa","yassin"]},[Ui.CropsWitherAndFade]:{image:ax.UniquePowersShadowsCropsWitherAndFade,keywords:["crops","wither","and","fade","r0","any","fear","replace","town","explorer","city","nolan","nasser"]},[Ui.CyclesOfTimeAndTide]:{image:ax.MinorPowersCyclesOfTimeAndTide,keywords:["cycles","of","time","and","tide","r1","coastal","dahan","add","blight","remove","joshua","wright"]},[Ui.DarkAndTangledWoods]:{image:ax.MinorPowersDarkAndTangledWoods,keywords:["dark","and","tangled","woods","r1","any","fear","mountain","jungle","defend","nolan","nasser"]},[Ui.DarkSkiesLooseAStingingRain]:{image:ax.UniquePowersDownpourDarkSkiesLooseAStingingRain,keywords:["dark","skies","loose","a","stinging","rain","r1","wetland","any","isolate","push","explorer","dahan","damon","westenhofer"]},[Ui.DeathFallsGentlyFromOpenBlossoms]:{image:ax.MajorPowersDeathFallsGentlyFromOpenBlossoms,keywords:["death","falls","gently","from","open","blossoms","r3","jungle","sand","damage","invader","add","threshold","disease","fear","graham","stermberg"]},[Ui.DelusionsOfDanger]:{image:ax.MinorPowersDelusionsOfDanger,keywords:["delusions","of","danger","r1","any","push","explorer","fear","moro","rogers"]},[Ui.DesiccatingWinds]:{image:ax.MinorPowersDesiccatingWinds,keywords:["desiccating","winds","r1","sacred","mountain","sand","badland","damage","add","shawn","daley"]},[Ui.DevouringAnts]:{image:ax.MinorPowersDevouringAnts,keywords:["devouring","ants","r1","sacred","any","fear","damage","destroy","dahan","jungle","sand","nolan","nasser"]},[Ui.DireMetamorphosis]:{image:ax.MinorPowersDireMetamorphosis,keywords:["dire","metamorphosis","r1","any","fear","damage","dahan","badland","beast","disease","strife","wild","blight","add","moro","rogers"]},[Ui.DisorientingLandscape]:{image:ax.MinorPowersDisorientingLandscape,keywords:["disorienting","landscape","r2","sacred","any","push","explorer","mountain","jungle","wild","add","nolan","nasser"]},[Ui.DissolveTheBondsOfKinship]:{image:ax.MajorPowersDissolveTheBondsOfKinship,keywords:["dissolve","the","bonds","of","kinship","r1","any","replace","city","town","explorer","dahan","push","threshold","damage","jorge","ramos"]},[Ui.DissolvingVapors]:{image:ax.UniquePowersShroudDissolvingVapors,keywords:["dissolving","vapors","r0","any","fear","damage","invader","dahan","each","emily","hancock"]},[Ui.DomesticatedAnimalsGoBerserk]:{image:ax.MinorPowersDomesticatedAnimalsGoBerserk,keywords:["domesticated","animals","go","berserk","r0","town","city","fear","defend","threshold","beast","add","joshua","wright"]},[Ui.DrawOfTheFruitfulEarth]:{image:ax.UniquePowersEarthDrawOfTheFruitfulEarth,keywords:["draw","of","the","fruitful","earth","r1","any","gather","explorer","dahan","sydni","kruger"]},[Ui.DrawToTheWatersEdge]:{image:ax.UniquePowersWoundedDrawToTheWatersEdge,keywords:["draw","to","the","waters","edge","r0","any","gather","town","nolan","nasser"]},[Ui.DrawTowardsAConsumingVoid]:{image:ax.MajorPowersDrawTowardsAConsumingVoid,keywords:["draw","towards","a","consuming","void","r0","any","gather","explorer","town","city","dahan","presence","beast","fear","damage","destroy","remove","forget","power","each","joshua","wright"]},[Ui.DreadApparitions]:{image:ax.UniquePowersBringerDreadApparitions,keywords:["dread","apparitions","r1","invader","power","fear","defend","town","city","shane","tyree"]},[Ui.DreamOfTheUntouchedLand]:{image:ax.MajorPowersDreamOfTheUntouchedLand,keywords:["dream","of","the","untouched","land","r1","sacred","any","remove","blight","health","invader","threshold","board","beast","wild","badland","presence","build","card","each","skip","joshua","wright"]},[Ui.DreamsOfTheDahan]:{image:ax.UniquePowersBringerDreamsOfTheDahan,keywords:["dreams","of","the","dahan","r2","any","gather","town","city","fear","shane","tyree"]},[Ui.DriftDownIntoSlumber]:{image:ax.MinorPowersDriftDownIntoSlumber,keywords:["drift","down","into","slumber","r2","any","defend","jungle","sand","lucas","durham"]},[Ui.Drought]:{image:ax.MinorPowersDrought,keywords:["drought","r1","any","destroy","town","city","add","blight","threshold","each","nolan","nasser"]},[Ui.DryWoodExplodesInSmolderingSplinters]:{image:ax.MinorPowersDryWoodExplodesInSmolderingSplinters,keywords:["dry","wood","explodes","in","smoldering","splinters","r0","wetland","energy","power","fear","damage","jorge","ramos"]},[Ui.EerieNoisesAndMovingTrees]:{image:ax.UniquePowersEyesEerieNoisesAndMovingTrees,keywords:["eerie","noises","and","moving","trees","r1","any","fear","push","explorer","town","moro","rogers"]},[Ui.ElementalAegis]:{image:ax.UniquePowersSerpentElementalAegis,keywords:["elemental","aegis","r0","any","defend","presence","all","jorge","ramos"]},[Ui.ElementalBoon]:{image:ax.MinorPowersElementalBoon,keywords:["elemental","boon","any","spirit","element","sun","moon","fire","air","water","earth","plant","animal","moro","rogers"]},[Ui.ElementalTeachings]:{image:ax.UniquePowersMemoryElementalTeachings,keywords:["elemental","teachings","any","spirit","element","gain","joshua","wright"]},[Ui.ElusiveAmbushes]:{image:ax.MinorPowersElusiveAmbushes,keywords:["elusive","ambushes","r1","dahan","damage","defend","nolan","nasser"]},[Ui.EmergeFromTheDreadNightWind]:{image:ax.UniquePowersDarknessEmergeFromTheDreadNightWind,keywords:["emerge","from","the","dread","night","wind","any","add","move","incarna","fear","invader","abduct","push","explorer","town","dahan","david","markiwsky"]},[Ui.EncircleTheUnsuspectingPrey]:{image:ax.AspectsEncircle1,bounds:{width:600,height:538},keywords:["encircle","the","unsuspecting","prey","r1","any","gather","beasts","damage"]},[Ui.EncompassingWard]:{image:ax.MinorPowersEncompassingWard,keywords:["encompassing","ward","any","defend","presence","jorge","ramos"]},[Ui.EnticingAndLullingDreams]:{image:ax.AspectsEnticing,bounds:{width:600,height:613},keywords:["enticing","and","lulling","dreams","r1","any","invader","dahan","damage","gather","explorer","town"]},[Ui.EnticingSplendor]:{image:ax.MinorPowersEnticingSplendor,keywords:["enticing","splendor","r0","blight","gather","explorer","town","dahan","joshua","wright"]},[Ui.EntrancingApparitions]:{image:ax.MinorPowersEntrancingApparitions,keywords:["entrancing","apparitions","r1","any","defend","invader","gather","explorer","moro","rogers"]},[Ui.EntrapTheForcesOfCorruption]:{image:ax.MinorPowersEntrapTheForcesOfCorruption,keywords:["entrap","the","forces","of","corruption","r1","any","gather","blight","isolate","cascade","shawn","daley"]},[Ui.EntwinedPower]:{image:ax.MajorPowersEntwinedPower,keywords:["entwined","power","another","spirit","presence","card","energy","threshold","gain","joshua","wright"]},[Ui.EntwineTheFatesOfAll]:{image:ax.UniquePowersRootsEntwineTheFatesOfAll,keywords:["entwine","the","fates","of","all","any","spirit","defend","presence","aalaa","yassin"]},[Ui.EvermultiplyingSwarm]:{image:ax.UniquePowersManyMindsEvermultiplyingSwarm,keywords:["evermultiplying","swarm","r0","any","add","beast","moro","rogers"]},[Ui.ExaltationOfEchoedSteps]:{image:ax.UniquePowersEarthquakesExaltationOfEchoedSteps,keywords:["exaltation","of","echoed","steps","another","spirit","push","presence","bring","explorer","town","dahan","emily","hancock"]},[Ui.ExaltationOfGraspingRoots]:{image:ax.UniquePowersBehemothExaltationOfGraspingRoots,keywords:["exaltation","of","grasping","roots","another","spirit","add","wilds","david","markiwsky"]},[Ui.ExaltationOfMoltenStone]:{image:ax.UniquePowersVolcanoExaltationOfMoltenStone,keywords:["exaltation","of","molten","stone","another","spirit","energy","range","mountain","element","gain","power","r1","moro","rogers"]},[Ui.ExaltationOfTangledGrowth]:{image:ax.UniquePowersMudExaltationOfTangledGrowth,keywords:["exaltation","of","tangled","growth","another","spirit","energy","gain","power","card","moro","rogers"]},[Ui.ExaltationOfTheIncandescentSky]:{image:ax.MajorPowersExaltationOfTheIncandescentSky,keywords:["exaltation","of","the","incandescent","sky","another","spirit","power","card","damage","badlands","threshold","skip","invader","fear","kat","guevara"]},[Ui.ExaltationOfTheStormWind]:{image:ax.AspectsWind,bounds:{width:840,height:600},keywords:["exaltation","of","the","stormwind","another","spirit","range","power","push","explorer","repeat"]},[Ui.ExaltationOfTheTransformingFlame]:{image:ax.AspectsTransforming1,bounds:{width:600,height:623},keywords:["exaltation","of","the","transforming","flame","another","spirit","forget","power","card","any","pay","energy","replace","blight","badlands","explorer","beasts"]},[Ui.ExhaleConfusionAndDelirium]:{image:ax.UniquePowersVoiceExhaleConfusionAndDelirium,keywords:["exhale","confusion","and","delirium","r1","strife","fear","skip","invader","ravage","emily","hancock"]},[Ui.FavorOfTheSunAndStarlitDark]:{image:ax.MinorPowersFavorOfTheSunAndStarlitDark,keywords:["favor","of","the","sun","and","starlit","dark","r1","sacred","any","defend","push","blight","threshold","fear","moro","rogers"]},[Ui.FavorsCalledDue]:{image:ax.UniquePowersShadowsFavorsCalledDue,keywords:["favors","called","due","r1","any","gather","dahan","fear","invader","nolan","nasser"]},[Ui.FavorsOfStoryAndSeason]:{image:ax.UniquePowersHearthVigilFavorsOfStoryAndSeason,keywords:["favors","of","story","and","season","another","spirit","gather","dahan","energy","reclaim","power","card","aalaa","yassin"]},[Ui.FerociousRampage]:{image:ax.UniquePowersTeethFerociousRampage,keywords:["ferocious","rampage","r0","any","fear","damage","explorer","town","moro","rogers"]},[Ui.FetidBreathSpreadsInfection]:{image:ax.UniquePowersVengeanceFetidBreathSpreadsInfection,keywords:["fetid","breath","spreads","infection","r1","invader","fear","disease","add","damon","westenhofer"]},[Ui.FieldsChokedWithGrowth]:{image:ax.UniquePowersGreenFieldsChokedWithGrowth,keywords:["fields","choked","with","growth","r1","any","push","town","dahan","jorge","ramos"]},[Ui.FieryVengeance]:{image:ax.UniquePowersVengeanceFieryVengeance,keywords:["fiery","vengeance","any","spirit","remove","destroy","presence","fear","damage","blight","badland","power","damon","westenhofer"]},[Ui.FireAndFlood]:{image:ax.MajorPowersFireAndFlood,keywords:["fire","and","flood","r1","r2","sacred","two","lands","damage","threshold","each","jason","behnke"]},[Ui.FireInTheSky]:{image:ax.MinorPowersFireInTheSky,keywords:["fire","in","the","sky","r1","sacred","any","fear","strife","add","moro","rogers"]},[Ui.FlamesFury]:{image:ax.UniquePowersWildfireFlamesFury,keywords:["flames","fury","any","spirit","energy","damage","power","invader","gain","nolan","nasser"]},[Ui.FlashFloods]:{image:ax.UniquePowersRiverFlashFloods,keywords:["flash","floods","r1","any","damage","coastal","nolan","nasser"]},[Ui.Flashfires]:{image:ax.UniquePowersWildfireFlashfires,keywords:["flashfires","r1","any","fear","damage","threshold","power","nolan","nasser"]},[Ui.FleshrotFever]:{image:ax.MinorPowersFleshrotFever,keywords:["fleshrot","fever","r1","jungle","sand","fear","disease","add","joshua","wright"]},[Ui.FlockingRedTalons]:{image:ax.MajorPowersFlockingRedTalons,keywords:["flocking","red","talons","r3","any","wetland","add","beast","move","range","invader","damage","push","explorer","town","threshold","repeat","power","kat","guevara"]},[Ui.FlowDownriverBlowDownwind]:{image:ax.MinorPowersFlowDownriverBlowDownwind,keywords:["flow","downriver","blow","downwind","r2","sacred","any","push","blight","explorer","town","joshua","wright"]},[Ui.FlowLikeWaterReachLikeAir]:{image:ax.MajorPowersFlowLikeWaterReachLikeAir,keywords:["flow","like","water","reach","air","any","spirit","range","push","presence","explorer","town","dahan","threshold","city","blight","power","r2","joshua","wright"]},[Ui.FlowingAndSilentFormsDartBy]:{image:ax.UniquePowersShroudFlowingAndSilentFormsDartBy,keywords:["flowing","and","silent","forms","dart","by","r0","any","fear","invader","presence","destroy","push","sacred","gather","emily","hancock"]},[Ui.FocusTheLandsAnguish]:{image:ax.MajorPowersFocusTheLandsAnguish,keywords:["focus","the","lands","anguish","r1","any","destroy","town","city","fear","gather","blight","damage","threshold","power","moro","rogers"]},[Ui.FocusTheSunsRays]:{image:ax.UniquePowersGazeFocusTheSunsRays,keywords:["focus","the","suns","rays","r2","sacred","any","damage","dahan","move","presence","badland","agnieszka","dabrowiecka"]},[Ui.ForestsOfLivingObsidian]:{image:ax.MajorPowersForestsOfLivingObsidian,keywords:["forests","of","living","obsidian","r0","any","add","badland","push","all","dahan","damage","each","invader","sacred","repeat","threshold","lucas","durham"]},[Ui.FoulVaporsAndFetidMuck]:{image:ax.UniquePowersMudFoulVaporsAndFetidMuck,keywords:["foul","vapors","and","fetid","muck","r2","sacred","invader","fear","push","explorer","moro","rogers"]},[Ui.FoundationsSinkIntoMud]:{image:ax.UniquePowersDownpourFoundationsSinkIntoMud,keywords:["foundations","sink","into","mud","r0","any","damage","town","wetland","city","each","damon","westenhofer"]},[Ui.FragmentsOfYesteryear]:{image:ax.MajorPowersFragmentsOfYesteryear,keywords:["fragments","of","yesteryear","r0","any","remove","piece","add","setup","threshold","dahan","presence","blight","david","markiwsky"]},[Ui.FrightfulKeening]:{image:ax.UniquePowersVoiceFrightfulKeening,keywords:["frightful","keening","incarna","push","invader","fear","strife","emily","hancock"]},[Ui.GatherTheScatteredLightOfStars]:{image:ax.UniquePowersStarlightGatherTheScatteredLightOfStars,keywords:["gather","the","scattered","light","of","stars","yourself","reclaim","card","forget","power","emily","hancock"]},[Ui.GiftOfAbundance]:{image:ax.UniquePowersDownpourGiftOfAbundance,keywords:["gift","of","abundance","another","spirit","energy","repeat","power","card","destroy","presence","wetland","add","gain","damon","westenhofer"]},[Ui.GiftOfConstancy]:{image:ax.MinorPowersGiftOfConstancy,keywords:["gift","of","constancy","any","spirit","energy","reclaim","power","card","gain","moro","rogers"]},[Ui.GiftOfFlowingPower]:{image:ax.UniquePowersSerpentGiftOfFlowingPower,keywords:["gift","of","flowing","power","another","spirit","energy","card","element","gain","jorge","ramos"]},[Ui.GiftOfFuriousMight]:{image:ax.UniquePowersTeethGiftOfFuriousMight,keywords:["gift","of","furious","might","another","spirit","damage","power","invader","each","moro","rogers"]},[Ui.GiftOfLivingEnergy]:{image:ax.MinorPowersGiftOfLivingEnergy,keywords:["gift","of","living","energy","any","spirit","sacred","gain","nolan","nasser"]},[Ui.GiftOfNaturesConnection]:{image:ax.MinorPowersGiftOfNaturesConnection,keywords:["gift","of","natures","connection","any","spirit","energy","element","gain","moro","rogers"]},[Ui.GiftOfPower]:{image:ax.MinorPowersGiftOfPower,keywords:["gift","of","power","any","spirit","gain","card","joshua","wright"]},[Ui.GiftOfProliferation]:{image:ax.UniquePowersGreenGiftOfProliferation,keywords:["gift","of","proliferation","another","spirit","add","presence","r1","jorge","ramos"]},[Ui.GiftOfSearingHeat]:{image:ax.UniquePowersHeatGiftOfSearingHeat,keywords:["gift","of","searing","heat","another","spirit","gain","energy","damage","lucas","durham"]},[Ui.GiftOfSeismicEnergy]:{image:ax.UniquePowersEarthquakesGiftOfSeismicEnergy,keywords:["gift","of","seismic","energy","any","spirit","power","card","impending","emily","hancock"]},[Ui.GiftOfThePrimordialDeeps]:{image:ax.UniquePowersSerpentGiftOfThePrimordialDeeps,keywords:["gift","of","the","primordial","deeps","another","spirit","power","element","gain","jorge","ramos"]},[Ui.GiftOfTheSparkingSky]:{image:ax.AspectsSparking,bounds:{width:600,height:623},keywords:["gift","of","the","sparking","sky","spirit","any","power","damage","invader","play"]},[Ui.GiftOfTheSunlitAir]:{image:ax.UniquePowersWhirlwindGiftOfTheSunlitAir,keywords:["gift","of","the","sunlit","air","any","spirit","range","power","energy","gain","all","lucas","durham"]},[Ui.GiftOfTheUntamedWild]:{image:ax.UniquePowersLureGiftOfTheUntamedWild,keywords:["gift","of","the","untamed","wild","any","spirit","presence","disease","add","replace","joshua","wright"]},[Ui.GiftOfTwinnedDays]:{image:ax.MinorPowersGiftOfTwinnedDays,keywords:["gift","of","twinned","days","another","spirit","repeat","power","card","joshua","wright"]},[Ui.GiftOfWindspedSteps]:{image:ax.UniquePowersWhirlwindGiftOfWindspedSteps,keywords:["gift","of","windsped","steps","any","spirit","power","push","gather","gain","energy","lucas","durham"]},[Ui.GnawingRootbiters]:{image:ax.MinorPowersGnawingRootbiters,keywords:["gnawing","rootbiters","r1","any","push","town","moro","rogers"]},[Ui.GoldsAllure]:{image:ax.MinorPowersGoldsAllure,keywords:["golds","allure","r1","mountain","gather","explorer","town","add","strife","lucas","durham"]},[Ui.GrantHatredARavenousForm]:{image:ax.MajorPowersGrantHatredARavenousForm,keywords:["grant","hatred","a","ravenous","form","r1","any","each","strife","blight","fear","damage","destroy","invader","add","beast","threshold","nolan","nasser"]},[Ui.GraspingTide]:{image:ax.UniquePowersOceanGraspingTide,keywords:["grasping","tide","r1","coastal","fear","defend","joshua","wright"]},[Ui.GrowthThroughSacrifice]:{image:ax.MinorPowersGrowthThroughSacrifice,keywords:["growth","through","sacrifice","any","spirit","destroy","presence","remove","blight","add","threshold","sun","lucas","durham"]},[Ui.GuardTheHealingLand]:{image:ax.UniquePowersEarthGuardTheHealingLand,keywords:["guard","the","healing","land","r1","sacred","any","remove","blight","defend","sydni","kruger"]},[Ui.GuardianSerpents]:{image:ax.MinorPowersGuardianSerpents,keywords:["guardian","serpents","any","spirit","add","beast","sacred","defend","moro","rogers"]},[Ui.GuideTheWayOnFeatheredWings]:{image:ax.UniquePowersManyMindsGuideTheWayOnFeatheredWings,keywords:["guide","the","way","on","feathered","wings","r1","any","beast","move","dahan","moro","rogers"]},[Ui.HarbingersOfTheLightning]:{image:ax.UniquePowersLightningHarbingersOfTheLightning,keywords:["harbingers","of","the","lightning","r1","any","push","dahan","fear","town","city","rocky","hammer"]},[Ui.HauntedByPrimalMemories]:{image:ax.MinorPowersHauntedByPrimalMemories,keywords:["haunted","by","primal","memories","r2","sacred","invader","fear","defend","beast","kat","guevara"]},[Ui.HazardsSpreadAcrossTheIsland]:{image:ax.MinorPowersHazardsSpreadAcrossTheIsland,keywords:["hazards","spread","across","the","island","r2","sacred","any","badland","beast","disease","strife","wild","energy","add","kat","guevara"]},[Ui.HerdTowardsTheLurkingMaw]:{image:ax.UniquePowersTeethHerdTowardsTheLurkingMaw,keywords:["herd","towards","the","lurking","maw","r0","any","fear","gather","explorer","town","moro","rogers"]},[Ui.HereThereBeMonsters]:{image:ax.MinorPowersHereThereBeMonsters,keywords:["here","there","be","monsters","r0","inland","push","explorer","town","dahan","fear","beast","joshua","wright"]},[Ui.ImbueWithNourishingVitality]:{image:ax.AspectsNourishing,bounds:{width:840,height:600},keywords:["imbue","with","nourishing","vitality","sacred","r1","blight","gather","dahan","add","vitality","health"]},[Ui.ImpenetrableTanglesOfGreenery]:{image:ax.AspectsTangles,bounds:{width:600,height:630},keywords:["impenetrable","tangles","of","greenery","r0","any","add","wilds","push","explorer","isolate","downgrade","city"]},[Ui.ImpersonateAuthority]:{image:ax.UniquePowersTricksterImpersonateAuthority,keywords:["impersonate","authority","r1","any","add","strife","joshua","wright"]},[Ui.InciteTheMob]:{image:ax.UniquePowersTricksterInciteTheMob,keywords:["incite","the","mob","r1","invader","strife","damage","fear","destroy","each","joshua","wright"]},[Ui.IndomitableClaim]:{image:ax.MajorPowersIndomitableClaim,keywords:["indomitable","claim","r1","any","add","presence","defend","threshold","fear","invader","skip","all","jorge","ramos"]},[Ui.InfestationOfVenomousSpiders]:{image:ax.MajorPowersInfestationOfVenomousSpiders,keywords:["infestation","of","venomous","spiders","r2","sacred","invader","add","beast","gather","fear","skip","threshold","damage","each","after","lucas","durham"]},[Ui.InfestedAquifers]:{image:ax.MinorPowersInfestedAquifers,keywords:["infested","aquifers","r0","any","disease","invader","damage","mountain","wetland","fear","each","nolan","nasser"]},[Ui.InfiniteVitality]:{image:ax.MajorPowersInfiniteVitality,keywords:["infinite","vitality","r1","sacred","any","dahan","health","blight","threshold","destroy","remove","damage","joshua","wright"]},[Ui.InflameTheFiresOfLife]:{image:ax.MinorPowersInflameTheFiresOfLife,keywords:["inflame","the","fires","of","life","r1","sacred","any","add","disease","fear","strife","threshold","kat","birmelin"]},[Ui.InsatiableHungerOfTheSwarm]:{image:ax.MajorPowersInsatiableHungerOfTheSwarm,keywords:["insatiable","hunger","of","the","swarm","r2","sacred","any","add","blight","beast","gather","each","fear","damage","invader","dahan","threshold","repeat","lucas","durham"]},[Ui.InspireAWindingDance]:{image:ax.UniquePowersEarthquakesInspireAWindingDance,keywords:["inspire","a","winding","dance","r1","invader","push","explorer","town","gather","dahan","emily","hancock"]},[Ui.InspireTheReleaseOfStolenLands]:{image:ax.MajorPowersInspireTheReleaseOfStolenLands,keywords:["inspire","the","release","of","stolen","lands","r2","blight","gather","dahan","remove","health","invader","threshold","explorer","town","city","agnieszka","dabrowiecka"]},[Ui.InstrumentsOfTheirOwnRuin]:{image:ax.MajorPowersInstrumentsOfTheirOwnRuin,keywords:["instruments","of","their","own","ruin","r1","sacred","any","add","strife","each","invader","damage","threshold","ravage","dahan","lucas","durham"]},[Ui.IntractableThicketsAndThorns]:{image:ax.UniquePowersMudIntractableThicketsAndThorns,keywords:["intractable","thickets","and","thorns","r1","any","fear","defend","moro","rogers"]},[Ui.IrresistibleCall]:{image:ax.MajorPowersIrresistibleCall,keywords:["irresistible","call","r2","sacred","inland","gather","town","dahan","beast","explorer","threshold","skip","isolate","lucas","durham"]},[Ui.JaggedShardsPushFromTheEarth]:{image:ax.UniquePowersStoneJaggedShardsPushFromTheEarth,keywords:["shards","push","from","the","earth","r1","any","badland","dahan","add","moro","rogers"]},[Ui.LandOfHauntsAndEmbers]:{image:ax.MinorPowersLandOfHauntsAndEmbers,keywords:["land","of","haunts","and","embers","r2","any","fear","push","explorer","town","blight","add","jorge","ramos"]},[Ui.LavaFlows]:{image:ax.UniquePowersVolcanoLavaFlows,keywords:["lava","flows","r1","any","badland","wild","damage","add","moro","rogers"]},[Ui.LeadTheWarriorsToBattle]:{image:ax.AspectsWarrior,bounds:{width:600,height:673},keywords:["lead","the","warriors","to","battle","incarna","dahan","fear","town","city","damage"]},[Ui.LightningsBoon]:{image:ax.UniquePowersLightningLightningsBoon,keywords:["lightnings","boon","any","spirit","power","rocky","hammer"]},[Ui.LightningTornSkiesIncitePandemonium]:{image:ax.AspectsPandemonium,bounds:{width:840,height:600},keywords:["lightning","town","skies","incite","pandemonium","r1","sacred","invader","fear","strife"]},[Ui.LikeCallsToLike]:{image:ax.MinorPowersLikeCallsToLike,keywords:["like","calls","to","r1","any","explorer","gather","town","dahan","blight","beast","kat","guevara"]},[Ui.LureOfTheUnknown]:{image:ax.MinorPowersLureOfTheUnknown,keywords:["lure","of","the","unknown","r2","invader","gather","explorer","town","lucas","durham"]},[Ui.ManifestIncarnation]:{image:ax.MajorPowersManifestIncarnation,keywords:["manifest","incarnation","r0","city","fear","town","presence","remove","explorer","invader","ravage","threshold","damage","each","moro","rogers"]},[Ui.ManifestationOfPowerAndGlory]:{image:ax.UniquePowersThunderspeakerManifestationOfPowerAndGlory,keywords:["manifestation","of","power","and","glory","r0","dahan","fear","damage","presence","loic","belliau"]},[Ui.MantleOfDread]:{image:ax.UniquePowersShadowsMantleOfDread,keywords:["mantle","of","dread","any","spirit","fear","push","explorer","town","presence","nolan","nasser"]},[Ui.MarkTerritoryWithScarsAndTeeth]:{image:ax.UniquePowersTeethMarkTerritoryWithScarsAndTeeth,keywords:["mark","territory","with","scars","and","teeth","r0","any","defend","fear","invader","push","dahan","moro","rogers"]},[Ui.MeltEarthIntoQuicksand]:{image:ax.MajorPowersMeltEarthIntoQuicksand,keywords:["melt","earth","into","quicksand","r1","sand","wetland","fear","damage","isolate","invader","dahan","move","destroy","threshold","badland","wild","after","lucas","durham"]},[Ui.MesmerizedTranquility]:{image:ax.MinorPowersMesmerizedTranquility,keywords:["mesmerized","tranquility","r0","any","isolate","invader","damage","each","kat","guevara"]},[Ui.MistsOfOblivion]:{image:ax.MajorPowersMistsOfOblivion,keywords:["mists","of","oblivion","r3","any","fear","town","city","destroy","damage","each","invader","threshold","power","nolan","nasser"]},[Ui.MysteriousAbductions]:{image:ax.UniquePowersEyesMysteriousAbductions,keywords:["mysterious","abductions","r0","any","fear","damage","moro","rogers"]},[Ui.NaturesResilience]:{image:ax.MinorPowersNaturesResilience,keywords:["natures","resilience","r1","sacred","any","defend","water","threshold","remove","blight","joshua","wright"]},[Ui.OfferPassageBetweenWorlds]:{image:ax.UniquePowersFinderOfferPassageBetweenWorlds,keywords:["offer","passage","between","worlds","r1","any","move","dahan","destroy","moro","rogers"]},[Ui.OpenShiftingWaterways]:{image:ax.UniquePowersMudOpenShiftingWaterways,keywords:["open","shifting","waterways","r1","any","gather","dahan","fear","damage","moro","rogers"]},[Ui.OverenthusiasticArson]:{image:ax.UniquePowersTricksterOverenthusiasticArson,sound:dx.SpiritWildfire,keywords:["overenthusiastic","arson","r1","any","destroy","town","power","fear","damage","blight","add","element","joshua","wright"]},[Ui.OvergrowInANight]:{image:ax.UniquePowersGreenOvergrowInANight,keywords:["overgrow","in","a","night","r1","any","presence","invader","fear","add","jorge","ramos"]},[Ui.PactOfTheJoinedHunt]:{image:ax.MinorPowersPactOfTheJoinedHunt,keywords:["pact","of","the","joined","hunt","any","spirit","gather","dahan","damage","jorge","ramos"]},[Ui.ParalyzingFright]:{image:ax.MajorPowersParalyzingFright,keywords:["paralyzing","fright","r1","sacred","any","fear","skip","threshold","all","invader","joshua","wright"]},[Ui.PathsTiedByNature]:{image:ax.UniquePowersFinderPathsTiedByNature,keywords:["paths","tied","by","nature","r1","any","move","invader","dahan","presence","beast","terrain","moro","rogers"]},[Ui.PeaceOfTheNighttimeSky]:{image:ax.UniquePowersStarlightPeaceOfTheNighttimeSky,keywords:["peace","of","the","nighttime","sky","r1","sacred","any","terror","invader","skip","ravage","repeat","forget","power","card","emily","hancock"]},[Ui.PentupCalamity]:{image:ax.MajorPowersPentupCalamity,keywords:["pentup","calamity","r2","any","add","disease","strife","remove","beast","wild","fear","damage","threshold","each","joshua","wright"]},[Ui.PerilsOfTheDeepestIsland]:{image:ax.UniquePowersLurePerilsOfTheDeepestIsland,keywords:["perils","of","the","deepest","island","r0","inland","fear","badland","beast","dahan","add","push","joshua","wright"]},[Ui.PillarOfLivingFlame]:{image:ax.MajorPowersPillarOfLivingFlame,keywords:["pillar","of","living","flame","r2","sacred","any","fear","damage","jungle","wetland","blight","threshold","jorge","ramos"]},[Ui.Plaguebearers]:{image:ax.UniquePowersVengeancePlaguebearers,keywords:["plaguebearers","r2","disease","fear","push","explorer","town","dahan","each","invader","jorge","ramos"]},[Ui.PlagueShipsSailToDistantPorts]:{image:ax.MajorPowersPlagueShipsSailToDistantPorts,keywords:["plague","ships","sail","to","distant","ports","r1","coastal","city","fear","disease","board","threshold","damage","pay","energy","card","add","kat","guevara"]},[Ui.PlowsShatterOnRockyGround]:{image:ax.UniquePowersStonePlowsShatterOnRockyGround,keywords:["plows","shatter","on","rocky","ground","r1","any","damage","town","city","push","destroy","each","moro","rogers"]},[Ui.PoisonedDew]:{image:ax.MinorPowersPoisonedDew,keywords:["poisoned","dew","r1","any","destroy","explorer","jungle","wetland","all","cari","corene"]},[Ui.PoisonedLand]:{image:ax.MajorPowersPoisonedLand,keywords:["poisoned","land","r1","any","fear","damage","blight","destroy","all","dahan","threshold","each","add","nolan","nasser"]},[Ui.PortentsOfDisaster]:{image:ax.MinorPowersPortentsOfDisaster,keywords:["portents","of","disaster","r1","sacred","invader","fear","destroy","nolan","nasser"]},[Ui.PourTimeSideways]:{image:ax.UniquePowersFracturedPourTimeSideways,keywords:["pour","time","sideways","spirit","yourself","time","move","presence","lucas","durham"]},[Ui.Powerstorm]:{image:ax.MajorPowersPowerstorm,keywords:["powerstorm","any","spirit","energy","repeat","power","card","threshold","nolan","nasser"]},[Ui.PredatoryNightmares]:{image:ax.UniquePowersBringerPredatoryNightmares,keywords:["predatory","nightmares","r1","sacred","invader","damage","push","dahan","destroy","fear","shane","tyree"]},[Ui.PreyOnTheBuilders]:{image:ax.UniquePowersFangsPreyOnTheBuilders,keywords:["prey","on","the","builders","r0","any","gather","beast","build","moro","rogers"]},[Ui.PromisesOfProtection]:{image:ax.MinorPowersPromisesOfProtection,keywords:["promises","of","protection","r2","sacred","any","gather","dahan","health","lucas","durham"]},[Ui.ProwlingPanthers]:{image:ax.MinorPowersProwlingPanthers,keywords:["prowling","panthers","r1","mountain","jungle","fear","beast","destroy","explorer","town","add","moro","rogers"]},[Ui.PullBeneathTheHungryEarth]:{image:ax.MinorPowersPullBeneathTheHungryEarth,keywords:["pull","beneath","the","hungry","earth","r1","any","presence","fear","damage","sand","wetland","nolan","nasser"]},[Ui.PurifyingFlame]:{image:ax.MinorPowersPurifyingFlame,keywords:["purifying","flame","r1","sacred","any","damage","blight","mountain","sand","remove","jorge","ramos"]},[Ui.PursueWithScratchesPecksAndStings]:{image:ax.UniquePowersManyMindsPursueWithScratchesPecksAndStings,keywords:["pursue","with","scratches","pecks","and","stings","r2","beast","fear","push","explorer","town","each","moro","rogers"]},[Ui.PyroclasticBombardment]:{image:ax.UniquePowersVolcanoPyroclasticBombardment,keywords:["pyroclastic","bombardment","r2","sacred","any","damage","town","city","dahan","each","moro","rogers"]},[Ui.PyroclasticFlow]:{image:ax.MajorPowersPyroclasticFlow,keywords:["pyroclastic","flow","r1","mountain","any","damage","destroy","all","explorer","jungle","wetland","blight","threshold","wild","add","joshua","wright"]},[Ui.RavagedUndergrowthSlithersBackToLife]:{image:ax.MajorPowersRavagedUndergrowthSlithersBackToLife,keywords:["ravaged","undergrowth","slithers","back","to","life","r1","sacred","blight","replace","wilds","fear","damage","push","threshold","add","explorer","town","kat","guevara"]},[Ui.RumblingEarthquakes]:{image:ax.MajorPowersRumblingEarthquakes,keywords:["rumbling","earthquakes","r1","sacred","power","ignore","health","bonuses","fear","damage","town","city","threshold","emily","hancock"]},[Ui.QuickenTheEarthsStruggles]:{image:ax.MinorPowersQuickenTheEarthsStruggles,keywords:["quicken","the","earths","struggles","r0","sacred","any","damage","town","city","defend","each","lucas","durham"]},[Ui.RadiantAndHallowedGrove]:{image:ax.UniquePowersRootsRadiantAndHallowedGrove,keywords:["radiant","and","hallowed","grove","incarna","fear","invader","remove","health","terror","aalaa","yassin"]},[Ui.RadiatingTremors]:{image:ax.UniquePowersEarthquakesRadiatingTremors,keywords:["radiating","tremors","r0","any","damage","push","quake","emily","hancock"]},[Ui.RagingStorm]:{image:ax.UniquePowersLightningRagingStorm,keywords:["raging","storm","r1","any","damage","each","invader","rocky","hammer"]},[Ui.RainOfAsh]:{image:ax.UniquePowersVolcanoRainOfAsh,keywords:["rain","of","ash","r1","any","fear","invader","push","dahan","explorer","town","presence","moro","rogers"]},[Ui.RainOfBlood]:{image:ax.MinorPowersRainOfBlood,keywords:["rain","of","blood","r1","sacred","invader","fear","town","city","kat","birmelin"]},[Ui.RazorsharpUndergrowth]:{image:ax.MinorPowersRazorsharpUndergrowth,keywords:["razorsharp","undergrowth","r0","blight","destroy","explorer","dahan","add","wild","defend","cari","corene"]},[Ui.ReachFromTheInfiniteDarkness]:{image:ax.UniquePowersDarknessReachFromTheInfiniteDarkness,keywords:["reach","from","the","infinite","darkness","yourself","abduct","presence","each","move","endless","dark","range","power","david","markiwsky"]},[Ui.ReachingGrasp]:{image:ax.MinorPowersReachingGrasp,keywords:["reaching","grasp","any","spirit","range","r2","nolan","nasser"]},[Ui.ReclaimedByTheDeeps]:{image:ax.AspectsDeeps2,bounds:{width:600,height:538},keywords:["reclaimed","by","the","deeps","r1","damage","town","city","drown","explorer","dahan","push","ocean","repeat","presence"]},[Ui.RegrowFromRoots]:{image:ax.UniquePowersKeeperRegrowFromRoots,keywords:["regrow","from","roots","r1","jungle","wetland","blight","remove","joshua","wright"]},[Ui.RenewingBoon]:{image:ax.MinorPowersRenewingBoon,keywords:["renewing","boon","another","spirit","presence","remove","blight","add","joshua","wright"]},[Ui.RenewingRain]:{image:ax.MinorPowersRenewingRain,keywords:["renewing","rain","r1","sacred","any","jungle","sand","remove","blight","threshold","wild","nolan","nasser"]},[Ui.ResoundingFootfallsSowDismay]:{image:ax.UniquePowersEarthquakesResoundingFootfallsSowDismay,keywords:["resounding","footfalls","sow","dismay","r0","any","fear","add","quake","skip","ravage","emily","hancock"]},[Ui.RitesOfTheLandsRejection]:{image:ax.MinorPowersRitesOfTheLandsRejection,keywords:["rites","of","the","lands","rejection","r2","sacred","dahan","skip","build","fear","town","city","push","joshua","wright"]},[Ui.RitualsOfDestruction]:{image:ax.UniquePowersEarthRitualsOfDestruction,keywords:["rituals","of","destruction","r1","sacred","dahan","damage","fear","sydni","kruger"]},[Ui.RiversBounty]:{image:ax.UniquePowersRiverRiversBounty,keywords:["rivers","bounty","r0","any","gather","dahan","energy","nolan","nasser"]},[Ui.RoilingBogAndSnaggingThorn]:{image:ax.MinorPowersRoilingBogAndSnaggingThorn,keywords:["roiling","bog","and","snagging","thorn","r1","sacred","any","fear","isolate","defend","dahan","move","ravage","damage","kat","guevara"]},[Ui.RouseTheTreesAndStones]:{image:ax.MinorPowersRouseTheTreesAndStones,keywords:["rouse","the","trees","and","stones","r1","sacred","blight","damage","push","explorer","jorge","ramos"]},[Ui.RumblingsPortendAGreaterQuake]:{image:ax.UniquePowersEarthquakesRumblingsPortendAGreaterQuake,keywords:["rumblings","portend","a","greater","quake","r1","any","impending","power","card","fear","add","quake","push","dahan","emily","hancock"]},[Ui.SacrosanctWilderness]:{image:ax.UniquePowersKeeperSacrosanctWilderness,keywords:["sacrosanct","wilderness","r1","blight","dahan","damage","wild","add","joshua","wright"]},[Ui.SapTheStrengthOfMultitudes]:{image:ax.MinorPowersSapTheStrengthOfMultitudes,keywords:["sap","the","strength","of","multitudes","r0","any","defend","threshold","air","range","loic","belliau"]},[Ui.SavageMawbeasts]:{image:ax.MinorPowersSavageMawbeasts,keywords:["savage","mawbeasts","r1","sacred","any","jungle","wetland","fear","damage","threshold","cari","corene"]},[Ui.SavageTransformation]:{image:ax.MajorPowersSavageTransformation,keywords:["savage","transformation","r1","any","fear","replace","explorer","beast","threshold","loic","belliau"]},[Ui.ScarredAndStonyLand]:{image:ax.UniquePowersStoneScarredAndStonyLand,keywords:["scarred","and","stony","land","r1","sacred","blight","damage","badland","remove","add","moro","rogers"]},[Ui.ScatterToTheWinds]:{image:ax.UniquePowersWhirlwindScatterToTheWinds,keywords:["scatter","to","the","winds","r2","any","explorer","town","dahan","push","lucas","durham"]},[Ui.ScourTheLand]:{image:ax.MinorPowersScourTheLand,keywords:["scour","the","land","r2","sacred","any","destroy","town","all","explorer","add","blight","threshold","joshua","wright"]},[Ui.ScreamDiseaseIntoTheWind]:{image:ax.MinorPowersScreamDiseaseIntoTheWind,keywords:["scream","disease","into","the","wind","another","spirit","range","all","power","r1","moro","rogers"]},[Ui.SeaMonsters]:{image:ax.MajorPowersSeaMonsters,keywords:["sea","monsters","r1","coastal","wetland","beast","fear","blight","threshold","repeat","add","damage","invader","moro","rogers"]},[Ui.SearAngerIntoTheWildLands]:{image:ax.MinorPowersSearAngerIntoTheWildLands,keywords:["sear","anger","into","the","wild","lands","r1","any","add","badland","fear","damage","invader","kat","guevara"]},[Ui.SetThemOnAnEvertwistingTrail]:{image:ax.MinorPowersSetThemOnAnEvertwistingTrail,keywords:["set","them","on","an","evertwisting","trail","r1","sacred","any","gather","push","explorer","isolate","joshua","wright"]},[Ui.SettleIntoHuntinggrounds]:{image:ax.MajorPowersSettleIntoHuntinggrounds,keywords:["settle","into","huntinggrounds","yourself","presence","badland","beast","move","threshold","fear","damage","moro","rogers"]},[Ui.ShadowsOfTheBurningForest]:{image:ax.MinorPowersShadowsOfTheBurningForest,keywords:["shadows","of","the","burning","forest","r0","invader","fear","mountain","jungle","push","explorer","town","nolan","nasser"]},[Ui.ShapeTheSelfAnew]:{image:ax.UniquePowersStarlightShapeTheSelfAnew,keywords:["shape","the","self","anew","yourself","power","forget","card","energy","threshold","gain","emily","hancock"]},[Ui.ShareMentorshipAndExpertise]:{image:ax.AspectsMentor1,bounds:{width:600,height:623},keywords:["share","mentorship","and","expertise","another","power","card","spirit","play","repeat","prepare","element","marker"]},[Ui.ShareSecretsOfSurvival]:{image:ax.UniquePowersMemoryShareSecretsOfSurvival,keywords:["share","secrets","of","survival","r1","sacred","any","dahan","destroy","gather","threshold","each","joshua","wright"]},[Ui.ShatterHomesteads]:{image:ax.UniquePowersLightningShatterHomesteads,keywords:["shatter","homesteads","r2","sacred","any","fear","destroy","town","rocky","hammer"]},[Ui.SkiesHeraldTheSeasonOfReturn]:{image:ax.MinorPowersSkiesHeraldTheSeasonOfReturn,keywords:["skies","herald","the","season","of","return","r1","any","presence","gather","dahan","push","blight","add","destroy","joshua","wright"]},[Ui.SkyStretchesToShore]:{image:ax.MinorPowersSkyStretchesToShore,keywords:["sky","stretches","to","shore","any","spirit","range","coastal","gain","power","r3","joshua","wright"]},[Ui.SleepAndNeverWaken]:{image:ax.MajorPowersSleepAndNeverWaken,keywords:["sleep","and","never","waken","r2","sand","any","invader","skip","all","fear","explorer","power","remove","threshold","joshua","wright"]},[Ui.SmiteTheLandWithFulmination]:{image:ax.UniquePowersLightningSmiteTheLandWithFulmination,keywords:["smite","the","land","with","fulmination","r1","any","damage","add","badlands","david","markiwsky"]},[Ui.SmotheringInfestation]:{image:ax.MajorPowersSmotheringInfestation,keywords:["smothering","infestation","r0","any","add","disease","jungle","wetland","fear","damage","threshold","each","invader","joshua","wright"]},[Ui.SocietyDissolvesAtTheBeckoningHeart]:{image:ax.AspectsLair1,bounds:{width:600,height:596},keywords:["society","dissolves","at","the","beckoning","heart","explorer","dahan","downgrade","town","city","incarna","range"]},[Ui.SoftlyBeckonEverInward]:{image:ax.UniquePowersLureSoftlyBeckonEverInward,keywords:["softly","beckon","ever","inward","r0","inland","gather","explorer","town","beast","dahan","joshua","wright"]},[Ui.SolidifyEchoesOfMajestyPast]:{image:ax.MajorPowersSolidifyEchoesOfMajestyPast,keywords:["solidify","echoes","of","majesty","past","any","spirit","defend","add","broken","skip","invader","threshold","reclaim","power","card","pay","emily","hancock"]},[Ui.SongOfSanctity]:{image:ax.MinorPowersSongOfSanctity,keywords:["song","of","sanctity","r1","mountain","jungle","explorer","push","all","remove","blight","nolan","nasser"]},[Ui.SpillBitternessIntoTheEarth]:{image:ax.MajorPowersSpillBitternessIntoTheEarth,keywords:["spill","bitterness","into","the","earth","r0","any","damage","add","badland","strife","blight","threshold","each","invader","moro","rogers"]},[Ui.SpurOnWithWordsOfFire]:{image:ax.MinorPowersSpurOnWithWordsOfFire,keywords:["spur","on","with","words","of","fire","any","spirit","energy","power","card","gain","nolan","nasser"]},[Ui.SteamVents]:{image:ax.MinorPowersSteamVents,keywords:["steam","vents","r0","any","destroy","explorer","threshold","town","joshua","wright"]},[Ui.StemTheFlowOfFreshWater]:{image:ax.UniquePowersGreenStemTheFlowOfFreshWater,keywords:["stem","the","flow","of","fresh","water","r1","sacred","any","damage","town","city","mountain","sand","jorge","ramos"]},[Ui.StingingSandstorm]:{image:ax.UniquePowersHeatStingingSandstorm,keywords:["stinging","sandstorm","r1","any","gather","presence","fear","damage","sacred","invader","health","lucas","durham"]},[Ui.Stormswath]:{image:ax.MajorPowersStormswath,keywords:["stormswath","r1","sacred","any","fear","damage","each","invader","threshold","range","destroy","town","jorge","ramos"]},[Ui.StranglingFirevine]:{image:ax.MajorPowersStranglingFirevine,keywords:["strangling","firevine","r1","sand","any","destroy","all","explorer","add","wild","damage","threshold","nolan","nasser"]},[Ui.StrengthOfTheWakingIsland]:{image:ax.AspectsLocus2,bounds:{width:600,height:655},keywords:["strength","of","the","waking","island","yourself","spirit","repeat","incarna","power","card","absorbed","presence","ignore","range","add","vitality","incarna","vitality","blight"]},[Ui.StrikeLowWithSuddenFevers]:{image:ax.UniquePowersVengeanceStrikeLowWithSuddenFevers,keywords:["strike","low","with","sudden","fevers","r1","disease","fear","invader","skip","ravage","damon","westenhofer"]},[Ui.StrongAndConstantCurrents]:{image:ax.MinorPowersStrongAndConstantCurrents,keywords:["strong","and","constant","currents","r0","coastal","push","explorer","town","move","dahan","threshold","jorge","ramos"]},[Ui.StubbornSolidity]:{image:ax.UniquePowersStoneStubbornSolidity,keywords:["stubborn","solidity","r1","any","defend","dahan","destroy","remove","replace","damage","moro","rogers"]},[Ui.StudyTheInvadersFears]:{image:ax.UniquePowersMemoryStudyTheInvadersFears,keywords:["study","the","invaders","fears","r0","town","city","fear","card","joshua","wright"]},[Ui.SuckingOoze]:{image:ax.MinorPowersSuckingOoze,keywords:["sucking","ooze","r1","sand","wetland","fear","invader","isolate","moro","rogers"]},[Ui.SuddenAmbush]:{image:ax.UniquePowersThunderspeakerSuddenAmbush,keywords:["sudden","ambush","r1","any","gather","dahan","destroy","explorer","each","loic","belliau"]},[Ui.SunsetsFireFlowsAcrossTheLand]:{image:ax.MinorPowersSunsetsFireFlowsAcrossTheLand,keywords:["sunsets","fire","flows","across","the","land","r1","sacred","any","fear","damage","energy","moro","rogers"]},[Ui.SurgingLahar]:{image:ax.UniquePowersBehemothSurgingLahar,keywords:["surging","lahar","r1","sacred","any","damage","presence","badlands","david","markiwsky"]},[Ui.SurroundedByTheDahan]:{image:ax.UniquePowersHearthVigilSurroundedByTheDahan,keywords:["surrounded","by","the","dahan","r0","dahan","fear","invader","town","city","isolate","aalaa","yassin"]},[Ui.SwallowTheLanddwellers]:{image:ax.UniquePowersOceanSwallowTheLanddwellers,keywords:["swallow","the","landdwellers","r0","coastal","drown","explorer","town","dahan","joshua","wright"]},[Ui.SwallowedByTheEndlessDark]:{image:ax.UniquePowersDarknessSwallowedByTheEndlessDark,keywords:["swallowed","by","the","endless","dark","r0","invader","fear","abduct","explorer","threshold","david","markiwsky"]},[Ui.SwallowedByTheWilderness]:{image:ax.UniquePowersLureSwallowedByTheWilderness,keywords:["swallowed","by","the","wilderness","r0","inland","fear","damage","beast","disease","wild","badland","joshua","wright"]},[Ui.SwarmingWasps]:{image:ax.MinorPowersSwarmingWasps,keywords:["swarming","wasps","r1","blight","add","beast","push","explorer","joshua","wright"]},[Ui.SweepIntoTheSea]:{image:ax.MajorPowersSweepIntoTheSea,keywords:["sweep","into","the","sea","r2","any","push","all","explorer","town","ocean","coastal","destroy","threshold","repeat","joshua","wright"]},[Ui.SwelteringExhaustion]:{image:ax.UniquePowersHeatSwelteringExhaustion,keywords:["sweltering","exhaustion","r2","sacred","any","fear","skip","ravage","build","lucas","durham"]},[Ui.TalonsOfLightning]:{image:ax.MajorPowersTalonsOfLightning,keywords:["talons","of","lightning","r1","mountain","wetland","fear","damage","threshold","destroy","town","range","r3","power","nolan","nasser"]},[Ui.TeemingRivers]:{image:ax.MinorPowersTeemingRivers,keywords:["teeming","rivers","r2","sacred","mountain","wetland","blight","beast","remove","add","lucas","durham"]},[Ui.TeethGleamFromDarkness]:{image:ax.UniquePowersFangsTeethGleamFromDarkness,keywords:["teeth","gleam","from","darkness","r1","jungle","blight","fear","beast","add","moro","rogers"]},[Ui.TempestOfLeavesAndBranches]:{image:ax.UniquePowersWhirlwindTempestOfLeavesAndBranches,keywords:["tempest","of","leaves","and","branches","r1","sacred","any","invader","damage","each","lucas","durham"]},[Ui.TerrifyingChase]:{image:ax.UniquePowersFangsTerrifyingChase,keywords:["terrifying","chase","r0","any","push","explorer","town","dahan","beast","invader","fear","moro","rogers"]},[Ui.TerrifyingNightmares]:{image:ax.MajorPowersTerrifyingNightmares,keywords:["terrifying","nightmares","r2","any","fear","push","explorer","town","threshold","loic","belliau"]},[Ui.TerrifyingRampage]:{image:ax.UniquePowersBehemothTerrifyingRampage,keywords:["terrifying","rampage","r1","any","fear","invader","skip","ravage","damage","push","dahan","david","markiwsky"]},[Ui.TerritorialStrife]:{image:ax.MinorPowersTerritorialStrife,keywords:["territorial","strife","r1","city","damage","explorer","town","add","kat","guevara"]},[Ui.TerrorOfTheHunted]:{image:ax.UniquePowersDarknessTerrorOfTheHunted,keywords:["terror","of","the","hunted","r0","invader","beast","fear","strife","terror","endless","dark","escape","david","markiwsky"]},[Ui.TerrorTurnsToMadness]:{image:ax.MinorPowersTerrorTurnsToMadness,keywords:["terror","turns","to","madness","r2","invader","fear","strife","shawn","daley"]},[Ui.TheFogClosesIn]:{image:ax.UniquePowersShroudTheFogClosesIn,keywords:["the","fog","closes","in","r0","any","presence","damage","invader","push","dahan","each","emily","hancock"]},[Ui.TheJungleHungers]:{image:ax.MajorPowersTheJungleHungers,keywords:["the","jungle","hungers","r1","any","destroy","all","explorer","town","dahan","threshold","city","joshua","wright"]},[Ui.TheLandThrashesInFuriousPain]:{image:ax.MajorPowersTheLandThrashesInFuriousPain,keywords:["the","land","thrashes","in","furious","pain","r2","blight","damage","threshold","repeat","nolan","nasser"]},[Ui.ThePastReturnsAgain]:{image:ax.UniquePowersFracturedThePastReturnsAgain,keywords:["the","past","returns","again","time","energy","invader","stage","card","swap","lucas","durham"]},[Ui.TheShoreSeethesWithHatred]:{image:ax.MinorPowersTheShoreSeethesWithHatred,keywords:["the","shore","seethes","with","hatred","r1","coastal","fear","badland","wild","add","joshua","wright"]},[Ui.TheTreesAndStonesSpeakOfWar]:{image:ax.MajorPowersTheTreesAndStonesSpeakOfWar,keywords:["the","trees","and","stones","speak","of","war","r1","dahan","each","damage","defend","threshold","push","graham","stermberg"]},[Ui.TheWoundedWildTurnsOnItsAssailants]:{image:ax.MajorPowersTheWoundedWildTurnsOnItsAssailants,keywords:["the","wounded","wild","turns","on","its","assailants","r1","blight","add","badland","beast","damage","threshold","fear","invader","destroy","joshua","wright"]},[Ui.ThicketsEruptWithEveryTouchOfBreeze]:{image:ax.MajorPowersThicketsEruptWithEveryTouchOfBreeze,keywords:["thickets","erupt","with","every","touch","of","breeze","r2","sacred","inland","damage","wild","remove","blight","threshold","fear","add","jorge","ramos"]},[Ui.ThreateningFlames]:{image:ax.UniquePowersWildfireThreateningFlames,keywords:["threatening","flames","r0","blight","invader","fear","push","explorer","town","terror","presence","nolan","nasser"]},[Ui.ThrivingChokefungus]:{image:ax.MinorPowersThrivingChokefungus,keywords:["thriving","chokefungus","r1","sacred","jungle","wetland","add","disease","badland","jorge","ramos"]},[Ui.TidalBoon]:{image:ax.UniquePowersOceanTidalBoon,keywords:["tidal","boon","another","spirit","energy","push","town","dahan","coastal","drown","gain","joshua","wright"]},[Ui.TigersHunting]:{image:ax.MajorPowersTigersHunting,keywords:["tigers","hunting","r1","jungle","blight","fear","add","beast","gather","damage","push","threshold","cari","corene"]},[Ui.TooNearTheJungle]:{image:ax.UniquePowersFangsTooNearTheJungle,keywords:["too","near","the","jungle","r1","any","fear","destroy","explorer","moro","rogers"]},[Ui.TormentingRotflies]:{image:ax.MinorPowersTormentingRotflies,keywords:["tormenting","rotflies","r2","sand","wetland","add","disease","invader","fear","blight","kat","birmelin"]},[Ui.ToweringWrath]:{image:ax.UniquePowersKeeperToweringWrath,keywords:["towering","wrath","r1","sacred","any","fear","damage","destroy","dahan","each","joshua","wright"]},[Ui.TransformToAMurderousDarkness]:{image:ax.MajorPowersTransformToAMurderousDarkness,keywords:["transform","to","a","murderous","darkness","any","spirit","sacred","replace","presence","badland","fear","damage","threshold","each","push","moro","rogers"]},[Ui.TransformativeSacrifice]:{image:ax.MajorPowersTransformativeSacrifice,keywords:["transformative","sacrifice","spirit","any","remove","presence","gain","power","card","threshold","kat","guevara"]},[Ui.TravelersBoon]:{image:ax.UniquePowersFinderTravelersBoon,keywords:["travelers","boon","another","spirit","presence","invader","dahan","beast","move","moro","rogers"]},[Ui.TreacherousWaterways]:{image:ax.MinorPowersTreacherousWaterways,keywords:["treacherous","waterways","r1","mountain","wetland","add","wild","push","explorer","kat","guevara"]},[Ui.TreesRadiateCelestialBrilliance]:{image:ax.MajorPowersTreesRadiateCelestialBrilliance,keywords:["trees","radiate","celestial","brilliance","r1","jungle","blight","fear","defend","invader","skip","build","threshold","damage","shawn","daley"]},[Ui.Tsunami]:{image:ax.MajorPowersTsunami,keywords:["tsunami","r2","sacred","coastal","fear","damage","destroy","dahan","threshold","board","each","jason","behnke"]},[Ui.TurmoilsTouch]:{image:ax.UniquePowersVoiceTurmoilsTouch,keywords:["turmoil","touch","another","spirit","pay","energy","power","card","take","emily","hancock"]},[Ui.TwilightFogBringsMadness]:{image:ax.MinorPowersTwilightFogBringsMadness,keywords:["twilight","fog","brings","madness","r1","any","add","strife","dahan","damage","each","push","loic","belliau"]},[Ui.TwistedFlowersMurmurUltimatums]:{image:ax.MajorPowersTwistedFlowersMurmurUltimatums,keywords:["twisted","flowers","murmur","ultimatums","r1","sacred","invader","fear","strife","terror","remove","threshold","damage","add","kat","birmelin"]},[Ui.TwistPerceptions]:{image:ax.UniquePowersVoiceTwistPerceptions,keywords:["twist","perception","r1","invader","add","strife","push","explorer","town","emily","hancock"]},[Ui.UnbearableDeluge]:{image:ax.UniquePowersDownpourUnbearableDeluge,keywords:["unbearable","deluge","r0","any","fear","push","dahan","defend","wetland","isolate","damon","westenhofer"]},[Ui.UnbearableGaze]:{image:ax.UniquePowersGazeUnbearableGaze,keywords:["unbearable","gaze","r1","any","sacred","fear","push","explorer","town","agnieszka","dabrowiecka"]},[Ui.UnbelievableRegrowth]:{image:ax.AspectsRegrowth,bounds:{width:600,height:630},keywords:["unbelievable","regrowth","r1","jungle","wetlands","terrain","add","broken"]},[Ui.UncannyMelting]:{image:ax.MinorPowersUncannyMelting,keywords:["uncanny","melting","r1","sacred","any","sand","wetland","remove","blight","invader","joshua","wright"]},[Ui.UnearthABeastOfWrathfulStone]:{image:ax.MajorPowersUnearthABeastOfWrathfulStone,keywords:["unearth","a","beast","of","wrathful","stone","r1","sacred","invader","ravage","build","fear","damage","add","push","threshold","mark","david","markiwsky"]},[Ui.UnexpectedTigers]:{image:ax.UniquePowersTricksterUnexpectedTigers,sound:dx.SpiritFangs,keywords:["unexpected","tigers","r1","any","fear","invader","gather","beast","push","explorer","add","joshua","wright"]},[Ui.UnleashATorrentOfTheSelfsOwnEssence]:{image:ax.MajorPowersUnleashATorrentOfTheSelfsOwnEssence,keywords:["unleash","a","torrent","of","the","selfs","own","essence","yourself","energy","forget","power","card","damage","r0","threshold","gain","moro","rogers"]},[Ui.UnlockTheGatesOfDeepestPower]:{image:ax.MajorPowersUnlockTheGatesOfDeepestPower,keywords:["unlock","the","gates","of","deepest","power","any","spirit","gain","forget","card","threshold","joshua","wright"]},[Ui.UnnervingPall]:{image:ax.UniquePowersShroudUnnervingPall,keywords:["unnerving","pall","r0","invader","fear","damage","ravage","defend","presence","power","emily","hancock"]},[Ui.UnquenchableFlames]:{image:ax.MinorPowersUnquenchableFlames,keywords:["unquenchable","flames","r2","sacred","any","fear","damage","town","city","invader","heal","threshold","badland","kat","guevara"]},[Ui.UnrelentingGrowth]:{image:ax.MajorPowersUnrelentingGrowth,keywords:["unrelenting","growth","any","spirit","presence","wild","r1","threshold","add","remove","blight","power","card","gain","joshua","wright"]},[Ui.UtterACurseOfDreadAndBone]:{image:ax.MajorPowersUtterACurseOfDreadAndBone,keywords:["utter","a","curse","of","dread","and","bone","r1","sacred","any","blight","add","badland","disease","strife","fear","damage","threshold","each","joshua","wright"]},[Ui.VanishSoftlyAwayForgottenByAll]:{image:ax.MajorPowersVanishSoftlyAwayForgottenByAll,keywords:["vanish","softly","away","by","all","r2","any","remove","invader","explorer","town","threshold","damage","power","joshua","wright"]},[Ui.VeilTheNightsHunt]:{image:ax.MinorPowersVeilTheNightsHunt,keywords:["veil","the","nights","hunt","r2","dahan","damage","invader","push","each","loic","belliau"]},[Ui.VengeanceOfTheDead]:{image:ax.MajorPowersVengeanceOfTheDead,keywords:["vengeance","of","the","dead","r3","any","fear","each","destroy","town","city","dahan","threshold","damage","kat","birmelin"]},[Ui.VigorOfTheBreakingDawn]:{image:ax.MajorPowersVigorOfTheBreakingDawn,keywords:["vigor","of","the","breaking","dawn","r2","dahan","damage","threshold","push","loic","belliau"]},[Ui.VisionsOfFieryDoom]:{image:ax.MinorPowersVisionsOfFieryDoom,keywords:["visions","of","fiery","doom","r0","any","fear","push","explorer","town","threshold","lucas","durham"]},[Ui.VoiceOfCommand]:{image:ax.MajorPowersVoiceOfCommand,keywords:["voice","of","command","r1","sacred","dahan","damage","explorer","town","city","defend","ravage","threshold","gather","lucas","durham"]},[Ui.VoiceOfThunder]:{image:ax.UniquePowersThunderspeakerVoiceOfThunder,keywords:["voice","of","thunder","r1","any","push","dahan","invader","fear","loic","belliau"]},[Ui.VolcanicEruption]:{image:ax.MajorPowersVolcanicEruption,keywords:["volcanic","eruption","r1","mountain","any","fear","damage","destroy","all","dahan","beast","blight","threshold","invader","wild","add","each","nolan","nasser"]},[Ui.VoraciousGrowth]:{image:ax.MinorPowersVoraciousGrowth,keywords:["voracious","growth","r1","sacred","jungle","wetland","damage","remove","blight","cari","corene"]},[Ui.WallsOfRockAndThorn]:{image:ax.MajorPowersWallsOfRockAndThorn,keywords:["walls","of","rock","and","thorn","r2","sacred","mountain","jungle","damage","defend","add","wild","isolate","threshold","badland","joshua","wright"]},[Ui.WardTheShores]:{image:ax.ScenarioPowersWardTheShores,keywords:["ward","the","shores","r0","sacred","pay","energy","blight","town","city","add","warding","pattern","graham","stermberg"]},[Ui.WashAway]:{image:ax.UniquePowersRiverWashAway,keywords:["wash","away","r1","any","push","explorer","town","nolan","nasser"]},[Ui.WaterEatsAwayTheDeepRootsOfEarth]:{image:ax.AspectsDeeps1,bounds:{width:600,height:538},keywords:["water","eats","away","the","deep","roots","of","earth","r1","coastal","deeps"]},[Ui.WaysOfShoreAndHeartland]:{image:ax.UniquePowersFinderWaysOfShoreAndHeartland,keywords:["ways","of","shore","and","heartland","r2","any","push","invader","dahan","presence","beast","coastal","inland","moro","rogers"]},[Ui.WeaveTogetherTheFabricOfPlace]:{image:ax.MajorPowersWeaveTogetherTheFabricOfPlace,keywords:["weave","together","the","fabric","of","place","r1","sacred","any","threshold","isolate","invader","fear","remove","move","joshua","wright"]},[Ui.WeepForWhatIsLost]:{image:ax.MinorPowersWeepForWhatIsLost,keywords:["weep","for","what","is","lost","r1","blight","fear","invader","push","explorer","town","kat","guevara"]},[Ui.WhisperedGuidanceThroughTheNight]:{image:ax.UniquePowersEyesWhisperedGuidanceThroughTheNight,keywords:["whispered","guidance","through","the","night","r1","jungle","any","gather","dahan","invader","fear","moro","rogers"]},[Ui.WindsOfRustAndAtrophy]:{image:ax.MajorPowersWindsOfRustAndAtrophy,keywords:["winds","of","rust","and","atrophy","r3","sacred","any","fear","defend","replace","city","town","explorer","threshold","repeat","joshua","wright"]},[Ui.WitherBodiesScarStones]:{image:ax.UniquePowersGazeWitherBodiesScarStones,keywords:["wither","bodies","scar","stones","r2","any","sacred","damage","badlands","agnieszka","dabrowiecka"]},[Ui.WordsOfWarning]:{image:ax.UniquePowersThunderspeakerWordsOfWarning,keywords:["words","of","warning","r1","dahan","defend","ravage","damage","invader","loic","belliau"]},[Ui.WrackWithPainAndGrief]:{image:ax.UniquePowersWoundedWrackWithPainAndGrief,keywords:["wrack","with","pain","and","grief","r1","invader","blight","fear","push","explorer","town","nolan","nasser"]},[Ui.WrapInWingsOfSunlight]:{image:ax.MajorPowersWrapInWingsOfSunlight,keywords:["wrap","in","wings","of","sunlight","r0","any","move","dahan","defend","threshold","gather","loic","belliau"]}},cx={[gn.Base]:{name:"Base Game",keywords:["base"]},[gn.BranchAndClaw]:{name:"Branch and Claw",image:ax.SetBranchAndClaw,keywords:["branch","claw","expansion"]},[gn.JaggedEarth]:{name:"Jagged Earth",image:ax.SetJaggedEarth,keywords:["jagged","expansion"]},[gn.FeatherAndFlame]:{name:"Feather and Flame",image:ax.SetFeatherAndFlame,keywords:["feather","flame","expansion"]},[gn.HorizonsOfSpiritIsland]:{name:"Horizons of Spirit Island",image:ax.SetHorizonsOfSpiritIsland,keywords:["horizons","expansion"]},[gn.NatureIncarnate]:{name:"Nature Incarnate",image:ax.SetNatureIncarnate,keywords:["nature","incarnate","expansion"]}};var hx;!function(e){e.Black="Black",e.Blue="Blue",e.Green="Green",e.Orange="Orange",e.Purple="Purple",e.Red="Red",e.White="White",e.Yellow="Yellow"}(hx||(hx={}));const ux={keywords:["behemoth","ember"],frontPanelImage:ax.SpiritsBehemoth,backPanelImage:ax.SpiritbacksBehemoth,portraitImage:ax.PortraitsBehemoth,icon:nx.SpiritBehemoth,presenceImage:ax.PresenceBehemoth,primaryColor:hx.Orange,secondaryColor:hx.Red,sound:dx.SpiritBehemoth,incarnaImages:[{point:{x:400,y:520},appImage:ax.TokensIncarnaBehemoth},{point:{x:520,y:520},appImage:ax.TokensIncarnaBehemothEmpowered}],specialRulesAreas:[{x1:30,y1:751,x2:599,y2:891},{x1:30,y1:903,x2:599,y2:1038},{x1:1073,y1:744,x2:1565,y2:858}],growthAreas:[[{x1:620,y1:52,x2:743,y2:181},{x1:746,y1:52,x2:860,y2:181}],[{x1:890,y1:30,x2:1048,y2:181},{x1:1051,y1:30,x2:1148,y2:181}],[{x1:1176,y1:30,x2:1273,y2:181},{x1:1275,y1:30,x2:1369,y2:181},{x1:1372,y1:30,x2:1475,y2:181},{x1:1478,y1:30,x2:1589,y2:181}],[{x1:629,y1:215,x2:753,y2:352},{x1:756,y1:215,x2:885,y2:352},{x1:888,y1:215,x2:1033,y2:352}]],trackPoints:[{x:701,y:459},{x:830,y:459},{x:957,y:459},{x:1084,y:459},{x:1211,y:459},{x:1338,y:459},{x:1465,y:459},{x:706,y:614},{x:831,y:614},{x:958,y:614},{x:1085,y:614},{x:1212,y:614},{x:1339,y:614}],innates:[{power:Ui.SmashStompAndFlatten,area:{x1:634,y1:709,x2:1592,y2:1058},highlights:[[{x1:783,y1:854,x2:892,y2:880}],[{x1:845,y1:908,x2:1044,y2:934}],[{x1:848,y1:966,x2:1002,y2:992}],[{x1:848,y1:1023,x2:1119,y2:1048}]]}]},gx={keywords:["bringer","dreams","nightmare","nightmares"],frontPanelImage:ax.SpiritsBringer,backPanelImage:ax.SpiritbacksBringer,portraitImage:ax.PortraitsBringer,icon:nx.SpiritBringer,presenceImage:ax.PresenceBringer,primaryColor:hx.Purple,secondaryColor:hx.Red,sound:dx.SpiritBringer,growthAreas:[[{x1:629,y1:47,x2:749,y2:207},{x1:751,y1:47,x2:841,y2:207}],[{x1:863,y1:47,x2:961,y2:207},{x1:964,y1:47,x2:1087,y2:207}],[{x1:1108,y1:47,x2:1195,y2:207},{x1:1198,y1:47,x2:1321,y2:207}],[{x1:1341,y1:47,x2:1488,y2:207},{x1:1491,y1:47,x2:1596,y2:207}]],trackPoints:[{x:708,y:320},{x:830,y:320},{x:949,y:320},{x:1068,y:320},{x:1187,y:320},{x:1306,y:320},{x:1425,y:320},{x:708,y:492},{x:830,y:492},{x:949,y:492},{x:1068,y:492},{x:1187,y:492},{x:1306,y:492}],innates:[{power:Ui.SpiritsMayYetDream,area:{x1:640,y1:610,x2:1100,y2:989},highlights:[[{x1:782,y1:766,x2:1066,y2:792},{x1:782,y1:792,x2:1047,y2:818},{x1:782,y1:818,x2:1053,y2:844},{x1:782,y1:844,x2:924,y2:870}],[{x1:715,y1:899,x2:1044,y2:925},{x1:715,y1:925,x2:873,y2:951}]]},{power:Ui.NightTerrors,area:{x1:1103,y1:610,x2:1592,y2:989},highlights:[[{x1:1272,y1:769,x2:1335,y2:795}],[{x1:1342,y1:832,x2:1411,y2:858}],[{x1:1342,y1:896,x2:1411,y2:922}]]},{power:Ui.EnticingAndLullingDreams,aspect:{aspect:Qo.Enticing,index:0},area:{x1:30,y1:29,x2:570,y2:586},highlights:[[{x1:168,y1:246,x2:476,y2:278},{x1:168,y1:278,x2:526,y2:310}],[{x1:168,y1:334,x2:428,y2:364}],[{x1:236,y1:388,x2:538,y2:423},{x1:236,y1:423,x2:524,y2:458},{x1:236,y1:458,x2:294,y2:493}],[{x1:236,y1:514,x2:504,y2:544}]]}]},fx={keywords:["darkness","breath","spine"],frontPanelImage:ax.SpiritsDarkness,backPanelImage:ax.SpiritbacksDarkness,portraitImage:ax.PortraitsDarkness,icon:nx.SpiritDarkness,presenceImage:ax.PresenceDarkness,primaryColor:hx.Purple,secondaryColor:hx.Red,sound:dx.SpiritDarkness,incarnaImages:[{point:{x:400,y:430},appImage:ax.TokensIncarnaDarkness},{point:{x:520,y:430},appImage:ax.TokensIncarnaDarknessEmpowered}],growthAreas:[[{x1:616,y1:48,x2:763,y2:176},{x1:766,y1:48,x2:904,y2:176},{x1:907,y1:48,x2:1074,y2:176},{x1:1077,y1:48,x2:1186,y2:176}],[{x1:1214,y1:48,x2:1328,y2:176},{x1:1331,y1:48,x2:1477,y2:176},{x1:1480,y1:48,x2:1589,y2:176}],[{x1:626,y1:185,x2:766,y2:314},{x1:769,y1:185,x2:916,y2:314},{x1:919,y1:185,x2:1027,y2:314},{x1:1030,y1:185,x2:1186,y2:314}]],trackPoints:[{x:701,y:413},{x:825,y:413},{x:954,y:413},{x:1081,y:413},{x:1205,y:413},{x:1337,y:413},{x:1460,y:413},{x:704,y:583},{x:825,y:583},{x:954,y:583},{x:1081,y:583},{x:1207,y:583},{x:1337,y:583}],innates:[{power:Ui.LeaveATrailOfDeathlySilence,area:{x1:627,y1:695,x2:1113,y2:1061},highlights:[[{x1:767,y1:836,x2:1112,y2:862}],[{x1:836,y1:874,x2:995,y2:900},{x1:836,y1:900,x2:1005,y2:926}],[{x1:844,y1:939,x2:1005,y2:965},{x1:844,y1:965,x2:1015,y2:991}],[{x1:841,y1:1003,x2:1087,y2:1029},{x1:841,y1:1029,x2:1065,y2:1055}]]},{power:Ui.LostInTheEndlessDark,area:{x1:1116,y1:695,x2:1592,y2:1061},highlights:[[{x1:1267,y1:838,x2:1513,y2:864},{x1:1267,y1:864,x2:1557,y2:890},{x1:1267,y1:890,x2:1533,y2:916}],[{x1:1267,y1:929,x2:1513,y2:955},{x1:1267,y1:955,x2:1521,y2:981},{x1:1267,y1:981,x2:1357,y2:1007}],[{x1:1267,y1:1018,x2:1363,y2:1044}]]}]},yx={keywords:["downpour"],frontPanelImage:ax.SpiritsDownpour,backPanelImage:ax.SpiritbacksDownpour,portraitImage:ax.PortraitsDownpour,icon:nx.SpiritDownpour,presenceImage:ax.PresenceDownpour,primaryColor:hx.Blue,secondaryColor:hx.Purple,sound:dx.SpiritDownpour,growthAreas:[[{x1:655,y1:50,x2:781,y2:178},{x1:784,y1:50,x2:888,y2:178},{x1:891,y1:50,x2:1050,y2:178}],[{x1:1075,y1:50,x2:1212,y2:178},{x1:1215,y1:50,x2:1349,y2:178},{x1:1352,y1:50,x2:1468,y2:178},{x1:1471,y1:50,x2:1586,y2:178}],[{x1:655,y1:190,x2:778,y2:309},{x1:781,y1:190,x2:921,y2:309},{x1:924,y1:190,x2:1055,y2:309}]],trackPoints:[{x:675,y:412},{x:801,y:412},{x:923,y:412},{x:1045,y:412},{x:1167,y:412},{x:1289,y:412},{x:1411,y:412},{x:1533,y:412},{x:678,y:557},{x:800,y:557},{x:922,y:557},{x:1044,y:557},{x:1166,y:557},{x:1288,y:557}],innates:[{power:Ui.RainAndMudSuppressConflict,area:{x1:633,y1:656,x2:1110,y2:1047},highlights:[[{x1:788,y1:787,x2:1088,y2:813},{x1:788,y1:813,x2:1053,y2:839},{x1:788,y1:839,x2:1085,y2:865}],[{x1:788,y1:877,x2:1091,y2:903},{x1:788,y1:903,x2:1053,y2:929},{x1:788,y1:929,x2:921,y2:955}],[{x1:867,y1:971,x2:1047,y2:997},{x1:867,y1:997,x2:1072,y2:1023},{x1:864,y1:1023,x2:1028,y2:1049}]]},{power:Ui.WaterNourishesLifesGrowth,area:{x1:1113,y1:656,x2:1592,y2:1047},highlights:[[{x1:1282,y1:787,x2:1582,y2:813},{x1:1282,y1:813,x2:1569,y2:839},{x1:1282,y1:839,x2:1455,y2:865}],[{x1:1358,y1:876,x2:1572,y2:902},{x1:1358,y1:902,x2:1462,y2:928}],[{x1:1358,y1:942,x2:1547,y2:968},{x1:1358,y1:968,x2:1557,y2:994},{x1:1358,y1:994,x2:1563,y2:1020},{x1:1358,y1:1020,x2:1408,y2:1046}]]}]},px={keywords:["earth","vital","strength"],frontPanelImage:ax.SpiritsEarth,backPanelImage:ax.SpiritbacksEarth,portraitImage:ax.PortraitsEarth,icon:nx.SpiritEarth,presenceImage:ax.PresenceEarth,primaryColor:hx.Yellow,secondaryColor:hx.Green,sound:dx.SpiritEarth,growthAreas:[[{x1:656,y1:49,x2:789,y2:192},{x1:792,y1:49,x2:928,y2:192}],[{x1:972,y1:49,x2:1105,y2:192},{x1:1108,y1:49,x2:1263,y2:192}],[{x1:1306,y1:49,x2:1450,y2:192},{x1:1453,y1:49,x2:1576,y2:192}]],trackPoints:[{x:706,y:315},{x:828,y:315},{x:946,y:315},{x:1064,y:315},{x:1182,y:315},{x:1300,y:315},{x:711,y:488},{x:828,y:488},{x:946,y:488},{x:1064,y:488},{x:1182,y:488},{x:1300,y:488}],innates:[{power:Ui.GiftOfStrength,area:{x1:638,y1:602,x2:1592,y2:988},highlights:[[{x1:858,y1:752,x2:1534,y2:778},{x1:858,y1:778,x2:936,y2:804}],[{x1:858,y1:845,x2:1221,y2:871}],[{x1:861,y1:911,x2:1224,y2:937}]]},{power:Ui.EarthMovesWithVigorAndMight,aspect:{aspect:Qo.Might,index:0},area:{x1:26,y1:28,x2:816,y2:573},highlights:[[{x1:114,y1:230,x2:771,y2:264},{x1:112,y1:264,x2:731,y2:297},{x1:112,y1:297,x2:336,y2:329}],[{x1:188,y1:345,x2:771,y2:380},{x1:188,y1:380,x2:375,y2:409}],[{x1:188,y1:425,x2:771,y2:460},{x1:188,y1:460,x2:375,y2:492}],[{x1:188,y1:508,x2:405,y2:542}]]},{power:Ui.ImbueWithNourishingVitality,aspect:{aspect:Qo.Nourishing,index:0},area:{x1:28,y1:216,x2:810,y2:544},highlights:[[{x1:170,y1:350,x2:370,y2:381}],[{x1:170,y1:408,x2:270,y2:439}],[{x1:230,y1:456,x2:708,y2:490},{x1:230,y1:490,x2:690,y2:522}]]}]},wx={keywords:["earthquakes","dances"],frontPanelImage:ax.SpiritsEarthquakes,backPanelImage:ax.SpiritbacksEarthquakes,portraitImage:ax.PortraitsEarthquakes,icon:nx.SpiritEarthquakes,presenceImage:ax.PresenceEarthquakes,primaryColor:hx.Red,secondaryColor:hx.Purple,sound:dx.SpiritEarthquakes,growthAreas:[[{x1:613,y1:52,x2:723,y2:194},{x1:726,y1:52,x2:913,y2:194}],[{x1:941,y1:52,x2:1029,y2:194},{x1:1032,y1:52,x2:1152,y2:194}],[{x1:1179,y1:52,x2:1298,y2:194},{x1:1301,y1:52,x2:1477,y2:194},{x1:1480,y1:52,x2:1585,y2:194}]],trackPoints:[{x:701,y:316},{x:825,y:316},{x:954,y:316},{x:1081,y:316},{x:1207,y:316},{x:1334,y:316},{x:1463,y:316},{x:699,y:481},{x:825,y:481},{x:954,y:481},{x:1078,y:481},{x:1207,y:481},{x:1334,y:481},{x:1462,y:481}],innates:[{power:Ui.LandCreaksWithTension,area:{x1:630,y1:615,x2:1077,y2:1037},highlights:[[{x1:695,y1:757,x2:1073,y2:783},{x1:695,y1:783,x2:798,y2:809}],[{x1:755,y1:823,x2:1068,y2:849},{x1:755,y1:849,x2:834,y2:875}],[{x1:758,y1:890,x2:1084,y2:916},{x1:758,y1:916,x2:911,y2:942}],[{x1:762,y1:956,x2:1076,y2:982},{x1:762,y1:982,x2:842,y2:1008}]]},{power:Ui.EarthShuddersBuildingsFall,area:{x1:1080,y1:615,x2:1592,y2:1037},highlights:[[{x1:1289,y1:801,x2:1590,y2:827}],[{x1:1289,y1:857,x2:1574,y2:883},{x1:1289,y1:883,x2:1596,y2:909},{x1:1289,y1:909,x2:1460,y2:935}],[{x1:1289,y1:956,x2:1540,y2:982},{x1:1289,y1:982,x2:1558,y2:1008},{x1:1289,y1:1008,x2:1358,y2:1034}]]}]},mx={keywords:["eyes"],frontPanelImage:ax.SpiritsEyes,backPanelImage:ax.SpiritbacksEyes,portraitImage:ax.PortraitsEyes,icon:nx.SpiritEyes,presenceImage:ax.PresenceEyes,primaryColor:hx.Green,secondaryColor:hx.Purple,sound:dx.SpiritEyes,growthAreas:[[{x1:649,y1:55,x2:775,y2:191},{x1:778,y1:55,x2:876,y2:191},{x1:879,y1:55,x2:979,y2:191}],[{x1:1007,y1:55,x2:1116,y2:191},{x1:1119,y1:55,x2:1221,y2:191}],[{x1:1248,y1:55,x2:1345,y2:191},{x1:1348,y1:55,x2:1457,y2:191},{x1:1460,y1:55,x2:1567,y2:191}]],trackPoints:[{x:704,y:315},{x:832,y:315},{x:953,y:315},{x:1074,y:315},{x:1195,y:315},{x:1316,y:315},{x:1437,y:315},{x:707,y:476},{x:830,y:476},{x:952,y:476},{x:1074,y:476},{x:1193,y:476},{x:1318,y:476}],innates:[{power:Ui.MischiefAndSabotage,area:{x1:635,y1:578,x2:1592,y2:996},highlights:[[{x1:786,y1:722,x2:960,y2:748}],[{x1:795,y1:784,x2:1046,y2:810}],[{x1:869,y1:842,x2:1125,y2:868}],[{x1:869,y1:900,x2:1125,y2:926}]]}]},vx={keywords:["fangs","sharp","leaves"],frontPanelImage:ax.SpiritsFangs,backPanelImage:ax.SpiritbacksFangs,portraitImage:ax.PortraitsFangs,icon:nx.SpiritFangs,presenceImage:ax.PresenceFangs,primaryColor:hx.Red,secondaryColor:hx.Green,sound:dx.SpiritFangs,specialRulesAreas:[{x1:21,y1:918,x2:609,y2:1042}],growthAreas:[[{x1:632,y1:48,x2:791,y2:199},{x1:794,y1:48,x2:897,y2:199}],[{x1:945,y1:48,x2:1112,y2:199}],[{x1:1158,y1:48,x2:1266,y2:199},{x1:1269,y1:48,x2:1386,y2:199}],[{x1:1439,y1:48,x2:1567,y2:199}]],trackPoints:[{x:699,y:318},{x:819,y:318},{x:938,y:318},{x:1057,y:318},{x:1176,y:318},{x:1295,y:318},{x:1414,y:318},{x:696,y:492},{x:819,y:492},{x:938,y:492},{x:1057,y:492},{x:1176,y:492},{x:1295,y:492}],innates:[{power:Ui.RangingHunt,area:{x1:633,y1:602,x2:1108,y2:965},highlights:[[{x1:715,y1:756,x2:924,y2:782}],[{x1:791,y1:820,x2:962,y2:846}],[{x1:715,y1:886,x2:965,y2:912}]]},{power:Ui.FrenziedAssault,area:{x1:1111,y1:602,x2:1592,y2:965},highlights:[[{x1:1360,y1:758,x2:1557,y2:784},{x1:1360,y1:784,x2:1493,y2:810}],[{x1:1360,y1:848,x2:1569,y2:874}]]},{power:Ui.EncircleTheUnsuspectingPrey,aspect:{aspect:Qo.Encircle,index:0},area:{x1:18,y1:14,x2:590,y2:526},highlights:[[{x1:174,y1:142,x2:494,y2:177},{x1:174,y1:177,x2:494,y2:212},{x1:40,y1:212,x2:440,y2:247}],[{x1:172,y1:264,x2:486,y2:294},{x1:172,y1:294,x2:458,y2:334},{x1:172,y1:334,x2:300,y2:372}],[{x1:242,y1:392,x2:518,y2:427},{x1:242,y1:427,x2:482,y2:462}]]}]},xx={keywords:["finder"],frontPanelImage:ax.SpiritsFinder,backPanelImage:ax.SpiritbacksFinder,portraitImage:ax.PortraitsFinder,icon:nx.SpiritFinder,presenceImage:ax.PresenceFinder,primaryColor:hx.Purple,secondaryColor:hx.Blue,sound:dx.SpiritFinder,growthAreas:[[{x1:611,y1:54,x2:733,y2:195},{x1:736,y1:54,x2:837,y2:195},{x1:840,y1:54,x2:951,y2:195}],[{x1:973,y1:54,x2:1063,y2:195},{x1:1066,y1:54,x2:1160,y2:195}],[{x1:1182,y1:54,x2:1279,y2:195},{x1:1282,y1:54,x2:1378,y2:195}],[{x1:1398,y1:54,x2:1488,y2:195},{x1:1491,y1:54,x2:1585,y2:195}]],trackPoints:[{x:706,y:308},{x:836,y:308},{x:1064,y:308},{x:1292,y:308},{x:1520,y:308},{x:950,y:419},{x:1179,y:419},{x:1408,y:419},{x:704,y:525},{x:836,y:525},{x:1062,y:525},{x:1288,y:525},{x:1514,y:525}],innates:[{power:Ui.LayPathsTheyCannotHelpButWalk,area:{x1:631,y1:635,x2:1107,y2:974},highlights:[[{x1:798,y1:759,x2:1066,y2:785},{x1:798,y1:785,x2:1066,y2:811},{x1:649,y1:811,x2:1085,y2:837}],[{x1:801,y1:858,x2:1098,y2:884}],[{x1:867,y1:921,x2:1038,y2:947}]]},{power:Ui.CloseTheWays,area:{x1:1110,y1:635,x2:1592,y2:974},highlights:[[{x1:1285,y1:801,x2:1458,y2:827}],[{x1:1285,y1:861,x2:1458,y2:887}],[{x1:1285,y1:927,x2:1458,y2:953}]]}]},bx={keywords:["fractured","days"],frontPanelImage:ax.SpiritsFractured,backPanelImage:ax.SpiritbacksFractured,portraitImage:ax.PortraitsFractured,icon:nx.SpiritFractured,presenceImage:ax.PresenceFractured,primaryColor:hx.Yellow,secondaryColor:hx.Purple,sound:dx.SpiritFractured,growthAreas:[[{x1:649,y1:42,x2:749,y2:169},{x1:753,y1:42,x2:872,y2:169},{x1:875,y1:42,x2:984,y2:169}],[{x1:1019,y1:42,x2:1138,y2:169},{x1:1141,y1:42,x2:1255,y2:169},{x1:1258,y1:42,x2:1370,y2:169},{x1:1373,y1:42,x2:1567,y2:169}],[{x1:647,y1:178,x2:749,y2:301},{x1:752,y1:178,x2:882,y2:301},{x1:885,y1:178,x2:1055,y2:301},{x1:1058,y1:178,x2:1238,y2:301}]],trackPoints:[{x:708,y:407},{x:833,y:407},{x:956,y:407},{x:1079,y:407},{x:1202,y:407},{x:1325,y:407},{x:708,y:560},{x:833,y:560},{x:956,y:560},{x:1079,y:560},{x:1202,y:560},{x:1325,y:560}],innates:[{power:Ui.SlipTheFlowOfTime,area:{x1:633,y1:652,x2:1103,y2:1045},highlights:[[{x1:785,y1:832,x2:1101,y2:858},{x1:785,y1:858,x2:826,y2:884}],[{x1:782,y1:901,x2:1107,y2:927},{x1:782,y1:927,x2:1104,y2:953},{x1:646,y1:953,x2:1085,y2:979}],[{x1:788,y1:1e3,x2:1088,y2:1026},{x1:788,y1:1026,x2:933,y2:1052}]]},{power:Ui.VisionsOfAShiftingFuture,area:{x1:1106,y1:652,x2:1592,y2:1045},highlights:[[{x1:1323,y1:788,x2:1563,y2:814},{x1:1323,y1:814,x2:1582,y2:840},{x1:1114,y1:840,x2:1560,y2:866},{x1:1114,y1:866,x2:1550,y2:883},{x1:1114,y1:883,x2:1398,y2:909}],[{x1:1329,y1:933,x2:1541,y2:957},{x1:1329,y1:957,x2:1588,y2:982},{x1:1114,y1:982,x2:1569,y2:1003},{x1:1114,y1:1003,x2:1468,y2:1029}]]}]},Tx={keywords:["relentless","gaze","sun"],frontPanelImage:ax.SpiritsGaze,backPanelImage:ax.SpiritbacksGaze,portraitImage:ax.PortraitsGaze,icon:nx.SpiritGaze,presenceImage:ax.PresenceGaze,primaryColor:hx.Yellow,secondaryColor:hx.Orange,sound:dx.SpiritGaze,growthAreas:[[{x1:608,y1:71,x2:752,y2:232}],[{x1:783,y1:71,x2:921,y2:232},{x1:924,y1:71,x2:1091,y2:232}],[{x1:1119,y1:71,x2:1261,y2:232}],[{x1:1287,y1:71,x2:1440,y2:232},{x1:1443,y1:71,x2:1589,y2:232}]],trackPoints:[{x:701,y:347},{x:831,y:347},{x:958,y:347},{x:1085,y:347},{x:1212,y:347},{x:1339,y:347},{x:704,y:514},{x:831,y:514},{x:957,y:514},{x:1083,y:514},{x:1209,y:514},{x:1335,y:514},{x:1461,y:514}],innates:[{power:Ui.ScorchingConvergence,area:{x1:630,y1:622,x2:1110,y2:1050},highlights:[[{x1:717,y1:781,x2:1077,y2:807},{x1:717,y1:807,x2:1063,y2:833}],[{x1:783,y1:852,x2:1081,y2:878},{x1:783,y1:878,x2:1051,y2:904}],[{x1:853,y1:920,x2:1003,y2:946},{x1:853,y1:946,x2:1043,y2:972}],[{x1:853,y1:989,x2:1059,y2:1015},{x1:853,y1:1015,x2:1071,y2:1041}]]},{power:Ui.ConsiderAHarmoniousNature,area:{x1:1113,y1:622,x2:1592,y2:1050},highlights:[[{x1:1271,y1:765,x2:1547,y2:791},{x1:1271,y1:791,x2:1513,y2:817},{x1:1271,y1:817,x2:1427,y2:843}],[{x1:1271,y1:849,x2:1511,y2:875},{x1:1271,y1:875,x2:1367,y2:901}],[{x1:1271,y1:915,x2:1581,y2:941},{x1:1271,y1:941,x2:1433,y2:967}],[{x1:1333,y1:988,x2:1551,y2:1011},{x1:1333,y1:1011,x2:1487,y2:1034}]]}]},Ax={keywords:["green","spread","rampant"],frontPanelImage:ax.SpiritsGreen,backPanelImage:ax.SpiritbacksGreen,portraitImage:ax.PortraitsGreen,icon:nx.SpiritGreen,presenceImage:ax.PresenceGreen,primaryColor:hx.Green,secondaryColor:hx.Blue,sound:dx.SpiritGreen,growthAreas:[[{x1:655,y1:66,x2:820,y2:205}],[{x1:845,y1:66,x2:963,y2:205},{x1:966,y1:66,x2:1067,y2:205}],[{x1:1085,y1:66,x2:1215,y2:205},{x1:1218,y1:66,x2:1328,y2:205}],[{x1:1360,y1:66,x2:1461,y2:205},{x1:1464,y1:66,x2:1573,y2:205}]],trackPoints:[{x:715,y:324},{x:836,y:324},{x:954,y:324},{x:1072,y:324},{x:1190,y:324},{x:1308,y:324},{x:1426,y:324},{x:713,y:496},{x:836,y:496},{x:954,y:496},{x:1072,y:496},{x:1190,y:496},{x:1308,y:496}],innates:[{power:Ui.CreepersTearIntoMortar,area:{x1:635,y1:607,x2:1112,y2:939},highlights:[[{x1:788,y1:759,x2:1006,y2:785}],[{x1:791,y1:823,x2:958,y2:849}],[{x1:788,y1:889,x2:1015,y2:915}]]},{power:Ui.AllEnvelopingGreen,area:{x1:1115,y1:607,x2:1592,y2:939},highlights:[[{x1:1282,y1:756,x2:1376,y2:782}],[{x1:1282,y1:823,x2:1452,y2:849}],[{x1:1348,y1:889,x2:1525,y2:915}]]},{power:Ui.UnbelievableRegrowth,aspect:{aspect:Qo.Regrowth,index:0},area:{x1:30,y1:186,x2:570,y2:602},highlights:[[{x1:174,y1:320,x2:546,y2:350}],[{x1:174,y1:400,x2:288,y2:430}],[{x1:174,y1:470,x2:288,y2:500}],[{x1:174,y1:541,x2:508,y2:571}]]},{power:Ui.ImpenetrableTanglesOfGreenery,aspect:{aspect:Qo.Tangles,index:0},area:{x1:30,y1:192,x2:570,y2:602},highlights:[[{x1:182,y1:328,x2:304,y2:363}],[{x1:182,y1:396,x2:288,y2:431}],[{x1:182,y1:466,x2:408,y2:501}],[{x1:182,y1:542,x2:538,y2:577}]]}]},Ix={keywords:["hearth","vigil"],frontPanelImage:ax.SpiritsHearthVigil,backPanelImage:ax.SpiritbacksHearthVigil,portraitImage:ax.PortraitsHearthVigil,icon:nx.SpiritHearthVigil,presenceImage:ax.PresenceHearthVigil,primaryColor:hx.Purple,secondaryColor:hx.Red,sound:dx.SpiritHearthVigil,growthAreas:[[{x1:627,y1:54,x2:756,y2:194},{x1:759,y1:54,x2:914,y2:194}],[{x1:947,y1:54,x2:1081,y2:194},{x1:1084,y1:54,x2:1261,y2:194}],[{x1:1296,y1:54,x2:1446,y2:194},{x1:1449,y1:54,x2:1573,y2:194}]],trackPoints:[{x:682,y:380},{x:816,y:294},{x:940,y:294},{x:1066,y:294},{x:1195,y:294},{x:1323,y:294},{x:1452,y:294},{x:816,y:459},{x:940,y:459},{x:1066,y:459},{x:1195,y:459},{x:1323,y:459},{x:1452,y:459}],innates:[{power:Ui.WarnOfImpendingConflict,area:{x1:624,y1:561,x2:1125,y2:1055},highlights:[[{x1:779,y1:699,x2:1059,y2:725},{x1:779,y1:725,x2:1067,y2:751},{x1:647,y1:751,x2:1077,y2:777},{x1:647,y1:777,x2:703,y2:803}],[{x1:784,y1:803,x2:1053,y2:829},{x1:784,y1:828,x2:1073,y2:854},{x1:784,y1:856,x2:867,y2:882}],[{x1:784,y1:900,x2:1087,y2:926},{x1:784,y1:926,x2:1073,y2:952}],[{x1:784,y1:965,x2:1085,y2:991},{x1:784,y1:991,x2:1117,y2:1017},{x1:784,y1:1017,x2:865,y2:1043}]]},{power:Ui.KeepWatchForNewIncursions,area:{x1:1128,y1:561,x2:1592,y2:1055},highlights:[[{x1:1219,y1:713,x2:1581,y2:739}],[{x1:1353,y1:770,x2:1525,y2:795},{x1:1353,y1:795,x2:1555,y2:821},{x1:1147,y1:821,x2:1551,y2:847},{x1:1147,y1:847,x2:1585,y2:873}],[{x1:1369,y1:903,x2:1525,y2:929}]]}]},Px={keywords:["heat","sand"],frontPanelImage:ax.SpiritsHeat,backPanelImage:ax.SpiritbacksHeat,portraitImage:ax.PortraitsHeat,icon:nx.SpiritHeat,presenceImage:ax.PresenceHeat,primaryColor:hx.Red,secondaryColor:hx.Orange,sound:dx.SpiritHeat,growthAreas:[[{x1:652,y1:55,x2:774,y2:190},{x1:777,y1:55,x2:873,y2:190},{x1:875,y1:55,x2:979,y2:190}],[{x1:998,y1:34,x2:1119,y2:198},{x1:1122,y1:34,x2:1248,y2:198}],[{x1:1267,y1:55,x2:1364,y2:190},{x1:1367,y1:55,x2:1463,y2:190},{x1:1466,y1:55,x2:1565,y2:190}]],trackPoints:[{x:701,y:314},{x:830,y:314},{x:952,y:314},{x:1074,y:314},{x:1196,y:314},{x:1318,y:314},{x:1440,y:314},{x:707,y:472},{x:831,y:472},{x:953,y:472},{x:1075,y:472},{x:1197,y:472},{x:1319,y:472}],innates:[{power:Ui.ScorchWithWavesOfHeat,area:{x1:635,y1:578,x2:1592,y2:990},highlights:[[{x1:792,y1:725,x2:995,y2:751}],[{x1:792,y1:782,x2:905,y2:808}],[{x1:873,y1:843,x2:975,y2:869}],[{x1:873,y1:904,x2:1120,y2:930}]]}]},Sx={keywords:["keeper"],frontPanelImage:ax.SpiritsKeeper,backPanelImage:ax.SpiritbacksKeeper,portraitImage:ax.PortraitsKeeper,icon:nx.SpiritKeeper,presenceImage:ax.PresenceKeeper,primaryColor:hx.Green,secondaryColor:hx.Orange,sound:dx.SpiritKeeper,growthAreas:[[{x1:658,y1:51,x2:776,y2:201},{x1:779,y1:51,x2:896,y2:201}],[{x1:922,y1:51,x2:1030,y2:201}],[{x1:1051,y1:51,x2:1204,y2:201},{x1:1207,y1:51,x2:1304,y2:201}],[{x1:1324,y1:51,x2:1439,y2:201},{x1:1442,y1:51,x2:1595,y2:201}]],trackPoints:[{x:699,y:317},{x:818,y:317},{x:936,y:317},{x:1054,y:317},{x:1172,y:317},{x:1290,y:317},{x:1408,y:317},{x:1526,y:317},{x:696,y:489},{x:818,y:489},{x:937,y:489},{x:1056,y:489},{x:1175,y:489},{x:1294,y:489}],innates:[{power:Ui.PunishThoseWhoTrespass,area:{x1:626,y1:607,x2:1108,y2:1037},highlights:[[{x1:861,y1:753,x2:1098,y2:779}],[{x1:861,y1:835,x2:1e3,y2:861},{x1:861,y1:861,x2:958,y2:887}],[{x1:725,y1:917,x2:1047,y2:943},{x1:725,y1:943,x2:1060,y2:969},{x1:725,y1:969,x2:930,y2:995}]]},{power:Ui.SpreadingWilds,area:{x1:1111,y1:607,x2:1592,y2:1037},highlights:[[{x1:1220,y1:756,x2:1496,y2:782},{x1:1220,y1:782,x2:1313,y2:808}],[{x1:1222,y1:835,x2:1534,y2:861}],[{x1:1222,y1:917,x2:1427,y2:943}],[{x1:1222,y1:997,x2:1427,y2:1023}]]}]},Ex={keywords:["lightning","swift"],frontPanelImage:ax.SpiritsLightning,backPanelImage:ax.SpiritbacksLightning,portraitImage:ax.PortraitsLightning,icon:nx.SpiritLightning,presenceImage:ax.PresenceLightning,primaryColor:hx.Orange,secondaryColor:hx.Red,sound:dx.SpiritLightning,growthAreas:[[{x1:661,y1:52,x2:786,y2:193},{x1:789,y1:52,x2:905,y2:193},{x1:908,y1:52,x2:1024,y2:193}],[{x1:1052,y1:52,x2:1174,y2:193},{x1:1176,y1:52,x2:1298,y2:193}],[{x1:1327,y1:52,x2:1458,y2:193},{x1:1461,y1:52,x2:1572,y2:193}]],trackPoints:[{x:706,y:317},{x:826,y:317},{x:944,y:317},{x:1062,y:317},{x:1180,y:317},{x:1298,y:317},{x:1416,y:317},{x:1534,y:317},{x:708,y:489},{x:826,y:489},{x:944,y:489},{x:1062,y:489},{x:1180,y:489}],innates:[{power:Ui.ThunderingDestruction,area:{x1:638,y1:602,x2:1115,y2:1012},highlights:[[{x1:804,y1:756,x2:930,y2:782}],[{x1:801,y1:823,x2:1091,y2:849}],[{x1:867,y1:886,x2:1091,y2:912}],[{x1:867,y1:952,x2:1091,y2:978}]]},{power:Ui.LightningTornSkiesIncitePandemonium,aspect:{aspect:Qo.Pandemonium,index:0},area:{x1:21,y1:97,x2:528,y2:491},highlights:[[{x1:181,y1:250,x2:350,y2:285}],[{x1:181,y1:302,x2:348,y2:336}],[{x1:237,y1:364,x2:398,y2:399}],[{x1:237,y1:427,x2:398,y2:462}]]},{power:Ui.ExaltationOfTheStormWind,aspect:{aspect:Qo.Wind,index:0},area:{x1:24,y1:107,x2:811,y2:572},highlights:[[{x1:118,y1:230,x2:661,y2:265},{x1:118,y1:265,x2:419,y2:299}],[{x1:118,y1:315,x2:696,y2:350},{x1:118,y1:347,x2:301,y2:382}],[{x1:185,y1:399,x2:702,y2:434},{x1:185,y1:431,x2:446,y2:466}],[{x1:185,y1:485,x2:392,y2:520}]]},{power:Ui.GiftOfTheSparkingSky,aspect:{aspect:Qo.Sparking,index:0},area:{x1:13,y1:13,x2:587,y2:610},highlights:[[{x1:240,y1:164,x2:521,y2:194},{x1:240,y1:194,x2:565,y2:224},{x1:28,y1:224,x2:537,y2:254},{x1:28,y1:254,x2:539,y2:284},{x1:28,y1:284,x2:457,y2:314}],[{x1:176,y1:340,x2:521,y2:370}],[{x1:242,y1:390,x2:559,y2:420},{x1:242,y1:420,x2:553,y2:450},{x1:28,y1:450,x2:571,y2:480},{x1:28,y1:480,x2:349,y2:510}]]}]},Ox={keywords:["lure"],frontPanelImage:ax.SpiritsLure,backPanelImage:ax.SpiritbacksLure,portraitImage:ax.PortraitsLure,icon:nx.SpiritLure,presenceImage:ax.PresenceLure,primaryColor:hx.Green,secondaryColor:hx.Orange,sound:dx.SpiritLure,growthAreas:[[{x1:661,y1:59,x2:807,y2:195},{x1:810,y1:59,x2:940,y2:195}],[{x1:972,y1:59,x2:1127,y2:195}],[{x1:1163,y1:59,x2:1317,y2:195},{x1:1320,y1:59,x2:1444,y2:195}],[{x1:1475,y1:59,x2:1584,y2:195}]],trackPoints:[{x:706,y:308},{x:831,y:308},{x:955,y:308},{x:1079,y:308},{x:1203,y:308},{x:1327,y:308},{x:706,y:484},{x:831,y:484},{x:955,y:484},{x:1079,y:484},{x:1203,y:484},{x:1327,y:484}],innates:[{power:Ui.ForsakeSocietyToChaseAfterDreams,area:{x1:640,y1:598,x2:1124,y2:1042},highlights:[[{x1:728,y1:820,x2:924,y2:846}],[{x1:801,y1:867,x2:1091,y2:893}],[{x1:868,y1:914,x2:1120,y2:940},{x1:868,y1:940,x2:917,y2:966}],[{x1:728,y1:975,x2:898,y2:1001}]]},{power:Ui.NeverHeardFromAgain,area:{x1:1127,y1:598,x2:1592,y2:1042},highlights:[[{x1:1288,y1:801,x2:1398,y2:827}],[{x1:1222,y1:848,x2:1595,y2:874}],[{x1:1288,y1:902,x2:1395,y2:928}],[{x1:1222,y1:956,x2:1392,y2:982}]]},{power:Ui.SocietyDissolvesAtTheBeckoningHeart,aspect:{aspect:Qo.Lair,index:0},area:{x1:13,y1:13,x2:587,y2:584},highlights:[[{x1:102,y1:164,x2:540,y2:199},{x1:102,y1:199,x2:192,y2:234}],[{x1:164,y1:260,x2:433,y2:295}],[{x1:164,y1:326,x2:573,y2:356},{x1:164,y1:356,x2:561,y2:386},{x1:164,y1:386,x2:357,y2:421}]]}]},kx={keywords:["many-minds","mm","many","minds"],frontPanelImage:ax.SpiritsManyMinds,backPanelImage:ax.SpiritbacksManyMinds,portraitImage:ax.PortraitsManyMinds,icon:nx.SpiritManyMinds,presenceImage:ax.PresenceManyMinds,primaryColor:hx.Red,secondaryColor:hx.Purple,sound:dx.SpiritManyMinds,growthAreas:[[{x1:652,y1:41,x2:773,y2:190},{x1:776,y1:41,x2:891,y2:190}],[{x1:910,y1:41,x2:1045,y2:190},{x1:1048,y1:41,x2:1182,y2:190}],[{x1:1203,y1:41,x2:1332,y2:190},{x1:1335,y1:41,x2:1446,y2:190},{x1:1449,y1:41,x2:1595,y2:190}]],trackPoints:[{x:708,y:308},{x:833,y:308},{x:956,y:308},{x:1079,y:308},{x:1202,y:308},{x:1325,y:308},{x:1448,y:308},{x:706,y:484},{x:833,y:484},{x:956,y:484},{x:1079,y:484},{x:1202,y:484},{x:1325,y:484},{x:1448,y:484}],innates:[{power:Ui.TheTeemingHostArrives,area:{x1:645,y1:593,x2:1107,y2:1028},highlights:[[{x1:794,y1:740,x2:965,y2:766}],[{x1:861,y1:797,x2:1107,y2:823},{x1:861,y1:823,x2:895,y2:849},{x1:937,y1:823,x2:1031,y2:849}],[{x1:861,y1:877,x2:1012,y2:903}]]},{power:Ui.BesetAndConfoundTheInvaders,area:{x1:1110,y1:593,x2:1592,y2:1028},highlights:[[{x1:1345,y1:766,x2:1531,y2:792}],[{x1:1345,y1:821,x2:1512,y2:847},{x1:1345,y1:847,x2:1439,y2:873}],[{x1:1345,y1:886,x2:1512,y2:912},{x1:1345,y1:912,x2:1439,y2:938}],[{x1:1411,y1:949,x2:1582,y2:975},{x1:1411,y1:975,x2:1515,y2:1001}]]}]},Cx={keywords:["memory","shifting"],frontPanelImage:ax.SpiritsMemory,backPanelImage:ax.SpiritbacksMemory,portraitImage:ax.PortraitsMemory,icon:nx.SpiritMemory,presenceImage:ax.PresenceMemory,primaryColor:hx.Blue,secondaryColor:hx.Yellow,sound:dx.SpiritMemory,growthAreas:[[{x1:645,y1:46,x2:785,y2:190},{x1:788,y1:46,x2:911,y2:190}],[{x1:937,y1:46,x2:1049,y2:190},{x1:1052,y1:46,x2:1179,y2:190}],[{x1:1205,y1:46,x2:1333,y2:190},{x1:1336,y1:46,x2:1451,y2:190}],[{x1:1473,y1:46,x2:1580,y2:190}]],trackPoints:[{x:673,y:301},{x:800,y:301},{x:923,y:301},{x:1046,y:301},{x:1169,y:301},{x:1292,y:301},{x:1415,y:301},{x:1538,y:301},{x:678,y:478},{x:800,y:478},{x:923,y:478},{x:1046,y:478},{x:1169,y:478}],innates:[{power:Ui.LearnTheInvadersTactics,area:{x1:633,y1:595,x2:1124,y2:1042},highlights:[[{x1:718,y1:740,x2:816,y2:766}],[{x1:788,y1:804,x2:958,y2:830}],[{x1:867,y1:851,x2:1114,y2:877},{x1:867,y1:877,x2:1110,y2:903}]]},{power:Ui.ObserveTheEverChangingWorld,area:{x1:1127,y1:595,x2:1592,y2:1042},highlights:[[{x1:1209,y1:737,x2:1455,y2:763}],[{x1:1280,y1:788,x2:1560,y2:814},{x1:1280,y1:814,x2:1579,y2:840},{x1:1136,y1:840,x2:1531,y2:866},{x1:1136,y1:866,x2:1212,y2:892}]]},{power:Ui.ShareMentorshipAndExpertise,aspect:{aspect:Qo.Mentor,index:0},area:{x1:13,y1:13,x2:587,y2:610},highlights:[[{x1:96,y1:156,x2:544,y2:186},{x1:96,y1:186,x2:350,y2:216}],[{x1:164,y1:231,x2:564,y2:261},{x1:164,y1:261,x2:404,y2:291}],[{x1:224,y1:306,x2:536,y2:336},{x1:224,y1:336,x2:526,y2:366},{x1:224,y1:366,x2:394,y2:390}],[{x1:96,y1:409,x2:500,y2:439},{x1:96,y1:439,x2:480,y2:471},{x1:96,y1:471,x2:434,y2:497}]]}]},Dx={keywords:["mud","swamp"],frontPanelImage:ax.SpiritsMud,backPanelImage:ax.SpiritbacksMud,portraitImage:ax.PortraitsMud,icon:nx.SpiritMud,presenceImage:ax.PresenceMud,primaryColor:hx.Blue,secondaryColor:hx.Green,sound:dx.SpiritMud,growthAreas:[[{x1:649,y1:56,x2:784,y2:188},{x1:787,y1:56,x2:919,y2:188}],[{x1:949,y1:56,x2:1079,y2:188},{x1:1082,y1:56,x2:1213,y2:188}],[{x1:1244,y1:56,x2:1350,y2:188},{x1:1353,y1:56,x2:1459,y2:188},{x1:1462,y1:56,x2:1567,y2:188}]],trackPoints:[{x:704,y:312},{x:832,y:312},{x:954,y:312},{x:1076,y:312},{x:1198,y:312},{x:1320,y:312},{x:1442,y:312},{x:710,y:472},{x:831,y:472},{x:953,y:472},{x:1075,y:472},{x:1197,y:472},{x:1319,y:472}],innates:[{power:Ui.SpreadingAndDreadfulMire,area:{x1:638,y1:580,x2:1592,y2:996},highlights:[[{x1:720,y1:725,x2:1343,y2:751}],[{x1:858,y1:783,x2:1109,y2:809}],[{x1:872,y1:843,x2:1114,y2:869}],[{x1:940,y1:899,x2:1048,y2:925}]]}]},Bx={keywords:["ocean"],frontPanelImage:ax.SpiritsOcean,backPanelImage:ax.SpiritbacksOcean,portraitImage:ax.PortraitsOcean,icon:nx.SpiritOcean,presenceImage:ax.PresenceOcean,primaryColor:hx.Blue,secondaryColor:hx.Purple,sound:dx.SpiritOcean,growthAreas:[[{x1:661,y1:49,x2:781,y2:184},{x1:784,y1:49,x2:882,y2:184},{x1:885,y1:49,x2:1038,y2:184},{x1:1041,y1:49,x2:1152,y2:184}],[{x1:1200,y1:49,x2:1335,y2:184},{x1:1338,y1:49,x2:1471,y2:184},{x1:1474,y1:49,x2:1581,y2:184}],[{x1:667,y1:194,x2:770,y2:338},{x1:773,y1:194,x2:936,y2:338},{x1:938,y1:194,x2:1085,y2:338}]],trackPoints:[{x:708,y:455},{x:828,y:455},{x:946,y:455},{x:1064,y:455},{x:1182,y:455},{x:1300,y:455},{x:1418,y:455},{x:701,y:605},{x:828,y:605},{x:946,y:605},{x:1064,y:605},{x:1182,y:605},{x:1300,y:605}],innates:[{power:Ui.PoundShipsToSplinters,area:{x1:626,y1:700,x2:1089,y2:1040},highlights:[[{x1:864,y1:851,x2:927,y2:877}],[{x1:855,y1:921,x2:930,y2:947}],[{x1:858,y1:981,x2:930,y2:1007}]]},{power:Ui.OceanBreaksTheShore,area:{x1:1092,y1:700,x2:1592,y2:1040},highlights:[[{x1:1272,y1:855,x2:1389,y2:881}],[{x1:1269,y1:920,x2:1557,y2:946}],[{x1:1269,y1:985,x2:1493,y2:1011}]]},{power:Ui.WaterEatsAwayTheDeepRootsOfEarth,aspect:{aspect:Qo.Deeps,index:0},area:{x1:14,y1:14,x2:586,y2:525},highlights:[[{x1:108,y1:160,x2:240,y2:195}],[{x1:108,y1:214,x2:502,y2:249},{x1:108,y1:249,x2:360,y2:284}],[{x1:240,y1:300,x2:488,y2:335},{x1:240,y1:335,x2:498,y2:370},{x1:240,y1:370,x2:328,y2:405}]]},{power:Ui.ReclaimedByTheDeeps,aspect:{aspect:Qo.Deeps,index:1},area:{x1:14,y1:14,x2:586,y2:525},highlights:[[{x1:110,y1:148,x2:518,y2:183}],[{x1:184,y1:208,x2:538,y2:242},{x1:184,y1:242,x2:308,y2:276},{x1:52,y1:276,x2:450,y2:310},{x1:52,y1:310,x2:494,y2:344},{x1:52,y1:344,x2:556,y2:377},{x1:52,y1:377,x2:520,y2:397},{x1:52,y1:397,x2:120,y2:429}],[{x1:178,y1:436,x2:552,y2:466},{x1:178,y1:466,x2:424,y2:496}]]}]},Lx={keywords:["river"],frontPanelImage:ax.SpiritsRiver,backPanelImage:ax.SpiritbacksRiver,portraitImage:ax.PortraitsRiver,icon:nx.SpiritRiver,presenceImage:ax.PresenceRiver,primaryColor:hx.Blue,secondaryColor:hx.Purple,sound:dx.SpiritRiver,growthAreas:[[{x1:659,y1:52,x2:783,y2:197},{x1:786,y1:52,x2:899,y2:197},{x1:902,y1:52,x2:1016,y2:197}],[{x1:1048,y1:52,x2:1167,y2:197},{x1:1170,y1:52,x2:1292,y2:197}],[{x1:1323,y1:52,x2:1430,y2:197},{x1:1433,y1:52,x2:1563,y2:197}]],trackPoints:[{x:687,y:318},{x:809,y:318},{x:928,y:318},{x:1047,y:318},{x:1166,y:318},{x:1285,y:318},{x:1404,y:318},{x:687,y:489},{x:809,y:489},{x:928,y:489},{x:1047,y:489},{x:1166,y:489},{x:1285,y:489},{x:1404,y:489}],innates:[{power:Ui.MassiveFlooding,area:{x1:633,y1:607,x2:1224,y2:969},highlights:[[{x1:791,y1:769,x2:927,y2:795}],[{x1:794,y1:835,x2:1170,y2:861}],[{x1:864,y1:899,x2:1196,y2:925}]]},{power:Ui.BoonOfSunshinesPromise,aspect:{aspect:Qo.Sunshine,index:0},area:{x1:10,y1:70,x2:596,y2:358},highlights:[[{x1:89,y1:175,x2:559,y2:201},{x1:89,y1:198,x2:423,y2:224}],[{x1:139,y1:238,x2:407,y2:264}],[{x1:139,y1:277,x2:570,y2:303},{x1:139,y1:302,x2:205,y2:328}]]},{power:Ui.CallToASunlitHaven,aspect:{aspect:Qo.Haven,index:0},area:{x1:13,y1:13,x2:587,y2:610},highlights:[[{x1:170,y1:232,x2:286,y2:267}],[{x1:238,y1:282,x2:528,y2:317},{x1:238,y1:317,x2:462,y2:352}],[{x1:170,y1:364,x2:514,y2:399},{x1:170,y1:399,x2:514,y2:434},{x1:170,y1:434,x2:264,y2:469}],[{x1:238,y1:484,x2:518,y2:519},{x1:238,y1:519,x2:448,y2:554}]]}]},Fx={keywords:["roots","towering","tree"],frontPanelImage:ax.SpiritsRoots,backPanelImage:ax.SpiritbacksRoots,portraitImage:ax.PortraitsRoots,icon:nx.SpiritRoots,presenceImage:ax.PresenceRoots,primaryColor:hx.Green,secondaryColor:hx.Orange,sound:dx.SpiritRoots,incarnaImages:[{point:{x:400,y:520},appImage:ax.TokensIncarnaRoots},{point:{x:520,y:520},appImage:ax.TokensIncarnaRootsEmpowered}],growthAreas:[[{x1:622,y1:57,x2:791,y2:186},{x1:794,y1:57,x2:979,y2:186}],[{x1:1039,y1:57,x2:1196,y2:186},{x1:1199,y1:57,x2:1355,y2:186},{x1:1358,y1:57,x2:1538,y2:186}],[{x1:635,y1:201,x2:753,y2:328},{x1:756,y1:201,x2:885,y2:328},{x1:888,y1:201,x2:1028,y2:328},{x1:1031,y1:201,x2:1166,y2:328}]],trackPoints:[{x:699,y:439},{x:826,y:439},{x:956,y:439},{x:1078,y:439},{x:1210,y:439},{x:1338,y:439},{x:704,y:606},{x:826,y:606},{x:956,y:606},{x:1078,y:606},{x:1210,y:606},{x:1338,y:606}],innates:[{power:Ui.ShelterUnderToweringBranches,area:{x1:617,y1:708,x2:1097,y2:1054},highlights:[[{x1:767,y1:854,x2:938,y2:880}],[{x1:839,y1:908,x2:1004,y2:934}],[{x1:839,y1:963,x2:1007,y2:989}],[{x1:839,y1:1015,x2:1015,y2:1041}]]},{power:Ui.RevokeSanctuaryAndCastOut,area:{x1:1100,y1:708,x2:1592,y2:1054},highlights:[[{x1:1325,y1:857,x2:1543,y2:883}],[{x1:1328,y1:909,x2:1541,y2:935}],[{x1:1325,y1:961,x2:1552,y2:987}]]}]},Rx={keywords:["serpent"],frontPanelImage:ax.SpiritsSerpent,backPanelImage:ax.SpiritbacksSerpent,portraitImage:ax.PortraitsSerpent,icon:nx.SpiritSerpent,presenceImage:ax.PresenceSerpent,primaryColor:hx.Purple,secondaryColor:hx.Green,sound:dx.SpiritSerpent,growthAreas:[[{x1:653,y1:60,x2:773,y2:197},{x1:776,y1:60,x2:917,y2:197}],[{x1:946,y1:60,x2:1054,y2:197},{x1:1057,y1:60,x2:1172,y2:197}],[{x1:1212,y1:60,x2:1340,y2:197}],[{x1:1369,y1:60,x2:1569,y2:197}]],trackPoints:[{x:704,y:322},{x:820,y:322},{x:939,y:322},{x:1058,y:322},{x:701,y:492},{x:821,y:492},{x:940,y:492},{x:1059,y:492},{x:1178,y:402},{x:1288,y:322},{x:1405,y:322},{x:1522,y:322},{x:1301,y:492},{x:1418,y:492}],innates:[{power:Ui.SerpentWakesInPower,area:{x1:633,y1:605,x2:1092,y2:1043},highlights:[[{x1:848,y1:759,x2:1060,y2:790},{x1:643,y1:790,x2:1060,y2:816},{x1:643,y1:816,x2:734,y2:842}],[{x1:848,y1:860,x2:1038,y2:889},{x1:643,y1:889,x2:1088,y2:915},{x1:643,y1:915,x2:797,y2:941}],[{x1:918,y1:956,x2:1047,y2:990},{x1:643,y1:990,x2:1072,y2:1016},{x1:646,y1:1016,x2:1060,y2:1042}]]},{power:Ui.SerpentRousesInAnger,area:{x1:1095,y1:605,x2:1592,y2:1043},highlights:[[{x1:1250,y1:755,x2:1335,y2:788},{x1:1418,y1:755,x2:1509,y2:788},{x1:1111,y1:788,x2:1341,y2:816}],[{x1:1250,y1:848,x2:1338,y2:884},{x1:1443,y1:848,x2:1534,y2:884},{x1:1117,y1:884,x2:1544,y2:918}],[{x1:1374,y1:961,x2:1557,y2:992},{x1:1117,y1:992,x2:1566,y2:1020},{x1:1114,y1:1020,x2:1474,y2:1046}]]},{power:Ui.StrengthOfTheWakingIsland,aspect:{aspect:Qo.Locus,index:1},area:{x1:30,y1:132,x2:570,y2:628},highlights:[[{x1:184,y1:264,x2:550,y2:294},{x1:184,y1:294,x2:550,y2:324},{x1:38,y1:324,x2:534,y2:354},{x1:38,y1:354,x2:524,y2:384},{x1:38,y1:384,x2:556,y2:414},{x1:38,y1:414,x2:468,y2:450}],[{x1:242,y1:470,x2:522,y2:505},{x1:242,y1:505,x2:542,y2:540},{x1:38,y1:540,x2:542,y2:575},{x1:38,y1:575,x2:168,y2:610}]]}]},Mx={keywords:["shadows"],frontPanelImage:ax.SpiritsShadows,backPanelImage:ax.SpiritbacksShadows,portraitImage:ax.PortraitsShadows,icon:nx.SpiritShadows,presenceImage:ax.PresenceShadows,primaryColor:hx.Orange,secondaryColor:hx.Blue,sound:dx.SpiritShadows,growthAreas:[[{x1:659,y1:50,x2:794,y2:190},{x1:797,y1:50,x2:908,y2:190}],[{x1:970,y1:50,x2:1092,y2:190},{x1:1094,y1:50,x2:1254,y2:190}],[{x1:1301,y1:50,x2:1436,y2:190},{x1:1439,y1:50,x2:1547,y2:190}]],trackPoints:[{x:704,y:318},{x:824,y:318},{x:946,y:318},{x:1064,y:318},{x:1182,y:318},{x:1300,y:318},{x:708,y:488},{x:828,y:488},{x:946,y:488},{x:1064,y:488},{x:1182,y:488},{x:1300,y:488}],innates:[{power:Ui.DarknessSwallowsTheUnwary,area:{x1:628,y1:602,x2:1592,y2:951},highlights:[[{x1:798,y1:763,x2:905,y2:788}],[{x1:798,y1:826,x2:1177,y2:852}],[{x1:867,y1:893,x2:1379,y2:919}]]},{power:Ui.StretchOutCoilsOfForebodingDread,aspect:{aspect:Qo.Foreboding,index:0},area:{x1:14,y1:98,x2:834,y2:585},highlights:[[{x1:112,y1:244,x2:771.4,y2:280},{x1:112,y1:281,x2:260.4,y2:315}],[{x1:112,y1:312,x2:755,y2:340},{x1:112,y1:341,x2:726,y2:376},{x1:112,y1:377,x2:415,y2:408}],[{x1:112,y1:430,x2:182,y2:466}],[{x1:195,y1:501,x2:272,y2:38}]]}]},Nx={keywords:["shroud","mist"],frontPanelImage:ax.SpiritsShroud,backPanelImage:ax.SpiritbacksShroud,portraitImage:ax.PortraitsShroud,icon:nx.SpiritShroud,presenceImage:ax.PresenceShroud,primaryColor:hx.Blue,secondaryColor:hx.Green,sound:dx.SpiritShroud,specialRulesAreas:[{x1:24,y1:689,x2:607,y2:781}],growthAreas:[[{x1:653,y1:44,x2:797,y2:190},{x1:800,y1:44,x2:921,y2:190}],[{x1:957,y1:44,x2:1112,y2:190},{x1:1115,y1:44,x2:1275,y2:190}],[{x1:1307,y1:44,x2:1423,y2:190},{x1:1426,y1:44,x2:1584,y2:190}]],trackPoints:[{x:673,y:308},{x:801,y:308},{x:923,y:308},{x:1045,y:308},{x:1167,y:308},{x:673,y:482},{x:801,y:482},{x:924,y:482},{x:1047,y:482},{x:1170,y:482},{x:1293,y:482},{x:1416,y:482},{x:1539,y:482}],innates:[{power:Ui.SuffocatingShroud,area:{x1:633,y1:595,x2:1127,y2:1e3},highlights:[[{x1:864,y1:740,x2:971,y2:766}],[{x1:867,y1:790,x2:1126,y2:816},{x1:867,y1:816,x2:1091,y2:842},{x1:867,y1:842,x2:1031,y2:868}],[{x1:864,y1:896,x2:971,y2:922}],[{x1:864,y1:956,x2:1114,y2:982}]]},{power:Ui.LostInTheSwirlingHaze,area:{x1:1130,y1:595,x2:1592,y2:1e3},highlights:[[{x1:1285,y1:740,x2:1427,y2:766}],[{x1:1288,y1:801,x2:1462,y2:827}],[{x1:1288,y1:870,x2:1462,y2:896}]]}]},Wx={keywords:["starlight"],frontPanelImage:ax.SpiritsStarlight,backPanelImage:ax.SpiritbacksStarlight,portraitImage:ax.PortraitsStarlight,icon:nx.SpiritStarlight,presenceImage:ax.PresenceStarlight,presenceLeftPosition:300,primaryColor:hx.Purple,secondaryColor:hx.Blue,sound:dx.SpiritStarlight,growthAreas:[[{x1:511,y1:50,x2:635,y2:170}],[{x1:652,y1:50,x2:803,y2:170}],[{x1:819,y1:50,x2:939,y2:170}],[{x1:955,y1:50,x2:1107,y2:170}],[{x1:673,y1:181,x2:791,y2:311}],[{x1:833,y1:181,x2:955,y2:311},{x1:958,y1:181,x2:1107,y2:311}],[{x1:673,y1:320,x2:791,y2:446}],[{x1:833,y1:320,x2:955,y2:446},{x1:958,y1:320,x2:1107,y2:446}],[{x1:761,y1:453,x2:872,y2:579}],[{x1:904,y1:453,x2:999,y2:579},{x1:1002,y1:453,x2:1107,y2:579}],[{x1:761,y1:589,x2:872,y2:716}],[{x1:904,y1:589,x2:999,y2:716},{x1:1002,y1:589,x2:1107,y2:716}],[{x1:673,y1:181,x2:791,y2:311},{x1:833,y1:181,x2:1107,y2:311},{x1:673,y1:320,x2:791,y2:446},{x1:833,y1:320,x2:1107,y2:446},{x1:761,y1:453,x2:872,y2:579},{x1:904,y1:453,x2:1107,y2:579},{x1:761,y1:589,x2:872,y2:716},{x1:904,y1:589,x2:1107,y2:716}]],trackPoints:[{x:595,y:245},{x:595,y:381},{x:570,y:508},{x:692,y:508},{x:570,y:659},{x:692,y:659},{x:685,y:826},{x:810,y:826},{x:933,y:826},{x:1056,y:826},{x:680,y:973},{x:810,y:973},{x:933,y:973},{x:1056,y:973}],innates:[{power:Ui.AirMovesEarthEndures,area:{x1:1141,y1:42,x2:1592,y2:233},highlights:[[{x1:1225,y1:152,x2:1433,y2:178}],[{x1:1225,y1:206,x2:1319,y2:232}]]},{power:Ui.FireBurnsWaterSoothes,area:{x1:1141,y1:245,x2:1592,y2:445},highlights:[[{x1:1222,y1:358,x2:1386,y2:384}],[{x1:1222,y1:408,x2:1360,y2:434}]]},{power:Ui.WoodSeeksGrowthHumansSeekFreedom,area:{x1:1141,y1:452,x2:1592,y2:642},highlights:[[{x1:1225,y1:538,x2:1572,y2:564},{x1:1225,y1:564,x2:1452,y2:590}],[{x1:1225,y1:608,x2:1576,y2:634}]]},{power:Ui.SiderealGuidance,area:{x1:1141,y1:649,x2:1592,y2:848},highlights:[[{x1:1222,y1:753,x2:1417,y2:779}],[{x1:1222,y1:807,x2:1468,y2:833}]]},{power:Ui.StarsBlazeInTheDaytimeSky,area:{x1:1141,y1:854,x2:1592,y2:1033},highlights:[[{x1:1225,y1:956,x2:1544,y2:982},{x1:1225,y1:982,x2:1582,y2:1008},{x1:1225,y1:1008,x2:1265,y2:1034}]]}]},$x={keywords:["stone"],frontPanelImage:ax.SpiritsStone,backPanelImage:ax.SpiritbacksStone,portraitImage:ax.PortraitsStone,icon:nx.SpiritStone,presenceImage:ax.PresenceStone,primaryColor:hx.Yellow,secondaryColor:hx.Blue,sound:dx.SpiritStone,specialRulesAreas:[{x1:21,y1:941,x2:626,y2:1035}],growthAreas:[[{x1:650,y1:42,x2:770,y2:193},{x1:773,y1:42,x2:884,y2:193},{x1:887,y1:42,x2:1040,y2:193}],[{x1:1066,y1:42,x2:1198,y2:193},{x1:1201,y1:42,x2:1310,y2:193}],[{x1:1333,y1:42,x2:1436,y2:193},{x1:1439,y1:42,x2:1581,y2:193}]],trackPoints:[{x:708,y:308},{x:835,y:308},{x:958,y:308},{x:1081,y:308},{x:1204,y:308},{x:1327,y:308},{x:1450,y:308},{x:711,y:484},{x:835,y:484},{x:959,y:484},{x:1083,y:484},{x:1207,y:484},{x:1331,y:484}],innates:[{power:Ui.HoldTheIslandFastWithABulwarkOfWill,area:{x1:633,y1:593,x2:1109,y2:1031},highlights:[[{x1:720,y1:725,x2:1091,y2:830}],[{x1:720,y1:842,x2:1019,y2:868}],[{x1:788,y1:886,x2:1063,y2:912},{x1:788,y1:912,x2:1053,y2:938},{x1:640,y1:938,x2:1047,y2:964},{x1:640,y1:964,x2:1072,y2:990},{x1:640,y1:990,x2:990,y2:1016}]]},{power:Ui.LetThemBreakThemselvesAgainstTheStone,area:{x1:1112,y1:593,x2:1592,y2:1031},highlights:[[{x1:1212,y1:778,x2:1588,y2:804},{x1:1212,y1:804,x2:1433,y2:830}],[{x1:1212,y1:848,x2:1569,y2:874},{x1:1212,y1:874,x2:1506,y2:900}],[{x1:1282,y1:929,x2:1449,y2:955}]]}]},Gx={keywords:["teeth","devouring","chomp"],frontPanelImage:ax.SpiritsTeeth,backPanelImage:ax.SpiritbacksTeeth,portraitImage:ax.PortraitsTeeth,icon:nx.SpiritTeeth,presenceImage:ax.PresenceTeeth,primaryColor:hx.Orange,secondaryColor:hx.Yellow,sound:dx.SpiritTeeth,growthAreas:[[{x1:644,y1:55,x2:787,y2:191},{x1:790,y1:55,x2:934,y2:191}],[{x1:978,y1:55,x2:1111,y2:191},{x1:1114,y1:55,x2:1255,y2:191}],[{x1:1300,y1:55,x2:1448,y2:191},{x1:1451,y1:55,x2:1582,y2:191}]],trackPoints:[{x:704,y:315},{x:830,y:315},{x:953,y:315},{x:1076,y:315},{x:1199,y:315},{x:1322,y:315},{x:1445,y:315},{x:707,y:478},{x:830,y:478},{x:953,y:478},{x:1076,y:478},{x:1199,y:478},{x:1322,y:478},{x:1445,y:478}],innates:[{power:Ui.DeathApproachesFromBeneathTheSurface,area:{x1:635,y1:580,x2:1592,y2:1018},highlights:[[{x1:784,y1:731,x2:1464,y2:757}],[{x1:858,y1:788,x2:1398,y2:814}],[{x1:866,y1:846,x2:971,y2:872}],[{x1:872,y1:905,x2:1035,y2:931}]]}]},Ux={keywords:["thunderspeaker","thunder"],frontPanelImage:ax.SpiritsThunderspeaker,backPanelImage:ax.SpiritbacksThunderspeaker,portraitImage:ax.PortraitsThunderspeaker,icon:nx.SpiritThunderspeaker,presenceImage:ax.PresenceThunderspeaker,primaryColor:hx.Orange,secondaryColor:hx.Green,sound:dx.SpiritThunderspeaker,growthAreas:[[{x1:662,y1:49,x2:782,y2:199},{x1:785,y1:49,x2:889,y2:199},{x1:892,y1:49,x2:1001,y2:199}],[{x1:1022,y1:49,x2:1159,y2:199},{x1:1162,y1:49,x2:1301,y2:199}],[{x1:1329,y1:49,x2:1458,y2:199},{x1:1461,y1:49,x2:1569,y2:199}]],trackPoints:[{x:708,y:318},{x:829,y:318},{x:948,y:318},{x:1067,y:318},{x:1186,y:318},{x:1305,y:318},{x:708,y:475},{x:826,y:475},{x:945,y:475},{x:1064,y:475},{x:1183,y:475},{x:1302,y:475},{x:1421,y:475}],innates:[{power:Ui.GatherTheWarriors,area:{x1:633,y1:574,x2:1094,y2:889},highlights:[[{x1:731,y1:734,x2:949,y2:760}],[{x1:728,y1:800,x2:1066,y2:826},{x1:728,y1:826,x2:1041,y2:852}]]},{power:Ui.LeadTheFuriousAssault,area:{x1:1097,y1:574,x2:1592,y2:953},highlights:[[{x1:1193,y1:734,x2:1420,y2:760}],[{x1:1266,y1:800,x2:1534,y2:826},{x1:1263,y1:826,x2:1376,y2:852}],[{x1:1263,y1:888,x2:1547,y2:914},{x1:1266,y1:914,x2:1376,y2:940}]]},{power:Ui.LeadTheWarriorsToBattle,aspect:{aspect:Qo.Warrior,index:0},area:{x1:30,y1:370,x2:570,y2:644},highlights:[[{x1:180,y1:496,x2:518,y2:537},{x1:180,y1:537,x2:312,y2:569}],[{x1:180,y1:589,x2:402,y2:624}]]}]},Hx={keywords:["trickster","grinning"],frontPanelImage:ax.SpiritsTrickster,backPanelImage:ax.SpiritbacksTrickster,portraitImage:ax.PortraitsTrickster,icon:nx.SpiritTrickster,presenceImage:ax.PresenceTrickster,primaryColor:hx.Green,secondaryColor:hx.Yellow,sound:dx.SpiritTrickster,growthAreas:[[{x1:624,y1:47,x2:795,y2:186},{x1:798,y1:47,x2:949,y2:186}],[{x1:979,y1:47,x2:1159,y2:186}],[{x1:1190,y1:47,x2:1368,y2:186}],[{x1:1405,y1:47,x2:1581,y2:186}]],trackPoints:[{x:706,y:299},{x:831,y:299},{x:953,y:299},{x:1075,y:299},{x:1197,y:299},{x:1319,y:299},{x:708,y:450},{x:831,y:450},{x:954,y:450},{x:1077,y:450},{x:1200,y:450},{x:1323,y:450},{x:1446,y:450}],innates:[{power:Ui.LetsSeeWhatHappens,area:{x1:633,y1:558,x2:1120,y2:1045},highlights:[[{x1:864,y1:689,x2:1114,y2:715},{x1:864,y1:715,x2:1101,y2:741},{x1:643,y1:741,x2:1082,y2:767},{x1:646,y1:767,x2:1069,y2:793},{x1:643,y1:793,x2:1114,y2:826},{x1:643,y1:826,x2:1063,y2:852},{x1:643,y1:858,x2:1060,y2:884},{x1:643,y1:884,x2:1072,y2:910},{x1:643,y1:910,x2:977,y2:936}],[{x1:864,y1:952,x2:1091,y2:978},{x1:861,y1:978,x2:1101,y2:1004},{x1:646,y1:1004,x2:971,y2:1030}]]},{power:Ui.WhyDontYouAndThemFight,area:{x1:1123,y1:558,x2:1592,y2:1045},highlights:[[{x1:1210,y1:703,x2:1439,y2:728}],[{x1:1210,y1:769,x2:1307,y2:795}],[{x1:1320,y1:820,x2:1538,y2:846},{x1:1320,y1:846,x2:1534,y2:872}],[{x1:1215,y1:898,x2:1522,y2:924},{x1:1215,y1:924,x2:1519,y2:950}]]}]},qx={keywords:["vengeance","plague"],frontPanelImage:ax.SpiritsVengeance,backPanelImage:ax.SpiritbacksVengeance,portraitImage:ax.PortraitsVengeance,icon:nx.SpiritVengeance,presenceImage:ax.PresenceVengeance,primaryColor:hx.Orange,secondaryColor:hx.Red,sound:dx.SpiritVengeance,growthAreas:[[{x1:609,y1:40,x2:727,y2:195},{x1:730,y1:40,x2:831,y2:195},{x1:834,y1:40,x2:929,y2:195}],[{x1:950,y1:40,x2:1094,y2:195},{x1:1097,y1:40,x2:1243,y2:195}],[{x1:1266,y1:40,x2:1360,y2:195},{x1:1363,y1:40,x2:1486,y2:195},{x1:1489,y1:40,x2:1596,y2:195}]],trackPoints:[{x:706,y:311},{x:830,y:311},{x:953,y:311},{x:1076,y:311},{x:1199,y:311},{x:704,y:485},{x:830,y:485},{x:953,y:485},{x:1076,y:485},{x:1199,y:485},{x:1322,y:485},{x:1445,y:485}],innates:[{power:Ui.EpidemicsRunRampant,area:{x1:633,y1:584,x2:1108,y2:998},highlights:[[{x1:794,y1:782,x2:965,y2:808}],[{x1:864,y1:842,x2:1044,y2:868}],[{x1:866,y1:901,x2:1047,y2:927},{x1:866,y1:927,x2:1066,y2:953},{x1:866,y1:953,x2:996,y2:979}]]},{power:Ui.SavageRevenge,area:{x1:1111,y1:584,x2:1592,y2:998},highlights:[[{x1:1218,y1:728,x2:1420,y2:754}],[{x1:1285,y1:791,x2:1389,y2:817}],[{x1:1285,y1:858,x2:1401,y2:884}],[{x1:1358,y1:921,x2:1474,y2:947}]]}]},jx={keywords:["wandering","voice","keens","delirium"],frontPanelImage:ax.SpiritsVoice,backPanelImage:ax.SpiritbacksVoice,portraitImage:ax.PortraitsVoice,icon:nx.SpiritVoice,presenceImage:ax.PresenceVoice,primaryColor:hx.Purple,secondaryColor:hx.Yellow,sound:dx.SpiritVoice,incarnaImages:[{point:{x:400,y:450},appImage:ax.TokensIncarnaVoice},{point:{x:520,y:450},appImage:ax.TokensIncarnaVoiceEmpowered}],growthAreas:[[{x1:602,y1:58,x2:725,y2:198},{x1:728,y1:58,x2:876,y2:198},{x1:879,y1:58,x2:979,y2:198}],[{x1:1e3,y1:58,x2:1099,y2:198},{x1:1102,y1:58,x2:1201,y2:198}],[{x1:1220,y1:58,x2:1317,y2:198},{x1:1320,y1:58,x2:1417,y2:198},{x1:1420,y1:58,x2:1511,y2:198},{x1:1514,y1:58,x2:1594,y2:198}]],trackPoints:[{x:704,y:313},{x:830,y:313},{x:959,y:313},{x:1087,y:313},{x:1216,y:313},{x:1344,y:313},{x:1470,y:313},{x:699,y:481},{x:827,y:481},{x:956,y:481},{x:1084,y:481},{x:1213,y:481},{x:1341,y:481}],innates:[{power:Ui.InscrutableJourneying,area:{x1:633,y1:590,x2:1114,y2:1031},highlights:[[{x1:713,y1:799,x2:887,y2:825}],[{x1:713,y1:854,x2:887,y2:880}],[{x1:713,y1:911,x2:887,y2:937}],[{x1:909,y1:973,x2:1037,y2:999}]]},{power:Ui.MindShatteringSong,area:{x1:1117,y1:590,x2:1592,y2:1031},highlights:[[{x1:1273,y1:760,x2:1488,y2:786}],[{x1:1273,y1:811,x2:1532,y2:837},{x1:1273,y1:837,x2:1494,y2:863}],[{x1:1335,y1:879,x2:1578,y2:905},{x1:1335,y1:905,x2:1548,y2:931},{x1:1335,y1:931,x2:1408,y2:957}]]}]},_x={keywords:["volcano"],frontPanelImage:ax.SpiritsVolcano,backPanelImage:ax.SpiritbacksVolcano,portraitImage:ax.PortraitsVolcano,icon:nx.SpiritVolcano,presenceImage:ax.PresenceVolcano,primaryColor:hx.Red,secondaryColor:hx.Yellow,sound:dx.SpiritVolcano,growthAreas:[[{x1:613,y1:47,x2:732,y2:185},{x1:735,y1:47,x2:832,y2:185},{x1:835,y1:47,x2:936,y2:185}],[{x1:963,y1:47,x2:1061,y2:185},{x1:1064,y1:47,x2:1163,y2:185}],[{x1:1187,y1:47,x2:1289,y2:185},{x1:1292,y1:47,x2:1384,y2:185},{x1:1387,y1:47,x2:1490,y2:185},{x1:1493,y1:47,x2:1590,y2:185}]],trackPoints:[{x:671,y:297},{x:798,y:297},{x:921,y:297},{x:1044,y:297},{x:1167,y:297},{x:1290,y:297},{x:673,y:447},{x:798,y:447},{x:921,y:447},{x:1044,y:447},{x:1167,y:447},{x:1290,y:447},{x:1413,y:447},{x:1536,y:447}],innates:[{power:Ui.ExplosiveEruption,area:{x1:638,y1:546,x2:1130,y2:1045},highlights:[[],[{x1:864,y1:759,x2:1085,y2:785},{x1:864,y1:785,x2:965,y2:811}],[{x1:864,y1:839,x2:924,y2:865}],[{x1:943,y1:885,x2:1110,y2:911},{x1:943,y1:911,x2:1110,y2:937},{x1:646,y1:937,x2:1136,y2:963}],[{x1:953,y1:971,x2:1281,y2:997},{x1:953,y1:997,x2:1493,y2:1023}]]},{power:Ui.PoweredByTheFurnaceOfTheEarth,area:{x1:1133,y1:546,x2:1592,y2:955},highlights:[[{x1:1212,y1:690,x2:1449,y2:716}],[{x1:1260,y1:747,x2:1424,y2:773}],[{x1:1285,y1:813,x2:1534,y2:839},{x1:1285,y1:839,x2:1496,y2:865}],[{x1:1212,y1:882,x2:1541,y2:908},{x1:1212,y1:908,x2:1345,y2:934}]]}]},Vx={keywords:["whirlwind","suncat"],frontPanelImage:ax.SpiritsWhirlwind,backPanelImage:ax.SpiritbacksWhirlwind,portraitImage:ax.PortraitsWhirlwind,icon:nx.SpiritWhirlwind,presenceImage:ax.PresenceWhirlwind,primaryColor:hx.Yellow,secondaryColor:hx.Blue,sound:dx.SpiritWhirlwind,growthAreas:[[{x1:654,y1:56,x2:774,y2:185},{x1:777,y1:56,x2:891,y2:185},{x1:894,y1:56,x2:1013,y2:185}],[{x1:1041,y1:56,x2:1169,y2:185},{x1:1172,y1:56,x2:1294,y2:185}],[{x1:1322,y1:56,x2:1444,y2:185},{x1:1447,y1:56,x2:1570,y2:185}]],trackPoints:[{x:704,y:315},{x:830,y:315},{x:952,y:315},{x:1074,y:315},{x:1196,y:315},{x:1318,y:315},{x:707,y:472},{x:830,y:472},{x:952,y:472},{x:1074,y:472},{x:1196,y:472},{x:1318,y:472}],innates:[{power:Ui.ViolentWindstorms,area:{x1:635,y1:578,x2:1592,y2:990},highlights:[[{x1:792,y1:725,x2:930,y2:751}],[{x1:803,y1:786,x2:1029,y2:812}],[{x1:803,y1:843,x2:1505,y2:869}],[{x1:803,y1:904,x2:1046,y2:930}]]}]},Jx={keywords:["wildfire","heart"],frontPanelImage:ax.SpiritsWildfire,backPanelImage:ax.SpiritbacksWildfire,portraitImage:ax.PortraitsWildfire,icon:nx.SpiritWildfire,presenceImage:ax.PresenceWildfire,primaryColor:hx.Red,secondaryColor:hx.Orange,sound:dx.SpiritWildfire,growthAreas:[[{x1:659,y1:54,x2:779,y2:211},{x1:781,y1:54,x2:880,y2:211},{x1:883,y1:54,x2:991,y2:211}],[{x1:1014,y1:54,x2:1113,y2:211},{x1:1115,y1:54,x2:1243,y2:211}],[{x1:1274,y1:54,x2:1402,y2:211},{x1:1405,y1:54,x2:1595,y2:211}]],trackPoints:[{x:708,y:327},{x:828,y:327},{x:946,y:327},{x:1064,y:327},{x:1182,y:327},{x:1300,y:327},{x:708,y:501},{x:828,y:501},{x:946,y:501},{x:1064,y:501},{x:1182,y:501},{x:1300,y:501}],innates:[{power:Ui.Firestorm,area:{x1:640,y1:607,x2:1155,y2:1045},highlights:[[{x1:728,y1:753,x2:1015,y2:779}],[{x1:728,y1:810,x2:1072,y2:836}],[{x1:801,y1:862,x2:1117,y2:888},{x1:801,y1:888,x2:1139,y2:914},{x1:801,y1:914,x2:1082,y2:940}],[{x1:728,y1:971,x2:1129,y2:997},{x1:728,y1:997,x2:1155,y2:1023}]]},{power:Ui.TheBurnedLandRegrows,area:{x1:1129,y1:607,x2:1592,y2:946},highlights:[[{x1:1300,y1:763,x2:1588,y2:789},{x1:1300,y1:789,x2:1424,y2:815}],[{x1:1300,y1:839,x2:1503,y2:865}],[{x1:1374,y1:892,x2:1566,y2:918}]]},{power:Ui.ExaltationOfTheTransformingFlame,aspect:{aspect:Qo.Transforming,index:0},area:{x1:13,y1:13,x2:587,y2:610},highlights:[[{x1:167,y1:162,x2:566,y2:192},{x1:167,y1:192,x2:542,y2:218},{x1:167,y1:218,x2:332,y2:254}],[{x1:236,y1:262,x2:582,y2:292},{x1:236,y1:292,x2:576,y2:322},{x1:236,y1:322,x2:568,y2:350}],[{x1:236,y1:360,x2:548,y2:392},{x1:236,y1:392,x2:548,y2:422},{x1:236,y1:422,x2:460,y2:452}]]}]},zx={keywords:["wounded","water","bleeding"],frontPanelImage:ax.SpiritsWounded,backPanelImage:ax.SpiritbacksWounded,portraitImage:ax.PortraitsWounded,icon:nx.SpiritWounded,presenceImage:ax.PresenceWounded,primaryColor:hx.Red,secondaryColor:hx.Blue,sound:dx.SpiritWounded,growthAreas:[[{x1:616,y1:58,x2:747,y2:192},{x1:750,y1:58,x2:853,y2:192},{x1:856,y1:58,x2:959,y2:192}],[{x1:979,y1:58,x2:1078,y2:192},{x1:1081,y1:58,x2:1212,y2:192}],[{x1:822,y1:207,x2:959,y2:336},{x1:962,y1:207,x2:1070,y2:336},{x1:1073,y1:207,x2:1212,y2:336}]],trackPoints:[{x:701,y:500},{x:831,y:500},{x:957,y:500},{x:1081,y:500},{x:1210,y:421},{x:1337,y:421},{x:1465,y:421},{x:1210,y:580},{x:1337,y:580},{x:1465,y:580}],innates:[{power:Ui.SwirlAndSpill,area:{x1:623,y1:675,x2:1100,y2:1040},highlights:[[{x1:721,y1:832,x2:951,y2:858}],[{x1:781,y1:897,x2:1072,y2:923}],[{x1:847,y1:948,x2:1069,y2:974},{x1:847,y1:974,x2:1057,y2:1003},{x1:847,y1:1003,x2:921,y2:1029}]]},{power:Ui.SanguinaryTaint,area:{x1:1104,y1:675,x2:1592,y2:1040},highlights:[[{x1:1209,y1:826,x2:1466,y2:852}],[{x1:1269,y1:894,x2:1466,y2:920}],[{x1:1337,y1:959,x2:1499,y2:985},{x1:1337,y1:985,x2:1431,y2:1011}]]},{power:Ui.AfflictWithBloodthirst,healingCard:Kw.WatersTasteOfRuin,area:{x1:26,y1:156,x2:572,y2:606},highlights:[[{x1:112,y1:286,x2:260,y2:321}],[{x1:172,y1:354,x2:488,y2:389}],[{x1:250,y1:398,x2:486,y2:433},{x1:250,y1:433,x2:546,y2:468},{x1:250,y1:468,x2:306,y2:503}],[{x1:172,y1:512,x2:322,y2:547},{x1:172,y1:547,x2:426,y2:592}]]},{power:Ui.CallToAFastnessOfRenewal,healingCard:Kw.WatersRenew,area:{x1:26,y1:156,x2:574,y2:568},highlights:[[{x1:114,y1:292,x2:328,y2:327}],[{x1:176,y1:362,x2:544,y2:392}],[{x1:176,y1:424,x2:288,y2:454}],[{x1:245,y1:478,x2:548,y2:508},{x1:245,y1:508,x2:548,y2:538}]]}]},Yx={[fn.Lightning]:Ex,[fn.River]:Lx,[fn.Earth]:px,[fn.Shadows]:Mx,[fn.Thunderspeaker]:Ux,[fn.Green]:Ax,[fn.Ocean]:Bx,[fn.Bringer]:gx,[fn.Fangs]:vx,[fn.Keeper]:Sx,[fn.Wildfire]:Jx,[fn.Serpent]:Rx,[fn.Stone]:$x,[fn.Memory]:Cx,[fn.Trickster]:Hx,[fn.Lure]:Ox,[fn.ManyMinds]:kx,[fn.Volcano]:_x,[fn.Shroud]:Nx,[fn.Vengeance]:qx,[fn.Starlight]:Wx,[fn.Fractured]:bx,[fn.Downpour]:yx,[fn.Finder]:xx,[fn.Teeth]:Gx,[fn.Eyes]:mx,[fn.Mud]:Dx,[fn.Heat]:Px,[fn.Whirlwind]:Vx,[fn.HearthVigil]:Ix,[fn.Behemoth]:ux,[fn.Darkness]:fx,[fn.Gaze]:Tx,[fn.Roots]:Fx,[fn.Earthquakes]:wx,[fn.Voice]:jx,[fn.Wounded]:zx},Kx=(e,a)=>{let t=0,n=0;for(;t<e.length&&n<a.length;)if(e[t]<a[n])t+=1;else{if(!(e[t]>a[n]))return!1;n+=1}return!0};class Qx extends kv{app;exampleUsage;exampleExplanation;cardType;searchedKeywords=[];constructor(e,a,t,n){super(),this.app=e,this.exampleUsage=a,this.exampleExplanation=t,this.cardType=n}get description(){return void 0===this.cardType?"List all Power, Fear, Event and Blight Cards. Supply arguments to filter on content.":`List ${this.cardType} cards. Supply arguments to filter on content.`}handle(e){this.searchedKeywords=e.map((e=>e.toLowerCase())).sort();const a=this.filteredCards;if(a.length>0){if(1===a.length)return this.readHandler.handle(a);this.app.subHeader(`${a.length} cards found:`);for(const e of a)this.app.link(e,`read ${e}`)}else this.app.subHeader("No cards found.");return Promise.resolve()}help(){this.app.subHeader("Example Usage: "),this.app.addOutput(`${$v(this.exampleUsage)}: ${this.exampleExplanation}`)}get filteredCards(){const e=[];return this.cardType!==hn.Blight&&void 0!==this.cardType||Object.keys(rr).forEach((a=>{const t=[...tx[a].keywords],{set:n,banned:r,blightPerPlayer:i}=rr[a];t.push(...cx[n].keywords),r&&t.push("banned"),this.state.blightDeckIncludesCard(a)?t.push("deck"):this.state.blightCardsDiscarded.includes(a)&&t.push("discard"),t.push(`${i}`);for(let e=1;e<=4;e+=1){for(let a=e+1;a<=5;a+=1)i>=e&&i<=a&&t.push(`${e}-${a}`);i>=e&&t.push(`${e}+`),i<=e&&t.push(`${e}-`)}this.filterKeywords(t)&&e.push(rr[a].name)})),this.cardType!==hn.Event&&void 0!==this.cardType||Object.keys(uy).forEach((a=>{const t=[...sx[a].keywords],{set:n,banned:r}=uy[a];t.push(...cx[n].keywords),r&&t.push("banned"),this.state.eventDeckIncludesCard(a)?t.push("deck"):this.state.eventDiscardIncludesCard(a)&&t.push("discard"),this.filterKeywords(t)&&e.push(uy[a].name)})),this.cardType!==hn.Fear&&void 0!==this.cardType||Object.keys(Ip).forEach((a=>{const t=[...ox[a].keywords],{set:n,banned:r}=Ip[a];t.push(...cx[n].keywords),r&&t.push("banned"),this.state.fearDeckIncludesCard(a)?t.push("deck"):this.state.fearCardsDiscarded.includes(a)&&t.push("discard"),this.filterKeywords(t)&&e.push(Ip[a].name)})),this.cardType!==hn.Power&&void 0!==this.cardType||Object.keys(dg).filter((e=>dg[e].type!==kn.Innate)).forEach((a=>{const t=[...lx[a].keywords],{set:n,banned:r,speed:i,type:s,energy:o,elements:d}=dg[a];if(t.push(...cx[n].keywords),r&&t.push("banned"),t.push(i===sr.Slow?"slow":"fast"),s===kn.Unique){t.push("unique");const e=Object.keys(nm).find((e=>nm[e].uniquePowers.includes(a)));void 0!==e&&t.push(...Yx[e].keywords)}else s===kn.Minor?t.push("minor"):s===kn.Major&&t.push("major");if((this.state.minorDiscardIncludesPower(a)||this.state.majorDiscardIncludesPower(a))&&t.push("discard"),this.app.currentSpirit.rememberedUniques.includes(a)&&t.push("forgotten"),(this.state.minorDeckIncludesPower(a)||this.state.majorDeckIncludesPower(a))&&t.push("deck"),void 0!==o){for(let e=0;e<=8;e+=1){for(let a=e+1;a<=9;a+=1)o>=e&&o<=a&&t.push(`${e}-${a}`);o>=e&&t.push(`${e}+`),o<=e&&t.push(`${e}-`)}t.push(`${o}`)}void 0!==d&&d.forEach((e=>{t.push(rx[e].name.toLowerCase())})),this.filterKeywords(t)&&e.push(dg[a].name)})),e}get readHandler(){return this.app.commandHandlers.read}get searchedExcludeKeywords(){return this.searchedKeywords.filter((e=>e.startsWith("-")||e.startsWith("!"))).map((e=>e.slice(1)))}get searchedIncludeKeywords(){return this.searchedKeywords.filter((e=>!e.startsWith("-")&&!e.startsWith("!")))}get state(){return this.app.state}filterKeywords(e){return e.sort(),((e,a)=>{let t=0,n=0;for(;t<e.length&&n<a.length;)if(e[t]<a[n])t+=1;else{if(e[t]>a[n]&&(!e[t].startsWith(a[n])||!Number.isNaN(Number.parseInt(a[n][0],10))))return!1;n+=1}return n===a.length})(e.map((e=>Number.isNaN(Number.parseInt(e[0],10))?`${e}s`:e)).sort(),this.searchedIncludeKeywords)&&Kx(e,this.searchedExcludeKeywords)&&Kx(e.map((e=>`${e}s`)),this.searchedExcludeKeywords)}}class Xx extends qv{constructor(e){super(e)}get command(){return"aspects"}get description(){return"List all Aspects. Supply argument to filter by Spirit."}get infoType(){return"the Aspects"}static outputSpiritInfo(e,a){if(0===a.aspects.length)e.addOutput("None.");else for(const t of a.aspects)e.link(vv[t].name,`read ${vv[t].name}`)}outputSpiritInfo(e){return Xx.outputSpiritInfo(this.app,e)}outputWithoutArgument(){for(const e of Object.keys(vv)){const a=vv[e];this.app.link(a.name,`read ${a.name}`)}}}class Zx extends kv{app;description="Lists available Spirits.";constructor(e){super(),this.app=e}handle(){for(const e of Object.keys(nm)){const a=nm[e];this.app.link(a.name,`read ${a.name}`)}return Promise.resolve()}help(){this.app.subHeader("Usage: "),this.app.addOutput(`${$v("spirit")}: Lists available Spirits.`)}}function eb(e){return JSON.parse(JSON.stringify(e))}class ab extends kv{app;config=bn;constructor(e){super(),this.app=e}get dataStore(){return{config:this.config}}set dataStore(e){this.config=e.config}get difficulty(){return pm.difficulty(this.config)}get gameConfig(){return this.app.gameConfig}get sets(){return this.config.sets}setRandomSeed(){this.config.seed=Math.floor(9999999*Math.random())}setSetupConfig(e){this.config=e}async setupGame(){this.sortBoards();const e=eb(this.config);await this.app.setupGame(e)}sortBoards(){this.config.boards.sort(((e,a)=>e.boardId.localeCompare(a.boardId)))}}const tb=class extends kv{commandAlias={};commandHandlers={};MAX_HISTORY_LENGTH=10;MAX_OUTPUT_ROWS=10;caret=":&nbsp;";game;moreCaret="MORE...&nbsp;";output=document.createElement("div");setup;terminal=document.createElement("div");version="0.1.4 (2024-03-19)";commandCursor=0;commandHistory=[];inputString="";links=[];outputRows=0;resetLinks=!0;savedOutput=[];constructor(){super(),this.game=Wv.create(),this.setup=ab.create(this)}get currentSpirit(){return this.game.currentSpirit}get dataStore(){return{commandHistory:this.commandHistory,commandCursor:this.commandCursor,links:this.links}}set dataStore(e){this.commandHistory=e.commandHistory||[],this.commandCursor=e.commandCursor||0,this.links=e.links||[]}get gameConfig(){return this.game.config}get gameData(){return this.game.gameData}get hasMoreOutput(){return this.savedOutput.length>0}get isWritingInput(){return this.inputString.length>0}get setupConfig(){return this.setup.config}get state(){return this.game.state}addIndented(e){this.addOutput(`&nbsp;&nbsp;${e}`)}addOutput(e){if(this.outputRows>this.MAX_OUTPUT_ROWS)this.savedOutput.push(e);else{const a=document.createElement("div");a.innerHTML=e,this.output.appendChild(a),this.terminal.scrollTop=this.terminal.scrollHeight,this.outputRows+=1}}alterHistory(e){return this.game.alterHistory(e)}clear(){this.output.innerHTML="",this.terminal.scrollTop=this.terminal.scrollHeight,this.outputRows=0,this.savedOutput.length=0}continueGame(){return this.game.continueGame()}exportGame(){return this.game.exportGame()}header(e){this.addOutput(`<h1>${e}</h1>`)}async importGame(e,a={}){const{start:t=!0}=a,n=await this.game.importGame(e,t);this.setup.config=n}async init(){this.setupHtml(),this.addHandler(["aspects"],Xx.create(this)),this.addHandler(["blight","b"],Qx.create(this,"blight 1-2 -still","List all blight cards with 1-2 blights per player that is not still healthy cards.",hn.Blight)),this.addHandler(["clear","cls","c"],Gv.create(this)),this.addHandler(["event","e"],Qx.create(this,"event strife city","List all event cards that mentions strife and city.",hn.Event)),this.addHandler(["fear","f"],Qx.create(this,"fear badlands","List all fear cards that mentions badlands.",hn.Fear)),this.addHandler(["growth"],Vv.create(this)),this.addHandler(["help","h"],Hv.create(this)),this.addHandler(["innates"],Jv.create(this)),this.addHandler(["lore"],zv.create(this)),this.addHandler(["playstyle"],Yv.create(this)),this.addHandler(["power","p"],Qx.create(this,"power fast major fire 2-4","Show all fast major powers with fire elements that cost 2-4 energy.",hn.Power)),this.addHandler(["read","r"],ex.create(this)),this.addHandler(["setup"],Kv.create(this)),this.addHandler(["search","s"],Qx.create(this,"search wilds","Show all cards that mentions wilds.")),this.addHandler(["spirits"],Zx.create(this)),this.addHandler(["tracks"],Qv.create(this)),this.addHandler(["uniques"],Xv.create(this)),await this.game.start()}jumpToEnd(){return this.game.jumpToEnd()}jumpToStart(){return this.game.jumpToStart()}jumpToTurn(e){return this.game.jumpToTurn(e)}link(e,a){this.resetLinks&&(this.resetLinks=!1,this.links.length=0),this.addOutput(`<span class="link">[${this.links.length+1}]</span> ${e}`),this.links.push(a)}next(){return this.game.next()}previous(){return this.game.previous()}async processInput(e){if(((e,a,t)=>{const n=parseFloat(e);return!Number.isNaN(n)&&n>=a&&n<=t})(e,1,this.links.length))return void await this.processInput(this.links[parseInt(e,10)-1]);0!==this.commandHistory.length&&this.commandHistory[this.commandHistory.length-1]===e||this.commandHistory.push(e),this.commandCursor=0,this.commandHistory.length>this.MAX_HISTORY_LENGTH&&this.commandHistory.splice(0,this.commandHistory.length-this.MAX_HISTORY_LENGTH),this.resetLinks=!0;const[a,...t]=e.split(" "),n=a.toLowerCase(),r=this.commandHandlers[n]||this.commandAlias[n]&&this.commandHandlers[this.commandAlias[n]];r?await r.handle(t):this.addOutput(`Unknown command "<code>${a}</code>".`)}setSetupConfig(e){this.setup.setSetupConfig(e)}setupGame(e){return this.game.setupGame(e)}setupGameRequested(){return this.setup.setupGame()}setupNewGame(){this.setup.config=eb(this.setup.config),this.setup.setRandomSeed()}subHeader(e){this.addOutput(`<h2>${e}</h2>`)}addHandler(e,a){const[t,...n]=e;this.commandHandlers[t]=a;for(const e of n)this.commandAlias[e]=t}printSavedOutput(){this.outputRows=0;for(let e=0;e<this.MAX_OUTPUT_ROWS&&0!==this.savedOutput.length;e+=1){const e=this.savedOutput.shift();this.addOutput(e)}}setupHtml(){const e=document.getElementById("root");this.terminal.id="terminal",this.output.id="output",this.output.ariaLive="polite";const a=document.createElement("div");a.id="inputRow";const t=document.createElement("div");t.id="caret",t.innerHTML=this.caret;const n=document.createElement("input");n.type="text",n.id="input",n.autofocus=!0,n.autocomplete="off",n.autocapitalize="off",n.spellcheck=!1,window.addEventListener("keydown",(e=>{["Meta","Shift","Alt","Control"].includes(e.key)||e.metaKey||e.altKey||e.ctrlKey||n.focus(),e.metaKey&&"k"===e.key&&this.clear()})),n.addEventListener("keydown",Ma((e=>{const t=e.key.toUpperCase();if("ENTER"!==t||e.repeat)"ARROWUP"===t?(this.commandCursor<this.commandHistory.length&&(this.commandCursor+=1,n.value=this.commandHistory[this.commandHistory.length-this.commandCursor],this.inputString=n.value),e.preventDefault()):"ARROWDOWN"===t&&(this.commandCursor>0&&(this.commandCursor-=1,this.commandCursor>0?n.value=this.commandHistory[this.commandHistory.length-this.commandCursor]:n.value="",this.inputString=n.value),e.preventDefault());else{const e=n.value.trim();""!==e?(this.outputRows=0,this.savedOutput=[],this.addOutput(`<p class="input-row">${this.caret}<span class="input">${e}</span></p>`),n.value="",this.inputString="",n.disabled=!0,a.style.display="none",(async()=>{await this.processInput(e),n.disabled=!1,a.style.display="flex",n.focus()})()):this.hasMoreOutput&&this.printSavedOutput()}}))),n.addEventListener("input",Ma((e=>{const a=e.target.value;this.inputString=a}))),this.terminal.appendChild(this.output),a.appendChild(t),a.appendChild(n),this.terminal.appendChild(a),e.appendChild(this.terminal),this.header(`Spirit Island Terminal Edition v${this.version}.`),this.addOutput('For a list of commands type "<code>help</code>".'),function(e,a,t){var n,r,i,s;void 0===t&&(t=l);var o,d,c,h,u=null!=(n=t.name)?n:"Reaction",g=Ma(u,t.onError?(o=t.onError,d=a,function(){try{return d.apply(this,arguments)}catch(e){o.call(this,e)}}):a),f=!t.scheduler&&!t.delay,y=Ha(t),p=!0,w=!1,m=t.compareStructural?V.structural:t.equals||V.default,v=new Ta(u,(function(){p||f?x():w||(w=!0,y(x))}),t.onError,t.requiresObservable);function x(){if(w=!1,!v.isDisposed_){var a=!1;v.track((function(){var t=qe(!1,(function(){return e(v)}));a=p||!m(c,t),h=c,c=t})),(p&&t.fireImmediately||!p&&a)&&g(c,h,v),p=!1}}null!=(r=t)&&null!=(i=r.signal)&&i.aborted||v.schedule_(),v.getDisposer_(null==(s=t)?void 0:s.signal)}((()=>[this.savedOutput.length,this.isWritingInput]),(()=>{this.updateCaret()}),{fireImmediately:!0})}updateCaret(){document.getElementById("caret").innerHTML=this.hasMoreOutput&&!this.isWritingInput?this.moreCaret:this.caret}}.create();Object.assign(window,{get R(){return tb}})})()})();